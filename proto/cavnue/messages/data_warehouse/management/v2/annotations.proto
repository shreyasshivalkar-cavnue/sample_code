syntax = "proto3";

package cavnue.messages.data_warehouse.management.v2;

import "cavnue/third_party/bq/v1/bq_field.proto";
import "cavnue/third_party/bq/v1/bq_table.proto";

import "cavnue/messages/common/v1/common.proto";
import "cavnue/messages/geometry/v1/bounding_box.proto";
import "cavnue/messages/common/v1/field_options.proto";
import "google/protobuf/timestamp.proto";

// All frame-based 2D Bounding Box annotations
message FrameAnnotationBox2 {
  option (gen_bq_schema.bigquery_opts).table_name = "FrameAnnotationsBox2";

  optional int64 data_id = 1 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.primary_key) = true
  ];
  // The batch that the annotation belongs to
  optional int64 batch_id = 2
      [(gen_bq_schema.bigquery) = { require: true cluster: true }];
  // Hashed task id
  optional int64 task_id = 3 [(gen_bq_schema.bigquery) = { require: true }];
  // The timestamp of the entry
  optional google.protobuf.Timestamp ts = 4 [(gen_bq_schema.bigquery) = {
    require: true
    type_override: "TIMESTAMP"
    partition: true
  }];
  // The flattened matrix of bounding box annotations
  repeated geometry.v1.BoundingBox2f annotations = 5
      [(common.v1.units) = UNITS_PIXELS];
  // The array of bounding box label_ids
  repeated int64 labels = 6;
  // The array of actor ids if applicable
  repeated int64 actors = 7;
}

// All frame-based 3D Cuboid annotations
message FrameAnnotationBox3 {
  option (gen_bq_schema.bigquery_opts).table_name = "FrameAnnotationsBox3";

  optional int64 data_id = 1 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.primary_key) = true
  ];
  // The batch that the annotation belongs to
  optional int64 batch_id = 2
      [(gen_bq_schema.bigquery) = { require: true cluster: true }];
  // Hashed task id
  optional int64 task_id = 3 [(gen_bq_schema.bigquery) = { require: true }];
  // The timestamp of the entry
  optional google.protobuf.Timestamp ts = 4 [(gen_bq_schema.bigquery) = {
    require: true
    type_override: "TIMESTAMP"
    partition: true
  }];
  // The flattened matrix of bounding box annotations
  repeated geometry.v1.RotatedBoundingBox3d annotations = 5
      [(common.v1.units) = UNITS_METERS, (common.v1.crs) = CRS_UTM];
  // The array of bounding box label_ids
  repeated int64 labels = 6;
  // The array of actor ids if applicable
  repeated int64 actors = 7;
}

// All frame-based Segmentation annotations
message FrameAnnotationSegmentation {
  option (gen_bq_schema.bigquery_opts).table_name =
      "FrameAnnotationsSegmentation";

  message MaskMap {
    // The uri for the binary mask
    optional string uri = 1 [(gen_bq_schema.bigquery) = { require: true }];
    // The label_id specified in the binary mask
    optional int64 label_id = 2 [(gen_bq_schema.bigquery) = { require: true }];
  }

  optional int64 data_id = 1 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.primary_key) = true
  ];
  // The batch that the annotation belongs to
  optional int64 batch_id = 2
      [(gen_bq_schema.bigquery) = { require: true cluster: true }];
  // Hashed task id
  optional int64 task_id = 3 [(gen_bq_schema.bigquery) = { require: true }];
  // The timestamp of the entry
  optional google.protobuf.Timestamp ts = 4 [(gen_bq_schema.bigquery) = {
    require: true
    type_override: "TIMESTAMP"
    partition: true
  }];
  // The map for binary mask uri to label id
  repeated MaskMap mask_map = 5;
}

// All Attribute annotations. This includes annotations such as wrong-way
// driving, speeding, etc. that we can mark as attributes for a specific actor
message FrameAnnotationAttributes {
  option (gen_bq_schema.bigquery_opts).table_name =
      "FrameAnnotationsAttributes";

  optional int64 data_id = 1 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.primary_key) = true
  ];
  // The batch that the annotation belongs to
  optional int64 batch_id = 2
      [(gen_bq_schema.bigquery) = { require: true cluster: true }];
  optional int64 actor_id = 3 [(gen_bq_schema.bigquery) = { require: true }];
  optional bool wrong_way_driving = 4
      [(gen_bq_schema.bigquery) = { require: true }];
  optional bool impeding = 5 [(gen_bq_schema.bigquery) = { require: true }];
  optional bool collision = 6 [(gen_bq_schema.bigquery) = { require: true }];
  optional bool speeding = 7 [(gen_bq_schema.bigquery) = { require: true }];
  optional bool siren = 8 [(gen_bq_schema.bigquery) = { require: true }];
}

// A store of all labels and their parent hierarchies
message Label {
  option (gen_bq_schema.bigquery_opts).table_name = "Labels";

  // Autogenerated. A hash of the label identifier and annotation_type
  optional int64 label_id = 1 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.autogenerated) = true,
    (common.v1.derivation) = "label",
    (common.v1.derivation) = "annotation_type",
    (common.v1.primary_key) = true
  ];
  // The annotation type parent (e.g. Detection, Segmentation, etc.)
  optional string annotation_type = 2
      [(gen_bq_schema.bigquery) = { require: true }];
  // The label enum name and value combination
  optional common.v1.Classification label = 3
      [(gen_bq_schema.bigquery) = { require: true }];
  // The array of the parent hierarchy for the label (e.g. [road user, vehicle]
  // for car)
  repeated string hierarchy = 4;
}
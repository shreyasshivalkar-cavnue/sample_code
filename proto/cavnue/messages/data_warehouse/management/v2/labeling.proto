syntax = "proto3";

package cavnue.messages.data_warehouse.management.v2;

import "cavnue/third_party/bq/v1/bq_field.proto";
import "cavnue/third_party/bq/v1/bq_table.proto";

import "cavnue/messages/common/v1/field_options.proto";
import "google/protobuf/timestamp.proto";

// A table to store Scale batch information and allow us to track batches as
// they goes through an annotation cycle
message Scale {
  option (gen_bq_schema.bigquery_opts).table_name = "Scale";

  // Autogenerated. A unique ID representing the batch of annotations
  optional int64 batch_id = 1 [
    (gen_bq_schema.bigquery) = { require: true cluster: true },
    (common.v1.autogenerated) = true,
    (common.v1.derivation) = "identifier",
    (common.v1.primary_key) = true
  ];
  optional int64 data_id = 2 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.primary_key) = true
  ];
  // Hashed task id
  optional int64 task_id = 3 [(gen_bq_schema.bigquery) = { require: true }];
  // The Scale batch identifier
  optional string identifier = 4 [(gen_bq_schema.bigquery) = { require: true }];
  // The scale project name
  optional string project = 5 [(gen_bq_schema.bigquery) = { require: true }];
}

// The detailed log of an annotation cycle for a Scale batch
message ScaleLog {
  option (gen_bq_schema.bigquery_opts).table_name = "ScaleLog";

  optional int64 batch_id = 1 [
    (gen_bq_schema.bigquery) = { require: true cluster: true },
    (common.v1.primary_key) = true
  ];
  optional int64 data_id = 2 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.primary_key) = true
  ];
  // Hashed task id
  optional int64 task_id = 3 [(gen_bq_schema.bigquery) = { require: true }];
  // The timestamp of the audit entry
  optional google.protobuf.Timestamp audit_ts = 4 [(gen_bq_schema.bigquery) = {
    require: true
    type_override: "TIMESTAMP"
    partition: true
  }];
  // The status of the scale annotation for the audit entry
  optional string status = 5 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.primary_key) = true
  ];
}

// A mapping system to allow us to group simulation runs into discrete batches
// based on defined attributes
message SimulationRun {
  option (gen_bq_schema.bigquery_opts).table_name = "SimulationRuns";

  // A unique ID representing the batch of annotations
  optional int64 batch_id = 1 [
    (gen_bq_schema.bigquery) = { require: true cluster: true },
    (common.v1.primary_key) = true
  ];
  optional string simulation_id = 2 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.primary_key) = true
  ];
  // The description of the batch
  optional string identifier = 3 [(gen_bq_schema.bigquery) = { require: true }];
  // Any extra batch metadata we may want to store
  string metadata = 4 [(gen_bq_schema.bigquery) = { type_override: "JSON" }];
}
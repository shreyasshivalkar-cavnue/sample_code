syntax = "proto3";

package cavnue.messages.data_warehouse.management.v2;

import "cavnue/third_party/bq/v1/bq_field.proto";
import "cavnue/third_party/bq/v1/bq_table.proto";

import "cavnue/messages/common/v1/common.proto";
import "cavnue/messages/geometry/v1/matrix.proto";
import "cavnue/messages/geometry/v1/vector.proto";

import "cavnue/messages/common/v1/field_options.proto";
import "google/protobuf/timestamp.proto";

// The base table for any location that we deploy our devices at
message Location {
  option (gen_bq_schema.bigquery_opts).table_name = "Locations";

  // Autogenerated. A hash of the location identifier and deployment timestamp
  optional int64 location_id = 1 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.autogenerated) = true,
    (common.v1.derivation) = "identifier",
    (common.v1.derivation) = "deploy_ts",
    (common.v1.derivation) = "deployment_id",
    (common.v1.primary_key) = true
  ];
  optional int64 deployment_id = 2
      [(gen_bq_schema.bigquery) = { require: true }];
  optional int64 cohort_id = 3 [(gen_bq_schema.bigquery) = { require: true }];
  // The (lat, lon) coordinate of the location
  optional string coordinate = 4 [
    (gen_bq_schema.bigquery) = { require: true type_override: "GEOGRAPHY" },
    (common.v1.crs) = CRS_WGS84
  ];
  // The resolution 15 H3 cell of the location
  optional int64 h3 = 5 [(gen_bq_schema.bigquery) = { require: true }];
  // The date that the location was deployed
  optional google.protobuf.Timestamp deploy_ts = 6 [(gen_bq_schema.bigquery) = {
    require: true
    type_override: "TIMESTAMP"
    partition: true
  }];
  optional string identifier = 7 [(gen_bq_schema.bigquery) = { require: true }];
}

// Any deployed sensor (e.g. cameras, radars, etc.)
message Sensor {
  option (gen_bq_schema.bigquery_opts).table_name = "Sensors";

  // Autogenerated. A hash of the location_id, sensor identifier, and deployment
  // timestamp
  optional int64 sensor_id = 1 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.autogenerated) = true,
    (common.v1.derivation) = "location_id",
    (common.v1.derivation) = "identifier",
    (common.v1.derivation) = "deploy_ts",
    (common.v1.primary_key) = true
  ];
  optional int64 location_id = 2 [(gen_bq_schema.bigquery) = { require: true }];
  // The sensor identifier
  optional string identifier = 3 [(gen_bq_schema.bigquery) = { require: true }];
  // The sensor type (e.g. camera, radar, etc.)
  optional common.v1.Sensor.Type type = 4
      [(gen_bq_schema.bigquery) = { require: true }];
  // The date that the sensor was deployed
  optional google.protobuf.Timestamp deploy_ts = 5 [(gen_bq_schema.bigquery) = {
    require: true
    type_override: "TIMESTAMP"
    partition: true
  }];
  optional bool active = 6 [(gen_bq_schema.bigquery) = { require: true }];
  // Sensor serial number
  string serial_number = 7;
  // The make of the sensor (e.g. IMX477)
  string make = 8;
}

// Metadata for a deployed sensor. This table includes all camera parameters
// such intrinsics, projection matrix, etc. that are unique to a deployed sensor
message CameraMetadata {
  option (gen_bq_schema.bigquery_opts).table_name = "CameraMetadata";

  message DistortionCoefficients {
    float p1 = 1;
    float p2 = 2;
    float s1 = 3;
    float s2 = 4;
    float s3 = 5;
    float s4 = 6;
    float k1 = 7;
    float k2 = 8;
    float k3 = 9;
    float k4 = 10;
    float k5 = 11;
    float k6 = 12;
  }

  optional int64 sensor_id = 1 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.primary_key) = true
  ];
  // world to pixel
  optional geometry.v1.Matrix34d projection_matrix = 2 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.units) = UNITS_METERS,
    (common.v1.crs) = CRS_UTM
  ];
  geometry.v1.Matrix33f intrinsic_matrix = 3 [(common.v1.units) = UNITS_PIXELS];
  optional geometry.v1.Vector3d translation = 4 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.units) = UNITS_METERS,
    (common.v1.crs) = CRS_UTM
  ];
  optional geometry.v1.Matrix33f rotation = 5
      [(gen_bq_schema.bigquery) = { require: true }];
  optional geometry.v1.Vector3d scene_center = 7 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.units) = UNITS_METERS,
    (common.v1.crs) = CRS_UTM
  ];
  DistortionCoefficients distortion_coefficients = 8;
  // Resolution width
  optional uint32 width = 9 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.units) = UNITS_PIXELS
  ];
  // Resolution height
  optional uint32 height = 10 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.units) = UNITS_PIXELS
  ];
  // GCS URI for pixel maps
  optional string pixel_map_uri = 11
      [(gen_bq_schema.bigquery) = { require: true }];
}

// Metadata for a vehicle size calibration
message VehicleCalibration {
  option (gen_bq_schema.bigquery_opts).table_name = "VehicleCalibration";

  int64 sensor_id = 1 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.primary_key) = true
  ];
  repeated float length_uncertainty = 2;
  repeated float width_uncertainty = 3;
  repeated float length_correction = 4;
  repeated float width_correction = 5;
}
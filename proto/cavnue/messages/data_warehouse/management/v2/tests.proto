syntax = "proto3";

package cavnue.messages.data_warehouse.management.v2;

import "cavnue/third_party/bq/v1/bq_field.proto";
import "cavnue/third_party/bq/v1/bq_table.proto";

import "cavnue/messages/common/v1/field_options.proto";
import "google/protobuf/timestamp.proto";

// A mapping of all of the Cavnue defined tests
message Test {
  option (gen_bq_schema.bigquery_opts).table_name = "Tests";

  message TestDefinition {
    // Host Vehicle included in the test or not
    optional bool hv = 1 [(gen_bq_schema.bigquery) = { require: true }];
    // Test Vehicle 1 included in the test or not
    optional bool tv1 = 2 [(gen_bq_schema.bigquery) = { require: true }];
    // Test Vehicle 2 included in the test or not
    optional bool tv2 = 3 [(gen_bq_schema.bigquery) = { require: true }];
    // Soft Vehicle included in the test or not
    optional bool sv = 4 [(gen_bq_schema.bigquery) = { require: true }];
  }

  // Autogenerated. A hash of the test identifier
  optional int64 test_id = 1 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.autogenerated) = true,
    (common.v1.derivation) = "identifier",
    (common.v1.primary_key) = true
  ];
  optional string identifier = 2 [(gen_bq_schema.bigquery) = { require: true }];
  // The test definition
  optional TestDefinition definition = 3
      [(gen_bq_schema.bigquery) = { require: true }];
}

// The discrete instances of a Test
message TestRun {
  option (gen_bq_schema.bigquery_opts).table_name = "TestRuns";

  // Autogenerated. A hash of the test_id, ts, and cohort_id
  optional int64 test_run_id = 1 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.autogenerated) = true,
    (common.v1.derivation) = "test_id",
    (common.v1.derivation) = "ts",
    (common.v1.derivation) = "cohort_id",
    (common.v1.derivation) = "identifier",
    (common.v1.primary_key) = true
  ];
  optional int64 test_id = 2
      [(gen_bq_schema.bigquery) = { require: true cluster: true }];
  optional int64 cohort_id = 3
      [(gen_bq_schema.bigquery) = { require: true cluster: true }];
  // The start timestamp of the test run
  optional google.protobuf.Timestamp ts = 4 [(gen_bq_schema.bigquery) = {
    require: true
    type_override: "TIMESTAMP"
    partition: true
  }];
  // The test run duration
  optional int64 duration = 5 [(gen_bq_schema.bigquery) = { require: true }];
  // The asset id of the Host Vehicle used
  int64 hv = 6;
  // The asset id of the Test Vehicle 1 used
  int64 tv1 = 7;
  // The asset id of the Test Vehicle 2 used
  int64 tv2 = 8;
  // The asset id of the Soft Vehicle used
  int64 sv = 9;
  // An identifier for the test run. This will be the sim uuid for sim
  string identifier = 10;
}

// A mapping system to allow us to track artifacts generated by TestRuns
message TestArtifact {
  option (gen_bq_schema.bigquery_opts).table_name = "TestArtifacts";

  // Autogenerated. A hash of the test artifact GCS URI
  optional int64 test_artifact_id = 1 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.autogenerated) = true,
    (common.v1.derivation) = "uri",
    (common.v1.primary_key) = true
  ];
  optional int64 test_run_id = 2
      [(gen_bq_schema.bigquery) = { require: true cluster: true }];
  // The list of test asset ids from the TestAssets table. For live the list
  // should contain one entry, for simulation it can contain multiple entries
  repeated int64 test_asset_id = 3;
  // The list of test asset roles (e.g. TV1, TV2, etc.) that correspond to the
  // test_asset_ids. For live the list should contain one entry, for simulation
  // it can contain multiple entries
  repeated string asset_role = 4;
  optional int64 test_artifact_type_id = 5
      [(gen_bq_schema.bigquery) = { require: true }];
  // The GCS URI to the test artifact file
  optional string uri = 6 [(gen_bq_schema.bigquery) = { require: true }];
}

// An index of all test assets that Cavnue owns and uses during testing
message TestAsset {
  option (gen_bq_schema.bigquery_opts).table_name = "TestAssets";

  // Autogenerated. A hash of the identifier and version
  optional int64 test_asset_id = 1 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.autogenerated) = true,
    (common.v1.derivation) = "identifier",
    (common.v1.derivation) = "version",
    (common.v1.primary_key) = true
  ];
  optional string identifier = 2 [(gen_bq_schema.bigquery) = { require: true }];
  optional int64 version = 3 [(gen_bq_schema.bigquery) = { require: true }];
}

// The possible test artifacts that we generate during tests
message TestArtifactType {
  option (gen_bq_schema.bigquery_opts).table_name = "TestArtifactTypes";

  // Autogenerated. A hash of the identifier and version
  optional int64 test_artifact_type_id = 1 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.autogenerated) = true,
    (common.v1.derivation) = "identifier",
    (common.v1.derivation) = "version",
    (common.v1.primary_key) = true
  ];
  optional string identifier = 2 [(gen_bq_schema.bigquery) = { require: true }];
  optional int64 version = 3 [(gen_bq_schema.bigquery) = { require: true }];
}
syntax = "proto3";

package cavnue.messages.data_warehouse.management.v2;

import "cavnue/third_party/bq/v1/bq_field.proto";
import "cavnue/third_party/bq/v1/bq_table.proto";

import "cavnue/messages/common/v1/field_options.proto";
import "google/protobuf/timestamp.proto";

// The groundtruth annotations that we generate during tests from VBOX, RTK, and
// the simulation equivalent. Because these annotations are not tied to specific
// frames, and may be out of sync with our capture rate, they are not tied to a
// specific data_id. Instead, these annotations can be loosely associated based
// on cohort and temporal information. The entry is a subset of the full
// artifact generated during these tests
message VehicleState {
  option (gen_bq_schema.bigquery_opts).table_name = "VehicleState";

  // Autogenerated. UUID for the vehicle state entry
  optional int64 uuid = 1 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.autogenerated) = true
  ];
  optional int64 test_run_id = 2 [
    (gen_bq_schema.bigquery) = { require: true cluster: true },
    (common.v1.primary_key) = true
  ];
  optional int64 test_artifact_id = 3
      [(gen_bq_schema.bigquery) = { require: true cluster: true }];
  optional int64 cohort_id = 4
      [(gen_bq_schema.bigquery) = { require: true cluster: true }];
  optional google.protobuf.Timestamp ts = 5 [
    (gen_bq_schema.bigquery) = { require: true type_override: "TIMESTAMP" },
    (common.v1.primary_key) = true
  ];
  // The test asset role (e.g. TV1, TV2, etc.) that corresponds to the entry
  string asset_role = 6;
  optional float heading = 7 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.units) = UNITS_DEGREES,
    (common.v1.crs) = CRS_NED
  ];
  // The (lat, lon) coordinate
  optional string coordinate = 8 [
    (gen_bq_schema.bigquery) = { require: true type_override: "GEOGRAPHY" },
    (common.v1.crs) = CRS_WGS84
  ];
  optional float velocity_quality = 9
      [(gen_bq_schema.bigquery) = { require: false }];
  optional float longitudinal_velocity = 10 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.units) = UNITS_METERS_PER_SECOND
  ];
  optional float lateral_velocity = 11 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.units) = UNITS_METERS_PER_SECOND
  ];
  optional float vertical_velocity = 12 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.units) = UNITS_METERS_PER_SECOND
  ];
  optional float longitudinal_acceleration = 13 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.units) = UNITS_METERS_PER_SECOND_SQUARED
  ];
  optional float lateral_acceleration = 14 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.units) = UNITS_METERS_PER_SECOND_SQUARED
  ];
  optional float x_pos = 15 [
    (gen_bq_schema.bigquery) = { require: false },
    (common.v1.units) = UNITS_METERS
  ];
  optional float y_pos = 16 [
    (gen_bq_schema.bigquery) = { require: false },
    (common.v1.units) = UNITS_METERS
  ];
  optional float rms_hpos = 17 [(gen_bq_schema.bigquery) = { require: false }];
  optional float rms_vpos = 18 [(gen_bq_schema.bigquery) = { require: false }];
  optional float rms_hvel = 19 [(gen_bq_schema.bigquery) = { require: true }];
  optional float rms_vvel = 20 [(gen_bq_schema.bigquery) = { require: true }];
  optional float true_heading = 21 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.units) = UNITS_DEGREES
  ];
  optional float pitchrate = 22 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.units) = UNITS_DEGREES_PER_SECOND
  ];
  optional float rollrate = 23 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.units) = UNITS_DEGREES_PER_SECOND
  ];
  optional float yawrate = 24 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.units) = UNITS_DEGREES_PER_SECOND
  ];
  optional float height = 25 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.units) = UNITS_METERS
  ];
  // A unique id for the instance. For simulation, this is the simulation
  // dataset_id
  int64 dataset_id = 26 [(gen_bq_schema.bigquery) = { cluster: true }];
  optional google.protobuf.Timestamp run_ts = 27 [
    (gen_bq_schema.bigquery) = {
      type_override: "TIMESTAMP"
      partition: true,
      require: true
    },
    (common.v1.primary_key) = true
  ];
  optional int64 test_asset_id = 28 [
    (gen_bq_schema.bigquery) = { require: true },
    (common.v1.primary_key) = true
  ];
}
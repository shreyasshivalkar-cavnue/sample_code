// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/inference/v1/sample.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cavnue/messages/common/v1/common.pb.h"
#include "cavnue/messages/common/v1/field_options.pb.h"
#include "cavnue/messages/geometry/v1/bounding_box.pb.h"
#include "cavnue/messages/geometry/v1/covariance.pb.h"
#include "cavnue/messages/geometry/v1/scalar.pb.h"
#include "cavnue/messages/spatial/v1/utm.pb.h"
#include "cavnue/messages/geometry/v1/matrix.pb.h"
#include "google/protobuf/duration.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto;
namespace cavnue {
namespace messages {
namespace inference {
namespace v1 {
class FrameSamples;
struct FrameSamplesDefaultTypeInternal;
extern FrameSamplesDefaultTypeInternal _FrameSamples_default_instance_;
class FrameSamples_FrameSample;
struct FrameSamples_FrameSampleDefaultTypeInternal;
extern FrameSamples_FrameSampleDefaultTypeInternal _FrameSamples_FrameSample_default_instance_;
class FrameSamples_FrameSample_ActorSize;
struct FrameSamples_FrameSample_ActorSizeDefaultTypeInternal;
extern FrameSamples_FrameSample_ActorSizeDefaultTypeInternal _FrameSamples_FrameSample_ActorSize_default_instance_;
class GroupedFrameSamples;
struct GroupedFrameSamplesDefaultTypeInternal;
extern GroupedFrameSamplesDefaultTypeInternal _GroupedFrameSamples_default_instance_;
}  // namespace v1
}  // namespace inference
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template <>
::cavnue::messages::inference::v1::FrameSamples* Arena::CreateMaybeMessage<::cavnue::messages::inference::v1::FrameSamples>(Arena*);
template <>
::cavnue::messages::inference::v1::FrameSamples_FrameSample* Arena::CreateMaybeMessage<::cavnue::messages::inference::v1::FrameSamples_FrameSample>(Arena*);
template <>
::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize* Arena::CreateMaybeMessage<::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize>(Arena*);
template <>
::cavnue::messages::inference::v1::GroupedFrameSamples* Arena::CreateMaybeMessage<::cavnue::messages::inference::v1::GroupedFrameSamples>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cavnue {
namespace messages {
namespace inference {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class FrameSamples_FrameSample_ActorSize final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.inference.v1.FrameSamples.FrameSample.ActorSize) */ {
 public:
  inline FrameSamples_FrameSample_ActorSize() : FrameSamples_FrameSample_ActorSize(nullptr) {}
  ~FrameSamples_FrameSample_ActorSize() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FrameSamples_FrameSample_ActorSize(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameSamples_FrameSample_ActorSize(const FrameSamples_FrameSample_ActorSize& from);
  FrameSamples_FrameSample_ActorSize(FrameSamples_FrameSample_ActorSize&& from) noexcept
    : FrameSamples_FrameSample_ActorSize() {
    *this = ::std::move(from);
  }

  inline FrameSamples_FrameSample_ActorSize& operator=(const FrameSamples_FrameSample_ActorSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameSamples_FrameSample_ActorSize& operator=(FrameSamples_FrameSample_ActorSize&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameSamples_FrameSample_ActorSize& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameSamples_FrameSample_ActorSize* internal_default_instance() {
    return reinterpret_cast<const FrameSamples_FrameSample_ActorSize*>(
               &_FrameSamples_FrameSample_ActorSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FrameSamples_FrameSample_ActorSize& a, FrameSamples_FrameSample_ActorSize& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameSamples_FrameSample_ActorSize* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameSamples_FrameSample_ActorSize* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameSamples_FrameSample_ActorSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameSamples_FrameSample_ActorSize>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrameSamples_FrameSample_ActorSize& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FrameSamples_FrameSample_ActorSize& from) {
    FrameSamples_FrameSample_ActorSize::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameSamples_FrameSample_ActorSize* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.inference.v1.FrameSamples.FrameSample.ActorSize";
  }
  protected:
  explicit FrameSamples_FrameSample_ActorSize(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // .cavnue.messages.geometry.v1.VarianceScalarf x = 1 [json_name = "x"];
  bool has_x() const;
  void clear_x() ;
  const ::cavnue::messages::geometry::v1::VarianceScalarf& x() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::VarianceScalarf* release_x();
  ::cavnue::messages::geometry::v1::VarianceScalarf* mutable_x();
  void set_allocated_x(::cavnue::messages::geometry::v1::VarianceScalarf* x);
  private:
  const ::cavnue::messages::geometry::v1::VarianceScalarf& _internal_x() const;
  ::cavnue::messages::geometry::v1::VarianceScalarf* _internal_mutable_x();
  public:
  void unsafe_arena_set_allocated_x(
      ::cavnue::messages::geometry::v1::VarianceScalarf* x);
  ::cavnue::messages::geometry::v1::VarianceScalarf* unsafe_arena_release_x();
  // .cavnue.messages.geometry.v1.VarianceScalarf y = 2 [json_name = "y"];
  bool has_y() const;
  void clear_y() ;
  const ::cavnue::messages::geometry::v1::VarianceScalarf& y() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::VarianceScalarf* release_y();
  ::cavnue::messages::geometry::v1::VarianceScalarf* mutable_y();
  void set_allocated_y(::cavnue::messages::geometry::v1::VarianceScalarf* y);
  private:
  const ::cavnue::messages::geometry::v1::VarianceScalarf& _internal_y() const;
  ::cavnue::messages::geometry::v1::VarianceScalarf* _internal_mutable_y();
  public:
  void unsafe_arena_set_allocated_y(
      ::cavnue::messages::geometry::v1::VarianceScalarf* y);
  ::cavnue::messages::geometry::v1::VarianceScalarf* unsafe_arena_release_y();
  // .cavnue.messages.geometry.v1.VarianceScalarf z = 3 [json_name = "z"];
  bool has_z() const;
  void clear_z() ;
  const ::cavnue::messages::geometry::v1::VarianceScalarf& z() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::VarianceScalarf* release_z();
  ::cavnue::messages::geometry::v1::VarianceScalarf* mutable_z();
  void set_allocated_z(::cavnue::messages::geometry::v1::VarianceScalarf* z);
  private:
  const ::cavnue::messages::geometry::v1::VarianceScalarf& _internal_z() const;
  ::cavnue::messages::geometry::v1::VarianceScalarf* _internal_mutable_z();
  public:
  void unsafe_arena_set_allocated_z(
      ::cavnue::messages::geometry::v1::VarianceScalarf* z);
  ::cavnue::messages::geometry::v1::VarianceScalarf* unsafe_arena_release_z();
  // @@protoc_insertion_point(class_scope:cavnue.messages.inference.v1.FrameSamples.FrameSample.ActorSize)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::geometry::v1::VarianceScalarf* x_;
    ::cavnue::messages::geometry::v1::VarianceScalarf* y_;
    ::cavnue::messages::geometry::v1::VarianceScalarf* z_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto;
};// -------------------------------------------------------------------

class FrameSamples_FrameSample final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.inference.v1.FrameSamples.FrameSample) */ {
 public:
  inline FrameSamples_FrameSample() : FrameSamples_FrameSample(nullptr) {}
  ~FrameSamples_FrameSample() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FrameSamples_FrameSample(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameSamples_FrameSample(const FrameSamples_FrameSample& from);
  FrameSamples_FrameSample(FrameSamples_FrameSample&& from) noexcept
    : FrameSamples_FrameSample() {
    *this = ::std::move(from);
  }

  inline FrameSamples_FrameSample& operator=(const FrameSamples_FrameSample& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameSamples_FrameSample& operator=(FrameSamples_FrameSample&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameSamples_FrameSample& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameSamples_FrameSample* internal_default_instance() {
    return reinterpret_cast<const FrameSamples_FrameSample*>(
               &_FrameSamples_FrameSample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FrameSamples_FrameSample& a, FrameSamples_FrameSample& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameSamples_FrameSample* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameSamples_FrameSample* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameSamples_FrameSample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameSamples_FrameSample>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrameSamples_FrameSample& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FrameSamples_FrameSample& from) {
    FrameSamples_FrameSample::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameSamples_FrameSample* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.inference.v1.FrameSamples.FrameSample";
  }
  protected:
  explicit FrameSamples_FrameSample(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FrameSamples_FrameSample_ActorSize ActorSize;

  // accessors -------------------------------------------------------

  enum : int {
    kH3IdFieldNumber = 9,
    kPositionFieldNumber = 2,
    kProjectionFieldNumber = 3,
    kSizeFieldNumber = 5,
    kBboxFieldNumber = 6,
    kMeasurementUncertaintyFieldNumber = 8,
    kClassificationFieldNumber = 1,
    kLaneFieldNumber = 4,
    kDistanceFromImagerFieldNumber = 7,
  };
  // string h3_id = 9 [json_name = "h3Id"];
  void clear_h3_id() ;
  const std::string& h3_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_h3_id(Arg_&& arg, Args_... args);
  std::string* mutable_h3_id();
  PROTOBUF_NODISCARD std::string* release_h3_id();
  void set_allocated_h3_id(std::string* ptr);

  private:
  const std::string& _internal_h3_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_h3_id(
      const std::string& value);
  std::string* _internal_mutable_h3_id();

  public:
  // .cavnue.messages.geometry.v1.CovarianceVector3d position = 2 [json_name = "position", (.cavnue.messages.common.v1.units) = UNITS_METERS];
  bool has_position() const;
  void clear_position() ;
  const ::cavnue::messages::geometry::v1::CovarianceVector3d& position() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::CovarianceVector3d* release_position();
  ::cavnue::messages::geometry::v1::CovarianceVector3d* mutable_position();
  void set_allocated_position(::cavnue::messages::geometry::v1::CovarianceVector3d* position);
  private:
  const ::cavnue::messages::geometry::v1::CovarianceVector3d& _internal_position() const;
  ::cavnue::messages::geometry::v1::CovarianceVector3d* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::cavnue::messages::geometry::v1::CovarianceVector3d* position);
  ::cavnue::messages::geometry::v1::CovarianceVector3d* unsafe_arena_release_position();
  // .cavnue.messages.spatial.v1.UTMProjection projection = 3 [json_name = "projection"];
  bool has_projection() const;
  void clear_projection() ;
  const ::cavnue::messages::spatial::v1::UTMProjection& projection() const;
  PROTOBUF_NODISCARD ::cavnue::messages::spatial::v1::UTMProjection* release_projection();
  ::cavnue::messages::spatial::v1::UTMProjection* mutable_projection();
  void set_allocated_projection(::cavnue::messages::spatial::v1::UTMProjection* projection);
  private:
  const ::cavnue::messages::spatial::v1::UTMProjection& _internal_projection() const;
  ::cavnue::messages::spatial::v1::UTMProjection* _internal_mutable_projection();
  public:
  void unsafe_arena_set_allocated_projection(
      ::cavnue::messages::spatial::v1::UTMProjection* projection);
  ::cavnue::messages::spatial::v1::UTMProjection* unsafe_arena_release_projection();
  // optional .cavnue.messages.inference.v1.FrameSamples.FrameSample.ActorSize size = 5 [json_name = "size", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_ENU];
  bool has_size() const;
  void clear_size() ;
  const ::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize& size() const;
  PROTOBUF_NODISCARD ::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize* release_size();
  ::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize* mutable_size();
  void set_allocated_size(::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize* size);
  private:
  const ::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize& _internal_size() const;
  ::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize* size);
  ::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize* unsafe_arena_release_size();
  // .cavnue.messages.geometry.v1.BoundingBox2f bbox = 6 [json_name = "bbox"];
  bool has_bbox() const;
  void clear_bbox() ;
  const ::cavnue::messages::geometry::v1::BoundingBox2f& bbox() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::BoundingBox2f* release_bbox();
  ::cavnue::messages::geometry::v1::BoundingBox2f* mutable_bbox();
  void set_allocated_bbox(::cavnue::messages::geometry::v1::BoundingBox2f* bbox);
  private:
  const ::cavnue::messages::geometry::v1::BoundingBox2f& _internal_bbox() const;
  ::cavnue::messages::geometry::v1::BoundingBox2f* _internal_mutable_bbox();
  public:
  void unsafe_arena_set_allocated_bbox(
      ::cavnue::messages::geometry::v1::BoundingBox2f* bbox);
  ::cavnue::messages::geometry::v1::BoundingBox2f* unsafe_arena_release_bbox();
  // .cavnue.messages.geometry.v1.Matrix33f measurement_uncertainty = 8 [json_name = "measurementUncertainty"];
  bool has_measurement_uncertainty() const;
  void clear_measurement_uncertainty() ;
  const ::cavnue::messages::geometry::v1::Matrix33f& measurement_uncertainty() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::Matrix33f* release_measurement_uncertainty();
  ::cavnue::messages::geometry::v1::Matrix33f* mutable_measurement_uncertainty();
  void set_allocated_measurement_uncertainty(::cavnue::messages::geometry::v1::Matrix33f* measurement_uncertainty);
  private:
  const ::cavnue::messages::geometry::v1::Matrix33f& _internal_measurement_uncertainty() const;
  ::cavnue::messages::geometry::v1::Matrix33f* _internal_mutable_measurement_uncertainty();
  public:
  void unsafe_arena_set_allocated_measurement_uncertainty(
      ::cavnue::messages::geometry::v1::Matrix33f* measurement_uncertainty);
  ::cavnue::messages::geometry::v1::Matrix33f* unsafe_arena_release_measurement_uncertainty();
  // .cavnue.messages.common.v1.Classification classification = 1 [json_name = "classification"];
  void clear_classification() ;
  ::cavnue::messages::common::v1::Classification classification() const;
  void set_classification(::cavnue::messages::common::v1::Classification value);

  private:
  ::cavnue::messages::common::v1::Classification _internal_classification() const;
  void _internal_set_classification(::cavnue::messages::common::v1::Classification value);

  public:
  // optional int32 lane = 4 [json_name = "lane"];
  bool has_lane() const;
  void clear_lane() ;
  ::int32_t lane() const;
  void set_lane(::int32_t value);

  private:
  ::int32_t _internal_lane() const;
  void _internal_set_lane(::int32_t value);

  public:
  // float distance_from_imager = 7 [json_name = "distanceFromImager"];
  void clear_distance_from_imager() ;
  float distance_from_imager() const;
  void set_distance_from_imager(float value);

  private:
  float _internal_distance_from_imager() const;
  void _internal_set_distance_from_imager(float value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.inference.v1.FrameSamples.FrameSample)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr h3_id_;
    ::cavnue::messages::geometry::v1::CovarianceVector3d* position_;
    ::cavnue::messages::spatial::v1::UTMProjection* projection_;
    ::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize* size_;
    ::cavnue::messages::geometry::v1::BoundingBox2f* bbox_;
    ::cavnue::messages::geometry::v1::Matrix33f* measurement_uncertainty_;
    int classification_;
    ::int32_t lane_;
    float distance_from_imager_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto;
};// -------------------------------------------------------------------

class FrameSamples final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.inference.v1.FrameSamples) */ {
 public:
  inline FrameSamples() : FrameSamples(nullptr) {}
  ~FrameSamples() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FrameSamples(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameSamples(const FrameSamples& from);
  FrameSamples(FrameSamples&& from) noexcept
    : FrameSamples() {
    *this = ::std::move(from);
  }

  inline FrameSamples& operator=(const FrameSamples& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameSamples& operator=(FrameSamples&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameSamples& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameSamples* internal_default_instance() {
    return reinterpret_cast<const FrameSamples*>(
               &_FrameSamples_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FrameSamples& a, FrameSamples& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameSamples* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameSamples* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameSamples* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameSamples>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrameSamples& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FrameSamples& from) {
    FrameSamples::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameSamples* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.inference.v1.FrameSamples";
  }
  protected:
  explicit FrameSamples(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FrameSamples_FrameSample FrameSample;

  // accessors -------------------------------------------------------

  enum : int {
    kSamplesFieldNumber = 6,
    kZoneFieldNumber = 5,
    kHeaderFieldNumber = 1,
    kObservationTsFieldNumber = 2,
    kObservationDurationFieldNumber = 3,
    kDataSourceFieldNumber = 4,
  };
  // repeated .cavnue.messages.inference.v1.FrameSamples.FrameSample samples = 6 [json_name = "samples"];
  int samples_size() const;
  private:
  int _internal_samples_size() const;

  public:
  void clear_samples() ;
  ::cavnue::messages::inference::v1::FrameSamples_FrameSample* mutable_samples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::FrameSamples_FrameSample >*
      mutable_samples();
  private:
  const ::cavnue::messages::inference::v1::FrameSamples_FrameSample& _internal_samples(int index) const;
  ::cavnue::messages::inference::v1::FrameSamples_FrameSample* _internal_add_samples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::FrameSamples_FrameSample>& _internal_samples() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::FrameSamples_FrameSample>* _internal_mutable_samples();
  public:
  const ::cavnue::messages::inference::v1::FrameSamples_FrameSample& samples(int index) const;
  ::cavnue::messages::inference::v1::FrameSamples_FrameSample* add_samples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::FrameSamples_FrameSample >&
      samples() const;
  // string zone = 5 [json_name = "zone"];
  void clear_zone() ;
  const std::string& zone() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_zone(Arg_&& arg, Args_... args);
  std::string* mutable_zone();
  PROTOBUF_NODISCARD std::string* release_zone();
  void set_allocated_zone(std::string* ptr);

  private:
  const std::string& _internal_zone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zone(
      const std::string& value);
  std::string* _internal_mutable_zone();

  public:
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  bool has_header() const;
  void clear_header() ;
  const ::cavnue::messages::common::v1::Header& header() const;
  PROTOBUF_NODISCARD ::cavnue::messages::common::v1::Header* release_header();
  ::cavnue::messages::common::v1::Header* mutable_header();
  void set_allocated_header(::cavnue::messages::common::v1::Header* header);
  private:
  const ::cavnue::messages::common::v1::Header& _internal_header() const;
  ::cavnue::messages::common::v1::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::cavnue::messages::common::v1::Header* header);
  ::cavnue::messages::common::v1::Header* unsafe_arena_release_header();
  // .google.protobuf.Timestamp observation_ts = 2 [json_name = "observationTs"];
  bool has_observation_ts() const;
  void clear_observation_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& observation_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_observation_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_observation_ts();
  void set_allocated_observation_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* observation_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_observation_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_observation_ts();
  public:
  void unsafe_arena_set_allocated_observation_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* observation_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_observation_ts();
  // .google.protobuf.Duration observation_duration = 3 [json_name = "observationDuration"];
  bool has_observation_duration() const;
  void clear_observation_duration() ;
  const ::PROTOBUF_NAMESPACE_ID::Duration& observation_duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_observation_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_observation_duration();
  void set_allocated_observation_duration(::PROTOBUF_NAMESPACE_ID::Duration* observation_duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_observation_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_observation_duration();
  public:
  void unsafe_arena_set_allocated_observation_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* observation_duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_observation_duration();
  // .cavnue.messages.common.v1.DataSource data_source = 4 [json_name = "dataSource"];
  bool has_data_source() const;
  void clear_data_source() ;
  const ::cavnue::messages::common::v1::DataSource& data_source() const;
  PROTOBUF_NODISCARD ::cavnue::messages::common::v1::DataSource* release_data_source();
  ::cavnue::messages::common::v1::DataSource* mutable_data_source();
  void set_allocated_data_source(::cavnue::messages::common::v1::DataSource* data_source);
  private:
  const ::cavnue::messages::common::v1::DataSource& _internal_data_source() const;
  ::cavnue::messages::common::v1::DataSource* _internal_mutable_data_source();
  public:
  void unsafe_arena_set_allocated_data_source(
      ::cavnue::messages::common::v1::DataSource* data_source);
  ::cavnue::messages::common::v1::DataSource* unsafe_arena_release_data_source();
  // @@protoc_insertion_point(class_scope:cavnue.messages.inference.v1.FrameSamples)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::FrameSamples_FrameSample > samples_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zone_;
    ::cavnue::messages::common::v1::Header* header_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* observation_ts_;
    ::PROTOBUF_NAMESPACE_ID::Duration* observation_duration_;
    ::cavnue::messages::common::v1::DataSource* data_source_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto;
};// -------------------------------------------------------------------

class GroupedFrameSamples final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.inference.v1.GroupedFrameSamples) */ {
 public:
  inline GroupedFrameSamples() : GroupedFrameSamples(nullptr) {}
  ~GroupedFrameSamples() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GroupedFrameSamples(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupedFrameSamples(const GroupedFrameSamples& from);
  GroupedFrameSamples(GroupedFrameSamples&& from) noexcept
    : GroupedFrameSamples() {
    *this = ::std::move(from);
  }

  inline GroupedFrameSamples& operator=(const GroupedFrameSamples& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupedFrameSamples& operator=(GroupedFrameSamples&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupedFrameSamples& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupedFrameSamples* internal_default_instance() {
    return reinterpret_cast<const GroupedFrameSamples*>(
               &_GroupedFrameSamples_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GroupedFrameSamples& a, GroupedFrameSamples& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupedFrameSamples* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupedFrameSamples* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupedFrameSamples* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupedFrameSamples>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupedFrameSamples& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupedFrameSamples& from) {
    GroupedFrameSamples::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupedFrameSamples* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.inference.v1.GroupedFrameSamples";
  }
  protected:
  explicit GroupedFrameSamples(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFramesFieldNumber = 3,
    kZoneFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .cavnue.messages.inference.v1.FrameSamples frames = 3 [json_name = "frames"];
  int frames_size() const;
  private:
  int _internal_frames_size() const;

  public:
  void clear_frames() ;
  ::cavnue::messages::inference::v1::FrameSamples* mutable_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::FrameSamples >*
      mutable_frames();
  private:
  const ::cavnue::messages::inference::v1::FrameSamples& _internal_frames(int index) const;
  ::cavnue::messages::inference::v1::FrameSamples* _internal_add_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::FrameSamples>& _internal_frames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::FrameSamples>* _internal_mutable_frames();
  public:
  const ::cavnue::messages::inference::v1::FrameSamples& frames(int index) const;
  ::cavnue::messages::inference::v1::FrameSamples* add_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::FrameSamples >&
      frames() const;
  // string zone = 2 [json_name = "zone"];
  void clear_zone() ;
  const std::string& zone() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_zone(Arg_&& arg, Args_... args);
  std::string* mutable_zone();
  PROTOBUF_NODISCARD std::string* release_zone();
  void set_allocated_zone(std::string* ptr);

  private:
  const std::string& _internal_zone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zone(
      const std::string& value);
  std::string* _internal_mutable_zone();

  public:
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  bool has_header() const;
  void clear_header() ;
  const ::cavnue::messages::common::v1::Header& header() const;
  PROTOBUF_NODISCARD ::cavnue::messages::common::v1::Header* release_header();
  ::cavnue::messages::common::v1::Header* mutable_header();
  void set_allocated_header(::cavnue::messages::common::v1::Header* header);
  private:
  const ::cavnue::messages::common::v1::Header& _internal_header() const;
  ::cavnue::messages::common::v1::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::cavnue::messages::common::v1::Header* header);
  ::cavnue::messages::common::v1::Header* unsafe_arena_release_header();
  // @@protoc_insertion_point(class_scope:cavnue.messages.inference.v1.GroupedFrameSamples)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::FrameSamples > frames_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zone_;
    ::cavnue::messages::common::v1::Header* header_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// FrameSamples_FrameSample_ActorSize

// .cavnue.messages.geometry.v1.VarianceScalarf x = 1 [json_name = "x"];
inline bool FrameSamples_FrameSample_ActorSize::has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.x_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::VarianceScalarf& FrameSamples_FrameSample_ActorSize::_internal_x() const {
  const ::cavnue::messages::geometry::v1::VarianceScalarf* p = _impl_.x_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::VarianceScalarf&>(
      ::cavnue::messages::geometry::v1::_VarianceScalarf_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::VarianceScalarf& FrameSamples_FrameSample_ActorSize::x() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.FrameSamples.FrameSample.ActorSize.x)
  return _internal_x();
}
inline void FrameSamples_FrameSample_ActorSize::unsafe_arena_set_allocated_x(
    ::cavnue::messages::geometry::v1::VarianceScalarf* x) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.x_);
  }
  _impl_.x_ = x;
  if (x) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.FrameSamples.FrameSample.ActorSize.x)
}
inline ::cavnue::messages::geometry::v1::VarianceScalarf* FrameSamples_FrameSample_ActorSize::release_x() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::VarianceScalarf* temp = _impl_.x_;
  _impl_.x_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::VarianceScalarf* FrameSamples_FrameSample_ActorSize::unsafe_arena_release_x() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.FrameSamples.FrameSample.ActorSize.x)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::VarianceScalarf* temp = _impl_.x_;
  _impl_.x_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::VarianceScalarf* FrameSamples_FrameSample_ActorSize::_internal_mutable_x() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.x_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::VarianceScalarf>(GetArenaForAllocation());
    _impl_.x_ = p;
  }
  return _impl_.x_;
}
inline ::cavnue::messages::geometry::v1::VarianceScalarf* FrameSamples_FrameSample_ActorSize::mutable_x() {
  ::cavnue::messages::geometry::v1::VarianceScalarf* _msg = _internal_mutable_x();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.FrameSamples.FrameSample.ActorSize.x)
  return _msg;
}
inline void FrameSamples_FrameSample_ActorSize::set_allocated_x(::cavnue::messages::geometry::v1::VarianceScalarf* x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.x_);
  }
  if (x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(x));
    if (message_arena != submessage_arena) {
      x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, x, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.x_ = x;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.FrameSamples.FrameSample.ActorSize.x)
}

// .cavnue.messages.geometry.v1.VarianceScalarf y = 2 [json_name = "y"];
inline bool FrameSamples_FrameSample_ActorSize::has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.y_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::VarianceScalarf& FrameSamples_FrameSample_ActorSize::_internal_y() const {
  const ::cavnue::messages::geometry::v1::VarianceScalarf* p = _impl_.y_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::VarianceScalarf&>(
      ::cavnue::messages::geometry::v1::_VarianceScalarf_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::VarianceScalarf& FrameSamples_FrameSample_ActorSize::y() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.FrameSamples.FrameSample.ActorSize.y)
  return _internal_y();
}
inline void FrameSamples_FrameSample_ActorSize::unsafe_arena_set_allocated_y(
    ::cavnue::messages::geometry::v1::VarianceScalarf* y) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.y_);
  }
  _impl_.y_ = y;
  if (y) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.FrameSamples.FrameSample.ActorSize.y)
}
inline ::cavnue::messages::geometry::v1::VarianceScalarf* FrameSamples_FrameSample_ActorSize::release_y() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::geometry::v1::VarianceScalarf* temp = _impl_.y_;
  _impl_.y_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::VarianceScalarf* FrameSamples_FrameSample_ActorSize::unsafe_arena_release_y() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.FrameSamples.FrameSample.ActorSize.y)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::geometry::v1::VarianceScalarf* temp = _impl_.y_;
  _impl_.y_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::VarianceScalarf* FrameSamples_FrameSample_ActorSize::_internal_mutable_y() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.y_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::VarianceScalarf>(GetArenaForAllocation());
    _impl_.y_ = p;
  }
  return _impl_.y_;
}
inline ::cavnue::messages::geometry::v1::VarianceScalarf* FrameSamples_FrameSample_ActorSize::mutable_y() {
  ::cavnue::messages::geometry::v1::VarianceScalarf* _msg = _internal_mutable_y();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.FrameSamples.FrameSample.ActorSize.y)
  return _msg;
}
inline void FrameSamples_FrameSample_ActorSize::set_allocated_y(::cavnue::messages::geometry::v1::VarianceScalarf* y) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.y_);
  }
  if (y) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(y));
    if (message_arena != submessage_arena) {
      y = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, y, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.y_ = y;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.FrameSamples.FrameSample.ActorSize.y)
}

// .cavnue.messages.geometry.v1.VarianceScalarf z = 3 [json_name = "z"];
inline bool FrameSamples_FrameSample_ActorSize::has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.z_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::VarianceScalarf& FrameSamples_FrameSample_ActorSize::_internal_z() const {
  const ::cavnue::messages::geometry::v1::VarianceScalarf* p = _impl_.z_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::VarianceScalarf&>(
      ::cavnue::messages::geometry::v1::_VarianceScalarf_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::VarianceScalarf& FrameSamples_FrameSample_ActorSize::z() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.FrameSamples.FrameSample.ActorSize.z)
  return _internal_z();
}
inline void FrameSamples_FrameSample_ActorSize::unsafe_arena_set_allocated_z(
    ::cavnue::messages::geometry::v1::VarianceScalarf* z) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.z_);
  }
  _impl_.z_ = z;
  if (z) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.FrameSamples.FrameSample.ActorSize.z)
}
inline ::cavnue::messages::geometry::v1::VarianceScalarf* FrameSamples_FrameSample_ActorSize::release_z() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::cavnue::messages::geometry::v1::VarianceScalarf* temp = _impl_.z_;
  _impl_.z_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::VarianceScalarf* FrameSamples_FrameSample_ActorSize::unsafe_arena_release_z() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.FrameSamples.FrameSample.ActorSize.z)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::cavnue::messages::geometry::v1::VarianceScalarf* temp = _impl_.z_;
  _impl_.z_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::VarianceScalarf* FrameSamples_FrameSample_ActorSize::_internal_mutable_z() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.z_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::VarianceScalarf>(GetArenaForAllocation());
    _impl_.z_ = p;
  }
  return _impl_.z_;
}
inline ::cavnue::messages::geometry::v1::VarianceScalarf* FrameSamples_FrameSample_ActorSize::mutable_z() {
  ::cavnue::messages::geometry::v1::VarianceScalarf* _msg = _internal_mutable_z();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.FrameSamples.FrameSample.ActorSize.z)
  return _msg;
}
inline void FrameSamples_FrameSample_ActorSize::set_allocated_z(::cavnue::messages::geometry::v1::VarianceScalarf* z) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.z_);
  }
  if (z) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(z));
    if (message_arena != submessage_arena) {
      z = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, z, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.z_ = z;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.FrameSamples.FrameSample.ActorSize.z)
}

// -------------------------------------------------------------------

// FrameSamples_FrameSample

// .cavnue.messages.common.v1.Classification classification = 1 [json_name = "classification"];
inline void FrameSamples_FrameSample::clear_classification() {
  _impl_.classification_ = 0;
}
inline ::cavnue::messages::common::v1::Classification FrameSamples_FrameSample::classification() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.FrameSamples.FrameSample.classification)
  return _internal_classification();
}
inline void FrameSamples_FrameSample::set_classification(::cavnue::messages::common::v1::Classification value) {
   _internal_set_classification(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.FrameSamples.FrameSample.classification)
}
inline ::cavnue::messages::common::v1::Classification FrameSamples_FrameSample::_internal_classification() const {
  return static_cast<::cavnue::messages::common::v1::Classification>(_impl_.classification_);
}
inline void FrameSamples_FrameSample::_internal_set_classification(::cavnue::messages::common::v1::Classification value) {
  ;
  _impl_.classification_ = value;
}

// .cavnue.messages.geometry.v1.CovarianceVector3d position = 2 [json_name = "position", (.cavnue.messages.common.v1.units) = UNITS_METERS];
inline bool FrameSamples_FrameSample::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::CovarianceVector3d& FrameSamples_FrameSample::_internal_position() const {
  const ::cavnue::messages::geometry::v1::CovarianceVector3d* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::CovarianceVector3d&>(
      ::cavnue::messages::geometry::v1::_CovarianceVector3d_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::CovarianceVector3d& FrameSamples_FrameSample::position() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.FrameSamples.FrameSample.position)
  return _internal_position();
}
inline void FrameSamples_FrameSample::unsafe_arena_set_allocated_position(
    ::cavnue::messages::geometry::v1::CovarianceVector3d* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.FrameSamples.FrameSample.position)
}
inline ::cavnue::messages::geometry::v1::CovarianceVector3d* FrameSamples_FrameSample::release_position() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::CovarianceVector3d* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::CovarianceVector3d* FrameSamples_FrameSample::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.FrameSamples.FrameSample.position)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::CovarianceVector3d* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::CovarianceVector3d* FrameSamples_FrameSample::_internal_mutable_position() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::CovarianceVector3d>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::cavnue::messages::geometry::v1::CovarianceVector3d* FrameSamples_FrameSample::mutable_position() {
  ::cavnue::messages::geometry::v1::CovarianceVector3d* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.FrameSamples.FrameSample.position)
  return _msg;
}
inline void FrameSamples_FrameSample::set_allocated_position(::cavnue::messages::geometry::v1::CovarianceVector3d* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.FrameSamples.FrameSample.position)
}

// .cavnue.messages.spatial.v1.UTMProjection projection = 3 [json_name = "projection"];
inline bool FrameSamples_FrameSample::has_projection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.projection_ != nullptr);
  return value;
}
inline const ::cavnue::messages::spatial::v1::UTMProjection& FrameSamples_FrameSample::_internal_projection() const {
  const ::cavnue::messages::spatial::v1::UTMProjection* p = _impl_.projection_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::spatial::v1::UTMProjection&>(
      ::cavnue::messages::spatial::v1::_UTMProjection_default_instance_);
}
inline const ::cavnue::messages::spatial::v1::UTMProjection& FrameSamples_FrameSample::projection() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.FrameSamples.FrameSample.projection)
  return _internal_projection();
}
inline void FrameSamples_FrameSample::unsafe_arena_set_allocated_projection(
    ::cavnue::messages::spatial::v1::UTMProjection* projection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projection_);
  }
  _impl_.projection_ = projection;
  if (projection) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.FrameSamples.FrameSample.projection)
}
inline ::cavnue::messages::spatial::v1::UTMProjection* FrameSamples_FrameSample::release_projection() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::spatial::v1::UTMProjection* temp = _impl_.projection_;
  _impl_.projection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::spatial::v1::UTMProjection* FrameSamples_FrameSample::unsafe_arena_release_projection() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.FrameSamples.FrameSample.projection)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::spatial::v1::UTMProjection* temp = _impl_.projection_;
  _impl_.projection_ = nullptr;
  return temp;
}
inline ::cavnue::messages::spatial::v1::UTMProjection* FrameSamples_FrameSample::_internal_mutable_projection() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.projection_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::spatial::v1::UTMProjection>(GetArenaForAllocation());
    _impl_.projection_ = p;
  }
  return _impl_.projection_;
}
inline ::cavnue::messages::spatial::v1::UTMProjection* FrameSamples_FrameSample::mutable_projection() {
  ::cavnue::messages::spatial::v1::UTMProjection* _msg = _internal_mutable_projection();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.FrameSamples.FrameSample.projection)
  return _msg;
}
inline void FrameSamples_FrameSample::set_allocated_projection(::cavnue::messages::spatial::v1::UTMProjection* projection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projection_);
  }
  if (projection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projection));
    if (message_arena != submessage_arena) {
      projection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.projection_ = projection;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.FrameSamples.FrameSample.projection)
}

// optional int32 lane = 4 [json_name = "lane"];
inline bool FrameSamples_FrameSample::has_lane() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void FrameSamples_FrameSample::clear_lane() {
  _impl_.lane_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t FrameSamples_FrameSample::lane() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.FrameSamples.FrameSample.lane)
  return _internal_lane();
}
inline void FrameSamples_FrameSample::set_lane(::int32_t value) {
  _internal_set_lane(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.FrameSamples.FrameSample.lane)
}
inline ::int32_t FrameSamples_FrameSample::_internal_lane() const {
  return _impl_.lane_;
}
inline void FrameSamples_FrameSample::_internal_set_lane(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.lane_ = value;
}

// optional .cavnue.messages.inference.v1.FrameSamples.FrameSample.ActorSize size = 5 [json_name = "size", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_ENU];
inline bool FrameSamples_FrameSample::has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.size_ != nullptr);
  return value;
}
inline void FrameSamples_FrameSample::clear_size() {
  if (_impl_.size_ != nullptr) _impl_.size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize& FrameSamples_FrameSample::_internal_size() const {
  const ::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize&>(
      ::cavnue::messages::inference::v1::_FrameSamples_FrameSample_ActorSize_default_instance_);
}
inline const ::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize& FrameSamples_FrameSample::size() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.FrameSamples.FrameSample.size)
  return _internal_size();
}
inline void FrameSamples_FrameSample::unsafe_arena_set_allocated_size(
    ::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = size;
  if (size) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.FrameSamples.FrameSample.size)
}
inline ::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize* FrameSamples_FrameSample::release_size() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize* temp = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize* FrameSamples_FrameSample::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.FrameSamples.FrameSample.size)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize* FrameSamples_FrameSample::_internal_mutable_size() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.size_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize>(GetArenaForAllocation());
    _impl_.size_ = p;
  }
  return _impl_.size_;
}
inline ::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize* FrameSamples_FrameSample::mutable_size() {
  ::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.FrameSamples.FrameSample.size)
  return _msg;
}
inline void FrameSamples_FrameSample::set_allocated_size(::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.size_;
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(size);
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.size_ = size;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.FrameSamples.FrameSample.size)
}

// .cavnue.messages.geometry.v1.BoundingBox2f bbox = 6 [json_name = "bbox"];
inline bool FrameSamples_FrameSample::has_bbox() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bbox_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::BoundingBox2f& FrameSamples_FrameSample::_internal_bbox() const {
  const ::cavnue::messages::geometry::v1::BoundingBox2f* p = _impl_.bbox_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::BoundingBox2f&>(
      ::cavnue::messages::geometry::v1::_BoundingBox2f_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::BoundingBox2f& FrameSamples_FrameSample::bbox() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.FrameSamples.FrameSample.bbox)
  return _internal_bbox();
}
inline void FrameSamples_FrameSample::unsafe_arena_set_allocated_bbox(
    ::cavnue::messages::geometry::v1::BoundingBox2f* bbox) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bbox_);
  }
  _impl_.bbox_ = bbox;
  if (bbox) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.FrameSamples.FrameSample.bbox)
}
inline ::cavnue::messages::geometry::v1::BoundingBox2f* FrameSamples_FrameSample::release_bbox() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::cavnue::messages::geometry::v1::BoundingBox2f* temp = _impl_.bbox_;
  _impl_.bbox_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::BoundingBox2f* FrameSamples_FrameSample::unsafe_arena_release_bbox() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.FrameSamples.FrameSample.bbox)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::cavnue::messages::geometry::v1::BoundingBox2f* temp = _impl_.bbox_;
  _impl_.bbox_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::BoundingBox2f* FrameSamples_FrameSample::_internal_mutable_bbox() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.bbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::BoundingBox2f>(GetArenaForAllocation());
    _impl_.bbox_ = p;
  }
  return _impl_.bbox_;
}
inline ::cavnue::messages::geometry::v1::BoundingBox2f* FrameSamples_FrameSample::mutable_bbox() {
  ::cavnue::messages::geometry::v1::BoundingBox2f* _msg = _internal_mutable_bbox();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.FrameSamples.FrameSample.bbox)
  return _msg;
}
inline void FrameSamples_FrameSample::set_allocated_bbox(::cavnue::messages::geometry::v1::BoundingBox2f* bbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bbox_);
  }
  if (bbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bbox));
    if (message_arena != submessage_arena) {
      bbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bbox, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.bbox_ = bbox;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.FrameSamples.FrameSample.bbox)
}

// float distance_from_imager = 7 [json_name = "distanceFromImager"];
inline void FrameSamples_FrameSample::clear_distance_from_imager() {
  _impl_.distance_from_imager_ = 0;
}
inline float FrameSamples_FrameSample::distance_from_imager() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.FrameSamples.FrameSample.distance_from_imager)
  return _internal_distance_from_imager();
}
inline void FrameSamples_FrameSample::set_distance_from_imager(float value) {
  _internal_set_distance_from_imager(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.FrameSamples.FrameSample.distance_from_imager)
}
inline float FrameSamples_FrameSample::_internal_distance_from_imager() const {
  return _impl_.distance_from_imager_;
}
inline void FrameSamples_FrameSample::_internal_set_distance_from_imager(float value) {
  ;
  _impl_.distance_from_imager_ = value;
}

// .cavnue.messages.geometry.v1.Matrix33f measurement_uncertainty = 8 [json_name = "measurementUncertainty"];
inline bool FrameSamples_FrameSample::has_measurement_uncertainty() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.measurement_uncertainty_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::Matrix33f& FrameSamples_FrameSample::_internal_measurement_uncertainty() const {
  const ::cavnue::messages::geometry::v1::Matrix33f* p = _impl_.measurement_uncertainty_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::Matrix33f&>(
      ::cavnue::messages::geometry::v1::_Matrix33f_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::Matrix33f& FrameSamples_FrameSample::measurement_uncertainty() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.FrameSamples.FrameSample.measurement_uncertainty)
  return _internal_measurement_uncertainty();
}
inline void FrameSamples_FrameSample::unsafe_arena_set_allocated_measurement_uncertainty(
    ::cavnue::messages::geometry::v1::Matrix33f* measurement_uncertainty) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.measurement_uncertainty_);
  }
  _impl_.measurement_uncertainty_ = measurement_uncertainty;
  if (measurement_uncertainty) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.FrameSamples.FrameSample.measurement_uncertainty)
}
inline ::cavnue::messages::geometry::v1::Matrix33f* FrameSamples_FrameSample::release_measurement_uncertainty() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::cavnue::messages::geometry::v1::Matrix33f* temp = _impl_.measurement_uncertainty_;
  _impl_.measurement_uncertainty_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::Matrix33f* FrameSamples_FrameSample::unsafe_arena_release_measurement_uncertainty() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.FrameSamples.FrameSample.measurement_uncertainty)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::cavnue::messages::geometry::v1::Matrix33f* temp = _impl_.measurement_uncertainty_;
  _impl_.measurement_uncertainty_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::Matrix33f* FrameSamples_FrameSample::_internal_mutable_measurement_uncertainty() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.measurement_uncertainty_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::Matrix33f>(GetArenaForAllocation());
    _impl_.measurement_uncertainty_ = p;
  }
  return _impl_.measurement_uncertainty_;
}
inline ::cavnue::messages::geometry::v1::Matrix33f* FrameSamples_FrameSample::mutable_measurement_uncertainty() {
  ::cavnue::messages::geometry::v1::Matrix33f* _msg = _internal_mutable_measurement_uncertainty();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.FrameSamples.FrameSample.measurement_uncertainty)
  return _msg;
}
inline void FrameSamples_FrameSample::set_allocated_measurement_uncertainty(::cavnue::messages::geometry::v1::Matrix33f* measurement_uncertainty) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.measurement_uncertainty_);
  }
  if (measurement_uncertainty) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(measurement_uncertainty));
    if (message_arena != submessage_arena) {
      measurement_uncertainty = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, measurement_uncertainty, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.measurement_uncertainty_ = measurement_uncertainty;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.FrameSamples.FrameSample.measurement_uncertainty)
}

// string h3_id = 9 [json_name = "h3Id"];
inline void FrameSamples_FrameSample::clear_h3_id() {
  _impl_.h3_id_.ClearToEmpty();
}
inline const std::string& FrameSamples_FrameSample::h3_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.FrameSamples.FrameSample.h3_id)
  return _internal_h3_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FrameSamples_FrameSample::set_h3_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.h3_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.FrameSamples.FrameSample.h3_id)
}
inline std::string* FrameSamples_FrameSample::mutable_h3_id() {
  std::string* _s = _internal_mutable_h3_id();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.FrameSamples.FrameSample.h3_id)
  return _s;
}
inline const std::string& FrameSamples_FrameSample::_internal_h3_id() const {
  return _impl_.h3_id_.Get();
}
inline void FrameSamples_FrameSample::_internal_set_h3_id(const std::string& value) {
  ;


  _impl_.h3_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FrameSamples_FrameSample::_internal_mutable_h3_id() {
  ;
  return _impl_.h3_id_.Mutable( GetArenaForAllocation());
}
inline std::string* FrameSamples_FrameSample::release_h3_id() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.FrameSamples.FrameSample.h3_id)
  return _impl_.h3_id_.Release();
}
inline void FrameSamples_FrameSample::set_allocated_h3_id(std::string* value) {
  _impl_.h3_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.h3_id_.IsDefault()) {
          _impl_.h3_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.FrameSamples.FrameSample.h3_id)
}

// -------------------------------------------------------------------

// FrameSamples

// .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
inline bool FrameSamples::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::cavnue::messages::common::v1::Header& FrameSamples::_internal_header() const {
  const ::cavnue::messages::common::v1::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::common::v1::Header&>(
      ::cavnue::messages::common::v1::_Header_default_instance_);
}
inline const ::cavnue::messages::common::v1::Header& FrameSamples::header() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.FrameSamples.header)
  return _internal_header();
}
inline void FrameSamples::unsafe_arena_set_allocated_header(
    ::cavnue::messages::common::v1::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.FrameSamples.header)
}
inline ::cavnue::messages::common::v1::Header* FrameSamples::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::common::v1::Header* FrameSamples::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.FrameSamples.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::cavnue::messages::common::v1::Header* FrameSamples::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::common::v1::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::cavnue::messages::common::v1::Header* FrameSamples::mutable_header() {
  ::cavnue::messages::common::v1::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.FrameSamples.header)
  return _msg;
}
inline void FrameSamples::set_allocated_header(::cavnue::messages::common::v1::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.FrameSamples.header)
}

// .google.protobuf.Timestamp observation_ts = 2 [json_name = "observationTs"];
inline bool FrameSamples::has_observation_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.observation_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& FrameSamples::_internal_observation_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.observation_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& FrameSamples::observation_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.FrameSamples.observation_ts)
  return _internal_observation_ts();
}
inline void FrameSamples::unsafe_arena_set_allocated_observation_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* observation_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observation_ts_);
  }
  _impl_.observation_ts_ = observation_ts;
  if (observation_ts) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.FrameSamples.observation_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* FrameSamples::release_observation_ts() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.observation_ts_;
  _impl_.observation_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* FrameSamples::unsafe_arena_release_observation_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.FrameSamples.observation_ts)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.observation_ts_;
  _impl_.observation_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* FrameSamples::_internal_mutable_observation_ts() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.observation_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.observation_ts_ = p;
  }
  return _impl_.observation_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* FrameSamples::mutable_observation_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_observation_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.FrameSamples.observation_ts)
  return _msg;
}
inline void FrameSamples::set_allocated_observation_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* observation_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observation_ts_);
  }
  if (observation_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(observation_ts));
    if (message_arena != submessage_arena) {
      observation_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observation_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.observation_ts_ = observation_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.FrameSamples.observation_ts)
}

// .google.protobuf.Duration observation_duration = 3 [json_name = "observationDuration"];
inline bool FrameSamples::has_observation_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.observation_duration_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& FrameSamples::_internal_observation_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.observation_duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& FrameSamples::observation_duration() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.FrameSamples.observation_duration)
  return _internal_observation_duration();
}
inline void FrameSamples::unsafe_arena_set_allocated_observation_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* observation_duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observation_duration_);
  }
  _impl_.observation_duration_ = observation_duration;
  if (observation_duration) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.FrameSamples.observation_duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* FrameSamples::release_observation_duration() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.observation_duration_;
  _impl_.observation_duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* FrameSamples::unsafe_arena_release_observation_duration() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.FrameSamples.observation_duration)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.observation_duration_;
  _impl_.observation_duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* FrameSamples::_internal_mutable_observation_duration() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.observation_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.observation_duration_ = p;
  }
  return _impl_.observation_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* FrameSamples::mutable_observation_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_observation_duration();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.FrameSamples.observation_duration)
  return _msg;
}
inline void FrameSamples::set_allocated_observation_duration(::PROTOBUF_NAMESPACE_ID::Duration* observation_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observation_duration_);
  }
  if (observation_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(observation_duration));
    if (message_arena != submessage_arena) {
      observation_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observation_duration, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.observation_duration_ = observation_duration;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.FrameSamples.observation_duration)
}

// .cavnue.messages.common.v1.DataSource data_source = 4 [json_name = "dataSource"];
inline bool FrameSamples::has_data_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_source_ != nullptr);
  return value;
}
inline const ::cavnue::messages::common::v1::DataSource& FrameSamples::_internal_data_source() const {
  const ::cavnue::messages::common::v1::DataSource* p = _impl_.data_source_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::common::v1::DataSource&>(
      ::cavnue::messages::common::v1::_DataSource_default_instance_);
}
inline const ::cavnue::messages::common::v1::DataSource& FrameSamples::data_source() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.FrameSamples.data_source)
  return _internal_data_source();
}
inline void FrameSamples::unsafe_arena_set_allocated_data_source(
    ::cavnue::messages::common::v1::DataSource* data_source) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_source_);
  }
  _impl_.data_source_ = data_source;
  if (data_source) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.FrameSamples.data_source)
}
inline ::cavnue::messages::common::v1::DataSource* FrameSamples::release_data_source() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::cavnue::messages::common::v1::DataSource* temp = _impl_.data_source_;
  _impl_.data_source_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::common::v1::DataSource* FrameSamples::unsafe_arena_release_data_source() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.FrameSamples.data_source)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::cavnue::messages::common::v1::DataSource* temp = _impl_.data_source_;
  _impl_.data_source_ = nullptr;
  return temp;
}
inline ::cavnue::messages::common::v1::DataSource* FrameSamples::_internal_mutable_data_source() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.data_source_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::common::v1::DataSource>(GetArenaForAllocation());
    _impl_.data_source_ = p;
  }
  return _impl_.data_source_;
}
inline ::cavnue::messages::common::v1::DataSource* FrameSamples::mutable_data_source() {
  ::cavnue::messages::common::v1::DataSource* _msg = _internal_mutable_data_source();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.FrameSamples.data_source)
  return _msg;
}
inline void FrameSamples::set_allocated_data_source(::cavnue::messages::common::v1::DataSource* data_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_source_);
  }
  if (data_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_source));
    if (message_arena != submessage_arena) {
      data_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_source, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.data_source_ = data_source;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.FrameSamples.data_source)
}

// string zone = 5 [json_name = "zone"];
inline void FrameSamples::clear_zone() {
  _impl_.zone_.ClearToEmpty();
}
inline const std::string& FrameSamples::zone() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.FrameSamples.zone)
  return _internal_zone();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FrameSamples::set_zone(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.zone_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.FrameSamples.zone)
}
inline std::string* FrameSamples::mutable_zone() {
  std::string* _s = _internal_mutable_zone();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.FrameSamples.zone)
  return _s;
}
inline const std::string& FrameSamples::_internal_zone() const {
  return _impl_.zone_.Get();
}
inline void FrameSamples::_internal_set_zone(const std::string& value) {
  ;


  _impl_.zone_.Set(value, GetArenaForAllocation());
}
inline std::string* FrameSamples::_internal_mutable_zone() {
  ;
  return _impl_.zone_.Mutable( GetArenaForAllocation());
}
inline std::string* FrameSamples::release_zone() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.FrameSamples.zone)
  return _impl_.zone_.Release();
}
inline void FrameSamples::set_allocated_zone(std::string* value) {
  _impl_.zone_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.zone_.IsDefault()) {
          _impl_.zone_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.FrameSamples.zone)
}

// repeated .cavnue.messages.inference.v1.FrameSamples.FrameSample samples = 6 [json_name = "samples"];
inline int FrameSamples::_internal_samples_size() const {
  return _impl_.samples_.size();
}
inline int FrameSamples::samples_size() const {
  return _internal_samples_size();
}
inline void FrameSamples::clear_samples() {
  _internal_mutable_samples()->Clear();
}
inline ::cavnue::messages::inference::v1::FrameSamples_FrameSample* FrameSamples::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.FrameSamples.samples)
  return _internal_mutable_samples()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::FrameSamples_FrameSample >*
FrameSamples::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.inference.v1.FrameSamples.samples)
  return _internal_mutable_samples();
}
inline const ::cavnue::messages::inference::v1::FrameSamples_FrameSample& FrameSamples::_internal_samples(int index) const {
  return _internal_samples().Get(index);
}
inline const ::cavnue::messages::inference::v1::FrameSamples_FrameSample& FrameSamples::samples(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.FrameSamples.samples)
  return _internal_samples(index);
}
inline ::cavnue::messages::inference::v1::FrameSamples_FrameSample* FrameSamples::_internal_add_samples() {
  return _internal_mutable_samples()->Add();
}
inline ::cavnue::messages::inference::v1::FrameSamples_FrameSample* FrameSamples::add_samples() {
  ::cavnue::messages::inference::v1::FrameSamples_FrameSample* _add = _internal_add_samples();
  // @@protoc_insertion_point(field_add:cavnue.messages.inference.v1.FrameSamples.samples)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::FrameSamples_FrameSample >&
FrameSamples::samples() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.inference.v1.FrameSamples.samples)
  return _internal_samples();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::FrameSamples_FrameSample>&
FrameSamples::_internal_samples() const {
  return _impl_.samples_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::FrameSamples_FrameSample>*
FrameSamples::_internal_mutable_samples() {
  return &_impl_.samples_;
}

// -------------------------------------------------------------------

// GroupedFrameSamples

// .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
inline bool GroupedFrameSamples::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::cavnue::messages::common::v1::Header& GroupedFrameSamples::_internal_header() const {
  const ::cavnue::messages::common::v1::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::common::v1::Header&>(
      ::cavnue::messages::common::v1::_Header_default_instance_);
}
inline const ::cavnue::messages::common::v1::Header& GroupedFrameSamples::header() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.GroupedFrameSamples.header)
  return _internal_header();
}
inline void GroupedFrameSamples::unsafe_arena_set_allocated_header(
    ::cavnue::messages::common::v1::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.GroupedFrameSamples.header)
}
inline ::cavnue::messages::common::v1::Header* GroupedFrameSamples::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::common::v1::Header* GroupedFrameSamples::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.GroupedFrameSamples.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::cavnue::messages::common::v1::Header* GroupedFrameSamples::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::common::v1::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::cavnue::messages::common::v1::Header* GroupedFrameSamples::mutable_header() {
  ::cavnue::messages::common::v1::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.GroupedFrameSamples.header)
  return _msg;
}
inline void GroupedFrameSamples::set_allocated_header(::cavnue::messages::common::v1::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.GroupedFrameSamples.header)
}

// string zone = 2 [json_name = "zone"];
inline void GroupedFrameSamples::clear_zone() {
  _impl_.zone_.ClearToEmpty();
}
inline const std::string& GroupedFrameSamples::zone() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.GroupedFrameSamples.zone)
  return _internal_zone();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GroupedFrameSamples::set_zone(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.zone_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.GroupedFrameSamples.zone)
}
inline std::string* GroupedFrameSamples::mutable_zone() {
  std::string* _s = _internal_mutable_zone();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.GroupedFrameSamples.zone)
  return _s;
}
inline const std::string& GroupedFrameSamples::_internal_zone() const {
  return _impl_.zone_.Get();
}
inline void GroupedFrameSamples::_internal_set_zone(const std::string& value) {
  ;


  _impl_.zone_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupedFrameSamples::_internal_mutable_zone() {
  ;
  return _impl_.zone_.Mutable( GetArenaForAllocation());
}
inline std::string* GroupedFrameSamples::release_zone() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.GroupedFrameSamples.zone)
  return _impl_.zone_.Release();
}
inline void GroupedFrameSamples::set_allocated_zone(std::string* value) {
  _impl_.zone_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.zone_.IsDefault()) {
          _impl_.zone_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.GroupedFrameSamples.zone)
}

// repeated .cavnue.messages.inference.v1.FrameSamples frames = 3 [json_name = "frames"];
inline int GroupedFrameSamples::_internal_frames_size() const {
  return _impl_.frames_.size();
}
inline int GroupedFrameSamples::frames_size() const {
  return _internal_frames_size();
}
inline void GroupedFrameSamples::clear_frames() {
  _internal_mutable_frames()->Clear();
}
inline ::cavnue::messages::inference::v1::FrameSamples* GroupedFrameSamples::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.GroupedFrameSamples.frames)
  return _internal_mutable_frames()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::FrameSamples >*
GroupedFrameSamples::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.inference.v1.GroupedFrameSamples.frames)
  return _internal_mutable_frames();
}
inline const ::cavnue::messages::inference::v1::FrameSamples& GroupedFrameSamples::_internal_frames(int index) const {
  return _internal_frames().Get(index);
}
inline const ::cavnue::messages::inference::v1::FrameSamples& GroupedFrameSamples::frames(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.GroupedFrameSamples.frames)
  return _internal_frames(index);
}
inline ::cavnue::messages::inference::v1::FrameSamples* GroupedFrameSamples::_internal_add_frames() {
  return _internal_mutable_frames()->Add();
}
inline ::cavnue::messages::inference::v1::FrameSamples* GroupedFrameSamples::add_frames() {
  ::cavnue::messages::inference::v1::FrameSamples* _add = _internal_add_frames();
  // @@protoc_insertion_point(field_add:cavnue.messages.inference.v1.GroupedFrameSamples.frames)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::FrameSamples >&
GroupedFrameSamples::frames() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.inference.v1.GroupedFrameSamples.frames)
  return _internal_frames();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::FrameSamples>&
GroupedFrameSamples::_internal_frames() const {
  return _impl_.frames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::FrameSamples>*
GroupedFrameSamples::_internal_mutable_frames() {
  return &_impl_.frames_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace inference
}  // namespace messages
}  // namespace cavnue


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto_2epb_2eh

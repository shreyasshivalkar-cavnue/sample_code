// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/inference/v1/actor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2finference_2fv1_2factor_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2finference_2fv1_2factor_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "cavnue/messages/common/v1/common.pb.h"
#include "cavnue/messages/common/v1/field_options.pb.h"
#include "cavnue/messages/geometry/v1/bounding_box.pb.h"
#include "cavnue/messages/geometry/v1/covariance.pb.h"
#include "cavnue/messages/geometry/v1/scalar.pb.h"
#include "cavnue/messages/spatial/v1/utm.pb.h"
#include "google/protobuf/duration.pb.h"
#include "google/protobuf/timestamp.pb.h"
#include "google/protobuf/field_mask.pb.h"
#include "cavnue/third_party/bq/v1/bq_field.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cavnue_2fmessages_2finference_2fv1_2factor_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cavnue_2fmessages_2finference_2fv1_2factor_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cavnue_2fmessages_2finference_2fv1_2factor_2eproto;
namespace cavnue {
namespace messages {
namespace inference {
namespace v1 {
class Actor;
struct ActorDefaultTypeInternal;
extern ActorDefaultTypeInternal _Actor_default_instance_;
class Actor_ActorSize;
struct Actor_ActorSizeDefaultTypeInternal;
extern Actor_ActorSizeDefaultTypeInternal _Actor_ActorSize_default_instance_;
class Actor_Attribute;
struct Actor_AttributeDefaultTypeInternal;
extern Actor_AttributeDefaultTypeInternal _Actor_Attribute_default_instance_;
}  // namespace v1
}  // namespace inference
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template <>
::cavnue::messages::inference::v1::Actor* Arena::CreateMaybeMessage<::cavnue::messages::inference::v1::Actor>(Arena*);
template <>
::cavnue::messages::inference::v1::Actor_ActorSize* Arena::CreateMaybeMessage<::cavnue::messages::inference::v1::Actor_ActorSize>(Arena*);
template <>
::cavnue::messages::inference::v1::Actor_Attribute* Arena::CreateMaybeMessage<::cavnue::messages::inference::v1::Actor_Attribute>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cavnue {
namespace messages {
namespace inference {
namespace v1 {
enum Actor_Action : int {
  Actor_Action_ACTION_UNSPECIFIED = 0,
  Actor_Action_ACTION_UPDATE = 1,
  Actor_Action_ACTION_REMOVE = 2,
  Actor_Action_ACTION_ADD = 3,
  Actor_Action_Actor_Action_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Actor_Action_Actor_Action_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Actor_Action_IsValid(int value);
constexpr Actor_Action Actor_Action_Action_MIN = static_cast<Actor_Action>(0);
constexpr Actor_Action Actor_Action_Action_MAX = static_cast<Actor_Action>(3);
constexpr int Actor_Action_Action_ARRAYSIZE = 3 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
Actor_Action_descriptor();
template <typename T>
const std::string& Actor_Action_Name(T value) {
  static_assert(std::is_same<T, Actor_Action>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Action_Name().");
  return Actor_Action_Name(static_cast<Actor_Action>(value));
}
template <>
inline const std::string& Actor_Action_Name(Actor_Action value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<Actor_Action_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool Actor_Action_Parse(absl::string_view name, Actor_Action* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Actor_Action>(
      Actor_Action_descriptor(), name, value);
}
enum Actor_Severity : int {
  Actor_Severity_SEVERITY_UNSPECIFIED = 0,
  Actor_Severity_SEVERITY_HAZARD = 1,
  Actor_Severity_SEVERITY_OF_INTEREST = 2,
  Actor_Severity_Actor_Severity_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Actor_Severity_Actor_Severity_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Actor_Severity_IsValid(int value);
constexpr Actor_Severity Actor_Severity_Severity_MIN = static_cast<Actor_Severity>(0);
constexpr Actor_Severity Actor_Severity_Severity_MAX = static_cast<Actor_Severity>(2);
constexpr int Actor_Severity_Severity_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
Actor_Severity_descriptor();
template <typename T>
const std::string& Actor_Severity_Name(T value) {
  static_assert(std::is_same<T, Actor_Severity>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Severity_Name().");
  return Actor_Severity_Name(static_cast<Actor_Severity>(value));
}
template <>
inline const std::string& Actor_Severity_Name(Actor_Severity value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<Actor_Severity_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool Actor_Severity_Parse(absl::string_view name, Actor_Severity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Actor_Severity>(
      Actor_Severity_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Actor_ActorSize final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.inference.v1.Actor.ActorSize) */ {
 public:
  inline Actor_ActorSize() : Actor_ActorSize(nullptr) {}
  ~Actor_ActorSize() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Actor_ActorSize(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Actor_ActorSize(const Actor_ActorSize& from);
  Actor_ActorSize(Actor_ActorSize&& from) noexcept
    : Actor_ActorSize() {
    *this = ::std::move(from);
  }

  inline Actor_ActorSize& operator=(const Actor_ActorSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline Actor_ActorSize& operator=(Actor_ActorSize&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Actor_ActorSize& default_instance() {
    return *internal_default_instance();
  }
  static inline const Actor_ActorSize* internal_default_instance() {
    return reinterpret_cast<const Actor_ActorSize*>(
               &_Actor_ActorSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Actor_ActorSize& a, Actor_ActorSize& b) {
    a.Swap(&b);
  }
  inline void Swap(Actor_ActorSize* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Actor_ActorSize* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Actor_ActorSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Actor_ActorSize>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Actor_ActorSize& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Actor_ActorSize& from) {
    Actor_ActorSize::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Actor_ActorSize* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.inference.v1.Actor.ActorSize";
  }
  protected:
  explicit Actor_ActorSize(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // .cavnue.messages.geometry.v1.VarianceScalarf x = 1 [json_name = "x"];
  bool has_x() const;
  void clear_x() ;
  const ::cavnue::messages::geometry::v1::VarianceScalarf& x() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::VarianceScalarf* release_x();
  ::cavnue::messages::geometry::v1::VarianceScalarf* mutable_x();
  void set_allocated_x(::cavnue::messages::geometry::v1::VarianceScalarf* x);
  private:
  const ::cavnue::messages::geometry::v1::VarianceScalarf& _internal_x() const;
  ::cavnue::messages::geometry::v1::VarianceScalarf* _internal_mutable_x();
  public:
  void unsafe_arena_set_allocated_x(
      ::cavnue::messages::geometry::v1::VarianceScalarf* x);
  ::cavnue::messages::geometry::v1::VarianceScalarf* unsafe_arena_release_x();
  // .cavnue.messages.geometry.v1.VarianceScalarf y = 2 [json_name = "y"];
  bool has_y() const;
  void clear_y() ;
  const ::cavnue::messages::geometry::v1::VarianceScalarf& y() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::VarianceScalarf* release_y();
  ::cavnue::messages::geometry::v1::VarianceScalarf* mutable_y();
  void set_allocated_y(::cavnue::messages::geometry::v1::VarianceScalarf* y);
  private:
  const ::cavnue::messages::geometry::v1::VarianceScalarf& _internal_y() const;
  ::cavnue::messages::geometry::v1::VarianceScalarf* _internal_mutable_y();
  public:
  void unsafe_arena_set_allocated_y(
      ::cavnue::messages::geometry::v1::VarianceScalarf* y);
  ::cavnue::messages::geometry::v1::VarianceScalarf* unsafe_arena_release_y();
  // .cavnue.messages.geometry.v1.VarianceScalarf z = 3 [json_name = "z"];
  bool has_z() const;
  void clear_z() ;
  const ::cavnue::messages::geometry::v1::VarianceScalarf& z() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::VarianceScalarf* release_z();
  ::cavnue::messages::geometry::v1::VarianceScalarf* mutable_z();
  void set_allocated_z(::cavnue::messages::geometry::v1::VarianceScalarf* z);
  private:
  const ::cavnue::messages::geometry::v1::VarianceScalarf& _internal_z() const;
  ::cavnue::messages::geometry::v1::VarianceScalarf* _internal_mutable_z();
  public:
  void unsafe_arena_set_allocated_z(
      ::cavnue::messages::geometry::v1::VarianceScalarf* z);
  ::cavnue::messages::geometry::v1::VarianceScalarf* unsafe_arena_release_z();
  // @@protoc_insertion_point(class_scope:cavnue.messages.inference.v1.Actor.ActorSize)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::geometry::v1::VarianceScalarf* x_;
    ::cavnue::messages::geometry::v1::VarianceScalarf* y_;
    ::cavnue::messages::geometry::v1::VarianceScalarf* z_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2finference_2fv1_2factor_2eproto;
};// -------------------------------------------------------------------

class Actor_Attribute final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.inference.v1.Actor.Attribute) */ {
 public:
  inline Actor_Attribute() : Actor_Attribute(nullptr) {}
  ~Actor_Attribute() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Actor_Attribute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Actor_Attribute(const Actor_Attribute& from);
  Actor_Attribute(Actor_Attribute&& from) noexcept
    : Actor_Attribute() {
    *this = ::std::move(from);
  }

  inline Actor_Attribute& operator=(const Actor_Attribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline Actor_Attribute& operator=(Actor_Attribute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Actor_Attribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const Actor_Attribute* internal_default_instance() {
    return reinterpret_cast<const Actor_Attribute*>(
               &_Actor_Attribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Actor_Attribute& a, Actor_Attribute& b) {
    a.Swap(&b);
  }
  inline void Swap(Actor_Attribute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Actor_Attribute* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Actor_Attribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Actor_Attribute>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Actor_Attribute& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Actor_Attribute& from) {
    Actor_Attribute::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Actor_Attribute* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.inference.v1.Actor.Attribute";
  }
  protected:
  explicit Actor_Attribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTsFieldNumber = 1,
    kActiveFieldNumber = 2,
    kConfidenceFieldNumber = 3,
  };
  // .google.protobuf.Timestamp ts = 1 [json_name = "ts"];
  bool has_ts() const;
  void clear_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_ts();
  void set_allocated_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_ts();
  public:
  void unsafe_arena_set_allocated_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_ts();
  // bool active = 2 [json_name = "active"];
  void clear_active() ;
  bool active() const;
  void set_active(bool value);

  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);

  public:
  // float confidence = 3 [json_name = "confidence"];
  void clear_confidence() ;
  float confidence() const;
  void set_confidence(float value);

  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.inference.v1.Actor.Attribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_;
    bool active_;
    float confidence_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2finference_2fv1_2factor_2eproto;
};// -------------------------------------------------------------------

class Actor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.inference.v1.Actor) */ {
 public:
  inline Actor() : Actor(nullptr) {}
  ~Actor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Actor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Actor(const Actor& from);
  Actor(Actor&& from) noexcept
    : Actor() {
    *this = ::std::move(from);
  }

  inline Actor& operator=(const Actor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Actor& operator=(Actor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Actor& default_instance() {
    return *internal_default_instance();
  }
  static inline const Actor* internal_default_instance() {
    return reinterpret_cast<const Actor*>(
               &_Actor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Actor& a, Actor& b) {
    a.Swap(&b);
  }
  inline void Swap(Actor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Actor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Actor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Actor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Actor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Actor& from) {
    Actor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Actor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.inference.v1.Actor";
  }
  protected:
  explicit Actor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Actor_ActorSize ActorSize;
  typedef Actor_Attribute Attribute;

  using Action = Actor_Action;
  static constexpr Action ACTION_UNSPECIFIED = Actor_Action_ACTION_UNSPECIFIED;
  static constexpr Action ACTION_UPDATE = Actor_Action_ACTION_UPDATE;
  static constexpr Action ACTION_REMOVE = Actor_Action_ACTION_REMOVE;
  static constexpr Action ACTION_ADD = Actor_Action_ACTION_ADD;
  static inline bool Action_IsValid(int value) {
    return Actor_Action_IsValid(value);
  }
  static constexpr Action Action_MIN = Actor_Action_Action_MIN;
  static constexpr Action Action_MAX = Actor_Action_Action_MAX;
  static constexpr int Action_ARRAYSIZE = Actor_Action_Action_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Action_descriptor() {
    return Actor_Action_descriptor();
  }
  template <typename T>
  static inline const std::string& Action_Name(T value) {
    return Actor_Action_Name(value);
  }
  static inline bool Action_Parse(absl::string_view name, Action* value) {
    return Actor_Action_Parse(name, value);
  }

  using Severity = Actor_Severity;
  static constexpr Severity SEVERITY_UNSPECIFIED = Actor_Severity_SEVERITY_UNSPECIFIED;
  static constexpr Severity SEVERITY_HAZARD = Actor_Severity_SEVERITY_HAZARD;
  static constexpr Severity SEVERITY_OF_INTEREST = Actor_Severity_SEVERITY_OF_INTEREST;
  static inline bool Severity_IsValid(int value) {
    return Actor_Severity_IsValid(value);
  }
  static constexpr Severity Severity_MIN = Actor_Severity_Severity_MIN;
  static constexpr Severity Severity_MAX = Actor_Severity_Severity_MAX;
  static constexpr int Severity_ARRAYSIZE = Actor_Severity_Severity_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Severity_descriptor() {
    return Actor_Severity_descriptor();
  }
  template <typename T>
  static inline const std::string& Severity_Name(T value) {
    return Actor_Severity_Name(value);
  }
  static inline bool Severity_Parse(absl::string_view name, Severity* value) {
    return Actor_Severity_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kObservationTsFieldNumber = 2,
    kObservationDurationFieldNumber = 3,
    kDataSourceFieldNumber = 4,
    kPositionFieldNumber = 8,
    kVelocityFieldNumber = 9,
    kAccelerationFieldNumber = 10,
    kProjectionFieldNumber = 11,
    kSizeFieldNumber = 13,
    kBboxFieldNumber = 14,
    kSpeedingFieldNumber = 16,
    kImpedingFieldNumber = 17,
    kStationaryFieldNumber = 18,
    kUpdateMaskFieldNumber = 19,
    kCollisionFieldNumber = 20,
    kActorIdFieldNumber = 6,
    kActionFieldNumber = 5,
    kClassificationFieldNumber = 7,
    kLaneFieldNumber = 12,
    kSeverityFieldNumber = 15,
  };
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  bool has_header() const;
  void clear_header() ;
  const ::cavnue::messages::common::v1::Header& header() const;
  PROTOBUF_NODISCARD ::cavnue::messages::common::v1::Header* release_header();
  ::cavnue::messages::common::v1::Header* mutable_header();
  void set_allocated_header(::cavnue::messages::common::v1::Header* header);
  private:
  const ::cavnue::messages::common::v1::Header& _internal_header() const;
  ::cavnue::messages::common::v1::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::cavnue::messages::common::v1::Header* header);
  ::cavnue::messages::common::v1::Header* unsafe_arena_release_header();
  // .google.protobuf.Timestamp observation_ts = 2 [json_name = "observationTs"];
  bool has_observation_ts() const;
  void clear_observation_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& observation_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_observation_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_observation_ts();
  void set_allocated_observation_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* observation_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_observation_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_observation_ts();
  public:
  void unsafe_arena_set_allocated_observation_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* observation_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_observation_ts();
  // .google.protobuf.Duration observation_duration = 3 [json_name = "observationDuration"];
  bool has_observation_duration() const;
  void clear_observation_duration() ;
  const ::PROTOBUF_NAMESPACE_ID::Duration& observation_duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_observation_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_observation_duration();
  void set_allocated_observation_duration(::PROTOBUF_NAMESPACE_ID::Duration* observation_duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_observation_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_observation_duration();
  public:
  void unsafe_arena_set_allocated_observation_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* observation_duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_observation_duration();
  // .cavnue.messages.common.v1.DataSource data_source = 4 [json_name = "dataSource"];
  bool has_data_source() const;
  void clear_data_source() ;
  const ::cavnue::messages::common::v1::DataSource& data_source() const;
  PROTOBUF_NODISCARD ::cavnue::messages::common::v1::DataSource* release_data_source();
  ::cavnue::messages::common::v1::DataSource* mutable_data_source();
  void set_allocated_data_source(::cavnue::messages::common::v1::DataSource* data_source);
  private:
  const ::cavnue::messages::common::v1::DataSource& _internal_data_source() const;
  ::cavnue::messages::common::v1::DataSource* _internal_mutable_data_source();
  public:
  void unsafe_arena_set_allocated_data_source(
      ::cavnue::messages::common::v1::DataSource* data_source);
  ::cavnue::messages::common::v1::DataSource* unsafe_arena_release_data_source();
  // .cavnue.messages.geometry.v1.CovarianceVector3d position = 8 [json_name = "position", (.cavnue.messages.common.v1.units) = UNITS_METERS];
  bool has_position() const;
  void clear_position() ;
  const ::cavnue::messages::geometry::v1::CovarianceVector3d& position() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::CovarianceVector3d* release_position();
  ::cavnue::messages::geometry::v1::CovarianceVector3d* mutable_position();
  void set_allocated_position(::cavnue::messages::geometry::v1::CovarianceVector3d* position);
  private:
  const ::cavnue::messages::geometry::v1::CovarianceVector3d& _internal_position() const;
  ::cavnue::messages::geometry::v1::CovarianceVector3d* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::cavnue::messages::geometry::v1::CovarianceVector3d* position);
  ::cavnue::messages::geometry::v1::CovarianceVector3d* unsafe_arena_release_position();
  // .cavnue.messages.geometry.v1.CovarianceVector3f velocity = 9 [json_name = "velocity", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
  bool has_velocity() const;
  void clear_velocity() ;
  const ::cavnue::messages::geometry::v1::CovarianceVector3f& velocity() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::CovarianceVector3f* release_velocity();
  ::cavnue::messages::geometry::v1::CovarianceVector3f* mutable_velocity();
  void set_allocated_velocity(::cavnue::messages::geometry::v1::CovarianceVector3f* velocity);
  private:
  const ::cavnue::messages::geometry::v1::CovarianceVector3f& _internal_velocity() const;
  ::cavnue::messages::geometry::v1::CovarianceVector3f* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::cavnue::messages::geometry::v1::CovarianceVector3f* velocity);
  ::cavnue::messages::geometry::v1::CovarianceVector3f* unsafe_arena_release_velocity();
  // .cavnue.messages.geometry.v1.CovarianceVector2f acceleration = 10 [json_name = "acceleration", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND_SQUARED];
  bool has_acceleration() const;
  void clear_acceleration() ;
  const ::cavnue::messages::geometry::v1::CovarianceVector2f& acceleration() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::CovarianceVector2f* release_acceleration();
  ::cavnue::messages::geometry::v1::CovarianceVector2f* mutable_acceleration();
  void set_allocated_acceleration(::cavnue::messages::geometry::v1::CovarianceVector2f* acceleration);
  private:
  const ::cavnue::messages::geometry::v1::CovarianceVector2f& _internal_acceleration() const;
  ::cavnue::messages::geometry::v1::CovarianceVector2f* _internal_mutable_acceleration();
  public:
  void unsafe_arena_set_allocated_acceleration(
      ::cavnue::messages::geometry::v1::CovarianceVector2f* acceleration);
  ::cavnue::messages::geometry::v1::CovarianceVector2f* unsafe_arena_release_acceleration();
  // .cavnue.messages.spatial.v1.UTMProjection projection = 11 [json_name = "projection"];
  bool has_projection() const;
  void clear_projection() ;
  const ::cavnue::messages::spatial::v1::UTMProjection& projection() const;
  PROTOBUF_NODISCARD ::cavnue::messages::spatial::v1::UTMProjection* release_projection();
  ::cavnue::messages::spatial::v1::UTMProjection* mutable_projection();
  void set_allocated_projection(::cavnue::messages::spatial::v1::UTMProjection* projection);
  private:
  const ::cavnue::messages::spatial::v1::UTMProjection& _internal_projection() const;
  ::cavnue::messages::spatial::v1::UTMProjection* _internal_mutable_projection();
  public:
  void unsafe_arena_set_allocated_projection(
      ::cavnue::messages::spatial::v1::UTMProjection* projection);
  ::cavnue::messages::spatial::v1::UTMProjection* unsafe_arena_release_projection();
  // optional .cavnue.messages.inference.v1.Actor.ActorSize size = 13 [json_name = "size", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_ENU];
  bool has_size() const;
  void clear_size() ;
  const ::cavnue::messages::inference::v1::Actor_ActorSize& size() const;
  PROTOBUF_NODISCARD ::cavnue::messages::inference::v1::Actor_ActorSize* release_size();
  ::cavnue::messages::inference::v1::Actor_ActorSize* mutable_size();
  void set_allocated_size(::cavnue::messages::inference::v1::Actor_ActorSize* size);
  private:
  const ::cavnue::messages::inference::v1::Actor_ActorSize& _internal_size() const;
  ::cavnue::messages::inference::v1::Actor_ActorSize* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::cavnue::messages::inference::v1::Actor_ActorSize* size);
  ::cavnue::messages::inference::v1::Actor_ActorSize* unsafe_arena_release_size();
  // .cavnue.messages.geometry.v1.BoundingBox2f bbox = 14 [json_name = "bbox"];
  bool has_bbox() const;
  void clear_bbox() ;
  const ::cavnue::messages::geometry::v1::BoundingBox2f& bbox() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::BoundingBox2f* release_bbox();
  ::cavnue::messages::geometry::v1::BoundingBox2f* mutable_bbox();
  void set_allocated_bbox(::cavnue::messages::geometry::v1::BoundingBox2f* bbox);
  private:
  const ::cavnue::messages::geometry::v1::BoundingBox2f& _internal_bbox() const;
  ::cavnue::messages::geometry::v1::BoundingBox2f* _internal_mutable_bbox();
  public:
  void unsafe_arena_set_allocated_bbox(
      ::cavnue::messages::geometry::v1::BoundingBox2f* bbox);
  ::cavnue::messages::geometry::v1::BoundingBox2f* unsafe_arena_release_bbox();
  // .cavnue.messages.inference.v1.Actor.Attribute speeding = 16 [json_name = "speeding"];
  bool has_speeding() const;
  void clear_speeding() ;
  const ::cavnue::messages::inference::v1::Actor_Attribute& speeding() const;
  PROTOBUF_NODISCARD ::cavnue::messages::inference::v1::Actor_Attribute* release_speeding();
  ::cavnue::messages::inference::v1::Actor_Attribute* mutable_speeding();
  void set_allocated_speeding(::cavnue::messages::inference::v1::Actor_Attribute* speeding);
  private:
  const ::cavnue::messages::inference::v1::Actor_Attribute& _internal_speeding() const;
  ::cavnue::messages::inference::v1::Actor_Attribute* _internal_mutable_speeding();
  public:
  void unsafe_arena_set_allocated_speeding(
      ::cavnue::messages::inference::v1::Actor_Attribute* speeding);
  ::cavnue::messages::inference::v1::Actor_Attribute* unsafe_arena_release_speeding();
  // .cavnue.messages.inference.v1.Actor.Attribute impeding = 17 [json_name = "impeding"];
  bool has_impeding() const;
  void clear_impeding() ;
  const ::cavnue::messages::inference::v1::Actor_Attribute& impeding() const;
  PROTOBUF_NODISCARD ::cavnue::messages::inference::v1::Actor_Attribute* release_impeding();
  ::cavnue::messages::inference::v1::Actor_Attribute* mutable_impeding();
  void set_allocated_impeding(::cavnue::messages::inference::v1::Actor_Attribute* impeding);
  private:
  const ::cavnue::messages::inference::v1::Actor_Attribute& _internal_impeding() const;
  ::cavnue::messages::inference::v1::Actor_Attribute* _internal_mutable_impeding();
  public:
  void unsafe_arena_set_allocated_impeding(
      ::cavnue::messages::inference::v1::Actor_Attribute* impeding);
  ::cavnue::messages::inference::v1::Actor_Attribute* unsafe_arena_release_impeding();
  // .cavnue.messages.inference.v1.Actor.Attribute stationary = 18 [json_name = "stationary"];
  bool has_stationary() const;
  void clear_stationary() ;
  const ::cavnue::messages::inference::v1::Actor_Attribute& stationary() const;
  PROTOBUF_NODISCARD ::cavnue::messages::inference::v1::Actor_Attribute* release_stationary();
  ::cavnue::messages::inference::v1::Actor_Attribute* mutable_stationary();
  void set_allocated_stationary(::cavnue::messages::inference::v1::Actor_Attribute* stationary);
  private:
  const ::cavnue::messages::inference::v1::Actor_Attribute& _internal_stationary() const;
  ::cavnue::messages::inference::v1::Actor_Attribute* _internal_mutable_stationary();
  public:
  void unsafe_arena_set_allocated_stationary(
      ::cavnue::messages::inference::v1::Actor_Attribute* stationary);
  ::cavnue::messages::inference::v1::Actor_Attribute* unsafe_arena_release_stationary();
  // .google.protobuf.FieldMask update_mask = 19 [json_name = "updateMask", (.gen_bq_schema.bigquery) = {
  bool has_update_mask() const;
  void clear_update_mask() ;
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();
  // .cavnue.messages.inference.v1.Actor.Attribute collision = 20 [json_name = "collision"];
  bool has_collision() const;
  void clear_collision() ;
  const ::cavnue::messages::inference::v1::Actor_Attribute& collision() const;
  PROTOBUF_NODISCARD ::cavnue::messages::inference::v1::Actor_Attribute* release_collision();
  ::cavnue::messages::inference::v1::Actor_Attribute* mutable_collision();
  void set_allocated_collision(::cavnue::messages::inference::v1::Actor_Attribute* collision);
  private:
  const ::cavnue::messages::inference::v1::Actor_Attribute& _internal_collision() const;
  ::cavnue::messages::inference::v1::Actor_Attribute* _internal_mutable_collision();
  public:
  void unsafe_arena_set_allocated_collision(
      ::cavnue::messages::inference::v1::Actor_Attribute* collision);
  ::cavnue::messages::inference::v1::Actor_Attribute* unsafe_arena_release_collision();
  // int64 actor_id = 6 [json_name = "actorId"];
  void clear_actor_id() ;
  ::int64_t actor_id() const;
  void set_actor_id(::int64_t value);

  private:
  ::int64_t _internal_actor_id() const;
  void _internal_set_actor_id(::int64_t value);

  public:
  // .cavnue.messages.inference.v1.Actor.Action action = 5 [json_name = "action"];
  void clear_action() ;
  ::cavnue::messages::inference::v1::Actor_Action action() const;
  void set_action(::cavnue::messages::inference::v1::Actor_Action value);

  private:
  ::cavnue::messages::inference::v1::Actor_Action _internal_action() const;
  void _internal_set_action(::cavnue::messages::inference::v1::Actor_Action value);

  public:
  // .cavnue.messages.common.v1.Classification classification = 7 [json_name = "classification"];
  void clear_classification() ;
  ::cavnue::messages::common::v1::Classification classification() const;
  void set_classification(::cavnue::messages::common::v1::Classification value);

  private:
  ::cavnue::messages::common::v1::Classification _internal_classification() const;
  void _internal_set_classification(::cavnue::messages::common::v1::Classification value);

  public:
  // optional int32 lane = 12 [json_name = "lane"];
  bool has_lane() const;
  void clear_lane() ;
  ::int32_t lane() const;
  void set_lane(::int32_t value);

  private:
  ::int32_t _internal_lane() const;
  void _internal_set_lane(::int32_t value);

  public:
  // .cavnue.messages.inference.v1.Actor.Severity severity = 15 [json_name = "severity"];
  void clear_severity() ;
  ::cavnue::messages::inference::v1::Actor_Severity severity() const;
  void set_severity(::cavnue::messages::inference::v1::Actor_Severity value);

  private:
  ::cavnue::messages::inference::v1::Actor_Severity _internal_severity() const;
  void _internal_set_severity(::cavnue::messages::inference::v1::Actor_Severity value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.inference.v1.Actor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::common::v1::Header* header_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* observation_ts_;
    ::PROTOBUF_NAMESPACE_ID::Duration* observation_duration_;
    ::cavnue::messages::common::v1::DataSource* data_source_;
    ::cavnue::messages::geometry::v1::CovarianceVector3d* position_;
    ::cavnue::messages::geometry::v1::CovarianceVector3f* velocity_;
    ::cavnue::messages::geometry::v1::CovarianceVector2f* acceleration_;
    ::cavnue::messages::spatial::v1::UTMProjection* projection_;
    ::cavnue::messages::inference::v1::Actor_ActorSize* size_;
    ::cavnue::messages::geometry::v1::BoundingBox2f* bbox_;
    ::cavnue::messages::inference::v1::Actor_Attribute* speeding_;
    ::cavnue::messages::inference::v1::Actor_Attribute* impeding_;
    ::cavnue::messages::inference::v1::Actor_Attribute* stationary_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
    ::cavnue::messages::inference::v1::Actor_Attribute* collision_;
    ::int64_t actor_id_;
    int action_;
    int classification_;
    ::int32_t lane_;
    int severity_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2finference_2fv1_2factor_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Actor_ActorSize

// .cavnue.messages.geometry.v1.VarianceScalarf x = 1 [json_name = "x"];
inline bool Actor_ActorSize::has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.x_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::VarianceScalarf& Actor_ActorSize::_internal_x() const {
  const ::cavnue::messages::geometry::v1::VarianceScalarf* p = _impl_.x_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::VarianceScalarf&>(
      ::cavnue::messages::geometry::v1::_VarianceScalarf_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::VarianceScalarf& Actor_ActorSize::x() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Actor.ActorSize.x)
  return _internal_x();
}
inline void Actor_ActorSize::unsafe_arena_set_allocated_x(
    ::cavnue::messages::geometry::v1::VarianceScalarf* x) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.x_);
  }
  _impl_.x_ = x;
  if (x) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.Actor.ActorSize.x)
}
inline ::cavnue::messages::geometry::v1::VarianceScalarf* Actor_ActorSize::release_x() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::VarianceScalarf* temp = _impl_.x_;
  _impl_.x_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::VarianceScalarf* Actor_ActorSize::unsafe_arena_release_x() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.Actor.ActorSize.x)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::VarianceScalarf* temp = _impl_.x_;
  _impl_.x_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::VarianceScalarf* Actor_ActorSize::_internal_mutable_x() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.x_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::VarianceScalarf>(GetArenaForAllocation());
    _impl_.x_ = p;
  }
  return _impl_.x_;
}
inline ::cavnue::messages::geometry::v1::VarianceScalarf* Actor_ActorSize::mutable_x() {
  ::cavnue::messages::geometry::v1::VarianceScalarf* _msg = _internal_mutable_x();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.Actor.ActorSize.x)
  return _msg;
}
inline void Actor_ActorSize::set_allocated_x(::cavnue::messages::geometry::v1::VarianceScalarf* x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.x_);
  }
  if (x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(x));
    if (message_arena != submessage_arena) {
      x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, x, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.x_ = x;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.Actor.ActorSize.x)
}

// .cavnue.messages.geometry.v1.VarianceScalarf y = 2 [json_name = "y"];
inline bool Actor_ActorSize::has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.y_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::VarianceScalarf& Actor_ActorSize::_internal_y() const {
  const ::cavnue::messages::geometry::v1::VarianceScalarf* p = _impl_.y_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::VarianceScalarf&>(
      ::cavnue::messages::geometry::v1::_VarianceScalarf_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::VarianceScalarf& Actor_ActorSize::y() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Actor.ActorSize.y)
  return _internal_y();
}
inline void Actor_ActorSize::unsafe_arena_set_allocated_y(
    ::cavnue::messages::geometry::v1::VarianceScalarf* y) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.y_);
  }
  _impl_.y_ = y;
  if (y) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.Actor.ActorSize.y)
}
inline ::cavnue::messages::geometry::v1::VarianceScalarf* Actor_ActorSize::release_y() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::geometry::v1::VarianceScalarf* temp = _impl_.y_;
  _impl_.y_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::VarianceScalarf* Actor_ActorSize::unsafe_arena_release_y() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.Actor.ActorSize.y)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::geometry::v1::VarianceScalarf* temp = _impl_.y_;
  _impl_.y_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::VarianceScalarf* Actor_ActorSize::_internal_mutable_y() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.y_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::VarianceScalarf>(GetArenaForAllocation());
    _impl_.y_ = p;
  }
  return _impl_.y_;
}
inline ::cavnue::messages::geometry::v1::VarianceScalarf* Actor_ActorSize::mutable_y() {
  ::cavnue::messages::geometry::v1::VarianceScalarf* _msg = _internal_mutable_y();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.Actor.ActorSize.y)
  return _msg;
}
inline void Actor_ActorSize::set_allocated_y(::cavnue::messages::geometry::v1::VarianceScalarf* y) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.y_);
  }
  if (y) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(y));
    if (message_arena != submessage_arena) {
      y = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, y, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.y_ = y;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.Actor.ActorSize.y)
}

// .cavnue.messages.geometry.v1.VarianceScalarf z = 3 [json_name = "z"];
inline bool Actor_ActorSize::has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.z_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::VarianceScalarf& Actor_ActorSize::_internal_z() const {
  const ::cavnue::messages::geometry::v1::VarianceScalarf* p = _impl_.z_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::VarianceScalarf&>(
      ::cavnue::messages::geometry::v1::_VarianceScalarf_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::VarianceScalarf& Actor_ActorSize::z() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Actor.ActorSize.z)
  return _internal_z();
}
inline void Actor_ActorSize::unsafe_arena_set_allocated_z(
    ::cavnue::messages::geometry::v1::VarianceScalarf* z) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.z_);
  }
  _impl_.z_ = z;
  if (z) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.Actor.ActorSize.z)
}
inline ::cavnue::messages::geometry::v1::VarianceScalarf* Actor_ActorSize::release_z() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::cavnue::messages::geometry::v1::VarianceScalarf* temp = _impl_.z_;
  _impl_.z_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::VarianceScalarf* Actor_ActorSize::unsafe_arena_release_z() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.Actor.ActorSize.z)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::cavnue::messages::geometry::v1::VarianceScalarf* temp = _impl_.z_;
  _impl_.z_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::VarianceScalarf* Actor_ActorSize::_internal_mutable_z() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.z_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::VarianceScalarf>(GetArenaForAllocation());
    _impl_.z_ = p;
  }
  return _impl_.z_;
}
inline ::cavnue::messages::geometry::v1::VarianceScalarf* Actor_ActorSize::mutable_z() {
  ::cavnue::messages::geometry::v1::VarianceScalarf* _msg = _internal_mutable_z();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.Actor.ActorSize.z)
  return _msg;
}
inline void Actor_ActorSize::set_allocated_z(::cavnue::messages::geometry::v1::VarianceScalarf* z) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.z_);
  }
  if (z) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(z));
    if (message_arena != submessage_arena) {
      z = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, z, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.z_ = z;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.Actor.ActorSize.z)
}

// -------------------------------------------------------------------

// Actor_Attribute

// .google.protobuf.Timestamp ts = 1 [json_name = "ts"];
inline bool Actor_Attribute::has_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Actor_Attribute::_internal_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Actor_Attribute::ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Actor.Attribute.ts)
  return _internal_ts();
}
inline void Actor_Attribute::unsafe_arena_set_allocated_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_);
  }
  _impl_.ts_ = ts;
  if (ts) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.Actor.Attribute.ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Actor_Attribute::release_ts() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_;
  _impl_.ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Actor_Attribute::unsafe_arena_release_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.Actor.Attribute.ts)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_;
  _impl_.ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Actor_Attribute::_internal_mutable_ts() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.ts_ = p;
  }
  return _impl_.ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Actor_Attribute::mutable_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.Actor.Attribute.ts)
  return _msg;
}
inline void Actor_Attribute::set_allocated_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_);
  }
  if (ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts));
    if (message_arena != submessage_arena) {
      ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ts_ = ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.Actor.Attribute.ts)
}

// bool active = 2 [json_name = "active"];
inline void Actor_Attribute::clear_active() {
  _impl_.active_ = false;
}
inline bool Actor_Attribute::active() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Actor.Attribute.active)
  return _internal_active();
}
inline void Actor_Attribute::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.Actor.Attribute.active)
}
inline bool Actor_Attribute::_internal_active() const {
  return _impl_.active_;
}
inline void Actor_Attribute::_internal_set_active(bool value) {
  ;
  _impl_.active_ = value;
}

// float confidence = 3 [json_name = "confidence"];
inline void Actor_Attribute::clear_confidence() {
  _impl_.confidence_ = 0;
}
inline float Actor_Attribute::confidence() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Actor.Attribute.confidence)
  return _internal_confidence();
}
inline void Actor_Attribute::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.Actor.Attribute.confidence)
}
inline float Actor_Attribute::_internal_confidence() const {
  return _impl_.confidence_;
}
inline void Actor_Attribute::_internal_set_confidence(float value) {
  ;
  _impl_.confidence_ = value;
}

// -------------------------------------------------------------------

// Actor

// .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
inline bool Actor::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::cavnue::messages::common::v1::Header& Actor::_internal_header() const {
  const ::cavnue::messages::common::v1::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::common::v1::Header&>(
      ::cavnue::messages::common::v1::_Header_default_instance_);
}
inline const ::cavnue::messages::common::v1::Header& Actor::header() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Actor.header)
  return _internal_header();
}
inline void Actor::unsafe_arena_set_allocated_header(
    ::cavnue::messages::common::v1::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.Actor.header)
}
inline ::cavnue::messages::common::v1::Header* Actor::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::common::v1::Header* Actor::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.Actor.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::cavnue::messages::common::v1::Header* Actor::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::common::v1::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::cavnue::messages::common::v1::Header* Actor::mutable_header() {
  ::cavnue::messages::common::v1::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.Actor.header)
  return _msg;
}
inline void Actor::set_allocated_header(::cavnue::messages::common::v1::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.Actor.header)
}

// .google.protobuf.Timestamp observation_ts = 2 [json_name = "observationTs"];
inline bool Actor::has_observation_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.observation_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Actor::_internal_observation_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.observation_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Actor::observation_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Actor.observation_ts)
  return _internal_observation_ts();
}
inline void Actor::unsafe_arena_set_allocated_observation_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* observation_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observation_ts_);
  }
  _impl_.observation_ts_ = observation_ts;
  if (observation_ts) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.Actor.observation_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Actor::release_observation_ts() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.observation_ts_;
  _impl_.observation_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Actor::unsafe_arena_release_observation_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.Actor.observation_ts)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.observation_ts_;
  _impl_.observation_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Actor::_internal_mutable_observation_ts() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.observation_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.observation_ts_ = p;
  }
  return _impl_.observation_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Actor::mutable_observation_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_observation_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.Actor.observation_ts)
  return _msg;
}
inline void Actor::set_allocated_observation_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* observation_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observation_ts_);
  }
  if (observation_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(observation_ts));
    if (message_arena != submessage_arena) {
      observation_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observation_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.observation_ts_ = observation_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.Actor.observation_ts)
}

// .google.protobuf.Duration observation_duration = 3 [json_name = "observationDuration"];
inline bool Actor::has_observation_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.observation_duration_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Actor::_internal_observation_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.observation_duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Actor::observation_duration() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Actor.observation_duration)
  return _internal_observation_duration();
}
inline void Actor::unsafe_arena_set_allocated_observation_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* observation_duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observation_duration_);
  }
  _impl_.observation_duration_ = observation_duration;
  if (observation_duration) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.Actor.observation_duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Actor::release_observation_duration() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.observation_duration_;
  _impl_.observation_duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Actor::unsafe_arena_release_observation_duration() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.Actor.observation_duration)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.observation_duration_;
  _impl_.observation_duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Actor::_internal_mutable_observation_duration() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.observation_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.observation_duration_ = p;
  }
  return _impl_.observation_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Actor::mutable_observation_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_observation_duration();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.Actor.observation_duration)
  return _msg;
}
inline void Actor::set_allocated_observation_duration(::PROTOBUF_NAMESPACE_ID::Duration* observation_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observation_duration_);
  }
  if (observation_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(observation_duration));
    if (message_arena != submessage_arena) {
      observation_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observation_duration, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.observation_duration_ = observation_duration;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.Actor.observation_duration)
}

// .cavnue.messages.common.v1.DataSource data_source = 4 [json_name = "dataSource"];
inline bool Actor::has_data_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_source_ != nullptr);
  return value;
}
inline const ::cavnue::messages::common::v1::DataSource& Actor::_internal_data_source() const {
  const ::cavnue::messages::common::v1::DataSource* p = _impl_.data_source_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::common::v1::DataSource&>(
      ::cavnue::messages::common::v1::_DataSource_default_instance_);
}
inline const ::cavnue::messages::common::v1::DataSource& Actor::data_source() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Actor.data_source)
  return _internal_data_source();
}
inline void Actor::unsafe_arena_set_allocated_data_source(
    ::cavnue::messages::common::v1::DataSource* data_source) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_source_);
  }
  _impl_.data_source_ = data_source;
  if (data_source) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.Actor.data_source)
}
inline ::cavnue::messages::common::v1::DataSource* Actor::release_data_source() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::cavnue::messages::common::v1::DataSource* temp = _impl_.data_source_;
  _impl_.data_source_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::common::v1::DataSource* Actor::unsafe_arena_release_data_source() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.Actor.data_source)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::cavnue::messages::common::v1::DataSource* temp = _impl_.data_source_;
  _impl_.data_source_ = nullptr;
  return temp;
}
inline ::cavnue::messages::common::v1::DataSource* Actor::_internal_mutable_data_source() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.data_source_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::common::v1::DataSource>(GetArenaForAllocation());
    _impl_.data_source_ = p;
  }
  return _impl_.data_source_;
}
inline ::cavnue::messages::common::v1::DataSource* Actor::mutable_data_source() {
  ::cavnue::messages::common::v1::DataSource* _msg = _internal_mutable_data_source();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.Actor.data_source)
  return _msg;
}
inline void Actor::set_allocated_data_source(::cavnue::messages::common::v1::DataSource* data_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_source_);
  }
  if (data_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_source));
    if (message_arena != submessage_arena) {
      data_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_source, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.data_source_ = data_source;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.Actor.data_source)
}

// .cavnue.messages.inference.v1.Actor.Action action = 5 [json_name = "action"];
inline void Actor::clear_action() {
  _impl_.action_ = 0;
}
inline ::cavnue::messages::inference::v1::Actor_Action Actor::action() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Actor.action)
  return _internal_action();
}
inline void Actor::set_action(::cavnue::messages::inference::v1::Actor_Action value) {
   _internal_set_action(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.Actor.action)
}
inline ::cavnue::messages::inference::v1::Actor_Action Actor::_internal_action() const {
  return static_cast<::cavnue::messages::inference::v1::Actor_Action>(_impl_.action_);
}
inline void Actor::_internal_set_action(::cavnue::messages::inference::v1::Actor_Action value) {
  ;
  _impl_.action_ = value;
}

// int64 actor_id = 6 [json_name = "actorId"];
inline void Actor::clear_actor_id() {
  _impl_.actor_id_ = ::int64_t{0};
}
inline ::int64_t Actor::actor_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Actor.actor_id)
  return _internal_actor_id();
}
inline void Actor::set_actor_id(::int64_t value) {
  _internal_set_actor_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.Actor.actor_id)
}
inline ::int64_t Actor::_internal_actor_id() const {
  return _impl_.actor_id_;
}
inline void Actor::_internal_set_actor_id(::int64_t value) {
  ;
  _impl_.actor_id_ = value;
}

// .cavnue.messages.common.v1.Classification classification = 7 [json_name = "classification"];
inline void Actor::clear_classification() {
  _impl_.classification_ = 0;
}
inline ::cavnue::messages::common::v1::Classification Actor::classification() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Actor.classification)
  return _internal_classification();
}
inline void Actor::set_classification(::cavnue::messages::common::v1::Classification value) {
   _internal_set_classification(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.Actor.classification)
}
inline ::cavnue::messages::common::v1::Classification Actor::_internal_classification() const {
  return static_cast<::cavnue::messages::common::v1::Classification>(_impl_.classification_);
}
inline void Actor::_internal_set_classification(::cavnue::messages::common::v1::Classification value) {
  ;
  _impl_.classification_ = value;
}

// .cavnue.messages.geometry.v1.CovarianceVector3d position = 8 [json_name = "position", (.cavnue.messages.common.v1.units) = UNITS_METERS];
inline bool Actor::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::CovarianceVector3d& Actor::_internal_position() const {
  const ::cavnue::messages::geometry::v1::CovarianceVector3d* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::CovarianceVector3d&>(
      ::cavnue::messages::geometry::v1::_CovarianceVector3d_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::CovarianceVector3d& Actor::position() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Actor.position)
  return _internal_position();
}
inline void Actor::unsafe_arena_set_allocated_position(
    ::cavnue::messages::geometry::v1::CovarianceVector3d* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.Actor.position)
}
inline ::cavnue::messages::geometry::v1::CovarianceVector3d* Actor::release_position() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::cavnue::messages::geometry::v1::CovarianceVector3d* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::CovarianceVector3d* Actor::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.Actor.position)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::cavnue::messages::geometry::v1::CovarianceVector3d* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::CovarianceVector3d* Actor::_internal_mutable_position() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::CovarianceVector3d>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::cavnue::messages::geometry::v1::CovarianceVector3d* Actor::mutable_position() {
  ::cavnue::messages::geometry::v1::CovarianceVector3d* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.Actor.position)
  return _msg;
}
inline void Actor::set_allocated_position(::cavnue::messages::geometry::v1::CovarianceVector3d* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.Actor.position)
}

// .cavnue.messages.geometry.v1.CovarianceVector3f velocity = 9 [json_name = "velocity", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
inline bool Actor::has_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.velocity_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::CovarianceVector3f& Actor::_internal_velocity() const {
  const ::cavnue::messages::geometry::v1::CovarianceVector3f* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::CovarianceVector3f&>(
      ::cavnue::messages::geometry::v1::_CovarianceVector3f_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::CovarianceVector3f& Actor::velocity() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Actor.velocity)
  return _internal_velocity();
}
inline void Actor::unsafe_arena_set_allocated_velocity(
    ::cavnue::messages::geometry::v1::CovarianceVector3f* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = velocity;
  if (velocity) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.Actor.velocity)
}
inline ::cavnue::messages::geometry::v1::CovarianceVector3f* Actor::release_velocity() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::cavnue::messages::geometry::v1::CovarianceVector3f* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::CovarianceVector3f* Actor::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.Actor.velocity)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::cavnue::messages::geometry::v1::CovarianceVector3f* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::CovarianceVector3f* Actor::_internal_mutable_velocity() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::CovarianceVector3f>(GetArenaForAllocation());
    _impl_.velocity_ = p;
  }
  return _impl_.velocity_;
}
inline ::cavnue::messages::geometry::v1::CovarianceVector3f* Actor::mutable_velocity() {
  ::cavnue::messages::geometry::v1::CovarianceVector3f* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.Actor.velocity)
  return _msg;
}
inline void Actor::set_allocated_velocity(::cavnue::messages::geometry::v1::CovarianceVector3f* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity));
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.Actor.velocity)
}

// .cavnue.messages.geometry.v1.CovarianceVector2f acceleration = 10 [json_name = "acceleration", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND_SQUARED];
inline bool Actor::has_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.acceleration_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::CovarianceVector2f& Actor::_internal_acceleration() const {
  const ::cavnue::messages::geometry::v1::CovarianceVector2f* p = _impl_.acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::CovarianceVector2f&>(
      ::cavnue::messages::geometry::v1::_CovarianceVector2f_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::CovarianceVector2f& Actor::acceleration() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Actor.acceleration)
  return _internal_acceleration();
}
inline void Actor::unsafe_arena_set_allocated_acceleration(
    ::cavnue::messages::geometry::v1::CovarianceVector2f* acceleration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.acceleration_);
  }
  _impl_.acceleration_ = acceleration;
  if (acceleration) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.Actor.acceleration)
}
inline ::cavnue::messages::geometry::v1::CovarianceVector2f* Actor::release_acceleration() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::cavnue::messages::geometry::v1::CovarianceVector2f* temp = _impl_.acceleration_;
  _impl_.acceleration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::CovarianceVector2f* Actor::unsafe_arena_release_acceleration() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.Actor.acceleration)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::cavnue::messages::geometry::v1::CovarianceVector2f* temp = _impl_.acceleration_;
  _impl_.acceleration_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::CovarianceVector2f* Actor::_internal_mutable_acceleration() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::CovarianceVector2f>(GetArenaForAllocation());
    _impl_.acceleration_ = p;
  }
  return _impl_.acceleration_;
}
inline ::cavnue::messages::geometry::v1::CovarianceVector2f* Actor::mutable_acceleration() {
  ::cavnue::messages::geometry::v1::CovarianceVector2f* _msg = _internal_mutable_acceleration();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.Actor.acceleration)
  return _msg;
}
inline void Actor::set_allocated_acceleration(::cavnue::messages::geometry::v1::CovarianceVector2f* acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.acceleration_);
  }
  if (acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acceleration));
    if (message_arena != submessage_arena) {
      acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.Actor.acceleration)
}

// .cavnue.messages.spatial.v1.UTMProjection projection = 11 [json_name = "projection"];
inline bool Actor::has_projection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.projection_ != nullptr);
  return value;
}
inline const ::cavnue::messages::spatial::v1::UTMProjection& Actor::_internal_projection() const {
  const ::cavnue::messages::spatial::v1::UTMProjection* p = _impl_.projection_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::spatial::v1::UTMProjection&>(
      ::cavnue::messages::spatial::v1::_UTMProjection_default_instance_);
}
inline const ::cavnue::messages::spatial::v1::UTMProjection& Actor::projection() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Actor.projection)
  return _internal_projection();
}
inline void Actor::unsafe_arena_set_allocated_projection(
    ::cavnue::messages::spatial::v1::UTMProjection* projection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projection_);
  }
  _impl_.projection_ = projection;
  if (projection) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.Actor.projection)
}
inline ::cavnue::messages::spatial::v1::UTMProjection* Actor::release_projection() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::cavnue::messages::spatial::v1::UTMProjection* temp = _impl_.projection_;
  _impl_.projection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::spatial::v1::UTMProjection* Actor::unsafe_arena_release_projection() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.Actor.projection)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::cavnue::messages::spatial::v1::UTMProjection* temp = _impl_.projection_;
  _impl_.projection_ = nullptr;
  return temp;
}
inline ::cavnue::messages::spatial::v1::UTMProjection* Actor::_internal_mutable_projection() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.projection_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::spatial::v1::UTMProjection>(GetArenaForAllocation());
    _impl_.projection_ = p;
  }
  return _impl_.projection_;
}
inline ::cavnue::messages::spatial::v1::UTMProjection* Actor::mutable_projection() {
  ::cavnue::messages::spatial::v1::UTMProjection* _msg = _internal_mutable_projection();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.Actor.projection)
  return _msg;
}
inline void Actor::set_allocated_projection(::cavnue::messages::spatial::v1::UTMProjection* projection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projection_);
  }
  if (projection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projection));
    if (message_arena != submessage_arena) {
      projection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.projection_ = projection;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.Actor.projection)
}

// optional int32 lane = 12 [json_name = "lane"];
inline bool Actor::has_lane() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void Actor::clear_lane() {
  _impl_.lane_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::int32_t Actor::lane() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Actor.lane)
  return _internal_lane();
}
inline void Actor::set_lane(::int32_t value) {
  _internal_set_lane(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.Actor.lane)
}
inline ::int32_t Actor::_internal_lane() const {
  return _impl_.lane_;
}
inline void Actor::_internal_set_lane(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.lane_ = value;
}

// optional .cavnue.messages.inference.v1.Actor.ActorSize size = 13 [json_name = "size", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_ENU];
inline bool Actor::has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.size_ != nullptr);
  return value;
}
inline void Actor::clear_size() {
  if (_impl_.size_ != nullptr) _impl_.size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::cavnue::messages::inference::v1::Actor_ActorSize& Actor::_internal_size() const {
  const ::cavnue::messages::inference::v1::Actor_ActorSize* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::inference::v1::Actor_ActorSize&>(
      ::cavnue::messages::inference::v1::_Actor_ActorSize_default_instance_);
}
inline const ::cavnue::messages::inference::v1::Actor_ActorSize& Actor::size() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Actor.size)
  return _internal_size();
}
inline void Actor::unsafe_arena_set_allocated_size(
    ::cavnue::messages::inference::v1::Actor_ActorSize* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = size;
  if (size) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.Actor.size)
}
inline ::cavnue::messages::inference::v1::Actor_ActorSize* Actor::release_size() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::cavnue::messages::inference::v1::Actor_ActorSize* temp = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::inference::v1::Actor_ActorSize* Actor::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.Actor.size)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::cavnue::messages::inference::v1::Actor_ActorSize* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::cavnue::messages::inference::v1::Actor_ActorSize* Actor::_internal_mutable_size() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.size_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::inference::v1::Actor_ActorSize>(GetArenaForAllocation());
    _impl_.size_ = p;
  }
  return _impl_.size_;
}
inline ::cavnue::messages::inference::v1::Actor_ActorSize* Actor::mutable_size() {
  ::cavnue::messages::inference::v1::Actor_ActorSize* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.Actor.size)
  return _msg;
}
inline void Actor::set_allocated_size(::cavnue::messages::inference::v1::Actor_ActorSize* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.size_;
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(size);
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.size_ = size;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.Actor.size)
}

// .cavnue.messages.geometry.v1.BoundingBox2f bbox = 14 [json_name = "bbox"];
inline bool Actor::has_bbox() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bbox_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::BoundingBox2f& Actor::_internal_bbox() const {
  const ::cavnue::messages::geometry::v1::BoundingBox2f* p = _impl_.bbox_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::BoundingBox2f&>(
      ::cavnue::messages::geometry::v1::_BoundingBox2f_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::BoundingBox2f& Actor::bbox() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Actor.bbox)
  return _internal_bbox();
}
inline void Actor::unsafe_arena_set_allocated_bbox(
    ::cavnue::messages::geometry::v1::BoundingBox2f* bbox) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bbox_);
  }
  _impl_.bbox_ = bbox;
  if (bbox) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.Actor.bbox)
}
inline ::cavnue::messages::geometry::v1::BoundingBox2f* Actor::release_bbox() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::cavnue::messages::geometry::v1::BoundingBox2f* temp = _impl_.bbox_;
  _impl_.bbox_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::BoundingBox2f* Actor::unsafe_arena_release_bbox() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.Actor.bbox)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::cavnue::messages::geometry::v1::BoundingBox2f* temp = _impl_.bbox_;
  _impl_.bbox_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::BoundingBox2f* Actor::_internal_mutable_bbox() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.bbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::BoundingBox2f>(GetArenaForAllocation());
    _impl_.bbox_ = p;
  }
  return _impl_.bbox_;
}
inline ::cavnue::messages::geometry::v1::BoundingBox2f* Actor::mutable_bbox() {
  ::cavnue::messages::geometry::v1::BoundingBox2f* _msg = _internal_mutable_bbox();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.Actor.bbox)
  return _msg;
}
inline void Actor::set_allocated_bbox(::cavnue::messages::geometry::v1::BoundingBox2f* bbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bbox_);
  }
  if (bbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bbox));
    if (message_arena != submessage_arena) {
      bbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bbox, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.bbox_ = bbox;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.Actor.bbox)
}

// .cavnue.messages.inference.v1.Actor.Severity severity = 15 [json_name = "severity"];
inline void Actor::clear_severity() {
  _impl_.severity_ = 0;
}
inline ::cavnue::messages::inference::v1::Actor_Severity Actor::severity() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Actor.severity)
  return _internal_severity();
}
inline void Actor::set_severity(::cavnue::messages::inference::v1::Actor_Severity value) {
   _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.Actor.severity)
}
inline ::cavnue::messages::inference::v1::Actor_Severity Actor::_internal_severity() const {
  return static_cast<::cavnue::messages::inference::v1::Actor_Severity>(_impl_.severity_);
}
inline void Actor::_internal_set_severity(::cavnue::messages::inference::v1::Actor_Severity value) {
  ;
  _impl_.severity_ = value;
}

// .cavnue.messages.inference.v1.Actor.Attribute speeding = 16 [json_name = "speeding"];
inline bool Actor::has_speeding() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.speeding_ != nullptr);
  return value;
}
inline void Actor::clear_speeding() {
  if (_impl_.speeding_ != nullptr) _impl_.speeding_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const ::cavnue::messages::inference::v1::Actor_Attribute& Actor::_internal_speeding() const {
  const ::cavnue::messages::inference::v1::Actor_Attribute* p = _impl_.speeding_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::inference::v1::Actor_Attribute&>(
      ::cavnue::messages::inference::v1::_Actor_Attribute_default_instance_);
}
inline const ::cavnue::messages::inference::v1::Actor_Attribute& Actor::speeding() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Actor.speeding)
  return _internal_speeding();
}
inline void Actor::unsafe_arena_set_allocated_speeding(
    ::cavnue::messages::inference::v1::Actor_Attribute* speeding) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.speeding_);
  }
  _impl_.speeding_ = speeding;
  if (speeding) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.Actor.speeding)
}
inline ::cavnue::messages::inference::v1::Actor_Attribute* Actor::release_speeding() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::cavnue::messages::inference::v1::Actor_Attribute* temp = _impl_.speeding_;
  _impl_.speeding_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::inference::v1::Actor_Attribute* Actor::unsafe_arena_release_speeding() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.Actor.speeding)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::cavnue::messages::inference::v1::Actor_Attribute* temp = _impl_.speeding_;
  _impl_.speeding_ = nullptr;
  return temp;
}
inline ::cavnue::messages::inference::v1::Actor_Attribute* Actor::_internal_mutable_speeding() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.speeding_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::inference::v1::Actor_Attribute>(GetArenaForAllocation());
    _impl_.speeding_ = p;
  }
  return _impl_.speeding_;
}
inline ::cavnue::messages::inference::v1::Actor_Attribute* Actor::mutable_speeding() {
  ::cavnue::messages::inference::v1::Actor_Attribute* _msg = _internal_mutable_speeding();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.Actor.speeding)
  return _msg;
}
inline void Actor::set_allocated_speeding(::cavnue::messages::inference::v1::Actor_Attribute* speeding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.speeding_;
  }
  if (speeding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(speeding);
    if (message_arena != submessage_arena) {
      speeding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speeding, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.speeding_ = speeding;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.Actor.speeding)
}

// .cavnue.messages.inference.v1.Actor.Attribute impeding = 17 [json_name = "impeding"];
inline bool Actor::has_impeding() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.impeding_ != nullptr);
  return value;
}
inline void Actor::clear_impeding() {
  if (_impl_.impeding_ != nullptr) _impl_.impeding_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const ::cavnue::messages::inference::v1::Actor_Attribute& Actor::_internal_impeding() const {
  const ::cavnue::messages::inference::v1::Actor_Attribute* p = _impl_.impeding_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::inference::v1::Actor_Attribute&>(
      ::cavnue::messages::inference::v1::_Actor_Attribute_default_instance_);
}
inline const ::cavnue::messages::inference::v1::Actor_Attribute& Actor::impeding() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Actor.impeding)
  return _internal_impeding();
}
inline void Actor::unsafe_arena_set_allocated_impeding(
    ::cavnue::messages::inference::v1::Actor_Attribute* impeding) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.impeding_);
  }
  _impl_.impeding_ = impeding;
  if (impeding) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.Actor.impeding)
}
inline ::cavnue::messages::inference::v1::Actor_Attribute* Actor::release_impeding() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::cavnue::messages::inference::v1::Actor_Attribute* temp = _impl_.impeding_;
  _impl_.impeding_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::inference::v1::Actor_Attribute* Actor::unsafe_arena_release_impeding() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.Actor.impeding)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::cavnue::messages::inference::v1::Actor_Attribute* temp = _impl_.impeding_;
  _impl_.impeding_ = nullptr;
  return temp;
}
inline ::cavnue::messages::inference::v1::Actor_Attribute* Actor::_internal_mutable_impeding() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.impeding_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::inference::v1::Actor_Attribute>(GetArenaForAllocation());
    _impl_.impeding_ = p;
  }
  return _impl_.impeding_;
}
inline ::cavnue::messages::inference::v1::Actor_Attribute* Actor::mutable_impeding() {
  ::cavnue::messages::inference::v1::Actor_Attribute* _msg = _internal_mutable_impeding();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.Actor.impeding)
  return _msg;
}
inline void Actor::set_allocated_impeding(::cavnue::messages::inference::v1::Actor_Attribute* impeding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.impeding_;
  }
  if (impeding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(impeding);
    if (message_arena != submessage_arena) {
      impeding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, impeding, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.impeding_ = impeding;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.Actor.impeding)
}

// .cavnue.messages.inference.v1.Actor.Attribute stationary = 18 [json_name = "stationary"];
inline bool Actor::has_stationary() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stationary_ != nullptr);
  return value;
}
inline void Actor::clear_stationary() {
  if (_impl_.stationary_ != nullptr) _impl_.stationary_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const ::cavnue::messages::inference::v1::Actor_Attribute& Actor::_internal_stationary() const {
  const ::cavnue::messages::inference::v1::Actor_Attribute* p = _impl_.stationary_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::inference::v1::Actor_Attribute&>(
      ::cavnue::messages::inference::v1::_Actor_Attribute_default_instance_);
}
inline const ::cavnue::messages::inference::v1::Actor_Attribute& Actor::stationary() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Actor.stationary)
  return _internal_stationary();
}
inline void Actor::unsafe_arena_set_allocated_stationary(
    ::cavnue::messages::inference::v1::Actor_Attribute* stationary) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stationary_);
  }
  _impl_.stationary_ = stationary;
  if (stationary) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.Actor.stationary)
}
inline ::cavnue::messages::inference::v1::Actor_Attribute* Actor::release_stationary() {
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::cavnue::messages::inference::v1::Actor_Attribute* temp = _impl_.stationary_;
  _impl_.stationary_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::inference::v1::Actor_Attribute* Actor::unsafe_arena_release_stationary() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.Actor.stationary)
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::cavnue::messages::inference::v1::Actor_Attribute* temp = _impl_.stationary_;
  _impl_.stationary_ = nullptr;
  return temp;
}
inline ::cavnue::messages::inference::v1::Actor_Attribute* Actor::_internal_mutable_stationary() {
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.stationary_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::inference::v1::Actor_Attribute>(GetArenaForAllocation());
    _impl_.stationary_ = p;
  }
  return _impl_.stationary_;
}
inline ::cavnue::messages::inference::v1::Actor_Attribute* Actor::mutable_stationary() {
  ::cavnue::messages::inference::v1::Actor_Attribute* _msg = _internal_mutable_stationary();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.Actor.stationary)
  return _msg;
}
inline void Actor::set_allocated_stationary(::cavnue::messages::inference::v1::Actor_Attribute* stationary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stationary_;
  }
  if (stationary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stationary);
    if (message_arena != submessage_arena) {
      stationary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stationary, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.stationary_ = stationary;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.Actor.stationary)
}

// .google.protobuf.FieldMask update_mask = 19 [json_name = "updateMask", (.gen_bq_schema.bigquery) = {
inline bool Actor::has_update_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.update_mask_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& Actor::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& Actor::update_mask() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Actor.update_mask)
  return _internal_update_mask();
}
inline void Actor::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.Actor.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* Actor::release_update_mask() {
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* Actor::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.Actor.update_mask)
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* Actor::_internal_mutable_update_mask() {
  _impl_._has_bits_[0] |= 0x00002000u;
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* Actor::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.Actor.update_mask)
  return _msg;
}
inline void Actor::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.Actor.update_mask)
}

// .cavnue.messages.inference.v1.Actor.Attribute collision = 20 [json_name = "collision"];
inline bool Actor::has_collision() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.collision_ != nullptr);
  return value;
}
inline void Actor::clear_collision() {
  if (_impl_.collision_ != nullptr) _impl_.collision_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline const ::cavnue::messages::inference::v1::Actor_Attribute& Actor::_internal_collision() const {
  const ::cavnue::messages::inference::v1::Actor_Attribute* p = _impl_.collision_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::inference::v1::Actor_Attribute&>(
      ::cavnue::messages::inference::v1::_Actor_Attribute_default_instance_);
}
inline const ::cavnue::messages::inference::v1::Actor_Attribute& Actor::collision() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Actor.collision)
  return _internal_collision();
}
inline void Actor::unsafe_arena_set_allocated_collision(
    ::cavnue::messages::inference::v1::Actor_Attribute* collision) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.collision_);
  }
  _impl_.collision_ = collision;
  if (collision) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.Actor.collision)
}
inline ::cavnue::messages::inference::v1::Actor_Attribute* Actor::release_collision() {
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::cavnue::messages::inference::v1::Actor_Attribute* temp = _impl_.collision_;
  _impl_.collision_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::inference::v1::Actor_Attribute* Actor::unsafe_arena_release_collision() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.Actor.collision)
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::cavnue::messages::inference::v1::Actor_Attribute* temp = _impl_.collision_;
  _impl_.collision_ = nullptr;
  return temp;
}
inline ::cavnue::messages::inference::v1::Actor_Attribute* Actor::_internal_mutable_collision() {
  _impl_._has_bits_[0] |= 0x00004000u;
  if (_impl_.collision_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::inference::v1::Actor_Attribute>(GetArenaForAllocation());
    _impl_.collision_ = p;
  }
  return _impl_.collision_;
}
inline ::cavnue::messages::inference::v1::Actor_Attribute* Actor::mutable_collision() {
  ::cavnue::messages::inference::v1::Actor_Attribute* _msg = _internal_mutable_collision();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.Actor.collision)
  return _msg;
}
inline void Actor::set_allocated_collision(::cavnue::messages::inference::v1::Actor_Attribute* collision) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.collision_;
  }
  if (collision) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(collision);
    if (message_arena != submessage_arena) {
      collision = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collision, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  _impl_.collision_ = collision;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.Actor.collision)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace inference
}  // namespace messages
}  // namespace cavnue


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::cavnue::messages::inference::v1::Actor_Action> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::cavnue::messages::inference::v1::Actor_Action>() {
  return ::cavnue::messages::inference::v1::Actor_Action_descriptor();
}
template <>
struct is_proto_enum<::cavnue::messages::inference::v1::Actor_Severity> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::cavnue::messages::inference::v1::Actor_Severity>() {
  return ::cavnue::messages::inference::v1::Actor_Severity_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2finference_2fv1_2factor_2eproto_2epb_2eh

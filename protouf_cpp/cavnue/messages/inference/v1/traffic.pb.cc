// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/inference/v1/traffic.proto

#include "cavnue/messages/inference/v1/traffic.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cavnue {
namespace messages {
namespace inference {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR LaneSegmentAggregation_Statistics::LaneSegmentAggregation_Statistics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lane_segment_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.speed_mean_)*/ 0

  , /*decltype(_impl_.actors_unique_)*/ 0u

  , /*decltype(_impl_.density_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LaneSegmentAggregation_StatisticsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneSegmentAggregation_StatisticsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneSegmentAggregation_StatisticsDefaultTypeInternal() {}
  union {
    LaneSegmentAggregation_Statistics _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneSegmentAggregation_StatisticsDefaultTypeInternal _LaneSegmentAggregation_Statistics_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR LaneSegmentAggregation::LaneSegmentAggregation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.statistics_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.interval_start_ts_)*/nullptr
  , /*decltype(_impl_.interval_end_ts_)*/nullptr} {}
struct LaneSegmentAggregationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneSegmentAggregationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneSegmentAggregationDefaultTypeInternal() {}
  union {
    LaneSegmentAggregation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneSegmentAggregationDefaultTypeInternal _LaneSegmentAggregation_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RoadSegmentAggregation_Statistics::RoadSegmentAggregation_Statistics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.road_segment_id_)*/ 0

  , /*decltype(_impl_.speed_mean_)*/ 0

  , /*decltype(_impl_.actors_unique_)*/ 0u

  , /*decltype(_impl_.density_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoadSegmentAggregation_StatisticsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadSegmentAggregation_StatisticsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadSegmentAggregation_StatisticsDefaultTypeInternal() {}
  union {
    RoadSegmentAggregation_Statistics _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadSegmentAggregation_StatisticsDefaultTypeInternal _RoadSegmentAggregation_Statistics_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RoadSegmentAggregation::RoadSegmentAggregation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.statistics_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.interval_start_ts_)*/nullptr
  , /*decltype(_impl_.interval_end_ts_)*/nullptr} {}
struct RoadSegmentAggregationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadSegmentAggregationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadSegmentAggregationDefaultTypeInternal() {}
  union {
    RoadSegmentAggregation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadSegmentAggregationDefaultTypeInternal _RoadSegmentAggregation_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AverageTrafficCalculation_Statistics::AverageTrafficCalculation_Statistics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.road_segment_id_)*/ 0

  , /*decltype(_impl_.average_actors_unique_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AverageTrafficCalculation_StatisticsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AverageTrafficCalculation_StatisticsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AverageTrafficCalculation_StatisticsDefaultTypeInternal() {}
  union {
    AverageTrafficCalculation_Statistics _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AverageTrafficCalculation_StatisticsDefaultTypeInternal _AverageTrafficCalculation_Statistics_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AverageTrafficCalculation::AverageTrafficCalculation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.statistics_)*/{}
  , /*decltype(_impl_.interval_start_ts_)*/nullptr
  , /*decltype(_impl_.interval_end_ts_)*/nullptr} {}
struct AverageTrafficCalculationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AverageTrafficCalculationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AverageTrafficCalculationDefaultTypeInternal() {}
  union {
    AverageTrafficCalculation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AverageTrafficCalculationDefaultTypeInternal _AverageTrafficCalculation_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AnnualAverageDailyTrafficCalculation::AnnualAverageDailyTrafficCalculation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.average_traffic_calculation_)*/nullptr} {}
struct AnnualAverageDailyTrafficCalculationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnnualAverageDailyTrafficCalculationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnnualAverageDailyTrafficCalculationDefaultTypeInternal() {}
  union {
    AnnualAverageDailyTrafficCalculation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnnualAverageDailyTrafficCalculationDefaultTypeInternal _AnnualAverageDailyTrafficCalculation_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MonthlyAverageDailyTrafficCalculation::MonthlyAverageDailyTrafficCalculation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.average_traffic_calculation_)*/nullptr
  , /*decltype(_impl_.month_)*/ 0

  , /*decltype(_impl_.year_)*/ 0
} {}
struct MonthlyAverageDailyTrafficCalculationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MonthlyAverageDailyTrafficCalculationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MonthlyAverageDailyTrafficCalculationDefaultTypeInternal() {}
  union {
    MonthlyAverageDailyTrafficCalculation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MonthlyAverageDailyTrafficCalculationDefaultTypeInternal _MonthlyAverageDailyTrafficCalculation_default_instance_;
}  // namespace v1
}  // namespace inference
}  // namespace messages
}  // namespace cavnue
static ::_pb::Metadata file_level_metadata_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto[8];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto = nullptr;
const ::uint32_t TableStruct_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::LaneSegmentAggregation_Statistics, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::LaneSegmentAggregation_Statistics, _impl_.lane_segment_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::LaneSegmentAggregation_Statistics, _impl_.speed_mean_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::LaneSegmentAggregation_Statistics, _impl_.actors_unique_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::LaneSegmentAggregation_Statistics, _impl_.density_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::LaneSegmentAggregation, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::LaneSegmentAggregation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::LaneSegmentAggregation, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::LaneSegmentAggregation, _impl_.interval_start_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::LaneSegmentAggregation, _impl_.interval_end_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::LaneSegmentAggregation, _impl_.statistics_),
    0,
    1,
    2,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::RoadSegmentAggregation_Statistics, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::RoadSegmentAggregation_Statistics, _impl_.road_segment_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::RoadSegmentAggregation_Statistics, _impl_.speed_mean_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::RoadSegmentAggregation_Statistics, _impl_.actors_unique_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::RoadSegmentAggregation_Statistics, _impl_.density_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::RoadSegmentAggregation, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::RoadSegmentAggregation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::RoadSegmentAggregation, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::RoadSegmentAggregation, _impl_.interval_start_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::RoadSegmentAggregation, _impl_.interval_end_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::RoadSegmentAggregation, _impl_.statistics_),
    0,
    1,
    2,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::AverageTrafficCalculation_Statistics, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::AverageTrafficCalculation_Statistics, _impl_.road_segment_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::AverageTrafficCalculation_Statistics, _impl_.average_actors_unique_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::AverageTrafficCalculation, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::AverageTrafficCalculation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::AverageTrafficCalculation, _impl_.interval_start_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::AverageTrafficCalculation, _impl_.interval_end_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::AverageTrafficCalculation, _impl_.statistics_),
    0,
    1,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation, _impl_.average_traffic_calculation_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::MonthlyAverageDailyTrafficCalculation, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::MonthlyAverageDailyTrafficCalculation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::MonthlyAverageDailyTrafficCalculation, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::MonthlyAverageDailyTrafficCalculation, _impl_.month_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::MonthlyAverageDailyTrafficCalculation, _impl_.year_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::MonthlyAverageDailyTrafficCalculation, _impl_.average_traffic_calculation_),
    0,
    ~0u,
    ~0u,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::cavnue::messages::inference::v1::LaneSegmentAggregation_Statistics)},
        { 12, 24, -1, sizeof(::cavnue::messages::inference::v1::LaneSegmentAggregation)},
        { 28, -1, -1, sizeof(::cavnue::messages::inference::v1::RoadSegmentAggregation_Statistics)},
        { 40, 52, -1, sizeof(::cavnue::messages::inference::v1::RoadSegmentAggregation)},
        { 56, -1, -1, sizeof(::cavnue::messages::inference::v1::AverageTrafficCalculation_Statistics)},
        { 66, 77, -1, sizeof(::cavnue::messages::inference::v1::AverageTrafficCalculation)},
        { 80, 90, -1, sizeof(::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation)},
        { 92, 104, -1, sizeof(::cavnue::messages::inference::v1::MonthlyAverageDailyTrafficCalculation)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cavnue::messages::inference::v1::_LaneSegmentAggregation_Statistics_default_instance_._instance,
    &::cavnue::messages::inference::v1::_LaneSegmentAggregation_default_instance_._instance,
    &::cavnue::messages::inference::v1::_RoadSegmentAggregation_Statistics_default_instance_._instance,
    &::cavnue::messages::inference::v1::_RoadSegmentAggregation_default_instance_._instance,
    &::cavnue::messages::inference::v1::_AverageTrafficCalculation_Statistics_default_instance_._instance,
    &::cavnue::messages::inference::v1::_AverageTrafficCalculation_default_instance_._instance,
    &::cavnue::messages::inference::v1::_AnnualAverageDailyTrafficCalculation_default_instance_._instance,
    &::cavnue::messages::inference::v1::_MonthlyAverageDailyTrafficCalculation_default_instance_._instance,
};
const char descriptor_table_protodef_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n*cavnue/messages/inference/v1/traffic.p"
    "roto\022\034cavnue.messages.inference.v1\032&cavn"
    "ue/messages/common/v1/common.proto\032-cavn"
    "ue/messages/common/v1/field_options.prot"
    "o\032\037google/protobuf/timestamp.proto\032\'cavn"
    "ue/third_party/bq/v1/bq_field.proto\"\203\004\n\026"
    "LaneSegmentAggregation\0229\n\006header\030\001 \001(\0132!"
    ".cavnue.messages.common.v1.HeaderR\006heade"
    "r\022W\n\021interval_start_ts\030\002 \001(\0132\032.google.pr"
    "otobuf.TimestampB\017\212\371+\013\022\tTIMESTAMPR\017inter"
    "valStartTs\022S\n\017interval_end_ts\030\003 \001(\0132\032.go"
    "ogle.protobuf.TimestampB\017\212\371+\013\022\tTIMESTAMP"
    "R\rintervalEndTs\022_\n\nstatistics\030\004 \003(\0132\?.ca"
    "vnue.messages.inference.v1.LaneSegmentAg"
    "gregation.StatisticsR\nstatistics\032\236\001\n\nSta"
    "tistics\022&\n\017lane_segment_id\030\001 \001(\003R\rlaneSe"
    "gmentId\022#\n\nspeed_mean\030\002 \001(\002B\004\210\361\004\001R\tspeed"
    "Mean\022#\n\ractors_unique\030\003 \001(\rR\014actorsUniqu"
    "e\022\036\n\007density\030\004 \001(\002B\004\210\361\004\020R\007density\"\203\004\n\026Ro"
    "adSegmentAggregation\0229\n\006header\030\001 \001(\0132!.c"
    "avnue.messages.common.v1.HeaderR\006header\022"
    "W\n\021interval_start_ts\030\002 \001(\0132\032.google.prot"
    "obuf.TimestampB\017\212\371+\013\022\tTIMESTAMPR\017interva"
    "lStartTs\022S\n\017interval_end_ts\030\003 \001(\0132\032.goog"
    "le.protobuf.TimestampB\017\212\371+\013\022\tTIMESTAMPR\r"
    "intervalEndTs\022_\n\nstatistics\030\004 \003(\0132\?.cavn"
    "ue.messages.inference.v1.RoadSegmentAggr"
    "egation.StatisticsR\nstatistics\032\236\001\n\nStati"
    "stics\022&\n\017road_segment_id\030\001 \001(\005R\rroadSegm"
    "entId\022#\n\nspeed_mean\030\002 \001(\002B\004\210\361\004\001R\tspeedMe"
    "an\022#\n\ractors_unique\030\003 \001(\rR\014actorsUnique\022"
    "\036\n\007density\030\004 \001(\002B\004\210\361\004\020R\007density\"\313\003\n\031Aver"
    "ageTrafficCalculation\022\\\n\021interval_start_"
    "ts\030\002 \001(\0132\032.google.protobuf.TimestampB\017\212\371"
    "+\013\022\tTIMESTAMPH\000R\017intervalStartTs\210\001\001\022X\n\017i"
    "nterval_end_ts\030\003 \001(\0132\032.google.protobuf.T"
    "imestampB\017\212\371+\013\022\tTIMESTAMPH\001R\rintervalEnd"
    "Ts\210\001\001\022b\n\nstatistics\030\004 \003(\0132B.cavnue.messa"
    "ges.inference.v1.AverageTrafficCalculati"
    "on.StatisticsR\nstatistics\032h\n\nStatistics\022"
    "&\n\017road_segment_id\030\001 \001(\005R\rroadSegmentId\022"
    "2\n\025average_actors_unique\030\002 \001(\002R\023averageA"
    "ctorsUniqueB\024\n\022_interval_start_tsB\022\n\020_in"
    "terval_end_ts\"\332\001\n$AnnualAverageDailyTraf"
    "ficCalculation\0229\n\006header\030\001 \001(\0132!.cavnue."
    "messages.common.v1.HeaderR\006header\022w\n\033ave"
    "rage_traffic_calculation\030\002 \001(\01327.cavnue."
    "messages.inference.v1.AverageTrafficCalc"
    "ulationR\031averageTrafficCalculation\"\205\002\n%M"
    "onthlyAverageDailyTrafficCalculation\0229\n\006"
    "header\030\001 \001(\0132!.cavnue.messages.common.v1"
    ".HeaderR\006header\022\024\n\005month\030\002 \001(\005R\005month\022\022\n"
    "\004year\030\003 \001(\005R\004year\022w\n\033average_traffic_cal"
    "culation\030\004 \001(\01327.cavnue.messages.inferen"
    "ce.v1.AverageTrafficCalculationR\031average"
    "TrafficCalculationb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto_deps[4] =
    {
        &::descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2ffield_5foptions_2eproto,
        &::descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ffield_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto = {
    false,
    false,
    2226,
    descriptor_table_protodef_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto,
    "cavnue/messages/inference/v1/traffic.proto",
    &descriptor_table_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto_once,
    descriptor_table_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto_deps,
    4,
    8,
    schemas,
    file_default_instances,
    TableStruct_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto::offsets,
    file_level_metadata_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto,
    file_level_enum_descriptors_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto,
    file_level_service_descriptors_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto_getter() {
  return &descriptor_table_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto(&descriptor_table_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto);
namespace cavnue {
namespace messages {
namespace inference {
namespace v1 {
// ===================================================================

class LaneSegmentAggregation_Statistics::_Internal {
 public:
};

LaneSegmentAggregation_Statistics::LaneSegmentAggregation_Statistics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.inference.v1.LaneSegmentAggregation.Statistics)
}
LaneSegmentAggregation_Statistics::LaneSegmentAggregation_Statistics(const LaneSegmentAggregation_Statistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.inference.v1.LaneSegmentAggregation.Statistics)
}

inline void LaneSegmentAggregation_Statistics::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.lane_segment_id_) { ::int64_t{0} }

    , decltype(_impl_.speed_mean_) { 0 }

    , decltype(_impl_.actors_unique_) { 0u }

    , decltype(_impl_.density_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LaneSegmentAggregation_Statistics::~LaneSegmentAggregation_Statistics() {
  // @@protoc_insertion_point(destructor:cavnue.messages.inference.v1.LaneSegmentAggregation.Statistics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneSegmentAggregation_Statistics::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void LaneSegmentAggregation_Statistics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneSegmentAggregation_Statistics::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.inference.v1.LaneSegmentAggregation.Statistics)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.lane_segment_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.density_) -
      reinterpret_cast<char*>(&_impl_.lane_segment_id_)) + sizeof(_impl_.density_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneSegmentAggregation_Statistics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 lane_segment_id = 1 [json_name = "laneSegmentId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.lane_segment_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // float speed_mean = 2 [json_name = "speedMean", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 21)) {
          _impl_.speed_mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 actors_unique = 3 [json_name = "actorsUnique"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.actors_unique_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // float density = 4 [json_name = "density", (.cavnue.messages.common.v1.units) = UNITS_VEHICLES_PER_METER];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 37)) {
          _impl_.density_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LaneSegmentAggregation_Statistics::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.inference.v1.LaneSegmentAggregation.Statistics)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 lane_segment_id = 1 [json_name = "laneSegmentId"];
  if (this->_internal_lane_segment_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_lane_segment_id(), target);
  }

  // float speed_mean = 2 [json_name = "speedMean", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_speed_mean = this->_internal_speed_mean();
  ::uint32_t raw_speed_mean;
  memcpy(&raw_speed_mean, &tmp_speed_mean, sizeof(tmp_speed_mean));
  if (raw_speed_mean != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_speed_mean(), target);
  }

  // uint32 actors_unique = 3 [json_name = "actorsUnique"];
  if (this->_internal_actors_unique() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_actors_unique(), target);
  }

  // float density = 4 [json_name = "density", (.cavnue.messages.common.v1.units) = UNITS_VEHICLES_PER_METER];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_density = this->_internal_density();
  ::uint32_t raw_density;
  memcpy(&raw_density, &tmp_density, sizeof(tmp_density));
  if (raw_density != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_density(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.inference.v1.LaneSegmentAggregation.Statistics)
  return target;
}

::size_t LaneSegmentAggregation_Statistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.inference.v1.LaneSegmentAggregation.Statistics)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 lane_segment_id = 1 [json_name = "laneSegmentId"];
  if (this->_internal_lane_segment_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_lane_segment_id());
  }

  // float speed_mean = 2 [json_name = "speedMean", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_speed_mean = this->_internal_speed_mean();
  ::uint32_t raw_speed_mean;
  memcpy(&raw_speed_mean, &tmp_speed_mean, sizeof(tmp_speed_mean));
  if (raw_speed_mean != 0) {
    total_size += 5;
  }

  // uint32 actors_unique = 3 [json_name = "actorsUnique"];
  if (this->_internal_actors_unique() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_actors_unique());
  }

  // float density = 4 [json_name = "density", (.cavnue.messages.common.v1.units) = UNITS_VEHICLES_PER_METER];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_density = this->_internal_density();
  ::uint32_t raw_density;
  memcpy(&raw_density, &tmp_density, sizeof(tmp_density));
  if (raw_density != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneSegmentAggregation_Statistics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LaneSegmentAggregation_Statistics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneSegmentAggregation_Statistics::GetClassData() const { return &_class_data_; }


void LaneSegmentAggregation_Statistics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LaneSegmentAggregation_Statistics*>(&to_msg);
  auto& from = static_cast<const LaneSegmentAggregation_Statistics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.inference.v1.LaneSegmentAggregation.Statistics)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_lane_segment_id() != 0) {
    _this->_internal_set_lane_segment_id(from._internal_lane_segment_id());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_speed_mean = from._internal_speed_mean();
  ::uint32_t raw_speed_mean;
  memcpy(&raw_speed_mean, &tmp_speed_mean, sizeof(tmp_speed_mean));
  if (raw_speed_mean != 0) {
    _this->_internal_set_speed_mean(from._internal_speed_mean());
  }
  if (from._internal_actors_unique() != 0) {
    _this->_internal_set_actors_unique(from._internal_actors_unique());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_density = from._internal_density();
  ::uint32_t raw_density;
  memcpy(&raw_density, &tmp_density, sizeof(tmp_density));
  if (raw_density != 0) {
    _this->_internal_set_density(from._internal_density());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneSegmentAggregation_Statistics::CopyFrom(const LaneSegmentAggregation_Statistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.inference.v1.LaneSegmentAggregation.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneSegmentAggregation_Statistics::IsInitialized() const {
  return true;
}

void LaneSegmentAggregation_Statistics::InternalSwap(LaneSegmentAggregation_Statistics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneSegmentAggregation_Statistics, _impl_.density_)
      + sizeof(LaneSegmentAggregation_Statistics::_impl_.density_)
      - PROTOBUF_FIELD_OFFSET(LaneSegmentAggregation_Statistics, _impl_.lane_segment_id_)>(
          reinterpret_cast<char*>(&_impl_.lane_segment_id_),
          reinterpret_cast<char*>(&other->_impl_.lane_segment_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneSegmentAggregation_Statistics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto_getter, &descriptor_table_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto[0]);
}
// ===================================================================

class LaneSegmentAggregation::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneSegmentAggregation>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LaneSegmentAggregation, _impl_._has_bits_);
  static const ::cavnue::messages::common::v1::Header& header(const LaneSegmentAggregation* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& interval_start_ts(const LaneSegmentAggregation* msg);
  static void set_has_interval_start_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& interval_end_ts(const LaneSegmentAggregation* msg);
  static void set_has_interval_end_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::cavnue::messages::common::v1::Header&
LaneSegmentAggregation::_Internal::header(const LaneSegmentAggregation* msg) {
  return *msg->_impl_.header_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LaneSegmentAggregation::_Internal::interval_start_ts(const LaneSegmentAggregation* msg) {
  return *msg->_impl_.interval_start_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LaneSegmentAggregation::_Internal::interval_end_ts(const LaneSegmentAggregation* msg) {
  return *msg->_impl_.interval_end_ts_;
}
void LaneSegmentAggregation::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LaneSegmentAggregation::clear_interval_start_ts() {
  if (_impl_.interval_start_ts_ != nullptr) _impl_.interval_start_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void LaneSegmentAggregation::clear_interval_end_ts() {
  if (_impl_.interval_end_ts_ != nullptr) _impl_.interval_end_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
LaneSegmentAggregation::LaneSegmentAggregation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.inference.v1.LaneSegmentAggregation)
}
LaneSegmentAggregation::LaneSegmentAggregation(const LaneSegmentAggregation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LaneSegmentAggregation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.statistics_){from._impl_.statistics_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.interval_start_ts_){nullptr}
    , decltype(_impl_.interval_end_ts_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_ = new ::cavnue::messages::common::v1::Header(*from._impl_.header_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.interval_start_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.interval_start_ts_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.interval_end_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.interval_end_ts_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.inference.v1.LaneSegmentAggregation)
}

inline void LaneSegmentAggregation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.statistics_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.interval_start_ts_){nullptr}
    , decltype(_impl_.interval_end_ts_){nullptr}
  };
}

LaneSegmentAggregation::~LaneSegmentAggregation() {
  // @@protoc_insertion_point(destructor:cavnue.messages.inference.v1.LaneSegmentAggregation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneSegmentAggregation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_statistics()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.interval_start_ts_;
  if (this != internal_default_instance()) delete _impl_.interval_end_ts_;
}

void LaneSegmentAggregation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneSegmentAggregation::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.inference.v1.LaneSegmentAggregation)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_statistics()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.interval_start_ts_ != nullptr);
      _impl_.interval_start_ts_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.interval_end_ts_ != nullptr);
      _impl_.interval_end_ts_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneSegmentAggregation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp interval_start_ts = 2 [json_name = "intervalStartTs", (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval_start_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp interval_end_ts = 3 [json_name = "intervalEndTs", (.gen_bq_schema.bigquery) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval_end_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cavnue.messages.inference.v1.LaneSegmentAggregation.Statistics statistics = 4 [json_name = "statistics"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_statistics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LaneSegmentAggregation::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.inference.v1.LaneSegmentAggregation)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp interval_start_ts = 2 [json_name = "intervalStartTs", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::interval_start_ts(this),
        _Internal::interval_start_ts(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp interval_end_ts = 3 [json_name = "intervalEndTs", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::interval_end_ts(this),
        _Internal::interval_end_ts(this).GetCachedSize(), target, stream);
  }

  // repeated .cavnue.messages.inference.v1.LaneSegmentAggregation.Statistics statistics = 4 [json_name = "statistics"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_statistics_size()); i < n; i++) {
    const auto& repfield = this->_internal_statistics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.inference.v1.LaneSegmentAggregation)
  return target;
}

::size_t LaneSegmentAggregation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.inference.v1.LaneSegmentAggregation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cavnue.messages.inference.v1.LaneSegmentAggregation.Statistics statistics = 4 [json_name = "statistics"];
  total_size += 1UL * this->_internal_statistics_size();
  for (const auto& msg : this->_internal_statistics()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // .google.protobuf.Timestamp interval_start_ts = 2 [json_name = "intervalStartTs", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interval_start_ts_);
    }

    // .google.protobuf.Timestamp interval_end_ts = 3 [json_name = "intervalEndTs", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interval_end_ts_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneSegmentAggregation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LaneSegmentAggregation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneSegmentAggregation::GetClassData() const { return &_class_data_; }


void LaneSegmentAggregation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LaneSegmentAggregation*>(&to_msg);
  auto& from = static_cast<const LaneSegmentAggregation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.inference.v1.LaneSegmentAggregation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_statistics()->MergeFrom(from._internal_statistics());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::cavnue::messages::common::v1::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_interval_start_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_interval_start_ts());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_interval_end_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_interval_end_ts());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneSegmentAggregation::CopyFrom(const LaneSegmentAggregation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.inference.v1.LaneSegmentAggregation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneSegmentAggregation::IsInitialized() const {
  return true;
}

void LaneSegmentAggregation::InternalSwap(LaneSegmentAggregation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_statistics()->InternalSwap(other->_internal_mutable_statistics());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneSegmentAggregation, _impl_.interval_end_ts_)
      + sizeof(LaneSegmentAggregation::_impl_.interval_end_ts_)
      - PROTOBUF_FIELD_OFFSET(LaneSegmentAggregation, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneSegmentAggregation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto_getter, &descriptor_table_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto[1]);
}
// ===================================================================

class RoadSegmentAggregation_Statistics::_Internal {
 public:
};

RoadSegmentAggregation_Statistics::RoadSegmentAggregation_Statistics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.inference.v1.RoadSegmentAggregation.Statistics)
}
RoadSegmentAggregation_Statistics::RoadSegmentAggregation_Statistics(const RoadSegmentAggregation_Statistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.inference.v1.RoadSegmentAggregation.Statistics)
}

inline void RoadSegmentAggregation_Statistics::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.road_segment_id_) { 0 }

    , decltype(_impl_.speed_mean_) { 0 }

    , decltype(_impl_.actors_unique_) { 0u }

    , decltype(_impl_.density_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoadSegmentAggregation_Statistics::~RoadSegmentAggregation_Statistics() {
  // @@protoc_insertion_point(destructor:cavnue.messages.inference.v1.RoadSegmentAggregation.Statistics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoadSegmentAggregation_Statistics::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoadSegmentAggregation_Statistics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoadSegmentAggregation_Statistics::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.inference.v1.RoadSegmentAggregation.Statistics)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.road_segment_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.density_) -
      reinterpret_cast<char*>(&_impl_.road_segment_id_)) + sizeof(_impl_.density_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoadSegmentAggregation_Statistics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 road_segment_id = 1 [json_name = "roadSegmentId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.road_segment_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // float speed_mean = 2 [json_name = "speedMean", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 21)) {
          _impl_.speed_mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 actors_unique = 3 [json_name = "actorsUnique"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.actors_unique_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // float density = 4 [json_name = "density", (.cavnue.messages.common.v1.units) = UNITS_VEHICLES_PER_METER];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 37)) {
          _impl_.density_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RoadSegmentAggregation_Statistics::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.inference.v1.RoadSegmentAggregation.Statistics)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 road_segment_id = 1 [json_name = "roadSegmentId"];
  if (this->_internal_road_segment_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_road_segment_id(), target);
  }

  // float speed_mean = 2 [json_name = "speedMean", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_speed_mean = this->_internal_speed_mean();
  ::uint32_t raw_speed_mean;
  memcpy(&raw_speed_mean, &tmp_speed_mean, sizeof(tmp_speed_mean));
  if (raw_speed_mean != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_speed_mean(), target);
  }

  // uint32 actors_unique = 3 [json_name = "actorsUnique"];
  if (this->_internal_actors_unique() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_actors_unique(), target);
  }

  // float density = 4 [json_name = "density", (.cavnue.messages.common.v1.units) = UNITS_VEHICLES_PER_METER];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_density = this->_internal_density();
  ::uint32_t raw_density;
  memcpy(&raw_density, &tmp_density, sizeof(tmp_density));
  if (raw_density != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_density(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.inference.v1.RoadSegmentAggregation.Statistics)
  return target;
}

::size_t RoadSegmentAggregation_Statistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.inference.v1.RoadSegmentAggregation.Statistics)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 road_segment_id = 1 [json_name = "roadSegmentId"];
  if (this->_internal_road_segment_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_road_segment_id());
  }

  // float speed_mean = 2 [json_name = "speedMean", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_speed_mean = this->_internal_speed_mean();
  ::uint32_t raw_speed_mean;
  memcpy(&raw_speed_mean, &tmp_speed_mean, sizeof(tmp_speed_mean));
  if (raw_speed_mean != 0) {
    total_size += 5;
  }

  // uint32 actors_unique = 3 [json_name = "actorsUnique"];
  if (this->_internal_actors_unique() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_actors_unique());
  }

  // float density = 4 [json_name = "density", (.cavnue.messages.common.v1.units) = UNITS_VEHICLES_PER_METER];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_density = this->_internal_density();
  ::uint32_t raw_density;
  memcpy(&raw_density, &tmp_density, sizeof(tmp_density));
  if (raw_density != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoadSegmentAggregation_Statistics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoadSegmentAggregation_Statistics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoadSegmentAggregation_Statistics::GetClassData() const { return &_class_data_; }


void RoadSegmentAggregation_Statistics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoadSegmentAggregation_Statistics*>(&to_msg);
  auto& from = static_cast<const RoadSegmentAggregation_Statistics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.inference.v1.RoadSegmentAggregation.Statistics)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_road_segment_id() != 0) {
    _this->_internal_set_road_segment_id(from._internal_road_segment_id());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_speed_mean = from._internal_speed_mean();
  ::uint32_t raw_speed_mean;
  memcpy(&raw_speed_mean, &tmp_speed_mean, sizeof(tmp_speed_mean));
  if (raw_speed_mean != 0) {
    _this->_internal_set_speed_mean(from._internal_speed_mean());
  }
  if (from._internal_actors_unique() != 0) {
    _this->_internal_set_actors_unique(from._internal_actors_unique());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_density = from._internal_density();
  ::uint32_t raw_density;
  memcpy(&raw_density, &tmp_density, sizeof(tmp_density));
  if (raw_density != 0) {
    _this->_internal_set_density(from._internal_density());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoadSegmentAggregation_Statistics::CopyFrom(const RoadSegmentAggregation_Statistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.inference.v1.RoadSegmentAggregation.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadSegmentAggregation_Statistics::IsInitialized() const {
  return true;
}

void RoadSegmentAggregation_Statistics::InternalSwap(RoadSegmentAggregation_Statistics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadSegmentAggregation_Statistics, _impl_.density_)
      + sizeof(RoadSegmentAggregation_Statistics::_impl_.density_)
      - PROTOBUF_FIELD_OFFSET(RoadSegmentAggregation_Statistics, _impl_.road_segment_id_)>(
          reinterpret_cast<char*>(&_impl_.road_segment_id_),
          reinterpret_cast<char*>(&other->_impl_.road_segment_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadSegmentAggregation_Statistics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto_getter, &descriptor_table_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto[2]);
}
// ===================================================================

class RoadSegmentAggregation::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadSegmentAggregation>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RoadSegmentAggregation, _impl_._has_bits_);
  static const ::cavnue::messages::common::v1::Header& header(const RoadSegmentAggregation* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& interval_start_ts(const RoadSegmentAggregation* msg);
  static void set_has_interval_start_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& interval_end_ts(const RoadSegmentAggregation* msg);
  static void set_has_interval_end_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::cavnue::messages::common::v1::Header&
RoadSegmentAggregation::_Internal::header(const RoadSegmentAggregation* msg) {
  return *msg->_impl_.header_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RoadSegmentAggregation::_Internal::interval_start_ts(const RoadSegmentAggregation* msg) {
  return *msg->_impl_.interval_start_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RoadSegmentAggregation::_Internal::interval_end_ts(const RoadSegmentAggregation* msg) {
  return *msg->_impl_.interval_end_ts_;
}
void RoadSegmentAggregation::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RoadSegmentAggregation::clear_interval_start_ts() {
  if (_impl_.interval_start_ts_ != nullptr) _impl_.interval_start_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void RoadSegmentAggregation::clear_interval_end_ts() {
  if (_impl_.interval_end_ts_ != nullptr) _impl_.interval_end_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
RoadSegmentAggregation::RoadSegmentAggregation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.inference.v1.RoadSegmentAggregation)
}
RoadSegmentAggregation::RoadSegmentAggregation(const RoadSegmentAggregation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoadSegmentAggregation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.statistics_){from._impl_.statistics_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.interval_start_ts_){nullptr}
    , decltype(_impl_.interval_end_ts_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_ = new ::cavnue::messages::common::v1::Header(*from._impl_.header_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.interval_start_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.interval_start_ts_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.interval_end_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.interval_end_ts_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.inference.v1.RoadSegmentAggregation)
}

inline void RoadSegmentAggregation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.statistics_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.interval_start_ts_){nullptr}
    , decltype(_impl_.interval_end_ts_){nullptr}
  };
}

RoadSegmentAggregation::~RoadSegmentAggregation() {
  // @@protoc_insertion_point(destructor:cavnue.messages.inference.v1.RoadSegmentAggregation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoadSegmentAggregation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_statistics()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.interval_start_ts_;
  if (this != internal_default_instance()) delete _impl_.interval_end_ts_;
}

void RoadSegmentAggregation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoadSegmentAggregation::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.inference.v1.RoadSegmentAggregation)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_statistics()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.interval_start_ts_ != nullptr);
      _impl_.interval_start_ts_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.interval_end_ts_ != nullptr);
      _impl_.interval_end_ts_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoadSegmentAggregation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp interval_start_ts = 2 [json_name = "intervalStartTs", (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval_start_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp interval_end_ts = 3 [json_name = "intervalEndTs", (.gen_bq_schema.bigquery) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval_end_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cavnue.messages.inference.v1.RoadSegmentAggregation.Statistics statistics = 4 [json_name = "statistics"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_statistics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RoadSegmentAggregation::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.inference.v1.RoadSegmentAggregation)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp interval_start_ts = 2 [json_name = "intervalStartTs", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::interval_start_ts(this),
        _Internal::interval_start_ts(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp interval_end_ts = 3 [json_name = "intervalEndTs", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::interval_end_ts(this),
        _Internal::interval_end_ts(this).GetCachedSize(), target, stream);
  }

  // repeated .cavnue.messages.inference.v1.RoadSegmentAggregation.Statistics statistics = 4 [json_name = "statistics"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_statistics_size()); i < n; i++) {
    const auto& repfield = this->_internal_statistics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.inference.v1.RoadSegmentAggregation)
  return target;
}

::size_t RoadSegmentAggregation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.inference.v1.RoadSegmentAggregation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cavnue.messages.inference.v1.RoadSegmentAggregation.Statistics statistics = 4 [json_name = "statistics"];
  total_size += 1UL * this->_internal_statistics_size();
  for (const auto& msg : this->_internal_statistics()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // .google.protobuf.Timestamp interval_start_ts = 2 [json_name = "intervalStartTs", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interval_start_ts_);
    }

    // .google.protobuf.Timestamp interval_end_ts = 3 [json_name = "intervalEndTs", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interval_end_ts_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoadSegmentAggregation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoadSegmentAggregation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoadSegmentAggregation::GetClassData() const { return &_class_data_; }


void RoadSegmentAggregation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoadSegmentAggregation*>(&to_msg);
  auto& from = static_cast<const RoadSegmentAggregation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.inference.v1.RoadSegmentAggregation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_statistics()->MergeFrom(from._internal_statistics());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::cavnue::messages::common::v1::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_interval_start_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_interval_start_ts());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_interval_end_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_interval_end_ts());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoadSegmentAggregation::CopyFrom(const RoadSegmentAggregation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.inference.v1.RoadSegmentAggregation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadSegmentAggregation::IsInitialized() const {
  return true;
}

void RoadSegmentAggregation::InternalSwap(RoadSegmentAggregation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_statistics()->InternalSwap(other->_internal_mutable_statistics());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadSegmentAggregation, _impl_.interval_end_ts_)
      + sizeof(RoadSegmentAggregation::_impl_.interval_end_ts_)
      - PROTOBUF_FIELD_OFFSET(RoadSegmentAggregation, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadSegmentAggregation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto_getter, &descriptor_table_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto[3]);
}
// ===================================================================

class AverageTrafficCalculation_Statistics::_Internal {
 public:
};

AverageTrafficCalculation_Statistics::AverageTrafficCalculation_Statistics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.inference.v1.AverageTrafficCalculation.Statistics)
}
AverageTrafficCalculation_Statistics::AverageTrafficCalculation_Statistics(const AverageTrafficCalculation_Statistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.inference.v1.AverageTrafficCalculation.Statistics)
}

inline void AverageTrafficCalculation_Statistics::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.road_segment_id_) { 0 }

    , decltype(_impl_.average_actors_unique_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AverageTrafficCalculation_Statistics::~AverageTrafficCalculation_Statistics() {
  // @@protoc_insertion_point(destructor:cavnue.messages.inference.v1.AverageTrafficCalculation.Statistics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AverageTrafficCalculation_Statistics::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void AverageTrafficCalculation_Statistics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AverageTrafficCalculation_Statistics::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.inference.v1.AverageTrafficCalculation.Statistics)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.road_segment_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.average_actors_unique_) -
      reinterpret_cast<char*>(&_impl_.road_segment_id_)) + sizeof(_impl_.average_actors_unique_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AverageTrafficCalculation_Statistics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 road_segment_id = 1 [json_name = "roadSegmentId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.road_segment_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // float average_actors_unique = 2 [json_name = "averageActorsUnique"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 21)) {
          _impl_.average_actors_unique_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AverageTrafficCalculation_Statistics::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.inference.v1.AverageTrafficCalculation.Statistics)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 road_segment_id = 1 [json_name = "roadSegmentId"];
  if (this->_internal_road_segment_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_road_segment_id(), target);
  }

  // float average_actors_unique = 2 [json_name = "averageActorsUnique"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_average_actors_unique = this->_internal_average_actors_unique();
  ::uint32_t raw_average_actors_unique;
  memcpy(&raw_average_actors_unique, &tmp_average_actors_unique, sizeof(tmp_average_actors_unique));
  if (raw_average_actors_unique != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_average_actors_unique(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.inference.v1.AverageTrafficCalculation.Statistics)
  return target;
}

::size_t AverageTrafficCalculation_Statistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.inference.v1.AverageTrafficCalculation.Statistics)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 road_segment_id = 1 [json_name = "roadSegmentId"];
  if (this->_internal_road_segment_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_road_segment_id());
  }

  // float average_actors_unique = 2 [json_name = "averageActorsUnique"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_average_actors_unique = this->_internal_average_actors_unique();
  ::uint32_t raw_average_actors_unique;
  memcpy(&raw_average_actors_unique, &tmp_average_actors_unique, sizeof(tmp_average_actors_unique));
  if (raw_average_actors_unique != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AverageTrafficCalculation_Statistics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AverageTrafficCalculation_Statistics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AverageTrafficCalculation_Statistics::GetClassData() const { return &_class_data_; }


void AverageTrafficCalculation_Statistics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AverageTrafficCalculation_Statistics*>(&to_msg);
  auto& from = static_cast<const AverageTrafficCalculation_Statistics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.inference.v1.AverageTrafficCalculation.Statistics)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_road_segment_id() != 0) {
    _this->_internal_set_road_segment_id(from._internal_road_segment_id());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_average_actors_unique = from._internal_average_actors_unique();
  ::uint32_t raw_average_actors_unique;
  memcpy(&raw_average_actors_unique, &tmp_average_actors_unique, sizeof(tmp_average_actors_unique));
  if (raw_average_actors_unique != 0) {
    _this->_internal_set_average_actors_unique(from._internal_average_actors_unique());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AverageTrafficCalculation_Statistics::CopyFrom(const AverageTrafficCalculation_Statistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.inference.v1.AverageTrafficCalculation.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AverageTrafficCalculation_Statistics::IsInitialized() const {
  return true;
}

void AverageTrafficCalculation_Statistics::InternalSwap(AverageTrafficCalculation_Statistics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AverageTrafficCalculation_Statistics, _impl_.average_actors_unique_)
      + sizeof(AverageTrafficCalculation_Statistics::_impl_.average_actors_unique_)
      - PROTOBUF_FIELD_OFFSET(AverageTrafficCalculation_Statistics, _impl_.road_segment_id_)>(
          reinterpret_cast<char*>(&_impl_.road_segment_id_),
          reinterpret_cast<char*>(&other->_impl_.road_segment_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AverageTrafficCalculation_Statistics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto_getter, &descriptor_table_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto[4]);
}
// ===================================================================

class AverageTrafficCalculation::_Internal {
 public:
  using HasBits = decltype(std::declval<AverageTrafficCalculation>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AverageTrafficCalculation, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& interval_start_ts(const AverageTrafficCalculation* msg);
  static void set_has_interval_start_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& interval_end_ts(const AverageTrafficCalculation* msg);
  static void set_has_interval_end_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AverageTrafficCalculation::_Internal::interval_start_ts(const AverageTrafficCalculation* msg) {
  return *msg->_impl_.interval_start_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AverageTrafficCalculation::_Internal::interval_end_ts(const AverageTrafficCalculation* msg) {
  return *msg->_impl_.interval_end_ts_;
}
void AverageTrafficCalculation::clear_interval_start_ts() {
  if (_impl_.interval_start_ts_ != nullptr) _impl_.interval_start_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AverageTrafficCalculation::clear_interval_end_ts() {
  if (_impl_.interval_end_ts_ != nullptr) _impl_.interval_end_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
AverageTrafficCalculation::AverageTrafficCalculation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.inference.v1.AverageTrafficCalculation)
}
AverageTrafficCalculation::AverageTrafficCalculation(const AverageTrafficCalculation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AverageTrafficCalculation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.statistics_){from._impl_.statistics_}
    , decltype(_impl_.interval_start_ts_){nullptr}
    , decltype(_impl_.interval_end_ts_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.interval_start_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.interval_start_ts_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.interval_end_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.interval_end_ts_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.inference.v1.AverageTrafficCalculation)
}

inline void AverageTrafficCalculation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.statistics_){arena}
    , decltype(_impl_.interval_start_ts_){nullptr}
    , decltype(_impl_.interval_end_ts_){nullptr}
  };
}

AverageTrafficCalculation::~AverageTrafficCalculation() {
  // @@protoc_insertion_point(destructor:cavnue.messages.inference.v1.AverageTrafficCalculation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AverageTrafficCalculation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_statistics()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.interval_start_ts_;
  if (this != internal_default_instance()) delete _impl_.interval_end_ts_;
}

void AverageTrafficCalculation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AverageTrafficCalculation::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.inference.v1.AverageTrafficCalculation)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_statistics()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.interval_start_ts_ != nullptr);
      _impl_.interval_start_ts_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.interval_end_ts_ != nullptr);
      _impl_.interval_end_ts_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AverageTrafficCalculation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .google.protobuf.Timestamp interval_start_ts = 2 [json_name = "intervalStartTs", (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval_start_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .google.protobuf.Timestamp interval_end_ts = 3 [json_name = "intervalEndTs", (.gen_bq_schema.bigquery) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval_end_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cavnue.messages.inference.v1.AverageTrafficCalculation.Statistics statistics = 4 [json_name = "statistics"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_statistics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AverageTrafficCalculation::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.inference.v1.AverageTrafficCalculation)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .google.protobuf.Timestamp interval_start_ts = 2 [json_name = "intervalStartTs", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::interval_start_ts(this),
        _Internal::interval_start_ts(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Timestamp interval_end_ts = 3 [json_name = "intervalEndTs", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::interval_end_ts(this),
        _Internal::interval_end_ts(this).GetCachedSize(), target, stream);
  }

  // repeated .cavnue.messages.inference.v1.AverageTrafficCalculation.Statistics statistics = 4 [json_name = "statistics"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_statistics_size()); i < n; i++) {
    const auto& repfield = this->_internal_statistics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.inference.v1.AverageTrafficCalculation)
  return target;
}

::size_t AverageTrafficCalculation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.inference.v1.AverageTrafficCalculation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cavnue.messages.inference.v1.AverageTrafficCalculation.Statistics statistics = 4 [json_name = "statistics"];
  total_size += 1UL * this->_internal_statistics_size();
  for (const auto& msg : this->_internal_statistics()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .google.protobuf.Timestamp interval_start_ts = 2 [json_name = "intervalStartTs", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interval_start_ts_);
    }

    // optional .google.protobuf.Timestamp interval_end_ts = 3 [json_name = "intervalEndTs", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interval_end_ts_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AverageTrafficCalculation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AverageTrafficCalculation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AverageTrafficCalculation::GetClassData() const { return &_class_data_; }


void AverageTrafficCalculation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AverageTrafficCalculation*>(&to_msg);
  auto& from = static_cast<const AverageTrafficCalculation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.inference.v1.AverageTrafficCalculation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_statistics()->MergeFrom(from._internal_statistics());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_interval_start_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_interval_start_ts());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_interval_end_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_interval_end_ts());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AverageTrafficCalculation::CopyFrom(const AverageTrafficCalculation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.inference.v1.AverageTrafficCalculation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AverageTrafficCalculation::IsInitialized() const {
  return true;
}

void AverageTrafficCalculation::InternalSwap(AverageTrafficCalculation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_statistics()->InternalSwap(other->_internal_mutable_statistics());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AverageTrafficCalculation, _impl_.interval_end_ts_)
      + sizeof(AverageTrafficCalculation::_impl_.interval_end_ts_)
      - PROTOBUF_FIELD_OFFSET(AverageTrafficCalculation, _impl_.interval_start_ts_)>(
          reinterpret_cast<char*>(&_impl_.interval_start_ts_),
          reinterpret_cast<char*>(&other->_impl_.interval_start_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AverageTrafficCalculation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto_getter, &descriptor_table_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto[5]);
}
// ===================================================================

class AnnualAverageDailyTrafficCalculation::_Internal {
 public:
  using HasBits = decltype(std::declval<AnnualAverageDailyTrafficCalculation>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AnnualAverageDailyTrafficCalculation, _impl_._has_bits_);
  static const ::cavnue::messages::common::v1::Header& header(const AnnualAverageDailyTrafficCalculation* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cavnue::messages::inference::v1::AverageTrafficCalculation& average_traffic_calculation(const AnnualAverageDailyTrafficCalculation* msg);
  static void set_has_average_traffic_calculation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::cavnue::messages::common::v1::Header&
AnnualAverageDailyTrafficCalculation::_Internal::header(const AnnualAverageDailyTrafficCalculation* msg) {
  return *msg->_impl_.header_;
}
const ::cavnue::messages::inference::v1::AverageTrafficCalculation&
AnnualAverageDailyTrafficCalculation::_Internal::average_traffic_calculation(const AnnualAverageDailyTrafficCalculation* msg) {
  return *msg->_impl_.average_traffic_calculation_;
}
void AnnualAverageDailyTrafficCalculation::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
AnnualAverageDailyTrafficCalculation::AnnualAverageDailyTrafficCalculation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.inference.v1.AnnualAverageDailyTrafficCalculation)
}
AnnualAverageDailyTrafficCalculation::AnnualAverageDailyTrafficCalculation(const AnnualAverageDailyTrafficCalculation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnnualAverageDailyTrafficCalculation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.average_traffic_calculation_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_ = new ::cavnue::messages::common::v1::Header(*from._impl_.header_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.average_traffic_calculation_ = new ::cavnue::messages::inference::v1::AverageTrafficCalculation(*from._impl_.average_traffic_calculation_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.inference.v1.AnnualAverageDailyTrafficCalculation)
}

inline void AnnualAverageDailyTrafficCalculation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.average_traffic_calculation_){nullptr}
  };
}

AnnualAverageDailyTrafficCalculation::~AnnualAverageDailyTrafficCalculation() {
  // @@protoc_insertion_point(destructor:cavnue.messages.inference.v1.AnnualAverageDailyTrafficCalculation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnnualAverageDailyTrafficCalculation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.average_traffic_calculation_;
}

void AnnualAverageDailyTrafficCalculation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnnualAverageDailyTrafficCalculation::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.inference.v1.AnnualAverageDailyTrafficCalculation)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.average_traffic_calculation_ != nullptr);
      _impl_.average_traffic_calculation_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnnualAverageDailyTrafficCalculation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.inference.v1.AverageTrafficCalculation average_traffic_calculation = 2 [json_name = "averageTrafficCalculation"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_average_traffic_calculation(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AnnualAverageDailyTrafficCalculation::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.inference.v1.AnnualAverageDailyTrafficCalculation)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.inference.v1.AverageTrafficCalculation average_traffic_calculation = 2 [json_name = "averageTrafficCalculation"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::average_traffic_calculation(this),
        _Internal::average_traffic_calculation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.inference.v1.AnnualAverageDailyTrafficCalculation)
  return target;
}

::size_t AnnualAverageDailyTrafficCalculation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.inference.v1.AnnualAverageDailyTrafficCalculation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // .cavnue.messages.inference.v1.AverageTrafficCalculation average_traffic_calculation = 2 [json_name = "averageTrafficCalculation"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.average_traffic_calculation_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnnualAverageDailyTrafficCalculation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AnnualAverageDailyTrafficCalculation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnnualAverageDailyTrafficCalculation::GetClassData() const { return &_class_data_; }


void AnnualAverageDailyTrafficCalculation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AnnualAverageDailyTrafficCalculation*>(&to_msg);
  auto& from = static_cast<const AnnualAverageDailyTrafficCalculation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.inference.v1.AnnualAverageDailyTrafficCalculation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::cavnue::messages::common::v1::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_average_traffic_calculation()->::cavnue::messages::inference::v1::AverageTrafficCalculation::MergeFrom(
          from._internal_average_traffic_calculation());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnnualAverageDailyTrafficCalculation::CopyFrom(const AnnualAverageDailyTrafficCalculation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.inference.v1.AnnualAverageDailyTrafficCalculation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnualAverageDailyTrafficCalculation::IsInitialized() const {
  return true;
}

void AnnualAverageDailyTrafficCalculation::InternalSwap(AnnualAverageDailyTrafficCalculation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnnualAverageDailyTrafficCalculation, _impl_.average_traffic_calculation_)
      + sizeof(AnnualAverageDailyTrafficCalculation::_impl_.average_traffic_calculation_)
      - PROTOBUF_FIELD_OFFSET(AnnualAverageDailyTrafficCalculation, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnnualAverageDailyTrafficCalculation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto_getter, &descriptor_table_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto[6]);
}
// ===================================================================

class MonthlyAverageDailyTrafficCalculation::_Internal {
 public:
  using HasBits = decltype(std::declval<MonthlyAverageDailyTrafficCalculation>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MonthlyAverageDailyTrafficCalculation, _impl_._has_bits_);
  static const ::cavnue::messages::common::v1::Header& header(const MonthlyAverageDailyTrafficCalculation* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cavnue::messages::inference::v1::AverageTrafficCalculation& average_traffic_calculation(const MonthlyAverageDailyTrafficCalculation* msg);
  static void set_has_average_traffic_calculation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::cavnue::messages::common::v1::Header&
MonthlyAverageDailyTrafficCalculation::_Internal::header(const MonthlyAverageDailyTrafficCalculation* msg) {
  return *msg->_impl_.header_;
}
const ::cavnue::messages::inference::v1::AverageTrafficCalculation&
MonthlyAverageDailyTrafficCalculation::_Internal::average_traffic_calculation(const MonthlyAverageDailyTrafficCalculation* msg) {
  return *msg->_impl_.average_traffic_calculation_;
}
void MonthlyAverageDailyTrafficCalculation::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MonthlyAverageDailyTrafficCalculation::MonthlyAverageDailyTrafficCalculation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.inference.v1.MonthlyAverageDailyTrafficCalculation)
}
MonthlyAverageDailyTrafficCalculation::MonthlyAverageDailyTrafficCalculation(const MonthlyAverageDailyTrafficCalculation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MonthlyAverageDailyTrafficCalculation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.average_traffic_calculation_){nullptr}
    , decltype(_impl_.month_) {}

    , decltype(_impl_.year_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_ = new ::cavnue::messages::common::v1::Header(*from._impl_.header_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.average_traffic_calculation_ = new ::cavnue::messages::inference::v1::AverageTrafficCalculation(*from._impl_.average_traffic_calculation_);
  }
  ::memcpy(&_impl_.month_, &from._impl_.month_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.year_) -
    reinterpret_cast<char*>(&_impl_.month_)) + sizeof(_impl_.year_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.inference.v1.MonthlyAverageDailyTrafficCalculation)
}

inline void MonthlyAverageDailyTrafficCalculation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.average_traffic_calculation_){nullptr}
    , decltype(_impl_.month_) { 0 }

    , decltype(_impl_.year_) { 0 }

  };
}

MonthlyAverageDailyTrafficCalculation::~MonthlyAverageDailyTrafficCalculation() {
  // @@protoc_insertion_point(destructor:cavnue.messages.inference.v1.MonthlyAverageDailyTrafficCalculation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MonthlyAverageDailyTrafficCalculation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.average_traffic_calculation_;
}

void MonthlyAverageDailyTrafficCalculation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MonthlyAverageDailyTrafficCalculation::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.inference.v1.MonthlyAverageDailyTrafficCalculation)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.average_traffic_calculation_ != nullptr);
      _impl_.average_traffic_calculation_->Clear();
    }
  }
  ::memset(&_impl_.month_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.year_) -
      reinterpret_cast<char*>(&_impl_.month_)) + sizeof(_impl_.year_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonthlyAverageDailyTrafficCalculation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 month = 2 [json_name = "month"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 year = 3 [json_name = "year"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.inference.v1.AverageTrafficCalculation average_traffic_calculation = 4 [json_name = "averageTrafficCalculation"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_average_traffic_calculation(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MonthlyAverageDailyTrafficCalculation::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.inference.v1.MonthlyAverageDailyTrafficCalculation)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // int32 month = 2 [json_name = "month"];
  if (this->_internal_month() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_month(), target);
  }

  // int32 year = 3 [json_name = "year"];
  if (this->_internal_year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_year(), target);
  }

  // .cavnue.messages.inference.v1.AverageTrafficCalculation average_traffic_calculation = 4 [json_name = "averageTrafficCalculation"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::average_traffic_calculation(this),
        _Internal::average_traffic_calculation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.inference.v1.MonthlyAverageDailyTrafficCalculation)
  return target;
}

::size_t MonthlyAverageDailyTrafficCalculation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.inference.v1.MonthlyAverageDailyTrafficCalculation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // .cavnue.messages.inference.v1.AverageTrafficCalculation average_traffic_calculation = 4 [json_name = "averageTrafficCalculation"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.average_traffic_calculation_);
    }

  }
  // int32 month = 2 [json_name = "month"];
  if (this->_internal_month() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_month());
  }

  // int32 year = 3 [json_name = "year"];
  if (this->_internal_year() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_year());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MonthlyAverageDailyTrafficCalculation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MonthlyAverageDailyTrafficCalculation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MonthlyAverageDailyTrafficCalculation::GetClassData() const { return &_class_data_; }


void MonthlyAverageDailyTrafficCalculation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MonthlyAverageDailyTrafficCalculation*>(&to_msg);
  auto& from = static_cast<const MonthlyAverageDailyTrafficCalculation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.inference.v1.MonthlyAverageDailyTrafficCalculation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::cavnue::messages::common::v1::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_average_traffic_calculation()->::cavnue::messages::inference::v1::AverageTrafficCalculation::MergeFrom(
          from._internal_average_traffic_calculation());
    }
  }
  if (from._internal_month() != 0) {
    _this->_internal_set_month(from._internal_month());
  }
  if (from._internal_year() != 0) {
    _this->_internal_set_year(from._internal_year());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MonthlyAverageDailyTrafficCalculation::CopyFrom(const MonthlyAverageDailyTrafficCalculation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.inference.v1.MonthlyAverageDailyTrafficCalculation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonthlyAverageDailyTrafficCalculation::IsInitialized() const {
  return true;
}

void MonthlyAverageDailyTrafficCalculation::InternalSwap(MonthlyAverageDailyTrafficCalculation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MonthlyAverageDailyTrafficCalculation, _impl_.year_)
      + sizeof(MonthlyAverageDailyTrafficCalculation::_impl_.year_)
      - PROTOBUF_FIELD_OFFSET(MonthlyAverageDailyTrafficCalculation, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MonthlyAverageDailyTrafficCalculation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto_getter, &descriptor_table_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto[7]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace inference
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cavnue::messages::inference::v1::LaneSegmentAggregation_Statistics*
Arena::CreateMaybeMessage< ::cavnue::messages::inference::v1::LaneSegmentAggregation_Statistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::inference::v1::LaneSegmentAggregation_Statistics >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::inference::v1::LaneSegmentAggregation*
Arena::CreateMaybeMessage< ::cavnue::messages::inference::v1::LaneSegmentAggregation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::inference::v1::LaneSegmentAggregation >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::inference::v1::RoadSegmentAggregation_Statistics*
Arena::CreateMaybeMessage< ::cavnue::messages::inference::v1::RoadSegmentAggregation_Statistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::inference::v1::RoadSegmentAggregation_Statistics >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::inference::v1::RoadSegmentAggregation*
Arena::CreateMaybeMessage< ::cavnue::messages::inference::v1::RoadSegmentAggregation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::inference::v1::RoadSegmentAggregation >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::inference::v1::AverageTrafficCalculation_Statistics*
Arena::CreateMaybeMessage< ::cavnue::messages::inference::v1::AverageTrafficCalculation_Statistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::inference::v1::AverageTrafficCalculation_Statistics >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::inference::v1::AverageTrafficCalculation*
Arena::CreateMaybeMessage< ::cavnue::messages::inference::v1::AverageTrafficCalculation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::inference::v1::AverageTrafficCalculation >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation*
Arena::CreateMaybeMessage< ::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::inference::v1::MonthlyAverageDailyTrafficCalculation*
Arena::CreateMaybeMessage< ::cavnue::messages::inference::v1::MonthlyAverageDailyTrafficCalculation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::inference::v1::MonthlyAverageDailyTrafficCalculation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/inference/v1/camera.proto

#include "cavnue/messages/inference/v1/camera.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cavnue {
namespace messages {
namespace inference {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR CameraDetection_Detection::CameraDetection_Detection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bbox_)*/nullptr
  , /*decltype(_impl_.classification_)*/ 0

  , /*decltype(_impl_.class_confidence_)*/ 0

  , /*decltype(_impl_.detection_confidence_)*/ 0
} {}
struct CameraDetection_DetectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CameraDetection_DetectionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CameraDetection_DetectionDefaultTypeInternal() {}
  union {
    CameraDetection_Detection _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CameraDetection_DetectionDefaultTypeInternal _CameraDetection_Detection_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CameraDetection::CameraDetection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.detections_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.observation_ts_)*/nullptr
  , /*decltype(_impl_.observation_duration_)*/nullptr
  , /*decltype(_impl_.data_source_)*/nullptr
  , /*decltype(_impl_.data_id_)*/ ::int64_t{0}
} {}
struct CameraDetectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CameraDetectionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CameraDetectionDefaultTypeInternal() {}
  union {
    CameraDetection _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CameraDetectionDefaultTypeInternal _CameraDetection_default_instance_;
}  // namespace v1
}  // namespace inference
}  // namespace messages
}  // namespace cavnue
static ::_pb::Metadata file_level_metadata_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto = nullptr;
const ::uint32_t TableStruct_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::CameraDetection_Detection, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::CameraDetection_Detection, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::CameraDetection_Detection, _impl_.bbox_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::CameraDetection_Detection, _impl_.classification_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::CameraDetection_Detection, _impl_.class_confidence_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::CameraDetection_Detection, _impl_.detection_confidence_),
    0,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::CameraDetection, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::CameraDetection, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::CameraDetection, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::CameraDetection, _impl_.observation_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::CameraDetection, _impl_.observation_duration_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::CameraDetection, _impl_.data_source_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::CameraDetection, _impl_.detections_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::CameraDetection, _impl_.data_id_),
    0,
    1,
    2,
    3,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 12, -1, sizeof(::cavnue::messages::inference::v1::CameraDetection_Detection)},
        { 16, 30, -1, sizeof(::cavnue::messages::inference::v1::CameraDetection)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cavnue::messages::inference::v1::_CameraDetection_Detection_default_instance_._instance,
    &::cavnue::messages::inference::v1::_CameraDetection_default_instance_._instance,
};
const char descriptor_table_protodef_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n)cavnue/messages/inference/v1/camera.pr"
    "oto\022\034cavnue.messages.inference.v1\032&cavnu"
    "e/messages/common/v1/common.proto\032.cavnu"
    "e/messages/geometry/v1/bounding_box.prot"
    "o\032\036google/protobuf/duration.proto\032\037googl"
    "e/protobuf/timestamp.proto\"\226\005\n\017CameraDet"
    "ection\0229\n\006header\030\001 \001(\0132!.cavnue.messages"
    ".common.v1.HeaderR\006header\022A\n\016observation"
    "_ts\030\002 \001(\0132\032.google.protobuf.TimestampR\ro"
    "bservationTs\022L\n\024observation_duration\030\003 \001"
    "(\0132\031.google.protobuf.DurationR\023observati"
    "onDuration\022F\n\013data_source\030\004 \001(\0132%.cavnue"
    ".messages.common.v1.DataSourceR\ndataSour"
    "ce\022W\n\ndetections\030\005 \003(\01327.cavnue.messages"
    ".inference.v1.CameraDetection.DetectionR"
    "\ndetections\022\027\n\007data_id\030\006 \001(\003R\006dataId\032\374\001\n"
    "\tDetection\022>\n\004bbox\030\001 \001(\0132*.cavnue.messag"
    "es.geometry.v1.BoundingBox2fR\004bbox\022Q\n\016cl"
    "assification\030\002 \001(\0162).cavnue.messages.com"
    "mon.v1.ClassificationR\016classification\022)\n"
    "\020class_confidence\030\003 \001(\002R\017classConfidence"
    "\0221\n\024detection_confidence\030\004 \001(\002R\023detectio"
    "nConfidenceb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto_deps[4] =
    {
        &::descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fbounding_5fbox_2eproto,
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto = {
    false,
    false,
    899,
    descriptor_table_protodef_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto,
    "cavnue/messages/inference/v1/camera.proto",
    &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto_once,
    descriptor_table_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto_deps,
    4,
    2,
    schemas,
    file_default_instances,
    TableStruct_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto::offsets,
    file_level_metadata_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto,
    file_level_enum_descriptors_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto,
    file_level_service_descriptors_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto_getter() {
  return &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto(&descriptor_table_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto);
namespace cavnue {
namespace messages {
namespace inference {
namespace v1 {
// ===================================================================

class CameraDetection_Detection::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraDetection_Detection>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CameraDetection_Detection, _impl_._has_bits_);
  static const ::cavnue::messages::geometry::v1::BoundingBox2f& bbox(const CameraDetection_Detection* msg);
  static void set_has_bbox(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cavnue::messages::geometry::v1::BoundingBox2f&
CameraDetection_Detection::_Internal::bbox(const CameraDetection_Detection* msg) {
  return *msg->_impl_.bbox_;
}
void CameraDetection_Detection::clear_bbox() {
  if (_impl_.bbox_ != nullptr) _impl_.bbox_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CameraDetection_Detection::CameraDetection_Detection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.inference.v1.CameraDetection.Detection)
}
CameraDetection_Detection::CameraDetection_Detection(const CameraDetection_Detection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CameraDetection_Detection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bbox_){nullptr}
    , decltype(_impl_.classification_) {}

    , decltype(_impl_.class_confidence_) {}

    , decltype(_impl_.detection_confidence_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.bbox_ = new ::cavnue::messages::geometry::v1::BoundingBox2f(*from._impl_.bbox_);
  }
  ::memcpy(&_impl_.classification_, &from._impl_.classification_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.detection_confidence_) -
    reinterpret_cast<char*>(&_impl_.classification_)) + sizeof(_impl_.detection_confidence_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.inference.v1.CameraDetection.Detection)
}

inline void CameraDetection_Detection::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bbox_){nullptr}
    , decltype(_impl_.classification_) { 0 }

    , decltype(_impl_.class_confidence_) { 0 }

    , decltype(_impl_.detection_confidence_) { 0 }

  };
}

CameraDetection_Detection::~CameraDetection_Detection() {
  // @@protoc_insertion_point(destructor:cavnue.messages.inference.v1.CameraDetection.Detection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CameraDetection_Detection::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.bbox_;
}

void CameraDetection_Detection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CameraDetection_Detection::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.inference.v1.CameraDetection.Detection)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.bbox_ != nullptr);
    _impl_.bbox_->Clear();
  }
  ::memset(&_impl_.classification_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.detection_confidence_) -
      reinterpret_cast<char*>(&_impl_.classification_)) + sizeof(_impl_.detection_confidence_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraDetection_Detection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.geometry.v1.BoundingBox2f bbox = 1 [json_name = "bbox"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bbox(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.common.v1.Classification classification = 2 [json_name = "classification"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_classification(static_cast<::cavnue::messages::common::v1::Classification>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // float class_confidence = 3 [json_name = "classConfidence"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 29)) {
          _impl_.class_confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float detection_confidence = 4 [json_name = "detectionConfidence"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 37)) {
          _impl_.detection_confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CameraDetection_Detection::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.inference.v1.CameraDetection.Detection)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.geometry.v1.BoundingBox2f bbox = 1 [json_name = "bbox"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::bbox(this),
        _Internal::bbox(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.common.v1.Classification classification = 2 [json_name = "classification"];
  if (this->_internal_classification() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_classification(), target);
  }

  // float class_confidence = 3 [json_name = "classConfidence"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_class_confidence = this->_internal_class_confidence();
  ::uint32_t raw_class_confidence;
  memcpy(&raw_class_confidence, &tmp_class_confidence, sizeof(tmp_class_confidence));
  if (raw_class_confidence != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_class_confidence(), target);
  }

  // float detection_confidence = 4 [json_name = "detectionConfidence"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_detection_confidence = this->_internal_detection_confidence();
  ::uint32_t raw_detection_confidence;
  memcpy(&raw_detection_confidence, &tmp_detection_confidence, sizeof(tmp_detection_confidence));
  if (raw_detection_confidence != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_detection_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.inference.v1.CameraDetection.Detection)
  return target;
}

::size_t CameraDetection_Detection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.inference.v1.CameraDetection.Detection)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cavnue.messages.geometry.v1.BoundingBox2f bbox = 1 [json_name = "bbox"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bbox_);
  }

  // .cavnue.messages.common.v1.Classification classification = 2 [json_name = "classification"];
  if (this->_internal_classification() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_classification());
  }

  // float class_confidence = 3 [json_name = "classConfidence"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_class_confidence = this->_internal_class_confidence();
  ::uint32_t raw_class_confidence;
  memcpy(&raw_class_confidence, &tmp_class_confidence, sizeof(tmp_class_confidence));
  if (raw_class_confidence != 0) {
    total_size += 5;
  }

  // float detection_confidence = 4 [json_name = "detectionConfidence"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_detection_confidence = this->_internal_detection_confidence();
  ::uint32_t raw_detection_confidence;
  memcpy(&raw_detection_confidence, &tmp_detection_confidence, sizeof(tmp_detection_confidence));
  if (raw_detection_confidence != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraDetection_Detection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CameraDetection_Detection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraDetection_Detection::GetClassData() const { return &_class_data_; }


void CameraDetection_Detection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CameraDetection_Detection*>(&to_msg);
  auto& from = static_cast<const CameraDetection_Detection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.inference.v1.CameraDetection.Detection)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_bbox()->::cavnue::messages::geometry::v1::BoundingBox2f::MergeFrom(
        from._internal_bbox());
  }
  if (from._internal_classification() != 0) {
    _this->_internal_set_classification(from._internal_classification());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_class_confidence = from._internal_class_confidence();
  ::uint32_t raw_class_confidence;
  memcpy(&raw_class_confidence, &tmp_class_confidence, sizeof(tmp_class_confidence));
  if (raw_class_confidence != 0) {
    _this->_internal_set_class_confidence(from._internal_class_confidence());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_detection_confidence = from._internal_detection_confidence();
  ::uint32_t raw_detection_confidence;
  memcpy(&raw_detection_confidence, &tmp_detection_confidence, sizeof(tmp_detection_confidence));
  if (raw_detection_confidence != 0) {
    _this->_internal_set_detection_confidence(from._internal_detection_confidence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraDetection_Detection::CopyFrom(const CameraDetection_Detection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.inference.v1.CameraDetection.Detection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraDetection_Detection::IsInitialized() const {
  return true;
}

void CameraDetection_Detection::InternalSwap(CameraDetection_Detection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraDetection_Detection, _impl_.detection_confidence_)
      + sizeof(CameraDetection_Detection::_impl_.detection_confidence_)
      - PROTOBUF_FIELD_OFFSET(CameraDetection_Detection, _impl_.bbox_)>(
          reinterpret_cast<char*>(&_impl_.bbox_),
          reinterpret_cast<char*>(&other->_impl_.bbox_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraDetection_Detection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto_getter, &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto[0]);
}
// ===================================================================

class CameraDetection::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraDetection>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CameraDetection, _impl_._has_bits_);
  static const ::cavnue::messages::common::v1::Header& header(const CameraDetection* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& observation_ts(const CameraDetection* msg);
  static void set_has_observation_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Duration& observation_duration(const CameraDetection* msg);
  static void set_has_observation_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::cavnue::messages::common::v1::DataSource& data_source(const CameraDetection* msg);
  static void set_has_data_source(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::cavnue::messages::common::v1::Header&
CameraDetection::_Internal::header(const CameraDetection* msg) {
  return *msg->_impl_.header_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CameraDetection::_Internal::observation_ts(const CameraDetection* msg) {
  return *msg->_impl_.observation_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
CameraDetection::_Internal::observation_duration(const CameraDetection* msg) {
  return *msg->_impl_.observation_duration_;
}
const ::cavnue::messages::common::v1::DataSource&
CameraDetection::_Internal::data_source(const CameraDetection* msg) {
  return *msg->_impl_.data_source_;
}
void CameraDetection::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CameraDetection::clear_observation_ts() {
  if (_impl_.observation_ts_ != nullptr) _impl_.observation_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CameraDetection::clear_observation_duration() {
  if (_impl_.observation_duration_ != nullptr) _impl_.observation_duration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CameraDetection::clear_data_source() {
  if (_impl_.data_source_ != nullptr) _impl_.data_source_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CameraDetection::CameraDetection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.inference.v1.CameraDetection)
}
CameraDetection::CameraDetection(const CameraDetection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CameraDetection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.detections_){from._impl_.detections_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.observation_ts_){nullptr}
    , decltype(_impl_.observation_duration_){nullptr}
    , decltype(_impl_.data_source_){nullptr}
    , decltype(_impl_.data_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_ = new ::cavnue::messages::common::v1::Header(*from._impl_.header_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.observation_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.observation_ts_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.observation_duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.observation_duration_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.data_source_ = new ::cavnue::messages::common::v1::DataSource(*from._impl_.data_source_);
  }
  _this->_impl_.data_id_ = from._impl_.data_id_;
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.inference.v1.CameraDetection)
}

inline void CameraDetection::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.detections_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.observation_ts_){nullptr}
    , decltype(_impl_.observation_duration_){nullptr}
    , decltype(_impl_.data_source_){nullptr}
    , decltype(_impl_.data_id_) { ::int64_t{0} }

  };
}

CameraDetection::~CameraDetection() {
  // @@protoc_insertion_point(destructor:cavnue.messages.inference.v1.CameraDetection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CameraDetection::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_detections()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.observation_ts_;
  if (this != internal_default_instance()) delete _impl_.observation_duration_;
  if (this != internal_default_instance()) delete _impl_.data_source_;
}

void CameraDetection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CameraDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.inference.v1.CameraDetection)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_detections()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.observation_ts_ != nullptr);
      _impl_.observation_ts_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.observation_duration_ != nullptr);
      _impl_.observation_duration_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.data_source_ != nullptr);
      _impl_.data_source_->Clear();
    }
  }
  _impl_.data_id_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraDetection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp observation_ts = 2 [json_name = "observationTs"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_observation_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Duration observation_duration = 3 [json_name = "observationDuration"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_observation_duration(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.common.v1.DataSource data_source = 4 [json_name = "dataSource"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_source(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cavnue.messages.inference.v1.CameraDetection.Detection detections = 5 [json_name = "detections"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_detections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 data_id = 6 [json_name = "dataId"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.data_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CameraDetection::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.inference.v1.CameraDetection)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp observation_ts = 2 [json_name = "observationTs"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::observation_ts(this),
        _Internal::observation_ts(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration observation_duration = 3 [json_name = "observationDuration"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::observation_duration(this),
        _Internal::observation_duration(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.common.v1.DataSource data_source = 4 [json_name = "dataSource"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::data_source(this),
        _Internal::data_source(this).GetCachedSize(), target, stream);
  }

  // repeated .cavnue.messages.inference.v1.CameraDetection.Detection detections = 5 [json_name = "detections"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_detections_size()); i < n; i++) {
    const auto& repfield = this->_internal_detections(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 data_id = 6 [json_name = "dataId"];
  if (this->_internal_data_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        6, this->_internal_data_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.inference.v1.CameraDetection)
  return target;
}

::size_t CameraDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.inference.v1.CameraDetection)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cavnue.messages.inference.v1.CameraDetection.Detection detections = 5 [json_name = "detections"];
  total_size += 1UL * this->_internal_detections_size();
  for (const auto& msg : this->_internal_detections()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // .google.protobuf.Timestamp observation_ts = 2 [json_name = "observationTs"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.observation_ts_);
    }

    // .google.protobuf.Duration observation_duration = 3 [json_name = "observationDuration"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.observation_duration_);
    }

    // .cavnue.messages.common.v1.DataSource data_source = 4 [json_name = "dataSource"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_source_);
    }

  }
  // int64 data_id = 6 [json_name = "dataId"];
  if (this->_internal_data_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_data_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraDetection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CameraDetection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraDetection::GetClassData() const { return &_class_data_; }


void CameraDetection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CameraDetection*>(&to_msg);
  auto& from = static_cast<const CameraDetection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.inference.v1.CameraDetection)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_detections()->MergeFrom(from._internal_detections());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::cavnue::messages::common::v1::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_observation_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_observation_ts());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_observation_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
          from._internal_observation_duration());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_data_source()->::cavnue::messages::common::v1::DataSource::MergeFrom(
          from._internal_data_source());
    }
  }
  if (from._internal_data_id() != 0) {
    _this->_internal_set_data_id(from._internal_data_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraDetection::CopyFrom(const CameraDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.inference.v1.CameraDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraDetection::IsInitialized() const {
  return true;
}

void CameraDetection::InternalSwap(CameraDetection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_detections()->InternalSwap(other->_internal_mutable_detections());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraDetection, _impl_.data_id_)
      + sizeof(CameraDetection::_impl_.data_id_)
      - PROTOBUF_FIELD_OFFSET(CameraDetection, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraDetection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto_getter, &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace inference
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cavnue::messages::inference::v1::CameraDetection_Detection*
Arena::CreateMaybeMessage< ::cavnue::messages::inference::v1::CameraDetection_Detection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::inference::v1::CameraDetection_Detection >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::inference::v1::CameraDetection*
Arena::CreateMaybeMessage< ::cavnue::messages::inference::v1::CameraDetection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::inference::v1::CameraDetection >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

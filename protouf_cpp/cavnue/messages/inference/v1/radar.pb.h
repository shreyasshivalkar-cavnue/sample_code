// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/inference/v1/radar.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cavnue/messages/common/v1/common.pb.h"
#include "cavnue/messages/common/v1/field_options.pb.h"
#include "cavnue/messages/geometry/v1/vector.pb.h"
#include "google/protobuf/duration.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto;
namespace cavnue {
namespace messages {
namespace inference {
namespace v1 {
class ObjectList;
struct ObjectListDefaultTypeInternal;
extern ObjectListDefaultTypeInternal _ObjectList_default_instance_;
class ObjectList_Object;
struct ObjectList_ObjectDefaultTypeInternal;
extern ObjectList_ObjectDefaultTypeInternal _ObjectList_Object_default_instance_;
class ObjectList_Object_TrackingStatus;
struct ObjectList_Object_TrackingStatusDefaultTypeInternal;
extern ObjectList_Object_TrackingStatusDefaultTypeInternal _ObjectList_Object_TrackingStatus_default_instance_;
class RadarInfo;
struct RadarInfoDefaultTypeInternal;
extern RadarInfoDefaultTypeInternal _RadarInfo_default_instance_;
class RadarStats;
struct RadarStatsDefaultTypeInternal;
extern RadarStatsDefaultTypeInternal _RadarStats_default_instance_;
class TargetList;
struct TargetListDefaultTypeInternal;
extern TargetListDefaultTypeInternal _TargetList_default_instance_;
class TargetList_Target;
struct TargetList_TargetDefaultTypeInternal;
extern TargetList_TargetDefaultTypeInternal _TargetList_Target_default_instance_;
}  // namespace v1
}  // namespace inference
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template <>
::cavnue::messages::inference::v1::ObjectList* Arena::CreateMaybeMessage<::cavnue::messages::inference::v1::ObjectList>(Arena*);
template <>
::cavnue::messages::inference::v1::ObjectList_Object* Arena::CreateMaybeMessage<::cavnue::messages::inference::v1::ObjectList_Object>(Arena*);
template <>
::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus* Arena::CreateMaybeMessage<::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus>(Arena*);
template <>
::cavnue::messages::inference::v1::RadarInfo* Arena::CreateMaybeMessage<::cavnue::messages::inference::v1::RadarInfo>(Arena*);
template <>
::cavnue::messages::inference::v1::RadarStats* Arena::CreateMaybeMessage<::cavnue::messages::inference::v1::RadarStats>(Arena*);
template <>
::cavnue::messages::inference::v1::TargetList* Arena::CreateMaybeMessage<::cavnue::messages::inference::v1::TargetList>(Arena*);
template <>
::cavnue::messages::inference::v1::TargetList_Target* Arena::CreateMaybeMessage<::cavnue::messages::inference::v1::TargetList_Target>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cavnue {
namespace messages {
namespace inference {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class RadarInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.inference.v1.RadarInfo) */ {
 public:
  inline RadarInfo() : RadarInfo(nullptr) {}
  ~RadarInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RadarInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RadarInfo(const RadarInfo& from);
  RadarInfo(RadarInfo&& from) noexcept
    : RadarInfo() {
    *this = ::std::move(from);
  }

  inline RadarInfo& operator=(const RadarInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarInfo& operator=(RadarInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RadarInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RadarInfo* internal_default_instance() {
    return reinterpret_cast<const RadarInfo*>(
               &_RadarInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RadarInfo& a, RadarInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RadarInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadarInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RadarInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RadarInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RadarInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RadarInfo& from) {
    RadarInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.inference.v1.RadarInfo";
  }
  protected:
  explicit RadarInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kVersionFieldNumber = 2,
    kTimeSinceRestartFieldNumber = 3,
  };
  // string client_id = 1 [json_name = "clientId"];
  void clear_client_id() ;
  const std::string& client_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_id(Arg_&& arg, Args_... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* ptr);

  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(
      const std::string& value);
  std::string* _internal_mutable_client_id();

  public:
  // string version = 2 [json_name = "version"];
  void clear_version() ;
  const std::string& version() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* ptr);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // .google.protobuf.Duration time_since_restart = 3 [json_name = "timeSinceRestart"];
  bool has_time_since_restart() const;
  void clear_time_since_restart() ;
  const ::PROTOBUF_NAMESPACE_ID::Duration& time_since_restart() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_time_since_restart();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_time_since_restart();
  void set_allocated_time_since_restart(::PROTOBUF_NAMESPACE_ID::Duration* time_since_restart);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_time_since_restart() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_time_since_restart();
  public:
  void unsafe_arena_set_allocated_time_since_restart(
      ::PROTOBUF_NAMESPACE_ID::Duration* time_since_restart);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_time_since_restart();
  // @@protoc_insertion_point(class_scope:cavnue.messages.inference.v1.RadarInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::Duration* time_since_restart_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto;
};// -------------------------------------------------------------------

class ObjectList_Object_TrackingStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.inference.v1.ObjectList.Object.TrackingStatus) */ {
 public:
  inline ObjectList_Object_TrackingStatus() : ObjectList_Object_TrackingStatus(nullptr) {}
  ~ObjectList_Object_TrackingStatus() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ObjectList_Object_TrackingStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectList_Object_TrackingStatus(const ObjectList_Object_TrackingStatus& from);
  ObjectList_Object_TrackingStatus(ObjectList_Object_TrackingStatus&& from) noexcept
    : ObjectList_Object_TrackingStatus() {
    *this = ::std::move(from);
  }

  inline ObjectList_Object_TrackingStatus& operator=(const ObjectList_Object_TrackingStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectList_Object_TrackingStatus& operator=(ObjectList_Object_TrackingStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectList_Object_TrackingStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectList_Object_TrackingStatus* internal_default_instance() {
    return reinterpret_cast<const ObjectList_Object_TrackingStatus*>(
               &_ObjectList_Object_TrackingStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ObjectList_Object_TrackingStatus& a, ObjectList_Object_TrackingStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectList_Object_TrackingStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectList_Object_TrackingStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectList_Object_TrackingStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectList_Object_TrackingStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectList_Object_TrackingStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObjectList_Object_TrackingStatus& from) {
    ObjectList_Object_TrackingStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectList_Object_TrackingStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.inference.v1.ObjectList.Object.TrackingStatus";
  }
  protected:
  explicit ObjectList_Object_TrackingStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMileageFieldNumber = 2,
    kCyclesSinceLastUpdateFieldNumber = 1,
    kNewObjectFieldNumber = 3,
    kQualityFieldNumber = 4,
  };
  // double mileage = 2 [json_name = "mileage", (.cavnue.messages.common.v1.units) = UNITS_METERS];
  void clear_mileage() ;
  double mileage() const;
  void set_mileage(double value);

  private:
  double _internal_mileage() const;
  void _internal_set_mileage(double value);

  public:
  // int32 cycles_since_last_update = 1 [json_name = "cyclesSinceLastUpdate"];
  void clear_cycles_since_last_update() ;
  ::int32_t cycles_since_last_update() const;
  void set_cycles_since_last_update(::int32_t value);

  private:
  ::int32_t _internal_cycles_since_last_update() const;
  void _internal_set_cycles_since_last_update(::int32_t value);

  public:
  // bool new_object = 3 [json_name = "newObject"];
  void clear_new_object() ;
  bool new_object() const;
  void set_new_object(bool value);

  private:
  bool _internal_new_object() const;
  void _internal_set_new_object(bool value);

  public:
  // double quality = 4 [json_name = "quality"];
  void clear_quality() ;
  double quality() const;
  void set_quality(double value);

  private:
  double _internal_quality() const;
  void _internal_set_quality(double value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.inference.v1.ObjectList.Object.TrackingStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double mileage_;
    ::int32_t cycles_since_last_update_;
    bool new_object_;
    double quality_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto;
};// -------------------------------------------------------------------

class ObjectList_Object final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.inference.v1.ObjectList.Object) */ {
 public:
  inline ObjectList_Object() : ObjectList_Object(nullptr) {}
  ~ObjectList_Object() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ObjectList_Object(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectList_Object(const ObjectList_Object& from);
  ObjectList_Object(ObjectList_Object&& from) noexcept
    : ObjectList_Object() {
    *this = ::std::move(from);
  }

  inline ObjectList_Object& operator=(const ObjectList_Object& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectList_Object& operator=(ObjectList_Object&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectList_Object& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectList_Object* internal_default_instance() {
    return reinterpret_cast<const ObjectList_Object*>(
               &_ObjectList_Object_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ObjectList_Object& a, ObjectList_Object& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectList_Object* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectList_Object* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectList_Object* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectList_Object>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectList_Object& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObjectList_Object& from) {
    ObjectList_Object::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectList_Object* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.inference.v1.ObjectList.Object";
  }
  protected:
  explicit ObjectList_Object(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ObjectList_Object_TrackingStatus TrackingStatus;

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFacingFieldNumber = 8,
    kPositionFrontFieldNumber = 9,
    kTrackingStatusFieldNumber = 12,
    kAccelerationFieldNumber = 1,
    kClassFieldNumber = 2,
    kClosestLaneFieldNumber = 3,
    kHeadingFieldNumber = 4,
    kHeightFieldNumber = 5,
    kLengthFieldNumber = 7,
    kIdFieldNumber = 6,
    kWithinZoneFieldNumber = 13,
    kQualityFieldNumber = 10,
    kSpeedFieldNumber = 11,
  };
  // .cavnue.messages.geometry.v1.Vector2f position_facing = 8 [json_name = "positionFacing", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
  bool has_position_facing() const;
  void clear_position_facing() ;
  const ::cavnue::messages::geometry::v1::Vector2f& position_facing() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::Vector2f* release_position_facing();
  ::cavnue::messages::geometry::v1::Vector2f* mutable_position_facing();
  void set_allocated_position_facing(::cavnue::messages::geometry::v1::Vector2f* position_facing);
  private:
  const ::cavnue::messages::geometry::v1::Vector2f& _internal_position_facing() const;
  ::cavnue::messages::geometry::v1::Vector2f* _internal_mutable_position_facing();
  public:
  void unsafe_arena_set_allocated_position_facing(
      ::cavnue::messages::geometry::v1::Vector2f* position_facing);
  ::cavnue::messages::geometry::v1::Vector2f* unsafe_arena_release_position_facing();
  // .cavnue.messages.geometry.v1.Vector2f position_front = 9 [json_name = "positionFront", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
  bool has_position_front() const;
  void clear_position_front() ;
  const ::cavnue::messages::geometry::v1::Vector2f& position_front() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::Vector2f* release_position_front();
  ::cavnue::messages::geometry::v1::Vector2f* mutable_position_front();
  void set_allocated_position_front(::cavnue::messages::geometry::v1::Vector2f* position_front);
  private:
  const ::cavnue::messages::geometry::v1::Vector2f& _internal_position_front() const;
  ::cavnue::messages::geometry::v1::Vector2f* _internal_mutable_position_front();
  public:
  void unsafe_arena_set_allocated_position_front(
      ::cavnue::messages::geometry::v1::Vector2f* position_front);
  ::cavnue::messages::geometry::v1::Vector2f* unsafe_arena_release_position_front();
  // .cavnue.messages.inference.v1.ObjectList.Object.TrackingStatus tracking_status = 12 [json_name = "trackingStatus"];
  bool has_tracking_status() const;
  void clear_tracking_status() ;
  const ::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus& tracking_status() const;
  PROTOBUF_NODISCARD ::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus* release_tracking_status();
  ::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus* mutable_tracking_status();
  void set_allocated_tracking_status(::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus* tracking_status);
  private:
  const ::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus& _internal_tracking_status() const;
  ::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus* _internal_mutable_tracking_status();
  public:
  void unsafe_arena_set_allocated_tracking_status(
      ::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus* tracking_status);
  ::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus* unsafe_arena_release_tracking_status();
  // double acceleration = 1 [json_name = "acceleration", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
  void clear_acceleration() ;
  double acceleration() const;
  void set_acceleration(double value);

  private:
  double _internal_acceleration() const;
  void _internal_set_acceleration(double value);

  public:
  // int32 class = 2 [json_name = "class", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
  void clear_class_() ;
  ::int32_t class_() const;
  void set_class_(::int32_t value);

  private:
  ::int32_t _internal_class_() const;
  void _internal_set_class_(::int32_t value);

  public:
  // int32 closest_lane = 3 [json_name = "closestLane"];
  void clear_closest_lane() ;
  ::int32_t closest_lane() const;
  void set_closest_lane(::int32_t value);

  private:
  ::int32_t _internal_closest_lane() const;
  void _internal_set_closest_lane(::int32_t value);

  public:
  // double heading = 4 [json_name = "heading", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
  void clear_heading() ;
  double heading() const;
  void set_heading(double value);

  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);

  public:
  // double height = 5 [json_name = "height", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
  void clear_height() ;
  double height() const;
  void set_height(double value);

  private:
  double _internal_height() const;
  void _internal_set_height(double value);

  public:
  // double length = 7 [json_name = "length", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
  void clear_length() ;
  double length() const;
  void set_length(double value);

  private:
  double _internal_length() const;
  void _internal_set_length(double value);

  public:
  // int32 id = 6 [json_name = "id"];
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 within_zone = 13 [json_name = "withinZone"];
  void clear_within_zone() ;
  ::int32_t within_zone() const;
  void set_within_zone(::int32_t value);

  private:
  ::int32_t _internal_within_zone() const;
  void _internal_set_within_zone(::int32_t value);

  public:
  // double quality = 10 [json_name = "quality"];
  void clear_quality() ;
  double quality() const;
  void set_quality(double value);

  private:
  double _internal_quality() const;
  void _internal_set_quality(double value);

  public:
  // double speed = 11 [json_name = "speed", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
  void clear_speed() ;
  double speed() const;
  void set_speed(double value);

  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.inference.v1.ObjectList.Object)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::geometry::v1::Vector2f* position_facing_;
    ::cavnue::messages::geometry::v1::Vector2f* position_front_;
    ::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus* tracking_status_;
    double acceleration_;
    ::int32_t class__;
    ::int32_t closest_lane_;
    double heading_;
    double height_;
    double length_;
    ::int32_t id_;
    ::int32_t within_zone_;
    double quality_;
    double speed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto;
};// -------------------------------------------------------------------

class ObjectList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.inference.v1.ObjectList) */ {
 public:
  inline ObjectList() : ObjectList(nullptr) {}
  ~ObjectList() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ObjectList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectList(const ObjectList& from);
  ObjectList(ObjectList&& from) noexcept
    : ObjectList() {
    *this = ::std::move(from);
  }

  inline ObjectList& operator=(const ObjectList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectList& operator=(ObjectList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectList* internal_default_instance() {
    return reinterpret_cast<const ObjectList*>(
               &_ObjectList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ObjectList& a, ObjectList& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObjectList& from) {
    ObjectList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.inference.v1.ObjectList";
  }
  protected:
  explicit ObjectList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ObjectList_Object Object;

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 6,
    kHeaderFieldNumber = 1,
    kInfoFieldNumber = 2,
    kObservationTsFieldNumber = 3,
    kObservationDurationFieldNumber = 4,
    kDataSourceFieldNumber = 5,
  };
  // repeated .cavnue.messages.inference.v1.ObjectList.Object objects = 6 [json_name = "objects"];
  int objects_size() const;
  private:
  int _internal_objects_size() const;

  public:
  void clear_objects() ;
  ::cavnue::messages::inference::v1::ObjectList_Object* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::ObjectList_Object >*
      mutable_objects();
  private:
  const ::cavnue::messages::inference::v1::ObjectList_Object& _internal_objects(int index) const;
  ::cavnue::messages::inference::v1::ObjectList_Object* _internal_add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::ObjectList_Object>& _internal_objects() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::ObjectList_Object>* _internal_mutable_objects();
  public:
  const ::cavnue::messages::inference::v1::ObjectList_Object& objects(int index) const;
  ::cavnue::messages::inference::v1::ObjectList_Object* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::ObjectList_Object >&
      objects() const;
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  bool has_header() const;
  void clear_header() ;
  const ::cavnue::messages::common::v1::Header& header() const;
  PROTOBUF_NODISCARD ::cavnue::messages::common::v1::Header* release_header();
  ::cavnue::messages::common::v1::Header* mutable_header();
  void set_allocated_header(::cavnue::messages::common::v1::Header* header);
  private:
  const ::cavnue::messages::common::v1::Header& _internal_header() const;
  ::cavnue::messages::common::v1::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::cavnue::messages::common::v1::Header* header);
  ::cavnue::messages::common::v1::Header* unsafe_arena_release_header();
  // .cavnue.messages.inference.v1.RadarInfo info = 2 [json_name = "info"];
  bool has_info() const;
  void clear_info() ;
  const ::cavnue::messages::inference::v1::RadarInfo& info() const;
  PROTOBUF_NODISCARD ::cavnue::messages::inference::v1::RadarInfo* release_info();
  ::cavnue::messages::inference::v1::RadarInfo* mutable_info();
  void set_allocated_info(::cavnue::messages::inference::v1::RadarInfo* info);
  private:
  const ::cavnue::messages::inference::v1::RadarInfo& _internal_info() const;
  ::cavnue::messages::inference::v1::RadarInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::cavnue::messages::inference::v1::RadarInfo* info);
  ::cavnue::messages::inference::v1::RadarInfo* unsafe_arena_release_info();
  // .google.protobuf.Timestamp observation_ts = 3 [json_name = "observationTs"];
  bool has_observation_ts() const;
  void clear_observation_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& observation_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_observation_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_observation_ts();
  void set_allocated_observation_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* observation_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_observation_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_observation_ts();
  public:
  void unsafe_arena_set_allocated_observation_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* observation_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_observation_ts();
  // .google.protobuf.Duration observation_duration = 4 [json_name = "observationDuration"];
  bool has_observation_duration() const;
  void clear_observation_duration() ;
  const ::PROTOBUF_NAMESPACE_ID::Duration& observation_duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_observation_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_observation_duration();
  void set_allocated_observation_duration(::PROTOBUF_NAMESPACE_ID::Duration* observation_duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_observation_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_observation_duration();
  public:
  void unsafe_arena_set_allocated_observation_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* observation_duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_observation_duration();
  // .cavnue.messages.common.v1.DataSource data_source = 5 [json_name = "dataSource"];
  bool has_data_source() const;
  void clear_data_source() ;
  const ::cavnue::messages::common::v1::DataSource& data_source() const;
  PROTOBUF_NODISCARD ::cavnue::messages::common::v1::DataSource* release_data_source();
  ::cavnue::messages::common::v1::DataSource* mutable_data_source();
  void set_allocated_data_source(::cavnue::messages::common::v1::DataSource* data_source);
  private:
  const ::cavnue::messages::common::v1::DataSource& _internal_data_source() const;
  ::cavnue::messages::common::v1::DataSource* _internal_mutable_data_source();
  public:
  void unsafe_arena_set_allocated_data_source(
      ::cavnue::messages::common::v1::DataSource* data_source);
  ::cavnue::messages::common::v1::DataSource* unsafe_arena_release_data_source();
  // @@protoc_insertion_point(class_scope:cavnue.messages.inference.v1.ObjectList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::ObjectList_Object > objects_;
    ::cavnue::messages::common::v1::Header* header_;
    ::cavnue::messages::inference::v1::RadarInfo* info_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* observation_ts_;
    ::PROTOBUF_NAMESPACE_ID::Duration* observation_duration_;
    ::cavnue::messages::common::v1::DataSource* data_source_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto;
};// -------------------------------------------------------------------

class TargetList_Target final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.inference.v1.TargetList.Target) */ {
 public:
  inline TargetList_Target() : TargetList_Target(nullptr) {}
  ~TargetList_Target() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TargetList_Target(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TargetList_Target(const TargetList_Target& from);
  TargetList_Target(TargetList_Target&& from) noexcept
    : TargetList_Target() {
    *this = ::std::move(from);
  }

  inline TargetList_Target& operator=(const TargetList_Target& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetList_Target& operator=(TargetList_Target&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TargetList_Target& default_instance() {
    return *internal_default_instance();
  }
  static inline const TargetList_Target* internal_default_instance() {
    return reinterpret_cast<const TargetList_Target*>(
               &_TargetList_Target_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TargetList_Target& a, TargetList_Target& b) {
    a.Swap(&b);
  }
  inline void Swap(TargetList_Target* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TargetList_Target* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TargetList_Target* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TargetList_Target>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TargetList_Target& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TargetList_Target& from) {
    TargetList_Target::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetList_Target* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.inference.v1.TargetList.Target";
  }
  protected:
  explicit TargetList_Target(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAzimuthAngleFieldNumber = 1,
    kElevationAngleFieldNumber = 2,
    kRangeFieldNumber = 3,
    kRcsFieldNumber = 4,
    kSnrFieldNumber = 5,
    kSpeedRadialFieldNumber = 6,
  };
  // double azimuth_angle = 1 [json_name = "azimuthAngle", (.cavnue.messages.common.v1.units) = UNITS_RADIANS];
  void clear_azimuth_angle() ;
  double azimuth_angle() const;
  void set_azimuth_angle(double value);

  private:
  double _internal_azimuth_angle() const;
  void _internal_set_azimuth_angle(double value);

  public:
  // double elevation_angle = 2 [json_name = "elevationAngle", (.cavnue.messages.common.v1.units) = UNITS_RADIANS];
  void clear_elevation_angle() ;
  double elevation_angle() const;
  void set_elevation_angle(double value);

  private:
  double _internal_elevation_angle() const;
  void _internal_set_elevation_angle(double value);

  public:
  // double range = 3 [json_name = "range", (.cavnue.messages.common.v1.units) = UNITS_METERS];
  void clear_range() ;
  double range() const;
  void set_range(double value);

  private:
  double _internal_range() const;
  void _internal_set_range(double value);

  public:
  // double rcs = 4 [json_name = "rcs"];
  void clear_rcs() ;
  double rcs() const;
  void set_rcs(double value);

  private:
  double _internal_rcs() const;
  void _internal_set_rcs(double value);

  public:
  // double snr = 5 [json_name = "snr", (.cavnue.messages.common.v1.units) = UNITS_DECIBELS];
  void clear_snr() ;
  double snr() const;
  void set_snr(double value);

  private:
  double _internal_snr() const;
  void _internal_set_snr(double value);

  public:
  // double speed_radial = 6 [json_name = "speedRadial", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
  void clear_speed_radial() ;
  double speed_radial() const;
  void set_speed_radial(double value);

  private:
  double _internal_speed_radial() const;
  void _internal_set_speed_radial(double value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.inference.v1.TargetList.Target)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double azimuth_angle_;
    double elevation_angle_;
    double range_;
    double rcs_;
    double snr_;
    double speed_radial_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto;
};// -------------------------------------------------------------------

class TargetList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.inference.v1.TargetList) */ {
 public:
  inline TargetList() : TargetList(nullptr) {}
  ~TargetList() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TargetList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TargetList(const TargetList& from);
  TargetList(TargetList&& from) noexcept
    : TargetList() {
    *this = ::std::move(from);
  }

  inline TargetList& operator=(const TargetList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetList& operator=(TargetList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TargetList& default_instance() {
    return *internal_default_instance();
  }
  static inline const TargetList* internal_default_instance() {
    return reinterpret_cast<const TargetList*>(
               &_TargetList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TargetList& a, TargetList& b) {
    a.Swap(&b);
  }
  inline void Swap(TargetList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TargetList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TargetList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TargetList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TargetList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TargetList& from) {
    TargetList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.inference.v1.TargetList";
  }
  protected:
  explicit TargetList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TargetList_Target Target;

  // accessors -------------------------------------------------------

  enum : int {
    kTargetsFieldNumber = 6,
    kHeaderFieldNumber = 1,
    kInfoFieldNumber = 2,
    kObservationTsFieldNumber = 3,
    kObservationDurationFieldNumber = 4,
    kDataSourceFieldNumber = 5,
  };
  // repeated .cavnue.messages.inference.v1.TargetList.Target targets = 6 [json_name = "targets"];
  int targets_size() const;
  private:
  int _internal_targets_size() const;

  public:
  void clear_targets() ;
  ::cavnue::messages::inference::v1::TargetList_Target* mutable_targets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::TargetList_Target >*
      mutable_targets();
  private:
  const ::cavnue::messages::inference::v1::TargetList_Target& _internal_targets(int index) const;
  ::cavnue::messages::inference::v1::TargetList_Target* _internal_add_targets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::TargetList_Target>& _internal_targets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::TargetList_Target>* _internal_mutable_targets();
  public:
  const ::cavnue::messages::inference::v1::TargetList_Target& targets(int index) const;
  ::cavnue::messages::inference::v1::TargetList_Target* add_targets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::TargetList_Target >&
      targets() const;
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  bool has_header() const;
  void clear_header() ;
  const ::cavnue::messages::common::v1::Header& header() const;
  PROTOBUF_NODISCARD ::cavnue::messages::common::v1::Header* release_header();
  ::cavnue::messages::common::v1::Header* mutable_header();
  void set_allocated_header(::cavnue::messages::common::v1::Header* header);
  private:
  const ::cavnue::messages::common::v1::Header& _internal_header() const;
  ::cavnue::messages::common::v1::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::cavnue::messages::common::v1::Header* header);
  ::cavnue::messages::common::v1::Header* unsafe_arena_release_header();
  // .cavnue.messages.inference.v1.RadarInfo info = 2 [json_name = "info"];
  bool has_info() const;
  void clear_info() ;
  const ::cavnue::messages::inference::v1::RadarInfo& info() const;
  PROTOBUF_NODISCARD ::cavnue::messages::inference::v1::RadarInfo* release_info();
  ::cavnue::messages::inference::v1::RadarInfo* mutable_info();
  void set_allocated_info(::cavnue::messages::inference::v1::RadarInfo* info);
  private:
  const ::cavnue::messages::inference::v1::RadarInfo& _internal_info() const;
  ::cavnue::messages::inference::v1::RadarInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::cavnue::messages::inference::v1::RadarInfo* info);
  ::cavnue::messages::inference::v1::RadarInfo* unsafe_arena_release_info();
  // .google.protobuf.Timestamp observation_ts = 3 [json_name = "observationTs"];
  bool has_observation_ts() const;
  void clear_observation_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& observation_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_observation_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_observation_ts();
  void set_allocated_observation_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* observation_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_observation_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_observation_ts();
  public:
  void unsafe_arena_set_allocated_observation_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* observation_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_observation_ts();
  // .google.protobuf.Duration observation_duration = 4 [json_name = "observationDuration"];
  bool has_observation_duration() const;
  void clear_observation_duration() ;
  const ::PROTOBUF_NAMESPACE_ID::Duration& observation_duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_observation_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_observation_duration();
  void set_allocated_observation_duration(::PROTOBUF_NAMESPACE_ID::Duration* observation_duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_observation_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_observation_duration();
  public:
  void unsafe_arena_set_allocated_observation_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* observation_duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_observation_duration();
  // .cavnue.messages.common.v1.DataSource data_source = 5 [json_name = "dataSource"];
  bool has_data_source() const;
  void clear_data_source() ;
  const ::cavnue::messages::common::v1::DataSource& data_source() const;
  PROTOBUF_NODISCARD ::cavnue::messages::common::v1::DataSource* release_data_source();
  ::cavnue::messages::common::v1::DataSource* mutable_data_source();
  void set_allocated_data_source(::cavnue::messages::common::v1::DataSource* data_source);
  private:
  const ::cavnue::messages::common::v1::DataSource& _internal_data_source() const;
  ::cavnue::messages::common::v1::DataSource* _internal_mutable_data_source();
  public:
  void unsafe_arena_set_allocated_data_source(
      ::cavnue::messages::common::v1::DataSource* data_source);
  ::cavnue::messages::common::v1::DataSource* unsafe_arena_release_data_source();
  // @@protoc_insertion_point(class_scope:cavnue.messages.inference.v1.TargetList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::TargetList_Target > targets_;
    ::cavnue::messages::common::v1::Header* header_;
    ::cavnue::messages::inference::v1::RadarInfo* info_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* observation_ts_;
    ::PROTOBUF_NAMESPACE_ID::Duration* observation_duration_;
    ::cavnue::messages::common::v1::DataSource* data_source_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto;
};// -------------------------------------------------------------------

class RadarStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.inference.v1.RadarStats) */ {
 public:
  inline RadarStats() : RadarStats(nullptr) {}
  ~RadarStats() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RadarStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RadarStats(const RadarStats& from);
  RadarStats(RadarStats&& from) noexcept
    : RadarStats() {
    *this = ::std::move(from);
  }

  inline RadarStats& operator=(const RadarStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarStats& operator=(RadarStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RadarStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const RadarStats* internal_default_instance() {
    return reinterpret_cast<const RadarStats*>(
               &_RadarStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RadarStats& a, RadarStats& b) {
    a.Swap(&b);
  }
  inline void Swap(RadarStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadarStats* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RadarStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RadarStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RadarStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RadarStats& from) {
    RadarStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.inference.v1.RadarStats";
  }
  protected:
  explicit RadarStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kInfoFieldNumber = 2,
    kObservationTsFieldNumber = 3,
    kObservationDurationFieldNumber = 4,
    kDataSourceFieldNumber = 5,
    kBlindFieldNumber = 6,
    kInterferenceFieldNumber = 7,
    kRainFieldNumber = 8,
  };
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  bool has_header() const;
  void clear_header() ;
  const ::cavnue::messages::common::v1::Header& header() const;
  PROTOBUF_NODISCARD ::cavnue::messages::common::v1::Header* release_header();
  ::cavnue::messages::common::v1::Header* mutable_header();
  void set_allocated_header(::cavnue::messages::common::v1::Header* header);
  private:
  const ::cavnue::messages::common::v1::Header& _internal_header() const;
  ::cavnue::messages::common::v1::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::cavnue::messages::common::v1::Header* header);
  ::cavnue::messages::common::v1::Header* unsafe_arena_release_header();
  // .cavnue.messages.inference.v1.RadarInfo info = 2 [json_name = "info"];
  bool has_info() const;
  void clear_info() ;
  const ::cavnue::messages::inference::v1::RadarInfo& info() const;
  PROTOBUF_NODISCARD ::cavnue::messages::inference::v1::RadarInfo* release_info();
  ::cavnue::messages::inference::v1::RadarInfo* mutable_info();
  void set_allocated_info(::cavnue::messages::inference::v1::RadarInfo* info);
  private:
  const ::cavnue::messages::inference::v1::RadarInfo& _internal_info() const;
  ::cavnue::messages::inference::v1::RadarInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::cavnue::messages::inference::v1::RadarInfo* info);
  ::cavnue::messages::inference::v1::RadarInfo* unsafe_arena_release_info();
  // .google.protobuf.Timestamp observation_ts = 3 [json_name = "observationTs"];
  bool has_observation_ts() const;
  void clear_observation_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& observation_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_observation_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_observation_ts();
  void set_allocated_observation_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* observation_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_observation_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_observation_ts();
  public:
  void unsafe_arena_set_allocated_observation_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* observation_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_observation_ts();
  // .google.protobuf.Duration observation_duration = 4 [json_name = "observationDuration"];
  bool has_observation_duration() const;
  void clear_observation_duration() ;
  const ::PROTOBUF_NAMESPACE_ID::Duration& observation_duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_observation_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_observation_duration();
  void set_allocated_observation_duration(::PROTOBUF_NAMESPACE_ID::Duration* observation_duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_observation_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_observation_duration();
  public:
  void unsafe_arena_set_allocated_observation_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* observation_duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_observation_duration();
  // .cavnue.messages.common.v1.DataSource data_source = 5 [json_name = "dataSource"];
  bool has_data_source() const;
  void clear_data_source() ;
  const ::cavnue::messages::common::v1::DataSource& data_source() const;
  PROTOBUF_NODISCARD ::cavnue::messages::common::v1::DataSource* release_data_source();
  ::cavnue::messages::common::v1::DataSource* mutable_data_source();
  void set_allocated_data_source(::cavnue::messages::common::v1::DataSource* data_source);
  private:
  const ::cavnue::messages::common::v1::DataSource& _internal_data_source() const;
  ::cavnue::messages::common::v1::DataSource* _internal_mutable_data_source();
  public:
  void unsafe_arena_set_allocated_data_source(
      ::cavnue::messages::common::v1::DataSource* data_source);
  ::cavnue::messages::common::v1::DataSource* unsafe_arena_release_data_source();
  // bool blind = 6 [json_name = "blind"];
  void clear_blind() ;
  bool blind() const;
  void set_blind(bool value);

  private:
  bool _internal_blind() const;
  void _internal_set_blind(bool value);

  public:
  // bool interference = 7 [json_name = "interference"];
  void clear_interference() ;
  bool interference() const;
  void set_interference(bool value);

  private:
  bool _internal_interference() const;
  void _internal_set_interference(bool value);

  public:
  // bool rain = 8 [json_name = "rain"];
  void clear_rain() ;
  bool rain() const;
  void set_rain(bool value);

  private:
  bool _internal_rain() const;
  void _internal_set_rain(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.inference.v1.RadarStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::common::v1::Header* header_;
    ::cavnue::messages::inference::v1::RadarInfo* info_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* observation_ts_;
    ::PROTOBUF_NAMESPACE_ID::Duration* observation_duration_;
    ::cavnue::messages::common::v1::DataSource* data_source_;
    bool blind_;
    bool interference_;
    bool rain_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RadarInfo

// string client_id = 1 [json_name = "clientId"];
inline void RadarInfo::clear_client_id() {
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& RadarInfo::client_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.RadarInfo.client_id)
  return _internal_client_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RadarInfo::set_client_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.client_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.RadarInfo.client_id)
}
inline std::string* RadarInfo::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.RadarInfo.client_id)
  return _s;
}
inline const std::string& RadarInfo::_internal_client_id() const {
  return _impl_.client_id_.Get();
}
inline void RadarInfo::_internal_set_client_id(const std::string& value) {
  ;


  _impl_.client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RadarInfo::_internal_mutable_client_id() {
  ;
  return _impl_.client_id_.Mutable( GetArenaForAllocation());
}
inline std::string* RadarInfo::release_client_id() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.RadarInfo.client_id)
  return _impl_.client_id_.Release();
}
inline void RadarInfo::set_allocated_client_id(std::string* value) {
  _impl_.client_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.client_id_.IsDefault()) {
          _impl_.client_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.RadarInfo.client_id)
}

// string version = 2 [json_name = "version"];
inline void RadarInfo::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& RadarInfo::version() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.RadarInfo.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RadarInfo::set_version(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.RadarInfo.version)
}
inline std::string* RadarInfo::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.RadarInfo.version)
  return _s;
}
inline const std::string& RadarInfo::_internal_version() const {
  return _impl_.version_.Get();
}
inline void RadarInfo::_internal_set_version(const std::string& value) {
  ;


  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* RadarInfo::_internal_mutable_version() {
  ;
  return _impl_.version_.Mutable( GetArenaForAllocation());
}
inline std::string* RadarInfo::release_version() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.RadarInfo.version)
  return _impl_.version_.Release();
}
inline void RadarInfo::set_allocated_version(std::string* value) {
  _impl_.version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.RadarInfo.version)
}

// .google.protobuf.Duration time_since_restart = 3 [json_name = "timeSinceRestart"];
inline bool RadarInfo::has_time_since_restart() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_since_restart_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& RadarInfo::_internal_time_since_restart() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.time_since_restart_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& RadarInfo::time_since_restart() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.RadarInfo.time_since_restart)
  return _internal_time_since_restart();
}
inline void RadarInfo::unsafe_arena_set_allocated_time_since_restart(
    ::PROTOBUF_NAMESPACE_ID::Duration* time_since_restart) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_since_restart_);
  }
  _impl_.time_since_restart_ = time_since_restart;
  if (time_since_restart) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.RadarInfo.time_since_restart)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RadarInfo::release_time_since_restart() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.time_since_restart_;
  _impl_.time_since_restart_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RadarInfo::unsafe_arena_release_time_since_restart() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.RadarInfo.time_since_restart)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.time_since_restart_;
  _impl_.time_since_restart_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RadarInfo::_internal_mutable_time_since_restart() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.time_since_restart_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.time_since_restart_ = p;
  }
  return _impl_.time_since_restart_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RadarInfo::mutable_time_since_restart() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_time_since_restart();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.RadarInfo.time_since_restart)
  return _msg;
}
inline void RadarInfo::set_allocated_time_since_restart(::PROTOBUF_NAMESPACE_ID::Duration* time_since_restart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_since_restart_);
  }
  if (time_since_restart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_since_restart));
    if (message_arena != submessage_arena) {
      time_since_restart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_since_restart, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.time_since_restart_ = time_since_restart;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.RadarInfo.time_since_restart)
}

// -------------------------------------------------------------------

// ObjectList_Object_TrackingStatus

// int32 cycles_since_last_update = 1 [json_name = "cyclesSinceLastUpdate"];
inline void ObjectList_Object_TrackingStatus::clear_cycles_since_last_update() {
  _impl_.cycles_since_last_update_ = 0;
}
inline ::int32_t ObjectList_Object_TrackingStatus::cycles_since_last_update() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.ObjectList.Object.TrackingStatus.cycles_since_last_update)
  return _internal_cycles_since_last_update();
}
inline void ObjectList_Object_TrackingStatus::set_cycles_since_last_update(::int32_t value) {
  _internal_set_cycles_since_last_update(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.ObjectList.Object.TrackingStatus.cycles_since_last_update)
}
inline ::int32_t ObjectList_Object_TrackingStatus::_internal_cycles_since_last_update() const {
  return _impl_.cycles_since_last_update_;
}
inline void ObjectList_Object_TrackingStatus::_internal_set_cycles_since_last_update(::int32_t value) {
  ;
  _impl_.cycles_since_last_update_ = value;
}

// double mileage = 2 [json_name = "mileage", (.cavnue.messages.common.v1.units) = UNITS_METERS];
inline void ObjectList_Object_TrackingStatus::clear_mileage() {
  _impl_.mileage_ = 0;
}
inline double ObjectList_Object_TrackingStatus::mileage() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.ObjectList.Object.TrackingStatus.mileage)
  return _internal_mileage();
}
inline void ObjectList_Object_TrackingStatus::set_mileage(double value) {
  _internal_set_mileage(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.ObjectList.Object.TrackingStatus.mileage)
}
inline double ObjectList_Object_TrackingStatus::_internal_mileage() const {
  return _impl_.mileage_;
}
inline void ObjectList_Object_TrackingStatus::_internal_set_mileage(double value) {
  ;
  _impl_.mileage_ = value;
}

// bool new_object = 3 [json_name = "newObject"];
inline void ObjectList_Object_TrackingStatus::clear_new_object() {
  _impl_.new_object_ = false;
}
inline bool ObjectList_Object_TrackingStatus::new_object() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.ObjectList.Object.TrackingStatus.new_object)
  return _internal_new_object();
}
inline void ObjectList_Object_TrackingStatus::set_new_object(bool value) {
  _internal_set_new_object(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.ObjectList.Object.TrackingStatus.new_object)
}
inline bool ObjectList_Object_TrackingStatus::_internal_new_object() const {
  return _impl_.new_object_;
}
inline void ObjectList_Object_TrackingStatus::_internal_set_new_object(bool value) {
  ;
  _impl_.new_object_ = value;
}

// double quality = 4 [json_name = "quality"];
inline void ObjectList_Object_TrackingStatus::clear_quality() {
  _impl_.quality_ = 0;
}
inline double ObjectList_Object_TrackingStatus::quality() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.ObjectList.Object.TrackingStatus.quality)
  return _internal_quality();
}
inline void ObjectList_Object_TrackingStatus::set_quality(double value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.ObjectList.Object.TrackingStatus.quality)
}
inline double ObjectList_Object_TrackingStatus::_internal_quality() const {
  return _impl_.quality_;
}
inline void ObjectList_Object_TrackingStatus::_internal_set_quality(double value) {
  ;
  _impl_.quality_ = value;
}

// -------------------------------------------------------------------

// ObjectList_Object

// double acceleration = 1 [json_name = "acceleration", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
inline void ObjectList_Object::clear_acceleration() {
  _impl_.acceleration_ = 0;
}
inline double ObjectList_Object::acceleration() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.ObjectList.Object.acceleration)
  return _internal_acceleration();
}
inline void ObjectList_Object::set_acceleration(double value) {
  _internal_set_acceleration(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.ObjectList.Object.acceleration)
}
inline double ObjectList_Object::_internal_acceleration() const {
  return _impl_.acceleration_;
}
inline void ObjectList_Object::_internal_set_acceleration(double value) {
  ;
  _impl_.acceleration_ = value;
}

// int32 class = 2 [json_name = "class", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
inline void ObjectList_Object::clear_class_() {
  _impl_.class__ = 0;
}
inline ::int32_t ObjectList_Object::class_() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.ObjectList.Object.class)
  return _internal_class_();
}
inline void ObjectList_Object::set_class_(::int32_t value) {
  _internal_set_class_(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.ObjectList.Object.class)
}
inline ::int32_t ObjectList_Object::_internal_class_() const {
  return _impl_.class__;
}
inline void ObjectList_Object::_internal_set_class_(::int32_t value) {
  ;
  _impl_.class__ = value;
}

// int32 closest_lane = 3 [json_name = "closestLane"];
inline void ObjectList_Object::clear_closest_lane() {
  _impl_.closest_lane_ = 0;
}
inline ::int32_t ObjectList_Object::closest_lane() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.ObjectList.Object.closest_lane)
  return _internal_closest_lane();
}
inline void ObjectList_Object::set_closest_lane(::int32_t value) {
  _internal_set_closest_lane(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.ObjectList.Object.closest_lane)
}
inline ::int32_t ObjectList_Object::_internal_closest_lane() const {
  return _impl_.closest_lane_;
}
inline void ObjectList_Object::_internal_set_closest_lane(::int32_t value) {
  ;
  _impl_.closest_lane_ = value;
}

// double heading = 4 [json_name = "heading", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
inline void ObjectList_Object::clear_heading() {
  _impl_.heading_ = 0;
}
inline double ObjectList_Object::heading() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.ObjectList.Object.heading)
  return _internal_heading();
}
inline void ObjectList_Object::set_heading(double value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.ObjectList.Object.heading)
}
inline double ObjectList_Object::_internal_heading() const {
  return _impl_.heading_;
}
inline void ObjectList_Object::_internal_set_heading(double value) {
  ;
  _impl_.heading_ = value;
}

// double height = 5 [json_name = "height", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
inline void ObjectList_Object::clear_height() {
  _impl_.height_ = 0;
}
inline double ObjectList_Object::height() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.ObjectList.Object.height)
  return _internal_height();
}
inline void ObjectList_Object::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.ObjectList.Object.height)
}
inline double ObjectList_Object::_internal_height() const {
  return _impl_.height_;
}
inline void ObjectList_Object::_internal_set_height(double value) {
  ;
  _impl_.height_ = value;
}

// int32 id = 6 [json_name = "id"];
inline void ObjectList_Object::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t ObjectList_Object::id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.ObjectList.Object.id)
  return _internal_id();
}
inline void ObjectList_Object::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.ObjectList.Object.id)
}
inline ::int32_t ObjectList_Object::_internal_id() const {
  return _impl_.id_;
}
inline void ObjectList_Object::_internal_set_id(::int32_t value) {
  ;
  _impl_.id_ = value;
}

// double length = 7 [json_name = "length", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
inline void ObjectList_Object::clear_length() {
  _impl_.length_ = 0;
}
inline double ObjectList_Object::length() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.ObjectList.Object.length)
  return _internal_length();
}
inline void ObjectList_Object::set_length(double value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.ObjectList.Object.length)
}
inline double ObjectList_Object::_internal_length() const {
  return _impl_.length_;
}
inline void ObjectList_Object::_internal_set_length(double value) {
  ;
  _impl_.length_ = value;
}

// .cavnue.messages.geometry.v1.Vector2f position_facing = 8 [json_name = "positionFacing", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
inline bool ObjectList_Object::has_position_facing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_facing_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::Vector2f& ObjectList_Object::_internal_position_facing() const {
  const ::cavnue::messages::geometry::v1::Vector2f* p = _impl_.position_facing_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::Vector2f&>(
      ::cavnue::messages::geometry::v1::_Vector2f_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::Vector2f& ObjectList_Object::position_facing() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.ObjectList.Object.position_facing)
  return _internal_position_facing();
}
inline void ObjectList_Object::unsafe_arena_set_allocated_position_facing(
    ::cavnue::messages::geometry::v1::Vector2f* position_facing) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_facing_);
  }
  _impl_.position_facing_ = position_facing;
  if (position_facing) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.ObjectList.Object.position_facing)
}
inline ::cavnue::messages::geometry::v1::Vector2f* ObjectList_Object::release_position_facing() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::Vector2f* temp = _impl_.position_facing_;
  _impl_.position_facing_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector2f* ObjectList_Object::unsafe_arena_release_position_facing() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.ObjectList.Object.position_facing)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::Vector2f* temp = _impl_.position_facing_;
  _impl_.position_facing_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector2f* ObjectList_Object::_internal_mutable_position_facing() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.position_facing_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::Vector2f>(GetArenaForAllocation());
    _impl_.position_facing_ = p;
  }
  return _impl_.position_facing_;
}
inline ::cavnue::messages::geometry::v1::Vector2f* ObjectList_Object::mutable_position_facing() {
  ::cavnue::messages::geometry::v1::Vector2f* _msg = _internal_mutable_position_facing();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.ObjectList.Object.position_facing)
  return _msg;
}
inline void ObjectList_Object::set_allocated_position_facing(::cavnue::messages::geometry::v1::Vector2f* position_facing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_facing_);
  }
  if (position_facing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_facing));
    if (message_arena != submessage_arena) {
      position_facing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_facing, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.position_facing_ = position_facing;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.ObjectList.Object.position_facing)
}

// .cavnue.messages.geometry.v1.Vector2f position_front = 9 [json_name = "positionFront", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
inline bool ObjectList_Object::has_position_front() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_front_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::Vector2f& ObjectList_Object::_internal_position_front() const {
  const ::cavnue::messages::geometry::v1::Vector2f* p = _impl_.position_front_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::Vector2f&>(
      ::cavnue::messages::geometry::v1::_Vector2f_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::Vector2f& ObjectList_Object::position_front() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.ObjectList.Object.position_front)
  return _internal_position_front();
}
inline void ObjectList_Object::unsafe_arena_set_allocated_position_front(
    ::cavnue::messages::geometry::v1::Vector2f* position_front) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_front_);
  }
  _impl_.position_front_ = position_front;
  if (position_front) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.ObjectList.Object.position_front)
}
inline ::cavnue::messages::geometry::v1::Vector2f* ObjectList_Object::release_position_front() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::geometry::v1::Vector2f* temp = _impl_.position_front_;
  _impl_.position_front_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector2f* ObjectList_Object::unsafe_arena_release_position_front() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.ObjectList.Object.position_front)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::geometry::v1::Vector2f* temp = _impl_.position_front_;
  _impl_.position_front_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector2f* ObjectList_Object::_internal_mutable_position_front() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.position_front_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::Vector2f>(GetArenaForAllocation());
    _impl_.position_front_ = p;
  }
  return _impl_.position_front_;
}
inline ::cavnue::messages::geometry::v1::Vector2f* ObjectList_Object::mutable_position_front() {
  ::cavnue::messages::geometry::v1::Vector2f* _msg = _internal_mutable_position_front();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.ObjectList.Object.position_front)
  return _msg;
}
inline void ObjectList_Object::set_allocated_position_front(::cavnue::messages::geometry::v1::Vector2f* position_front) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_front_);
  }
  if (position_front) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_front));
    if (message_arena != submessage_arena) {
      position_front = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_front, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.position_front_ = position_front;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.ObjectList.Object.position_front)
}

// double quality = 10 [json_name = "quality"];
inline void ObjectList_Object::clear_quality() {
  _impl_.quality_ = 0;
}
inline double ObjectList_Object::quality() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.ObjectList.Object.quality)
  return _internal_quality();
}
inline void ObjectList_Object::set_quality(double value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.ObjectList.Object.quality)
}
inline double ObjectList_Object::_internal_quality() const {
  return _impl_.quality_;
}
inline void ObjectList_Object::_internal_set_quality(double value) {
  ;
  _impl_.quality_ = value;
}

// double speed = 11 [json_name = "speed", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
inline void ObjectList_Object::clear_speed() {
  _impl_.speed_ = 0;
}
inline double ObjectList_Object::speed() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.ObjectList.Object.speed)
  return _internal_speed();
}
inline void ObjectList_Object::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.ObjectList.Object.speed)
}
inline double ObjectList_Object::_internal_speed() const {
  return _impl_.speed_;
}
inline void ObjectList_Object::_internal_set_speed(double value) {
  ;
  _impl_.speed_ = value;
}

// .cavnue.messages.inference.v1.ObjectList.Object.TrackingStatus tracking_status = 12 [json_name = "trackingStatus"];
inline bool ObjectList_Object::has_tracking_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tracking_status_ != nullptr);
  return value;
}
inline void ObjectList_Object::clear_tracking_status() {
  if (_impl_.tracking_status_ != nullptr) _impl_.tracking_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus& ObjectList_Object::_internal_tracking_status() const {
  const ::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus* p = _impl_.tracking_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus&>(
      ::cavnue::messages::inference::v1::_ObjectList_Object_TrackingStatus_default_instance_);
}
inline const ::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus& ObjectList_Object::tracking_status() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.ObjectList.Object.tracking_status)
  return _internal_tracking_status();
}
inline void ObjectList_Object::unsafe_arena_set_allocated_tracking_status(
    ::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus* tracking_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tracking_status_);
  }
  _impl_.tracking_status_ = tracking_status;
  if (tracking_status) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.ObjectList.Object.tracking_status)
}
inline ::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus* ObjectList_Object::release_tracking_status() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus* temp = _impl_.tracking_status_;
  _impl_.tracking_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus* ObjectList_Object::unsafe_arena_release_tracking_status() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.ObjectList.Object.tracking_status)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus* temp = _impl_.tracking_status_;
  _impl_.tracking_status_ = nullptr;
  return temp;
}
inline ::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus* ObjectList_Object::_internal_mutable_tracking_status() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.tracking_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus>(GetArenaForAllocation());
    _impl_.tracking_status_ = p;
  }
  return _impl_.tracking_status_;
}
inline ::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus* ObjectList_Object::mutable_tracking_status() {
  ::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus* _msg = _internal_mutable_tracking_status();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.ObjectList.Object.tracking_status)
  return _msg;
}
inline void ObjectList_Object::set_allocated_tracking_status(::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus* tracking_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tracking_status_;
  }
  if (tracking_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tracking_status);
    if (message_arena != submessage_arena) {
      tracking_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracking_status, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.tracking_status_ = tracking_status;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.ObjectList.Object.tracking_status)
}

// int32 within_zone = 13 [json_name = "withinZone"];
inline void ObjectList_Object::clear_within_zone() {
  _impl_.within_zone_ = 0;
}
inline ::int32_t ObjectList_Object::within_zone() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.ObjectList.Object.within_zone)
  return _internal_within_zone();
}
inline void ObjectList_Object::set_within_zone(::int32_t value) {
  _internal_set_within_zone(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.ObjectList.Object.within_zone)
}
inline ::int32_t ObjectList_Object::_internal_within_zone() const {
  return _impl_.within_zone_;
}
inline void ObjectList_Object::_internal_set_within_zone(::int32_t value) {
  ;
  _impl_.within_zone_ = value;
}

// -------------------------------------------------------------------

// ObjectList

// .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
inline bool ObjectList::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::cavnue::messages::common::v1::Header& ObjectList::_internal_header() const {
  const ::cavnue::messages::common::v1::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::common::v1::Header&>(
      ::cavnue::messages::common::v1::_Header_default_instance_);
}
inline const ::cavnue::messages::common::v1::Header& ObjectList::header() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.ObjectList.header)
  return _internal_header();
}
inline void ObjectList::unsafe_arena_set_allocated_header(
    ::cavnue::messages::common::v1::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.ObjectList.header)
}
inline ::cavnue::messages::common::v1::Header* ObjectList::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::common::v1::Header* ObjectList::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.ObjectList.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::cavnue::messages::common::v1::Header* ObjectList::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::common::v1::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::cavnue::messages::common::v1::Header* ObjectList::mutable_header() {
  ::cavnue::messages::common::v1::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.ObjectList.header)
  return _msg;
}
inline void ObjectList::set_allocated_header(::cavnue::messages::common::v1::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.ObjectList.header)
}

// .cavnue.messages.inference.v1.RadarInfo info = 2 [json_name = "info"];
inline bool ObjectList::has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline void ObjectList::clear_info() {
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::cavnue::messages::inference::v1::RadarInfo& ObjectList::_internal_info() const {
  const ::cavnue::messages::inference::v1::RadarInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::inference::v1::RadarInfo&>(
      ::cavnue::messages::inference::v1::_RadarInfo_default_instance_);
}
inline const ::cavnue::messages::inference::v1::RadarInfo& ObjectList::info() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.ObjectList.info)
  return _internal_info();
}
inline void ObjectList::unsafe_arena_set_allocated_info(
    ::cavnue::messages::inference::v1::RadarInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.ObjectList.info)
}
inline ::cavnue::messages::inference::v1::RadarInfo* ObjectList::release_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::inference::v1::RadarInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::inference::v1::RadarInfo* ObjectList::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.ObjectList.info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::inference::v1::RadarInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::cavnue::messages::inference::v1::RadarInfo* ObjectList::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::inference::v1::RadarInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::cavnue::messages::inference::v1::RadarInfo* ObjectList::mutable_info() {
  ::cavnue::messages::inference::v1::RadarInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.ObjectList.info)
  return _msg;
}
inline void ObjectList::set_allocated_info(::cavnue::messages::inference::v1::RadarInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.ObjectList.info)
}

// .google.protobuf.Timestamp observation_ts = 3 [json_name = "observationTs"];
inline bool ObjectList::has_observation_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.observation_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ObjectList::_internal_observation_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.observation_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ObjectList::observation_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.ObjectList.observation_ts)
  return _internal_observation_ts();
}
inline void ObjectList::unsafe_arena_set_allocated_observation_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* observation_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observation_ts_);
  }
  _impl_.observation_ts_ = observation_ts;
  if (observation_ts) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.ObjectList.observation_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ObjectList::release_observation_ts() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.observation_ts_;
  _impl_.observation_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ObjectList::unsafe_arena_release_observation_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.ObjectList.observation_ts)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.observation_ts_;
  _impl_.observation_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ObjectList::_internal_mutable_observation_ts() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.observation_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.observation_ts_ = p;
  }
  return _impl_.observation_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ObjectList::mutable_observation_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_observation_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.ObjectList.observation_ts)
  return _msg;
}
inline void ObjectList::set_allocated_observation_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* observation_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observation_ts_);
  }
  if (observation_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(observation_ts));
    if (message_arena != submessage_arena) {
      observation_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observation_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.observation_ts_ = observation_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.ObjectList.observation_ts)
}

// .google.protobuf.Duration observation_duration = 4 [json_name = "observationDuration"];
inline bool ObjectList::has_observation_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.observation_duration_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ObjectList::_internal_observation_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.observation_duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ObjectList::observation_duration() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.ObjectList.observation_duration)
  return _internal_observation_duration();
}
inline void ObjectList::unsafe_arena_set_allocated_observation_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* observation_duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observation_duration_);
  }
  _impl_.observation_duration_ = observation_duration;
  if (observation_duration) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.ObjectList.observation_duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ObjectList::release_observation_duration() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.observation_duration_;
  _impl_.observation_duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ObjectList::unsafe_arena_release_observation_duration() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.ObjectList.observation_duration)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.observation_duration_;
  _impl_.observation_duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ObjectList::_internal_mutable_observation_duration() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.observation_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.observation_duration_ = p;
  }
  return _impl_.observation_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ObjectList::mutable_observation_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_observation_duration();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.ObjectList.observation_duration)
  return _msg;
}
inline void ObjectList::set_allocated_observation_duration(::PROTOBUF_NAMESPACE_ID::Duration* observation_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observation_duration_);
  }
  if (observation_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(observation_duration));
    if (message_arena != submessage_arena) {
      observation_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observation_duration, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.observation_duration_ = observation_duration;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.ObjectList.observation_duration)
}

// .cavnue.messages.common.v1.DataSource data_source = 5 [json_name = "dataSource"];
inline bool ObjectList::has_data_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_source_ != nullptr);
  return value;
}
inline const ::cavnue::messages::common::v1::DataSource& ObjectList::_internal_data_source() const {
  const ::cavnue::messages::common::v1::DataSource* p = _impl_.data_source_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::common::v1::DataSource&>(
      ::cavnue::messages::common::v1::_DataSource_default_instance_);
}
inline const ::cavnue::messages::common::v1::DataSource& ObjectList::data_source() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.ObjectList.data_source)
  return _internal_data_source();
}
inline void ObjectList::unsafe_arena_set_allocated_data_source(
    ::cavnue::messages::common::v1::DataSource* data_source) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_source_);
  }
  _impl_.data_source_ = data_source;
  if (data_source) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.ObjectList.data_source)
}
inline ::cavnue::messages::common::v1::DataSource* ObjectList::release_data_source() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::cavnue::messages::common::v1::DataSource* temp = _impl_.data_source_;
  _impl_.data_source_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::common::v1::DataSource* ObjectList::unsafe_arena_release_data_source() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.ObjectList.data_source)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::cavnue::messages::common::v1::DataSource* temp = _impl_.data_source_;
  _impl_.data_source_ = nullptr;
  return temp;
}
inline ::cavnue::messages::common::v1::DataSource* ObjectList::_internal_mutable_data_source() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.data_source_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::common::v1::DataSource>(GetArenaForAllocation());
    _impl_.data_source_ = p;
  }
  return _impl_.data_source_;
}
inline ::cavnue::messages::common::v1::DataSource* ObjectList::mutable_data_source() {
  ::cavnue::messages::common::v1::DataSource* _msg = _internal_mutable_data_source();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.ObjectList.data_source)
  return _msg;
}
inline void ObjectList::set_allocated_data_source(::cavnue::messages::common::v1::DataSource* data_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_source_);
  }
  if (data_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_source));
    if (message_arena != submessage_arena) {
      data_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_source, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.data_source_ = data_source;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.ObjectList.data_source)
}

// repeated .cavnue.messages.inference.v1.ObjectList.Object objects = 6 [json_name = "objects"];
inline int ObjectList::_internal_objects_size() const {
  return _impl_.objects_.size();
}
inline int ObjectList::objects_size() const {
  return _internal_objects_size();
}
inline void ObjectList::clear_objects() {
  _internal_mutable_objects()->Clear();
}
inline ::cavnue::messages::inference::v1::ObjectList_Object* ObjectList::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.ObjectList.objects)
  return _internal_mutable_objects()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::ObjectList_Object >*
ObjectList::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.inference.v1.ObjectList.objects)
  return _internal_mutable_objects();
}
inline const ::cavnue::messages::inference::v1::ObjectList_Object& ObjectList::_internal_objects(int index) const {
  return _internal_objects().Get(index);
}
inline const ::cavnue::messages::inference::v1::ObjectList_Object& ObjectList::objects(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.ObjectList.objects)
  return _internal_objects(index);
}
inline ::cavnue::messages::inference::v1::ObjectList_Object* ObjectList::_internal_add_objects() {
  return _internal_mutable_objects()->Add();
}
inline ::cavnue::messages::inference::v1::ObjectList_Object* ObjectList::add_objects() {
  ::cavnue::messages::inference::v1::ObjectList_Object* _add = _internal_add_objects();
  // @@protoc_insertion_point(field_add:cavnue.messages.inference.v1.ObjectList.objects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::ObjectList_Object >&
ObjectList::objects() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.inference.v1.ObjectList.objects)
  return _internal_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::ObjectList_Object>&
ObjectList::_internal_objects() const {
  return _impl_.objects_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::ObjectList_Object>*
ObjectList::_internal_mutable_objects() {
  return &_impl_.objects_;
}

// -------------------------------------------------------------------

// TargetList_Target

// double azimuth_angle = 1 [json_name = "azimuthAngle", (.cavnue.messages.common.v1.units) = UNITS_RADIANS];
inline void TargetList_Target::clear_azimuth_angle() {
  _impl_.azimuth_angle_ = 0;
}
inline double TargetList_Target::azimuth_angle() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.TargetList.Target.azimuth_angle)
  return _internal_azimuth_angle();
}
inline void TargetList_Target::set_azimuth_angle(double value) {
  _internal_set_azimuth_angle(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.TargetList.Target.azimuth_angle)
}
inline double TargetList_Target::_internal_azimuth_angle() const {
  return _impl_.azimuth_angle_;
}
inline void TargetList_Target::_internal_set_azimuth_angle(double value) {
  ;
  _impl_.azimuth_angle_ = value;
}

// double elevation_angle = 2 [json_name = "elevationAngle", (.cavnue.messages.common.v1.units) = UNITS_RADIANS];
inline void TargetList_Target::clear_elevation_angle() {
  _impl_.elevation_angle_ = 0;
}
inline double TargetList_Target::elevation_angle() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.TargetList.Target.elevation_angle)
  return _internal_elevation_angle();
}
inline void TargetList_Target::set_elevation_angle(double value) {
  _internal_set_elevation_angle(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.TargetList.Target.elevation_angle)
}
inline double TargetList_Target::_internal_elevation_angle() const {
  return _impl_.elevation_angle_;
}
inline void TargetList_Target::_internal_set_elevation_angle(double value) {
  ;
  _impl_.elevation_angle_ = value;
}

// double range = 3 [json_name = "range", (.cavnue.messages.common.v1.units) = UNITS_METERS];
inline void TargetList_Target::clear_range() {
  _impl_.range_ = 0;
}
inline double TargetList_Target::range() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.TargetList.Target.range)
  return _internal_range();
}
inline void TargetList_Target::set_range(double value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.TargetList.Target.range)
}
inline double TargetList_Target::_internal_range() const {
  return _impl_.range_;
}
inline void TargetList_Target::_internal_set_range(double value) {
  ;
  _impl_.range_ = value;
}

// double rcs = 4 [json_name = "rcs"];
inline void TargetList_Target::clear_rcs() {
  _impl_.rcs_ = 0;
}
inline double TargetList_Target::rcs() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.TargetList.Target.rcs)
  return _internal_rcs();
}
inline void TargetList_Target::set_rcs(double value) {
  _internal_set_rcs(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.TargetList.Target.rcs)
}
inline double TargetList_Target::_internal_rcs() const {
  return _impl_.rcs_;
}
inline void TargetList_Target::_internal_set_rcs(double value) {
  ;
  _impl_.rcs_ = value;
}

// double snr = 5 [json_name = "snr", (.cavnue.messages.common.v1.units) = UNITS_DECIBELS];
inline void TargetList_Target::clear_snr() {
  _impl_.snr_ = 0;
}
inline double TargetList_Target::snr() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.TargetList.Target.snr)
  return _internal_snr();
}
inline void TargetList_Target::set_snr(double value) {
  _internal_set_snr(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.TargetList.Target.snr)
}
inline double TargetList_Target::_internal_snr() const {
  return _impl_.snr_;
}
inline void TargetList_Target::_internal_set_snr(double value) {
  ;
  _impl_.snr_ = value;
}

// double speed_radial = 6 [json_name = "speedRadial", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
inline void TargetList_Target::clear_speed_radial() {
  _impl_.speed_radial_ = 0;
}
inline double TargetList_Target::speed_radial() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.TargetList.Target.speed_radial)
  return _internal_speed_radial();
}
inline void TargetList_Target::set_speed_radial(double value) {
  _internal_set_speed_radial(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.TargetList.Target.speed_radial)
}
inline double TargetList_Target::_internal_speed_radial() const {
  return _impl_.speed_radial_;
}
inline void TargetList_Target::_internal_set_speed_radial(double value) {
  ;
  _impl_.speed_radial_ = value;
}

// -------------------------------------------------------------------

// TargetList

// .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
inline bool TargetList::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::cavnue::messages::common::v1::Header& TargetList::_internal_header() const {
  const ::cavnue::messages::common::v1::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::common::v1::Header&>(
      ::cavnue::messages::common::v1::_Header_default_instance_);
}
inline const ::cavnue::messages::common::v1::Header& TargetList::header() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.TargetList.header)
  return _internal_header();
}
inline void TargetList::unsafe_arena_set_allocated_header(
    ::cavnue::messages::common::v1::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.TargetList.header)
}
inline ::cavnue::messages::common::v1::Header* TargetList::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::common::v1::Header* TargetList::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.TargetList.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::cavnue::messages::common::v1::Header* TargetList::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::common::v1::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::cavnue::messages::common::v1::Header* TargetList::mutable_header() {
  ::cavnue::messages::common::v1::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.TargetList.header)
  return _msg;
}
inline void TargetList::set_allocated_header(::cavnue::messages::common::v1::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.TargetList.header)
}

// .cavnue.messages.inference.v1.RadarInfo info = 2 [json_name = "info"];
inline bool TargetList::has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline void TargetList::clear_info() {
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::cavnue::messages::inference::v1::RadarInfo& TargetList::_internal_info() const {
  const ::cavnue::messages::inference::v1::RadarInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::inference::v1::RadarInfo&>(
      ::cavnue::messages::inference::v1::_RadarInfo_default_instance_);
}
inline const ::cavnue::messages::inference::v1::RadarInfo& TargetList::info() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.TargetList.info)
  return _internal_info();
}
inline void TargetList::unsafe_arena_set_allocated_info(
    ::cavnue::messages::inference::v1::RadarInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.TargetList.info)
}
inline ::cavnue::messages::inference::v1::RadarInfo* TargetList::release_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::inference::v1::RadarInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::inference::v1::RadarInfo* TargetList::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.TargetList.info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::inference::v1::RadarInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::cavnue::messages::inference::v1::RadarInfo* TargetList::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::inference::v1::RadarInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::cavnue::messages::inference::v1::RadarInfo* TargetList::mutable_info() {
  ::cavnue::messages::inference::v1::RadarInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.TargetList.info)
  return _msg;
}
inline void TargetList::set_allocated_info(::cavnue::messages::inference::v1::RadarInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.TargetList.info)
}

// .google.protobuf.Timestamp observation_ts = 3 [json_name = "observationTs"];
inline bool TargetList::has_observation_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.observation_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TargetList::_internal_observation_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.observation_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TargetList::observation_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.TargetList.observation_ts)
  return _internal_observation_ts();
}
inline void TargetList::unsafe_arena_set_allocated_observation_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* observation_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observation_ts_);
  }
  _impl_.observation_ts_ = observation_ts;
  if (observation_ts) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.TargetList.observation_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TargetList::release_observation_ts() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.observation_ts_;
  _impl_.observation_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TargetList::unsafe_arena_release_observation_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.TargetList.observation_ts)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.observation_ts_;
  _impl_.observation_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TargetList::_internal_mutable_observation_ts() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.observation_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.observation_ts_ = p;
  }
  return _impl_.observation_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TargetList::mutable_observation_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_observation_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.TargetList.observation_ts)
  return _msg;
}
inline void TargetList::set_allocated_observation_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* observation_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observation_ts_);
  }
  if (observation_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(observation_ts));
    if (message_arena != submessage_arena) {
      observation_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observation_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.observation_ts_ = observation_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.TargetList.observation_ts)
}

// .google.protobuf.Duration observation_duration = 4 [json_name = "observationDuration"];
inline bool TargetList::has_observation_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.observation_duration_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& TargetList::_internal_observation_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.observation_duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& TargetList::observation_duration() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.TargetList.observation_duration)
  return _internal_observation_duration();
}
inline void TargetList::unsafe_arena_set_allocated_observation_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* observation_duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observation_duration_);
  }
  _impl_.observation_duration_ = observation_duration;
  if (observation_duration) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.TargetList.observation_duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TargetList::release_observation_duration() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.observation_duration_;
  _impl_.observation_duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TargetList::unsafe_arena_release_observation_duration() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.TargetList.observation_duration)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.observation_duration_;
  _impl_.observation_duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TargetList::_internal_mutable_observation_duration() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.observation_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.observation_duration_ = p;
  }
  return _impl_.observation_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TargetList::mutable_observation_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_observation_duration();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.TargetList.observation_duration)
  return _msg;
}
inline void TargetList::set_allocated_observation_duration(::PROTOBUF_NAMESPACE_ID::Duration* observation_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observation_duration_);
  }
  if (observation_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(observation_duration));
    if (message_arena != submessage_arena) {
      observation_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observation_duration, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.observation_duration_ = observation_duration;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.TargetList.observation_duration)
}

// .cavnue.messages.common.v1.DataSource data_source = 5 [json_name = "dataSource"];
inline bool TargetList::has_data_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_source_ != nullptr);
  return value;
}
inline const ::cavnue::messages::common::v1::DataSource& TargetList::_internal_data_source() const {
  const ::cavnue::messages::common::v1::DataSource* p = _impl_.data_source_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::common::v1::DataSource&>(
      ::cavnue::messages::common::v1::_DataSource_default_instance_);
}
inline const ::cavnue::messages::common::v1::DataSource& TargetList::data_source() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.TargetList.data_source)
  return _internal_data_source();
}
inline void TargetList::unsafe_arena_set_allocated_data_source(
    ::cavnue::messages::common::v1::DataSource* data_source) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_source_);
  }
  _impl_.data_source_ = data_source;
  if (data_source) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.TargetList.data_source)
}
inline ::cavnue::messages::common::v1::DataSource* TargetList::release_data_source() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::cavnue::messages::common::v1::DataSource* temp = _impl_.data_source_;
  _impl_.data_source_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::common::v1::DataSource* TargetList::unsafe_arena_release_data_source() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.TargetList.data_source)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::cavnue::messages::common::v1::DataSource* temp = _impl_.data_source_;
  _impl_.data_source_ = nullptr;
  return temp;
}
inline ::cavnue::messages::common::v1::DataSource* TargetList::_internal_mutable_data_source() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.data_source_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::common::v1::DataSource>(GetArenaForAllocation());
    _impl_.data_source_ = p;
  }
  return _impl_.data_source_;
}
inline ::cavnue::messages::common::v1::DataSource* TargetList::mutable_data_source() {
  ::cavnue::messages::common::v1::DataSource* _msg = _internal_mutable_data_source();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.TargetList.data_source)
  return _msg;
}
inline void TargetList::set_allocated_data_source(::cavnue::messages::common::v1::DataSource* data_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_source_);
  }
  if (data_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_source));
    if (message_arena != submessage_arena) {
      data_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_source, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.data_source_ = data_source;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.TargetList.data_source)
}

// repeated .cavnue.messages.inference.v1.TargetList.Target targets = 6 [json_name = "targets"];
inline int TargetList::_internal_targets_size() const {
  return _impl_.targets_.size();
}
inline int TargetList::targets_size() const {
  return _internal_targets_size();
}
inline void TargetList::clear_targets() {
  _internal_mutable_targets()->Clear();
}
inline ::cavnue::messages::inference::v1::TargetList_Target* TargetList::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.TargetList.targets)
  return _internal_mutable_targets()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::TargetList_Target >*
TargetList::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.inference.v1.TargetList.targets)
  return _internal_mutable_targets();
}
inline const ::cavnue::messages::inference::v1::TargetList_Target& TargetList::_internal_targets(int index) const {
  return _internal_targets().Get(index);
}
inline const ::cavnue::messages::inference::v1::TargetList_Target& TargetList::targets(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.TargetList.targets)
  return _internal_targets(index);
}
inline ::cavnue::messages::inference::v1::TargetList_Target* TargetList::_internal_add_targets() {
  return _internal_mutable_targets()->Add();
}
inline ::cavnue::messages::inference::v1::TargetList_Target* TargetList::add_targets() {
  ::cavnue::messages::inference::v1::TargetList_Target* _add = _internal_add_targets();
  // @@protoc_insertion_point(field_add:cavnue.messages.inference.v1.TargetList.targets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::TargetList_Target >&
TargetList::targets() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.inference.v1.TargetList.targets)
  return _internal_targets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::TargetList_Target>&
TargetList::_internal_targets() const {
  return _impl_.targets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::TargetList_Target>*
TargetList::_internal_mutable_targets() {
  return &_impl_.targets_;
}

// -------------------------------------------------------------------

// RadarStats

// .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
inline bool RadarStats::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::cavnue::messages::common::v1::Header& RadarStats::_internal_header() const {
  const ::cavnue::messages::common::v1::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::common::v1::Header&>(
      ::cavnue::messages::common::v1::_Header_default_instance_);
}
inline const ::cavnue::messages::common::v1::Header& RadarStats::header() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.RadarStats.header)
  return _internal_header();
}
inline void RadarStats::unsafe_arena_set_allocated_header(
    ::cavnue::messages::common::v1::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.RadarStats.header)
}
inline ::cavnue::messages::common::v1::Header* RadarStats::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::common::v1::Header* RadarStats::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.RadarStats.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::cavnue::messages::common::v1::Header* RadarStats::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::common::v1::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::cavnue::messages::common::v1::Header* RadarStats::mutable_header() {
  ::cavnue::messages::common::v1::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.RadarStats.header)
  return _msg;
}
inline void RadarStats::set_allocated_header(::cavnue::messages::common::v1::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.RadarStats.header)
}

// .cavnue.messages.inference.v1.RadarInfo info = 2 [json_name = "info"];
inline bool RadarStats::has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline void RadarStats::clear_info() {
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::cavnue::messages::inference::v1::RadarInfo& RadarStats::_internal_info() const {
  const ::cavnue::messages::inference::v1::RadarInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::inference::v1::RadarInfo&>(
      ::cavnue::messages::inference::v1::_RadarInfo_default_instance_);
}
inline const ::cavnue::messages::inference::v1::RadarInfo& RadarStats::info() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.RadarStats.info)
  return _internal_info();
}
inline void RadarStats::unsafe_arena_set_allocated_info(
    ::cavnue::messages::inference::v1::RadarInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.RadarStats.info)
}
inline ::cavnue::messages::inference::v1::RadarInfo* RadarStats::release_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::inference::v1::RadarInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::inference::v1::RadarInfo* RadarStats::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.RadarStats.info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::inference::v1::RadarInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::cavnue::messages::inference::v1::RadarInfo* RadarStats::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::inference::v1::RadarInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::cavnue::messages::inference::v1::RadarInfo* RadarStats::mutable_info() {
  ::cavnue::messages::inference::v1::RadarInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.RadarStats.info)
  return _msg;
}
inline void RadarStats::set_allocated_info(::cavnue::messages::inference::v1::RadarInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.RadarStats.info)
}

// .google.protobuf.Timestamp observation_ts = 3 [json_name = "observationTs"];
inline bool RadarStats::has_observation_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.observation_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& RadarStats::_internal_observation_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.observation_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& RadarStats::observation_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.RadarStats.observation_ts)
  return _internal_observation_ts();
}
inline void RadarStats::unsafe_arena_set_allocated_observation_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* observation_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observation_ts_);
  }
  _impl_.observation_ts_ = observation_ts;
  if (observation_ts) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.RadarStats.observation_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RadarStats::release_observation_ts() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.observation_ts_;
  _impl_.observation_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RadarStats::unsafe_arena_release_observation_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.RadarStats.observation_ts)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.observation_ts_;
  _impl_.observation_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RadarStats::_internal_mutable_observation_ts() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.observation_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.observation_ts_ = p;
  }
  return _impl_.observation_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RadarStats::mutable_observation_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_observation_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.RadarStats.observation_ts)
  return _msg;
}
inline void RadarStats::set_allocated_observation_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* observation_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observation_ts_);
  }
  if (observation_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(observation_ts));
    if (message_arena != submessage_arena) {
      observation_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observation_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.observation_ts_ = observation_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.RadarStats.observation_ts)
}

// .google.protobuf.Duration observation_duration = 4 [json_name = "observationDuration"];
inline bool RadarStats::has_observation_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.observation_duration_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& RadarStats::_internal_observation_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.observation_duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& RadarStats::observation_duration() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.RadarStats.observation_duration)
  return _internal_observation_duration();
}
inline void RadarStats::unsafe_arena_set_allocated_observation_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* observation_duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observation_duration_);
  }
  _impl_.observation_duration_ = observation_duration;
  if (observation_duration) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.RadarStats.observation_duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RadarStats::release_observation_duration() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.observation_duration_;
  _impl_.observation_duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RadarStats::unsafe_arena_release_observation_duration() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.RadarStats.observation_duration)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.observation_duration_;
  _impl_.observation_duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RadarStats::_internal_mutable_observation_duration() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.observation_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.observation_duration_ = p;
  }
  return _impl_.observation_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RadarStats::mutable_observation_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_observation_duration();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.RadarStats.observation_duration)
  return _msg;
}
inline void RadarStats::set_allocated_observation_duration(::PROTOBUF_NAMESPACE_ID::Duration* observation_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observation_duration_);
  }
  if (observation_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(observation_duration));
    if (message_arena != submessage_arena) {
      observation_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observation_duration, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.observation_duration_ = observation_duration;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.RadarStats.observation_duration)
}

// .cavnue.messages.common.v1.DataSource data_source = 5 [json_name = "dataSource"];
inline bool RadarStats::has_data_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_source_ != nullptr);
  return value;
}
inline const ::cavnue::messages::common::v1::DataSource& RadarStats::_internal_data_source() const {
  const ::cavnue::messages::common::v1::DataSource* p = _impl_.data_source_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::common::v1::DataSource&>(
      ::cavnue::messages::common::v1::_DataSource_default_instance_);
}
inline const ::cavnue::messages::common::v1::DataSource& RadarStats::data_source() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.RadarStats.data_source)
  return _internal_data_source();
}
inline void RadarStats::unsafe_arena_set_allocated_data_source(
    ::cavnue::messages::common::v1::DataSource* data_source) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_source_);
  }
  _impl_.data_source_ = data_source;
  if (data_source) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.RadarStats.data_source)
}
inline ::cavnue::messages::common::v1::DataSource* RadarStats::release_data_source() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::cavnue::messages::common::v1::DataSource* temp = _impl_.data_source_;
  _impl_.data_source_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::common::v1::DataSource* RadarStats::unsafe_arena_release_data_source() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.RadarStats.data_source)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::cavnue::messages::common::v1::DataSource* temp = _impl_.data_source_;
  _impl_.data_source_ = nullptr;
  return temp;
}
inline ::cavnue::messages::common::v1::DataSource* RadarStats::_internal_mutable_data_source() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.data_source_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::common::v1::DataSource>(GetArenaForAllocation());
    _impl_.data_source_ = p;
  }
  return _impl_.data_source_;
}
inline ::cavnue::messages::common::v1::DataSource* RadarStats::mutable_data_source() {
  ::cavnue::messages::common::v1::DataSource* _msg = _internal_mutable_data_source();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.RadarStats.data_source)
  return _msg;
}
inline void RadarStats::set_allocated_data_source(::cavnue::messages::common::v1::DataSource* data_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_source_);
  }
  if (data_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_source));
    if (message_arena != submessage_arena) {
      data_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_source, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.data_source_ = data_source;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.RadarStats.data_source)
}

// bool blind = 6 [json_name = "blind"];
inline void RadarStats::clear_blind() {
  _impl_.blind_ = false;
}
inline bool RadarStats::blind() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.RadarStats.blind)
  return _internal_blind();
}
inline void RadarStats::set_blind(bool value) {
  _internal_set_blind(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.RadarStats.blind)
}
inline bool RadarStats::_internal_blind() const {
  return _impl_.blind_;
}
inline void RadarStats::_internal_set_blind(bool value) {
  ;
  _impl_.blind_ = value;
}

// bool interference = 7 [json_name = "interference"];
inline void RadarStats::clear_interference() {
  _impl_.interference_ = false;
}
inline bool RadarStats::interference() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.RadarStats.interference)
  return _internal_interference();
}
inline void RadarStats::set_interference(bool value) {
  _internal_set_interference(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.RadarStats.interference)
}
inline bool RadarStats::_internal_interference() const {
  return _impl_.interference_;
}
inline void RadarStats::_internal_set_interference(bool value) {
  ;
  _impl_.interference_ = value;
}

// bool rain = 8 [json_name = "rain"];
inline void RadarStats::clear_rain() {
  _impl_.rain_ = false;
}
inline bool RadarStats::rain() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.RadarStats.rain)
  return _internal_rain();
}
inline void RadarStats::set_rain(bool value) {
  _internal_set_rain(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.RadarStats.rain)
}
inline bool RadarStats::_internal_rain() const {
  return _impl_.rain_;
}
inline void RadarStats::_internal_set_rain(bool value) {
  ;
  _impl_.rain_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace inference
}  // namespace messages
}  // namespace cavnue


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto_2epb_2eh

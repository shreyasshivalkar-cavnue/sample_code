// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/inference/v1/sample.proto

#include "cavnue/messages/inference/v1/sample.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cavnue {
namespace messages {
namespace inference {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR FrameSamples_FrameSample_ActorSize::FrameSamples_FrameSample_ActorSize(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/nullptr
  , /*decltype(_impl_.y_)*/nullptr
  , /*decltype(_impl_.z_)*/nullptr} {}
struct FrameSamples_FrameSample_ActorSizeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameSamples_FrameSample_ActorSizeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameSamples_FrameSample_ActorSizeDefaultTypeInternal() {}
  union {
    FrameSamples_FrameSample_ActorSize _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameSamples_FrameSample_ActorSizeDefaultTypeInternal _FrameSamples_FrameSample_ActorSize_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FrameSamples_FrameSample::FrameSamples_FrameSample(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.h3_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.projection_)*/nullptr
  , /*decltype(_impl_.size_)*/nullptr
  , /*decltype(_impl_.bbox_)*/nullptr
  , /*decltype(_impl_.measurement_uncertainty_)*/nullptr
  , /*decltype(_impl_.classification_)*/ 0

  , /*decltype(_impl_.lane_)*/ 0

  , /*decltype(_impl_.distance_from_imager_)*/ 0
} {}
struct FrameSamples_FrameSampleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameSamples_FrameSampleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameSamples_FrameSampleDefaultTypeInternal() {}
  union {
    FrameSamples_FrameSample _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameSamples_FrameSampleDefaultTypeInternal _FrameSamples_FrameSample_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FrameSamples::FrameSamples(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.samples_)*/{}
  , /*decltype(_impl_.zone_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.observation_ts_)*/nullptr
  , /*decltype(_impl_.observation_duration_)*/nullptr
  , /*decltype(_impl_.data_source_)*/nullptr} {}
struct FrameSamplesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameSamplesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameSamplesDefaultTypeInternal() {}
  union {
    FrameSamples _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameSamplesDefaultTypeInternal _FrameSamples_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GroupedFrameSamples::GroupedFrameSamples(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.frames_)*/{}
  , /*decltype(_impl_.zone_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.header_)*/nullptr} {}
struct GroupedFrameSamplesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupedFrameSamplesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupedFrameSamplesDefaultTypeInternal() {}
  union {
    GroupedFrameSamples _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupedFrameSamplesDefaultTypeInternal _GroupedFrameSamples_default_instance_;
}  // namespace v1
}  // namespace inference
}  // namespace messages
}  // namespace cavnue
static ::_pb::Metadata file_level_metadata_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto = nullptr;
const ::uint32_t TableStruct_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize, _impl_.z_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::FrameSamples_FrameSample, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::FrameSamples_FrameSample, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::FrameSamples_FrameSample, _impl_.classification_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::FrameSamples_FrameSample, _impl_.position_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::FrameSamples_FrameSample, _impl_.projection_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::FrameSamples_FrameSample, _impl_.lane_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::FrameSamples_FrameSample, _impl_.size_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::FrameSamples_FrameSample, _impl_.bbox_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::FrameSamples_FrameSample, _impl_.distance_from_imager_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::FrameSamples_FrameSample, _impl_.measurement_uncertainty_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::FrameSamples_FrameSample, _impl_.h3_id_),
    ~0u,
    0,
    1,
    5,
    2,
    3,
    ~0u,
    4,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::FrameSamples, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::FrameSamples, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::FrameSamples, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::FrameSamples, _impl_.observation_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::FrameSamples, _impl_.observation_duration_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::FrameSamples, _impl_.data_source_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::FrameSamples, _impl_.zone_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::FrameSamples, _impl_.samples_),
    0,
    1,
    2,
    3,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::GroupedFrameSamples, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::GroupedFrameSamples, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::GroupedFrameSamples, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::GroupedFrameSamples, _impl_.zone_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::GroupedFrameSamples, _impl_.frames_),
    0,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 11, -1, sizeof(::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize)},
        { 14, 31, -1, sizeof(::cavnue::messages::inference::v1::FrameSamples_FrameSample)},
        { 40, 54, -1, sizeof(::cavnue::messages::inference::v1::FrameSamples)},
        { 60, 71, -1, sizeof(::cavnue::messages::inference::v1::GroupedFrameSamples)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cavnue::messages::inference::v1::_FrameSamples_FrameSample_ActorSize_default_instance_._instance,
    &::cavnue::messages::inference::v1::_FrameSamples_FrameSample_default_instance_._instance,
    &::cavnue::messages::inference::v1::_FrameSamples_default_instance_._instance,
    &::cavnue::messages::inference::v1::_GroupedFrameSamples_default_instance_._instance,
};
const char descriptor_table_protodef_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n)cavnue/messages/inference/v1/sample.pr"
    "oto\022\034cavnue.messages.inference.v1\032&cavnu"
    "e/messages/common/v1/common.proto\032-cavnu"
    "e/messages/common/v1/field_options.proto"
    "\032.cavnue/messages/geometry/v1/bounding_b"
    "ox.proto\032,cavnue/messages/geometry/v1/co"
    "variance.proto\032(cavnue/messages/geometry"
    "/v1/scalar.proto\032$cavnue/messages/spatia"
    "l/v1/utm.proto\032(cavnue/messages/geometry"
    "/v1/matrix.proto\032\036google/protobuf/durati"
    "on.proto\032\037google/protobuf/timestamp.prot"
    "o\"\303\t\n\014FrameSamples\0229\n\006header\030\001 \001(\0132!.cav"
    "nue.messages.common.v1.HeaderR\006header\022A\n"
    "\016observation_ts\030\002 \001(\0132\032.google.protobuf."
    "TimestampR\robservationTs\022L\n\024observation_"
    "duration\030\003 \001(\0132\031.google.protobuf.Duratio"
    "nR\023observationDuration\022F\n\013data_source\030\004 "
    "\001(\0132%.cavnue.messages.common.v1.DataSour"
    "ceR\ndataSource\022\022\n\004zone\030\005 \001(\tR\004zone\022P\n\007sa"
    "mples\030\006 \003(\01326.cavnue.messages.inference."
    "v1.FrameSamples.FrameSampleR\007samples\032\270\006\n"
    "\013FrameSample\022Q\n\016classification\030\001 \001(\0162).c"
    "avnue.messages.common.v1.ClassificationR"
    "\016classification\022Q\n\010position\030\002 \001(\0132/.cavn"
    "ue.messages.geometry.v1.CovarianceVector"
    "3dB\004\210\361\004\005R\010position\022I\n\nprojection\030\003 \001(\0132)"
    ".cavnue.messages.spatial.v1.UTMProjectio"
    "nR\nprojection\022\027\n\004lane\030\004 \001(\005H\000R\004lane\210\001\001\022c"
    "\n\004size\030\005 \001(\0132@.cavnue.messages.inference"
    ".v1.FrameSamples.FrameSample.ActorSizeB\010"
    "\210\361\004\005\220\361\004\003H\001R\004size\210\001\001\022>\n\004bbox\030\006 \001(\0132*.cavn"
    "ue.messages.geometry.v1.BoundingBox2fR\004b"
    "box\0220\n\024distance_from_imager\030\007 \001(\002R\022dista"
    "nceFromImager\022_\n\027measurement_uncertainty"
    "\030\010 \001(\0132&.cavnue.messages.geometry.v1.Mat"
    "rix33fR\026measurementUncertainty\022\023\n\005h3_id\030"
    "\t \001(\tR\004h3Id\032\277\001\n\tActorSize\022:\n\001x\030\001 \001(\0132,.c"
    "avnue.messages.geometry.v1.VarianceScala"
    "rfR\001x\022:\n\001y\030\002 \001(\0132,.cavnue.messages.geome"
    "try.v1.VarianceScalarfR\001y\022:\n\001z\030\003 \001(\0132,.c"
    "avnue.messages.geometry.v1.VarianceScala"
    "rfR\001zB\007\n\005_laneB\007\n\005_size\"\250\001\n\023GroupedFrame"
    "Samples\0229\n\006header\030\001 \001(\0132!.cavnue.message"
    "s.common.v1.HeaderR\006header\022\022\n\004zone\030\002 \001(\t"
    "R\004zone\022B\n\006frames\030\003 \003(\0132*.cavnue.messages"
    ".inference.v1.FrameSamplesR\006framesb\006prot"
    "o3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto_deps[9] =
    {
        &::descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2ffield_5foptions_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fbounding_5fbox_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fspatial_2fv1_2futm_2eproto,
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto = {
    false,
    false,
    1842,
    descriptor_table_protodef_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto,
    "cavnue/messages/inference/v1/sample.proto",
    &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto_once,
    descriptor_table_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto_deps,
    9,
    4,
    schemas,
    file_default_instances,
    TableStruct_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto::offsets,
    file_level_metadata_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto,
    file_level_enum_descriptors_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto,
    file_level_service_descriptors_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto_getter() {
  return &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto(&descriptor_table_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto);
namespace cavnue {
namespace messages {
namespace inference {
namespace v1 {
// ===================================================================

class FrameSamples_FrameSample_ActorSize::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameSamples_FrameSample_ActorSize>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FrameSamples_FrameSample_ActorSize, _impl_._has_bits_);
  static const ::cavnue::messages::geometry::v1::VarianceScalarf& x(const FrameSamples_FrameSample_ActorSize* msg);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cavnue::messages::geometry::v1::VarianceScalarf& y(const FrameSamples_FrameSample_ActorSize* msg);
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::cavnue::messages::geometry::v1::VarianceScalarf& z(const FrameSamples_FrameSample_ActorSize* msg);
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::cavnue::messages::geometry::v1::VarianceScalarf&
FrameSamples_FrameSample_ActorSize::_Internal::x(const FrameSamples_FrameSample_ActorSize* msg) {
  return *msg->_impl_.x_;
}
const ::cavnue::messages::geometry::v1::VarianceScalarf&
FrameSamples_FrameSample_ActorSize::_Internal::y(const FrameSamples_FrameSample_ActorSize* msg) {
  return *msg->_impl_.y_;
}
const ::cavnue::messages::geometry::v1::VarianceScalarf&
FrameSamples_FrameSample_ActorSize::_Internal::z(const FrameSamples_FrameSample_ActorSize* msg) {
  return *msg->_impl_.z_;
}
void FrameSamples_FrameSample_ActorSize::clear_x() {
  if (_impl_.x_ != nullptr) _impl_.x_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void FrameSamples_FrameSample_ActorSize::clear_y() {
  if (_impl_.y_ != nullptr) _impl_.y_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void FrameSamples_FrameSample_ActorSize::clear_z() {
  if (_impl_.z_ != nullptr) _impl_.z_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
FrameSamples_FrameSample_ActorSize::FrameSamples_FrameSample_ActorSize(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.inference.v1.FrameSamples.FrameSample.ActorSize)
}
FrameSamples_FrameSample_ActorSize::FrameSamples_FrameSample_ActorSize(const FrameSamples_FrameSample_ActorSize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FrameSamples_FrameSample_ActorSize* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){nullptr}
    , decltype(_impl_.y_){nullptr}
    , decltype(_impl_.z_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.x_ = new ::cavnue::messages::geometry::v1::VarianceScalarf(*from._impl_.x_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.y_ = new ::cavnue::messages::geometry::v1::VarianceScalarf(*from._impl_.y_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.z_ = new ::cavnue::messages::geometry::v1::VarianceScalarf(*from._impl_.z_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.inference.v1.FrameSamples.FrameSample.ActorSize)
}

inline void FrameSamples_FrameSample_ActorSize::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){nullptr}
    , decltype(_impl_.y_){nullptr}
    , decltype(_impl_.z_){nullptr}
  };
}

FrameSamples_FrameSample_ActorSize::~FrameSamples_FrameSample_ActorSize() {
  // @@protoc_insertion_point(destructor:cavnue.messages.inference.v1.FrameSamples.FrameSample.ActorSize)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameSamples_FrameSample_ActorSize::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.x_;
  if (this != internal_default_instance()) delete _impl_.y_;
  if (this != internal_default_instance()) delete _impl_.z_;
}

void FrameSamples_FrameSample_ActorSize::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrameSamples_FrameSample_ActorSize::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.inference.v1.FrameSamples.FrameSample.ActorSize)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.x_ != nullptr);
      _impl_.x_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.y_ != nullptr);
      _impl_.y_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.z_ != nullptr);
      _impl_.z_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameSamples_FrameSample_ActorSize::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.geometry.v1.VarianceScalarf x = 1 [json_name = "x"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_x(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.geometry.v1.VarianceScalarf y = 2 [json_name = "y"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_y(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.geometry.v1.VarianceScalarf z = 3 [json_name = "z"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_z(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FrameSamples_FrameSample_ActorSize::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.inference.v1.FrameSamples.FrameSample.ActorSize)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.geometry.v1.VarianceScalarf x = 1 [json_name = "x"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::x(this),
        _Internal::x(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.geometry.v1.VarianceScalarf y = 2 [json_name = "y"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::y(this),
        _Internal::y(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.geometry.v1.VarianceScalarf z = 3 [json_name = "z"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::z(this),
        _Internal::z(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.inference.v1.FrameSamples.FrameSample.ActorSize)
  return target;
}

::size_t FrameSamples_FrameSample_ActorSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.inference.v1.FrameSamples.FrameSample.ActorSize)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .cavnue.messages.geometry.v1.VarianceScalarf x = 1 [json_name = "x"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.x_);
    }

    // .cavnue.messages.geometry.v1.VarianceScalarf y = 2 [json_name = "y"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.y_);
    }

    // .cavnue.messages.geometry.v1.VarianceScalarf z = 3 [json_name = "z"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.z_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrameSamples_FrameSample_ActorSize::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FrameSamples_FrameSample_ActorSize::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrameSamples_FrameSample_ActorSize::GetClassData() const { return &_class_data_; }


void FrameSamples_FrameSample_ActorSize::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FrameSamples_FrameSample_ActorSize*>(&to_msg);
  auto& from = static_cast<const FrameSamples_FrameSample_ActorSize&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.inference.v1.FrameSamples.FrameSample.ActorSize)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_x()->::cavnue::messages::geometry::v1::VarianceScalarf::MergeFrom(
          from._internal_x());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_y()->::cavnue::messages::geometry::v1::VarianceScalarf::MergeFrom(
          from._internal_y());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_z()->::cavnue::messages::geometry::v1::VarianceScalarf::MergeFrom(
          from._internal_z());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrameSamples_FrameSample_ActorSize::CopyFrom(const FrameSamples_FrameSample_ActorSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.inference.v1.FrameSamples.FrameSample.ActorSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameSamples_FrameSample_ActorSize::IsInitialized() const {
  return true;
}

void FrameSamples_FrameSample_ActorSize::InternalSwap(FrameSamples_FrameSample_ActorSize* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameSamples_FrameSample_ActorSize, _impl_.z_)
      + sizeof(FrameSamples_FrameSample_ActorSize::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(FrameSamples_FrameSample_ActorSize, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameSamples_FrameSample_ActorSize::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto_getter, &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto[0]);
}
// ===================================================================

class FrameSamples_FrameSample::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameSamples_FrameSample>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FrameSamples_FrameSample, _impl_._has_bits_);
  static const ::cavnue::messages::geometry::v1::CovarianceVector3d& position(const FrameSamples_FrameSample* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cavnue::messages::spatial::v1::UTMProjection& projection(const FrameSamples_FrameSample* msg);
  static void set_has_projection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize& size(const FrameSamples_FrameSample* msg);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::cavnue::messages::geometry::v1::BoundingBox2f& bbox(const FrameSamples_FrameSample* msg);
  static void set_has_bbox(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::cavnue::messages::geometry::v1::Matrix33f& measurement_uncertainty(const FrameSamples_FrameSample* msg);
  static void set_has_measurement_uncertainty(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::cavnue::messages::geometry::v1::CovarianceVector3d&
FrameSamples_FrameSample::_Internal::position(const FrameSamples_FrameSample* msg) {
  return *msg->_impl_.position_;
}
const ::cavnue::messages::spatial::v1::UTMProjection&
FrameSamples_FrameSample::_Internal::projection(const FrameSamples_FrameSample* msg) {
  return *msg->_impl_.projection_;
}
const ::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize&
FrameSamples_FrameSample::_Internal::size(const FrameSamples_FrameSample* msg) {
  return *msg->_impl_.size_;
}
const ::cavnue::messages::geometry::v1::BoundingBox2f&
FrameSamples_FrameSample::_Internal::bbox(const FrameSamples_FrameSample* msg) {
  return *msg->_impl_.bbox_;
}
const ::cavnue::messages::geometry::v1::Matrix33f&
FrameSamples_FrameSample::_Internal::measurement_uncertainty(const FrameSamples_FrameSample* msg) {
  return *msg->_impl_.measurement_uncertainty_;
}
void FrameSamples_FrameSample::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void FrameSamples_FrameSample::clear_projection() {
  if (_impl_.projection_ != nullptr) _impl_.projection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void FrameSamples_FrameSample::clear_bbox() {
  if (_impl_.bbox_ != nullptr) _impl_.bbox_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void FrameSamples_FrameSample::clear_measurement_uncertainty() {
  if (_impl_.measurement_uncertainty_ != nullptr) _impl_.measurement_uncertainty_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
FrameSamples_FrameSample::FrameSamples_FrameSample(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.inference.v1.FrameSamples.FrameSample)
}
FrameSamples_FrameSample::FrameSamples_FrameSample(const FrameSamples_FrameSample& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FrameSamples_FrameSample* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.h3_id_) {}

    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.projection_){nullptr}
    , decltype(_impl_.size_){nullptr}
    , decltype(_impl_.bbox_){nullptr}
    , decltype(_impl_.measurement_uncertainty_){nullptr}
    , decltype(_impl_.classification_) {}

    , decltype(_impl_.lane_) {}

    , decltype(_impl_.distance_from_imager_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.h3_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.h3_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_h3_id().empty()) {
    _this->_impl_.h3_id_.Set(from._internal_h3_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.position_ = new ::cavnue::messages::geometry::v1::CovarianceVector3d(*from._impl_.position_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.projection_ = new ::cavnue::messages::spatial::v1::UTMProjection(*from._impl_.projection_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.size_ = new ::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize(*from._impl_.size_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.bbox_ = new ::cavnue::messages::geometry::v1::BoundingBox2f(*from._impl_.bbox_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.measurement_uncertainty_ = new ::cavnue::messages::geometry::v1::Matrix33f(*from._impl_.measurement_uncertainty_);
  }
  ::memcpy(&_impl_.classification_, &from._impl_.classification_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.distance_from_imager_) -
    reinterpret_cast<char*>(&_impl_.classification_)) + sizeof(_impl_.distance_from_imager_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.inference.v1.FrameSamples.FrameSample)
}

inline void FrameSamples_FrameSample::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.h3_id_) {}

    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.projection_){nullptr}
    , decltype(_impl_.size_){nullptr}
    , decltype(_impl_.bbox_){nullptr}
    , decltype(_impl_.measurement_uncertainty_){nullptr}
    , decltype(_impl_.classification_) { 0 }

    , decltype(_impl_.lane_) { 0 }

    , decltype(_impl_.distance_from_imager_) { 0 }

  };
  _impl_.h3_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.h3_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FrameSamples_FrameSample::~FrameSamples_FrameSample() {
  // @@protoc_insertion_point(destructor:cavnue.messages.inference.v1.FrameSamples.FrameSample)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameSamples_FrameSample::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.h3_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.projection_;
  if (this != internal_default_instance()) delete _impl_.size_;
  if (this != internal_default_instance()) delete _impl_.bbox_;
  if (this != internal_default_instance()) delete _impl_.measurement_uncertainty_;
}

void FrameSamples_FrameSample::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrameSamples_FrameSample::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.inference.v1.FrameSamples.FrameSample)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.h3_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.projection_ != nullptr);
      _impl_.projection_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.size_ != nullptr);
      _impl_.size_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.bbox_ != nullptr);
      _impl_.bbox_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.measurement_uncertainty_ != nullptr);
      _impl_.measurement_uncertainty_->Clear();
    }
  }
  _impl_.classification_ = 0;
  _impl_.lane_ = 0;
  _impl_.distance_from_imager_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameSamples_FrameSample::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.common.v1.Classification classification = 1 [json_name = "classification"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_classification(static_cast<::cavnue::messages::common::v1::Classification>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.geometry.v1.CovarianceVector3d position = 2 [json_name = "position", (.cavnue.messages.common.v1.units) = UNITS_METERS];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.spatial.v1.UTMProjection projection = 3 [json_name = "projection"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_projection(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 lane = 4 [json_name = "lane"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_lane(&has_bits);
          _impl_.lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .cavnue.messages.inference.v1.FrameSamples.FrameSample.ActorSize size = 5 [json_name = "size", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_ENU];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.geometry.v1.BoundingBox2f bbox = 6 [json_name = "bbox"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_bbox(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // float distance_from_imager = 7 [json_name = "distanceFromImager"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 61)) {
          _impl_.distance_from_imager_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.geometry.v1.Matrix33f measurement_uncertainty = 8 [json_name = "measurementUncertainty"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_measurement_uncertainty(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string h3_id = 9 [json_name = "h3Id"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_h3_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.inference.v1.FrameSamples.FrameSample.h3_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FrameSamples_FrameSample::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.inference.v1.FrameSamples.FrameSample)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cavnue.messages.common.v1.Classification classification = 1 [json_name = "classification"];
  if (this->_internal_classification() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_classification(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.geometry.v1.CovarianceVector3d position = 2 [json_name = "position", (.cavnue.messages.common.v1.units) = UNITS_METERS];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.spatial.v1.UTMProjection projection = 3 [json_name = "projection"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::projection(this),
        _Internal::projection(this).GetCachedSize(), target, stream);
  }

  // optional int32 lane = 4 [json_name = "lane"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_lane(), target);
  }

  // optional .cavnue.messages.inference.v1.FrameSamples.FrameSample.ActorSize size = 5 [json_name = "size", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_ENU];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::size(this),
        _Internal::size(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.geometry.v1.BoundingBox2f bbox = 6 [json_name = "bbox"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::bbox(this),
        _Internal::bbox(this).GetCachedSize(), target, stream);
  }

  // float distance_from_imager = 7 [json_name = "distanceFromImager"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_distance_from_imager = this->_internal_distance_from_imager();
  ::uint32_t raw_distance_from_imager;
  memcpy(&raw_distance_from_imager, &tmp_distance_from_imager, sizeof(tmp_distance_from_imager));
  if (raw_distance_from_imager != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_distance_from_imager(), target);
  }

  // .cavnue.messages.geometry.v1.Matrix33f measurement_uncertainty = 8 [json_name = "measurementUncertainty"];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::measurement_uncertainty(this),
        _Internal::measurement_uncertainty(this).GetCachedSize(), target, stream);
  }

  // string h3_id = 9 [json_name = "h3Id"];
  if (!this->_internal_h3_id().empty()) {
    const std::string& _s = this->_internal_h3_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.inference.v1.FrameSamples.FrameSample.h3_id");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.inference.v1.FrameSamples.FrameSample)
  return target;
}

::size_t FrameSamples_FrameSample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.inference.v1.FrameSamples.FrameSample)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string h3_id = 9 [json_name = "h3Id"];
  if (!this->_internal_h3_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_h3_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // .cavnue.messages.geometry.v1.CovarianceVector3d position = 2 [json_name = "position", (.cavnue.messages.common.v1.units) = UNITS_METERS];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // .cavnue.messages.spatial.v1.UTMProjection projection = 3 [json_name = "projection"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.projection_);
    }

    // optional .cavnue.messages.inference.v1.FrameSamples.FrameSample.ActorSize size = 5 [json_name = "size", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_ENU];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.size_);
    }

    // .cavnue.messages.geometry.v1.BoundingBox2f bbox = 6 [json_name = "bbox"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bbox_);
    }

    // .cavnue.messages.geometry.v1.Matrix33f measurement_uncertainty = 8 [json_name = "measurementUncertainty"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.measurement_uncertainty_);
    }

  }
  // .cavnue.messages.common.v1.Classification classification = 1 [json_name = "classification"];
  if (this->_internal_classification() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_classification());
  }

  // optional int32 lane = 4 [json_name = "lane"];
  if (cached_has_bits & 0x00000020u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_lane());
  }

  // float distance_from_imager = 7 [json_name = "distanceFromImager"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_distance_from_imager = this->_internal_distance_from_imager();
  ::uint32_t raw_distance_from_imager;
  memcpy(&raw_distance_from_imager, &tmp_distance_from_imager, sizeof(tmp_distance_from_imager));
  if (raw_distance_from_imager != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrameSamples_FrameSample::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FrameSamples_FrameSample::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrameSamples_FrameSample::GetClassData() const { return &_class_data_; }


void FrameSamples_FrameSample::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FrameSamples_FrameSample*>(&to_msg);
  auto& from = static_cast<const FrameSamples_FrameSample&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.inference.v1.FrameSamples.FrameSample)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_h3_id().empty()) {
    _this->_internal_set_h3_id(from._internal_h3_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position()->::cavnue::messages::geometry::v1::CovarianceVector3d::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_projection()->::cavnue::messages::spatial::v1::UTMProjection::MergeFrom(
          from._internal_projection());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_size()->::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize::MergeFrom(
          from._internal_size());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_bbox()->::cavnue::messages::geometry::v1::BoundingBox2f::MergeFrom(
          from._internal_bbox());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_measurement_uncertainty()->::cavnue::messages::geometry::v1::Matrix33f::MergeFrom(
          from._internal_measurement_uncertainty());
    }
  }
  if (from._internal_classification() != 0) {
    _this->_internal_set_classification(from._internal_classification());
  }
  if (cached_has_bits & 0x00000020u) {
    _this->_internal_set_lane(from._internal_lane());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_distance_from_imager = from._internal_distance_from_imager();
  ::uint32_t raw_distance_from_imager;
  memcpy(&raw_distance_from_imager, &tmp_distance_from_imager, sizeof(tmp_distance_from_imager));
  if (raw_distance_from_imager != 0) {
    _this->_internal_set_distance_from_imager(from._internal_distance_from_imager());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrameSamples_FrameSample::CopyFrom(const FrameSamples_FrameSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.inference.v1.FrameSamples.FrameSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameSamples_FrameSample::IsInitialized() const {
  return true;
}

void FrameSamples_FrameSample::InternalSwap(FrameSamples_FrameSample* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.h3_id_, lhs_arena,
                                       &other->_impl_.h3_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameSamples_FrameSample, _impl_.distance_from_imager_)
      + sizeof(FrameSamples_FrameSample::_impl_.distance_from_imager_)
      - PROTOBUF_FIELD_OFFSET(FrameSamples_FrameSample, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameSamples_FrameSample::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto_getter, &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto[1]);
}
// ===================================================================

class FrameSamples::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameSamples>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FrameSamples, _impl_._has_bits_);
  static const ::cavnue::messages::common::v1::Header& header(const FrameSamples* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& observation_ts(const FrameSamples* msg);
  static void set_has_observation_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Duration& observation_duration(const FrameSamples* msg);
  static void set_has_observation_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::cavnue::messages::common::v1::DataSource& data_source(const FrameSamples* msg);
  static void set_has_data_source(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::cavnue::messages::common::v1::Header&
FrameSamples::_Internal::header(const FrameSamples* msg) {
  return *msg->_impl_.header_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
FrameSamples::_Internal::observation_ts(const FrameSamples* msg) {
  return *msg->_impl_.observation_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
FrameSamples::_Internal::observation_duration(const FrameSamples* msg) {
  return *msg->_impl_.observation_duration_;
}
const ::cavnue::messages::common::v1::DataSource&
FrameSamples::_Internal::data_source(const FrameSamples* msg) {
  return *msg->_impl_.data_source_;
}
void FrameSamples::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void FrameSamples::clear_observation_ts() {
  if (_impl_.observation_ts_ != nullptr) _impl_.observation_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void FrameSamples::clear_observation_duration() {
  if (_impl_.observation_duration_ != nullptr) _impl_.observation_duration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void FrameSamples::clear_data_source() {
  if (_impl_.data_source_ != nullptr) _impl_.data_source_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
FrameSamples::FrameSamples(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.inference.v1.FrameSamples)
}
FrameSamples::FrameSamples(const FrameSamples& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FrameSamples* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.samples_){from._impl_.samples_}
    , decltype(_impl_.zone_) {}

    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.observation_ts_){nullptr}
    , decltype(_impl_.observation_duration_){nullptr}
    , decltype(_impl_.data_source_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.zone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zone_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_zone().empty()) {
    _this->_impl_.zone_.Set(from._internal_zone(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_ = new ::cavnue::messages::common::v1::Header(*from._impl_.header_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.observation_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.observation_ts_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.observation_duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.observation_duration_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.data_source_ = new ::cavnue::messages::common::v1::DataSource(*from._impl_.data_source_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.inference.v1.FrameSamples)
}

inline void FrameSamples::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.samples_){arena}
    , decltype(_impl_.zone_) {}

    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.observation_ts_){nullptr}
    , decltype(_impl_.observation_duration_){nullptr}
    , decltype(_impl_.data_source_){nullptr}
  };
  _impl_.zone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zone_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FrameSamples::~FrameSamples() {
  // @@protoc_insertion_point(destructor:cavnue.messages.inference.v1.FrameSamples)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameSamples::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_samples()->~RepeatedPtrField();
  _impl_.zone_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.observation_ts_;
  if (this != internal_default_instance()) delete _impl_.observation_duration_;
  if (this != internal_default_instance()) delete _impl_.data_source_;
}

void FrameSamples::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrameSamples::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.inference.v1.FrameSamples)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_samples()->Clear();
  _impl_.zone_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.observation_ts_ != nullptr);
      _impl_.observation_ts_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.observation_duration_ != nullptr);
      _impl_.observation_duration_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.data_source_ != nullptr);
      _impl_.data_source_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameSamples::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp observation_ts = 2 [json_name = "observationTs"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_observation_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Duration observation_duration = 3 [json_name = "observationDuration"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_observation_duration(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.common.v1.DataSource data_source = 4 [json_name = "dataSource"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_source(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string zone = 5 [json_name = "zone"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_zone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.inference.v1.FrameSamples.zone"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cavnue.messages.inference.v1.FrameSamples.FrameSample samples = 6 [json_name = "samples"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_samples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FrameSamples::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.inference.v1.FrameSamples)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp observation_ts = 2 [json_name = "observationTs"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::observation_ts(this),
        _Internal::observation_ts(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration observation_duration = 3 [json_name = "observationDuration"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::observation_duration(this),
        _Internal::observation_duration(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.common.v1.DataSource data_source = 4 [json_name = "dataSource"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::data_source(this),
        _Internal::data_source(this).GetCachedSize(), target, stream);
  }

  // string zone = 5 [json_name = "zone"];
  if (!this->_internal_zone().empty()) {
    const std::string& _s = this->_internal_zone();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.inference.v1.FrameSamples.zone");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // repeated .cavnue.messages.inference.v1.FrameSamples.FrameSample samples = 6 [json_name = "samples"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_samples_size()); i < n; i++) {
    const auto& repfield = this->_internal_samples(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.inference.v1.FrameSamples)
  return target;
}

::size_t FrameSamples::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.inference.v1.FrameSamples)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cavnue.messages.inference.v1.FrameSamples.FrameSample samples = 6 [json_name = "samples"];
  total_size += 1UL * this->_internal_samples_size();
  for (const auto& msg : this->_internal_samples()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string zone = 5 [json_name = "zone"];
  if (!this->_internal_zone().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_zone());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // .google.protobuf.Timestamp observation_ts = 2 [json_name = "observationTs"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.observation_ts_);
    }

    // .google.protobuf.Duration observation_duration = 3 [json_name = "observationDuration"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.observation_duration_);
    }

    // .cavnue.messages.common.v1.DataSource data_source = 4 [json_name = "dataSource"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_source_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrameSamples::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FrameSamples::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrameSamples::GetClassData() const { return &_class_data_; }


void FrameSamples::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FrameSamples*>(&to_msg);
  auto& from = static_cast<const FrameSamples&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.inference.v1.FrameSamples)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_samples()->MergeFrom(from._internal_samples());
  if (!from._internal_zone().empty()) {
    _this->_internal_set_zone(from._internal_zone());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::cavnue::messages::common::v1::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_observation_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_observation_ts());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_observation_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
          from._internal_observation_duration());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_data_source()->::cavnue::messages::common::v1::DataSource::MergeFrom(
          from._internal_data_source());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrameSamples::CopyFrom(const FrameSamples& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.inference.v1.FrameSamples)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameSamples::IsInitialized() const {
  return true;
}

void FrameSamples::InternalSwap(FrameSamples* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_samples()->InternalSwap(other->_internal_mutable_samples());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.zone_, lhs_arena,
                                       &other->_impl_.zone_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameSamples, _impl_.data_source_)
      + sizeof(FrameSamples::_impl_.data_source_)
      - PROTOBUF_FIELD_OFFSET(FrameSamples, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameSamples::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto_getter, &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto[2]);
}
// ===================================================================

class GroupedFrameSamples::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupedFrameSamples>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GroupedFrameSamples, _impl_._has_bits_);
  static const ::cavnue::messages::common::v1::Header& header(const GroupedFrameSamples* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cavnue::messages::common::v1::Header&
GroupedFrameSamples::_Internal::header(const GroupedFrameSamples* msg) {
  return *msg->_impl_.header_;
}
void GroupedFrameSamples::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GroupedFrameSamples::GroupedFrameSamples(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.inference.v1.GroupedFrameSamples)
}
GroupedFrameSamples::GroupedFrameSamples(const GroupedFrameSamples& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupedFrameSamples* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.frames_){from._impl_.frames_}
    , decltype(_impl_.zone_) {}

    , decltype(_impl_.header_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.zone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zone_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_zone().empty()) {
    _this->_impl_.zone_.Set(from._internal_zone(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_ = new ::cavnue::messages::common::v1::Header(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.inference.v1.GroupedFrameSamples)
}

inline void GroupedFrameSamples::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.frames_){arena}
    , decltype(_impl_.zone_) {}

    , decltype(_impl_.header_){nullptr}
  };
  _impl_.zone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zone_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupedFrameSamples::~GroupedFrameSamples() {
  // @@protoc_insertion_point(destructor:cavnue.messages.inference.v1.GroupedFrameSamples)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupedFrameSamples::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_frames()->~RepeatedPtrField();
  _impl_.zone_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void GroupedFrameSamples::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupedFrameSamples::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.inference.v1.GroupedFrameSamples)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_frames()->Clear();
  _impl_.zone_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupedFrameSamples::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string zone = 2 [json_name = "zone"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_zone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.inference.v1.GroupedFrameSamples.zone"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cavnue.messages.inference.v1.FrameSamples frames = 3 [json_name = "frames"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GroupedFrameSamples::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.inference.v1.GroupedFrameSamples)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // string zone = 2 [json_name = "zone"];
  if (!this->_internal_zone().empty()) {
    const std::string& _s = this->_internal_zone();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.inference.v1.GroupedFrameSamples.zone");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .cavnue.messages.inference.v1.FrameSamples frames = 3 [json_name = "frames"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_frames_size()); i < n; i++) {
    const auto& repfield = this->_internal_frames(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.inference.v1.GroupedFrameSamples)
  return target;
}

::size_t GroupedFrameSamples::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.inference.v1.GroupedFrameSamples)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cavnue.messages.inference.v1.FrameSamples frames = 3 [json_name = "frames"];
  total_size += 1UL * this->_internal_frames_size();
  for (const auto& msg : this->_internal_frames()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string zone = 2 [json_name = "zone"];
  if (!this->_internal_zone().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_zone());
  }

  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupedFrameSamples::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupedFrameSamples::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupedFrameSamples::GetClassData() const { return &_class_data_; }


void GroupedFrameSamples::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupedFrameSamples*>(&to_msg);
  auto& from = static_cast<const GroupedFrameSamples&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.inference.v1.GroupedFrameSamples)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_frames()->MergeFrom(from._internal_frames());
  if (!from._internal_zone().empty()) {
    _this->_internal_set_zone(from._internal_zone());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_header()->::cavnue::messages::common::v1::Header::MergeFrom(
        from._internal_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupedFrameSamples::CopyFrom(const GroupedFrameSamples& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.inference.v1.GroupedFrameSamples)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupedFrameSamples::IsInitialized() const {
  return true;
}

void GroupedFrameSamples::InternalSwap(GroupedFrameSamples* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_frames()->InternalSwap(other->_internal_mutable_frames());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.zone_, lhs_arena,
                                       &other->_impl_.zone_, rhs_arena);
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupedFrameSamples::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto_getter, &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2finference_2fv1_2fsample_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace inference
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize*
Arena::CreateMaybeMessage< ::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::inference::v1::FrameSamples_FrameSample_ActorSize >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::inference::v1::FrameSamples_FrameSample*
Arena::CreateMaybeMessage< ::cavnue::messages::inference::v1::FrameSamples_FrameSample >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::inference::v1::FrameSamples_FrameSample >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::inference::v1::FrameSamples*
Arena::CreateMaybeMessage< ::cavnue::messages::inference::v1::FrameSamples >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::inference::v1::FrameSamples >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::inference::v1::GroupedFrameSamples*
Arena::CreateMaybeMessage< ::cavnue::messages::inference::v1::GroupedFrameSamples >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::inference::v1::GroupedFrameSamples >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

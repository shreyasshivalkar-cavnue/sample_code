// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/inference/v1/events.proto

#include "cavnue/messages/inference/v1/events.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cavnue {
namespace messages {
namespace inference {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR Event::Event(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.actor_ids_)*/ {}
  ,/* _impl_._actor_ids_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.start_time_)*/nullptr
  , /*decltype(_impl_.end_time_)*/nullptr
  , /*decltype(_impl_.event_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.type_)*/ 0

  , /*decltype(_impl_.severity_)*/ 0

  , /*decltype(_impl_.confidence_)*/ 0
} {}
struct EventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventDefaultTypeInternal() {}
  union {
    Event _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventDefaultTypeInternal _Event_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TrafficEvent::TrafficEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lane_segment_id_)*/ {}
  ,/* _impl_._lane_segment_id_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.start_time_)*/nullptr
  , /*decltype(_impl_.end_time_)*/nullptr
  , /*decltype(_impl_.event_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.type_)*/ 0

  , /*decltype(_impl_.severity_)*/ 0

  , /*decltype(_impl_.confidence_)*/ 0
} {}
struct TrafficEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficEventDefaultTypeInternal() {}
  union {
    TrafficEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficEventDefaultTypeInternal _TrafficEvent_default_instance_;
}  // namespace v1
}  // namespace inference
}  // namespace messages
}  // namespace cavnue
static ::_pb::Metadata file_level_metadata_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto[4];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto = nullptr;
const ::uint32_t TableStruct_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Event, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Event, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Event, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Event, _impl_.event_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Event, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Event, _impl_.severity_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Event, _impl_.start_time_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Event, _impl_.end_time_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Event, _impl_.confidence_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Event, _impl_.actor_ids_),
    0,
    ~0u,
    ~0u,
    ~0u,
    1,
    2,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::TrafficEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::TrafficEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::TrafficEvent, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::TrafficEvent, _impl_.event_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::TrafficEvent, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::TrafficEvent, _impl_.severity_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::TrafficEvent, _impl_.start_time_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::TrafficEvent, _impl_.end_time_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::TrafficEvent, _impl_.confidence_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::TrafficEvent, _impl_.lane_segment_id_),
    0,
    ~0u,
    ~0u,
    ~0u,
    1,
    2,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 16, -1, sizeof(::cavnue::messages::inference::v1::Event)},
        { 24, 40, -1, sizeof(::cavnue::messages::inference::v1::TrafficEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cavnue::messages::inference::v1::_Event_default_instance_._instance,
    &::cavnue::messages::inference::v1::_TrafficEvent_default_instance_._instance,
};
const char descriptor_table_protodef_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n)cavnue/messages/inference/v1/events.pr"
    "oto\022\034cavnue.messages.inference.v1\032&cavnu"
    "e/messages/common/v1/common.proto\032\037googl"
    "e/protobuf/timestamp.proto\"\326\004\n\005Event\0229\n\006"
    "header\030\001 \001(\0132!.cavnue.messages.common.v1"
    ".HeaderR\006header\022\031\n\010event_id\030\002 \001(\003R\007event"
    "Id\022<\n\004type\030\003 \001(\0162(.cavnue.messages.infer"
    "ence.v1.Event.TypeR\004type\022H\n\010severity\030\004 \001"
    "(\0162,.cavnue.messages.inference.v1.Event."
    "SeverityR\010severity\0229\n\nstart_time\030\005 \001(\0132\032"
    ".google.protobuf.TimestampR\tstartTime\0225\n"
    "\010end_time\030\006 \001(\0132\032.google.protobuf.Timest"
    "ampR\007endTime\022\036\n\nconfidence\030\007 \001(\002R\nconfid"
    "ence\022\033\n\tactor_ids\030\010 \003(\003R\010actorIds\"k\n\004Typ"
    "e\022\024\n\020TYPE_UNSPECIFIED\020\000\022\021\n\rTYPE_IMPEDING"
    "\020\001\022\021\n\rTYPE_SPEEDING\020\002\022\023\n\017TYPE_STATIONARY"
    "\020\003\022\022\n\016TYPE_COLLISION\020\004\"S\n\010Severity\022\030\n\024SE"
    "VERITY_UNSPECIFIED\020\000\022\023\n\017SEVERITY_HAZARD\020"
    "\001\022\030\n\024SEVERITY_OF_INTEREST\020\002\"\247\004\n\014TrafficE"
    "vent\0229\n\006header\030\001 \001(\0132!.cavnue.messages.c"
    "ommon.v1.HeaderR\006header\022\031\n\010event_id\030\002 \001("
    "\003R\007eventId\022C\n\004type\030\003 \001(\0162/.cavnue.messag"
    "es.inference.v1.TrafficEvent.TypeR\004type\022"
    "O\n\010severity\030\004 \001(\01623.cavnue.messages.infe"
    "rence.v1.TrafficEvent.SeverityR\010severity"
    "\0229\n\nstart_time\030\005 \001(\0132\032.google.protobuf.T"
    "imestampR\tstartTime\0225\n\010end_time\030\006 \001(\0132\032."
    "google.protobuf.TimestampR\007endTime\022\036\n\nco"
    "nfidence\030\007 \001(\002R\nconfidence\022&\n\017lane_segme"
    "nt_id\030\010 \003(\003R\rlaneSegmentId\"1\n\004Type\022\024\n\020TY"
    "PE_UNSPECIFIED\020\000\022\023\n\017TYPE_CONGESTION\020\001\">\n"
    "\010Severity\022\030\n\024SEVERITY_UNSPECIFIED\020\000\022\030\n\024S"
    "EVERITY_OF_INTEREST\020\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto_deps[2] =
    {
        &::descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto = {
    false,
    false,
    1309,
    descriptor_table_protodef_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto,
    "cavnue/messages/inference/v1/events.proto",
    &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto_once,
    descriptor_table_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto_deps,
    2,
    2,
    schemas,
    file_default_instances,
    TableStruct_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto::offsets,
    file_level_metadata_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto,
    file_level_enum_descriptors_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto,
    file_level_service_descriptors_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto_getter() {
  return &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto(&descriptor_table_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto);
namespace cavnue {
namespace messages {
namespace inference {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Event_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto);
  return file_level_enum_descriptors_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto[0];
}
bool Event_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Event_Type Event::TYPE_UNSPECIFIED;
constexpr Event_Type Event::TYPE_IMPEDING;
constexpr Event_Type Event::TYPE_SPEEDING;
constexpr Event_Type Event::TYPE_STATIONARY;
constexpr Event_Type Event::TYPE_COLLISION;
constexpr Event_Type Event::Type_MIN;
constexpr Event_Type Event::Type_MAX;
constexpr int Event::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Event_Severity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto);
  return file_level_enum_descriptors_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto[1];
}
bool Event_Severity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Event_Severity Event::SEVERITY_UNSPECIFIED;
constexpr Event_Severity Event::SEVERITY_HAZARD;
constexpr Event_Severity Event::SEVERITY_OF_INTEREST;
constexpr Event_Severity Event::Severity_MIN;
constexpr Event_Severity Event::Severity_MAX;
constexpr int Event::Severity_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficEvent_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto);
  return file_level_enum_descriptors_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto[2];
}
bool TrafficEvent_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TrafficEvent_Type TrafficEvent::TYPE_UNSPECIFIED;
constexpr TrafficEvent_Type TrafficEvent::TYPE_CONGESTION;
constexpr TrafficEvent_Type TrafficEvent::Type_MIN;
constexpr TrafficEvent_Type TrafficEvent::Type_MAX;
constexpr int TrafficEvent::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficEvent_Severity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto);
  return file_level_enum_descriptors_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto[3];
}
bool TrafficEvent_Severity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TrafficEvent_Severity TrafficEvent::SEVERITY_UNSPECIFIED;
constexpr TrafficEvent_Severity TrafficEvent::SEVERITY_OF_INTEREST;
constexpr TrafficEvent_Severity TrafficEvent::Severity_MIN;
constexpr TrafficEvent_Severity TrafficEvent::Severity_MAX;
constexpr int TrafficEvent::Severity_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class Event::_Internal {
 public:
  using HasBits = decltype(std::declval<Event>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Event, _impl_._has_bits_);
  static const ::cavnue::messages::common::v1::Header& header(const Event* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const Event* msg);
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const Event* msg);
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::cavnue::messages::common::v1::Header&
Event::_Internal::header(const Event* msg) {
  return *msg->_impl_.header_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Event::_Internal::start_time(const Event* msg) {
  return *msg->_impl_.start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Event::_Internal::end_time(const Event* msg) {
  return *msg->_impl_.end_time_;
}
void Event::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Event::clear_start_time() {
  if (_impl_.start_time_ != nullptr) _impl_.start_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Event::clear_end_time() {
  if (_impl_.end_time_ != nullptr) _impl_.end_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
Event::Event(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.inference.v1.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Event* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.actor_ids_) { from._impl_.actor_ids_ }
    ,/* _impl_._actor_ids_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.end_time_){nullptr}
    , decltype(_impl_.event_id_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.severity_) {}

    , decltype(_impl_.confidence_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_ = new ::cavnue::messages::common::v1::Header(*from._impl_.header_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.start_time_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.end_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.end_time_);
  }
  ::memcpy(&_impl_.event_id_, &from._impl_.event_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.confidence_) -
    reinterpret_cast<char*>(&_impl_.event_id_)) + sizeof(_impl_.confidence_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.inference.v1.Event)
}

inline void Event::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.actor_ids_) { arena }
    ,/* _impl_._actor_ids_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.end_time_){nullptr}
    , decltype(_impl_.event_id_) { ::int64_t{0} }

    , decltype(_impl_.type_) { 0 }

    , decltype(_impl_.severity_) { 0 }

    , decltype(_impl_.confidence_) { 0 }

  };
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:cavnue.messages.inference.v1.Event)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Event::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.actor_ids_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.start_time_;
  if (this != internal_default_instance()) delete _impl_.end_time_;
}

void Event::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.inference.v1.Event)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_actor_ids()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.start_time_ != nullptr);
      _impl_.start_time_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.end_time_ != nullptr);
      _impl_.end_time_->Clear();
    }
  }
  ::memset(&_impl_.event_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.confidence_) -
      reinterpret_cast<char*>(&_impl_.event_id_)) + sizeof(_impl_.confidence_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 event_id = 2 [json_name = "eventId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.inference.v1.Event.Type type = 3 [json_name = "type"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::cavnue::messages::inference::v1::Event_Type>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.inference.v1.Event.Severity severity = 4 [json_name = "severity"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_severity(static_cast<::cavnue::messages::inference::v1::Event_Severity>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp start_time = 5 [json_name = "startTime"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp end_time = 6 [json_name = "endTime"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // float confidence = 7 [json_name = "confidence"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 61)) {
          _impl_.confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int64 actor_ids = 8 [json_name = "actorIds"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_actor_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 64) {
          _internal_add_actor_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Event::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.inference.v1.Event)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // int64 event_id = 2 [json_name = "eventId"];
  if (this->_internal_event_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_event_id(), target);
  }

  // .cavnue.messages.inference.v1.Event.Type type = 3 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_type(), target);
  }

  // .cavnue.messages.inference.v1.Event.Severity severity = 4 [json_name = "severity"];
  if (this->_internal_severity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_severity(), target);
  }

  // .google.protobuf.Timestamp start_time = 5 [json_name = "startTime"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::start_time(this),
        _Internal::start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 6 [json_name = "endTime"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::end_time(this),
        _Internal::end_time(this).GetCachedSize(), target, stream);
  }

  // float confidence = 7 [json_name = "confidence"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_confidence = this->_internal_confidence();
  ::uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_confidence(), target);
  }

  // repeated int64 actor_ids = 8 [json_name = "actorIds"];
  {
    int byte_size = _impl_._actor_ids_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(8, _internal_actor_ids(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.inference.v1.Event)
  return target;
}

::size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.inference.v1.Event)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 actor_ids = 8 [json_name = "actorIds"];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_actor_ids())
    ;
    _impl_._actor_ids_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // .google.protobuf.Timestamp start_time = 5 [json_name = "startTime"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.start_time_);
    }

    // .google.protobuf.Timestamp end_time = 6 [json_name = "endTime"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.end_time_);
    }

  }
  // int64 event_id = 2 [json_name = "eventId"];
  if (this->_internal_event_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_event_id());
  }

  // .cavnue.messages.inference.v1.Event.Type type = 3 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .cavnue.messages.inference.v1.Event.Severity severity = 4 [json_name = "severity"];
  if (this->_internal_severity() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_severity());
  }

  // float confidence = 7 [json_name = "confidence"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_confidence = this->_internal_confidence();
  ::uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Event::GetClassData() const { return &_class_data_; }


void Event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Event*>(&to_msg);
  auto& from = static_cast<const Event&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.inference.v1.Event)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.actor_ids_.MergeFrom(from._impl_.actor_ids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::cavnue::messages::common::v1::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_start_time());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_end_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_end_time());
    }
  }
  if (from._internal_event_id() != 0) {
    _this->_internal_set_event_id(from._internal_event_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_severity() != 0) {
    _this->_internal_set_severity(from._internal_severity());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_confidence = from._internal_confidence();
  ::uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    _this->_internal_set_confidence(from._internal_confidence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.inference.v1.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.actor_ids_.InternalSwap(&other->_impl_.actor_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event, _impl_.confidence_)
      + sizeof(Event::_impl_.confidence_)
      - PROTOBUF_FIELD_OFFSET(Event, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Event::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto_getter, &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto[0]);
}
// ===================================================================

class TrafficEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrafficEvent, _impl_._has_bits_);
  static const ::cavnue::messages::common::v1::Header& header(const TrafficEvent* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const TrafficEvent* msg);
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const TrafficEvent* msg);
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::cavnue::messages::common::v1::Header&
TrafficEvent::_Internal::header(const TrafficEvent* msg) {
  return *msg->_impl_.header_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TrafficEvent::_Internal::start_time(const TrafficEvent* msg) {
  return *msg->_impl_.start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TrafficEvent::_Internal::end_time(const TrafficEvent* msg) {
  return *msg->_impl_.end_time_;
}
void TrafficEvent::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TrafficEvent::clear_start_time() {
  if (_impl_.start_time_ != nullptr) _impl_.start_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void TrafficEvent::clear_end_time() {
  if (_impl_.end_time_ != nullptr) _impl_.end_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
TrafficEvent::TrafficEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.inference.v1.TrafficEvent)
}
TrafficEvent::TrafficEvent(const TrafficEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrafficEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lane_segment_id_) { from._impl_.lane_segment_id_ }
    ,/* _impl_._lane_segment_id_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.end_time_){nullptr}
    , decltype(_impl_.event_id_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.severity_) {}

    , decltype(_impl_.confidence_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_ = new ::cavnue::messages::common::v1::Header(*from._impl_.header_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.start_time_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.end_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.end_time_);
  }
  ::memcpy(&_impl_.event_id_, &from._impl_.event_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.confidence_) -
    reinterpret_cast<char*>(&_impl_.event_id_)) + sizeof(_impl_.confidence_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.inference.v1.TrafficEvent)
}

inline void TrafficEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lane_segment_id_) { arena }
    ,/* _impl_._lane_segment_id_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.end_time_){nullptr}
    , decltype(_impl_.event_id_) { ::int64_t{0} }

    , decltype(_impl_.type_) { 0 }

    , decltype(_impl_.severity_) { 0 }

    , decltype(_impl_.confidence_) { 0 }

  };
}

TrafficEvent::~TrafficEvent() {
  // @@protoc_insertion_point(destructor:cavnue.messages.inference.v1.TrafficEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrafficEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lane_segment_id_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.start_time_;
  if (this != internal_default_instance()) delete _impl_.end_time_;
}

void TrafficEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrafficEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.inference.v1.TrafficEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_lane_segment_id()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.start_time_ != nullptr);
      _impl_.start_time_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.end_time_ != nullptr);
      _impl_.end_time_->Clear();
    }
  }
  ::memset(&_impl_.event_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.confidence_) -
      reinterpret_cast<char*>(&_impl_.event_id_)) + sizeof(_impl_.confidence_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 event_id = 2 [json_name = "eventId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.inference.v1.TrafficEvent.Type type = 3 [json_name = "type"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::cavnue::messages::inference::v1::TrafficEvent_Type>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.inference.v1.TrafficEvent.Severity severity = 4 [json_name = "severity"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_severity(static_cast<::cavnue::messages::inference::v1::TrafficEvent_Severity>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp start_time = 5 [json_name = "startTime"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp end_time = 6 [json_name = "endTime"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // float confidence = 7 [json_name = "confidence"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 61)) {
          _impl_.confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int64 lane_segment_id = 8 [json_name = "laneSegmentId"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_lane_segment_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 64) {
          _internal_add_lane_segment_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TrafficEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.inference.v1.TrafficEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // int64 event_id = 2 [json_name = "eventId"];
  if (this->_internal_event_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_event_id(), target);
  }

  // .cavnue.messages.inference.v1.TrafficEvent.Type type = 3 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_type(), target);
  }

  // .cavnue.messages.inference.v1.TrafficEvent.Severity severity = 4 [json_name = "severity"];
  if (this->_internal_severity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_severity(), target);
  }

  // .google.protobuf.Timestamp start_time = 5 [json_name = "startTime"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::start_time(this),
        _Internal::start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 6 [json_name = "endTime"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::end_time(this),
        _Internal::end_time(this).GetCachedSize(), target, stream);
  }

  // float confidence = 7 [json_name = "confidence"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_confidence = this->_internal_confidence();
  ::uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_confidence(), target);
  }

  // repeated int64 lane_segment_id = 8 [json_name = "laneSegmentId"];
  {
    int byte_size = _impl_._lane_segment_id_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(8, _internal_lane_segment_id(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.inference.v1.TrafficEvent)
  return target;
}

::size_t TrafficEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.inference.v1.TrafficEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 lane_segment_id = 8 [json_name = "laneSegmentId"];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_lane_segment_id())
    ;
    _impl_._lane_segment_id_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // .google.protobuf.Timestamp start_time = 5 [json_name = "startTime"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.start_time_);
    }

    // .google.protobuf.Timestamp end_time = 6 [json_name = "endTime"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.end_time_);
    }

  }
  // int64 event_id = 2 [json_name = "eventId"];
  if (this->_internal_event_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_event_id());
  }

  // .cavnue.messages.inference.v1.TrafficEvent.Type type = 3 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .cavnue.messages.inference.v1.TrafficEvent.Severity severity = 4 [json_name = "severity"];
  if (this->_internal_severity() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_severity());
  }

  // float confidence = 7 [json_name = "confidence"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_confidence = this->_internal_confidence();
  ::uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrafficEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficEvent::GetClassData() const { return &_class_data_; }


void TrafficEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrafficEvent*>(&to_msg);
  auto& from = static_cast<const TrafficEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.inference.v1.TrafficEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lane_segment_id_.MergeFrom(from._impl_.lane_segment_id_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::cavnue::messages::common::v1::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_start_time());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_end_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_end_time());
    }
  }
  if (from._internal_event_id() != 0) {
    _this->_internal_set_event_id(from._internal_event_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_severity() != 0) {
    _this->_internal_set_severity(from._internal_severity());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_confidence = from._internal_confidence();
  ::uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    _this->_internal_set_confidence(from._internal_confidence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficEvent::CopyFrom(const TrafficEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.inference.v1.TrafficEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficEvent::IsInitialized() const {
  return true;
}

void TrafficEvent::InternalSwap(TrafficEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.lane_segment_id_.InternalSwap(&other->_impl_.lane_segment_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficEvent, _impl_.confidence_)
      + sizeof(TrafficEvent::_impl_.confidence_)
      - PROTOBUF_FIELD_OFFSET(TrafficEvent, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto_getter, &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace inference
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cavnue::messages::inference::v1::Event*
Arena::CreateMaybeMessage< ::cavnue::messages::inference::v1::Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::inference::v1::Event >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::inference::v1::TrafficEvent*
Arena::CreateMaybeMessage< ::cavnue::messages::inference::v1::TrafficEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::inference::v1::TrafficEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

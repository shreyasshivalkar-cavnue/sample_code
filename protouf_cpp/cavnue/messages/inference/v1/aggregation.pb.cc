// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/inference/v1/aggregation.proto

#include "cavnue/messages/inference/v1/aggregation.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cavnue {
namespace messages {
namespace inference {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR LaneAggregation_Statistics::LaneAggregation_Statistics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lane_id_)*/ 0

  , /*decltype(_impl_.speed_mean_)*/ 0

  , /*decltype(_impl_.speed_std_)*/ 0

  , /*decltype(_impl_.speed_p5_)*/ 0

  , /*decltype(_impl_.speed_p70_)*/ 0

  , /*decltype(_impl_.actors_unique_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LaneAggregation_StatisticsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneAggregation_StatisticsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneAggregation_StatisticsDefaultTypeInternal() {}
  union {
    LaneAggregation_Statistics _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneAggregation_StatisticsDefaultTypeInternal _LaneAggregation_Statistics_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR LaneAggregation::LaneAggregation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.statistics_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.interval_start_ts_)*/nullptr
  , /*decltype(_impl_.interval_end_ts_)*/nullptr} {}
struct LaneAggregationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneAggregationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneAggregationDefaultTypeInternal() {}
  union {
    LaneAggregation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneAggregationDefaultTypeInternal _LaneAggregation_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ActorAggregation_Statistics::ActorAggregation_Statistics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.position_last_)*/nullptr
  , /*decltype(_impl_.projection_)*/nullptr
  , /*decltype(_impl_.actor_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.speed_mean_)*/ 0
} {}
struct ActorAggregation_StatisticsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActorAggregation_StatisticsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActorAggregation_StatisticsDefaultTypeInternal() {}
  union {
    ActorAggregation_Statistics _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActorAggregation_StatisticsDefaultTypeInternal _ActorAggregation_Statistics_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ActorAggregation::ActorAggregation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.statistics_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.interval_start_ts_)*/nullptr
  , /*decltype(_impl_.interval_end_ts_)*/nullptr} {}
struct ActorAggregationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActorAggregationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActorAggregationDefaultTypeInternal() {}
  union {
    ActorAggregation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActorAggregationDefaultTypeInternal _ActorAggregation_default_instance_;
}  // namespace v1
}  // namespace inference
}  // namespace messages
}  // namespace cavnue
static ::_pb::Metadata file_level_metadata_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto = nullptr;
const ::uint32_t TableStruct_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::LaneAggregation_Statistics, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::LaneAggregation_Statistics, _impl_.lane_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::LaneAggregation_Statistics, _impl_.speed_mean_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::LaneAggregation_Statistics, _impl_.speed_std_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::LaneAggregation_Statistics, _impl_.speed_p5_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::LaneAggregation_Statistics, _impl_.speed_p70_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::LaneAggregation_Statistics, _impl_.actors_unique_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::LaneAggregation, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::LaneAggregation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::LaneAggregation, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::LaneAggregation, _impl_.interval_start_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::LaneAggregation, _impl_.interval_end_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::LaneAggregation, _impl_.statistics_),
    0,
    1,
    2,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ActorAggregation_Statistics, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ActorAggregation_Statistics, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ActorAggregation_Statistics, _impl_.actor_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ActorAggregation_Statistics, _impl_.speed_mean_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ActorAggregation_Statistics, _impl_.position_last_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ActorAggregation_Statistics, _impl_.projection_),
    ~0u,
    ~0u,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ActorAggregation, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ActorAggregation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ActorAggregation, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ActorAggregation, _impl_.interval_start_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ActorAggregation, _impl_.interval_end_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ActorAggregation, _impl_.statistics_),
    0,
    1,
    2,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::cavnue::messages::inference::v1::LaneAggregation_Statistics)},
        { 14, 26, -1, sizeof(::cavnue::messages::inference::v1::LaneAggregation)},
        { 30, 42, -1, sizeof(::cavnue::messages::inference::v1::ActorAggregation_Statistics)},
        { 46, 58, -1, sizeof(::cavnue::messages::inference::v1::ActorAggregation)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cavnue::messages::inference::v1::_LaneAggregation_Statistics_default_instance_._instance,
    &::cavnue::messages::inference::v1::_LaneAggregation_default_instance_._instance,
    &::cavnue::messages::inference::v1::_ActorAggregation_Statistics_default_instance_._instance,
    &::cavnue::messages::inference::v1::_ActorAggregation_default_instance_._instance,
};
const char descriptor_table_protodef_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n.cavnue/messages/inference/v1/aggregati"
    "on.proto\022\034cavnue.messages.inference.v1\032&"
    "cavnue/messages/common/v1/common.proto\032-"
    "cavnue/messages/common/v1/field_options."
    "proto\032\037google/protobuf/timestamp.proto\032\'"
    "cavnue/third_party/bq/v1/bq_field.proto\032"
    "(cavnue/messages/geometry/v1/vector.prot"
    "o\032$cavnue/messages/spatial/v1/utm.proto\""
    "\255\004\n\017LaneAggregation\0229\n\006header\030\001 \001(\0132!.ca"
    "vnue.messages.common.v1.HeaderR\006header\022W"
    "\n\021interval_start_ts\030\002 \001(\0132\032.google.proto"
    "buf.TimestampB\017\212\371+\013\022\tTIMESTAMPR\017interval"
    "StartTs\022S\n\017interval_end_ts\030\003 \001(\0132\032.googl"
    "e.protobuf.TimestampB\017\212\371+\013\022\tTIMESTAMPR\ri"
    "ntervalEndTs\022X\n\nstatistics\030\004 \003(\01328.cavnu"
    "e.messages.inference.v1.LaneAggregation."
    "StatisticsR\nstatistics\032\326\001\n\nStatistics\022\027\n"
    "\007lane_id\030\001 \001(\005R\006laneId\022#\n\nspeed_mean\030\002 \001"
    "(\002B\004\210\361\004\001R\tspeedMean\022!\n\tspeed_std\030\003 \001(\002B\004"
    "\210\361\004\001R\010speedStd\022\037\n\010speed_p5\030\004 \001(\002B\004\210\361\004\001R\007"
    "speedP5\022!\n\tspeed_p70\030\005 \001(\002B\004\210\361\004\001R\010speedP"
    "70\022#\n\ractors_unique\030\006 \001(\rR\014actorsUnique\""
    "\306\004\n\020ActorAggregation\0229\n\006header\030\001 \001(\0132!.c"
    "avnue.messages.common.v1.HeaderR\006header\022"
    "W\n\021interval_start_ts\030\002 \001(\0132\032.google.prot"
    "obuf.TimestampB\017\212\371+\013\022\tTIMESTAMPR\017interva"
    "lStartTs\022S\n\017interval_end_ts\030\003 \001(\0132\032.goog"
    "le.protobuf.TimestampB\017\212\371+\013\022\tTIMESTAMPR\r"
    "intervalEndTs\022Y\n\nstatistics\030\004 \003(\01329.cavn"
    "ue.messages.inference.v1.ActorAggregatio"
    "n.StatisticsR\nstatistics\032\355\001\n\nStatistics\022"
    "\031\n\010actor_id\030\001 \001(\003R\007actorId\022#\n\nspeed_mean"
    "\030\002 \001(\002B\004\210\361\004\001R\tspeedMean\022T\n\rposition_last"
    "\030\003 \001(\0132%.cavnue.messages.geometry.v1.Vec"
    "tor3dB\010\210\361\004\005\220\361\004\002R\014positionLast\022I\n\nproject"
    "ion\030\004 \001(\0132).cavnue.messages.spatial.v1.U"
    "TMProjectionR\nprojectionb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto_deps[6] =
    {
        &::descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2ffield_5foptions_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fvector_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fspatial_2fv1_2futm_2eproto,
        &::descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ffield_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto = {
    false,
    false,
    1472,
    descriptor_table_protodef_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto,
    "cavnue/messages/inference/v1/aggregation.proto",
    &descriptor_table_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto_once,
    descriptor_table_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto_deps,
    6,
    4,
    schemas,
    file_default_instances,
    TableStruct_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto::offsets,
    file_level_metadata_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto,
    file_level_enum_descriptors_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto,
    file_level_service_descriptors_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto_getter() {
  return &descriptor_table_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto(&descriptor_table_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto);
namespace cavnue {
namespace messages {
namespace inference {
namespace v1 {
// ===================================================================

class LaneAggregation_Statistics::_Internal {
 public:
};

LaneAggregation_Statistics::LaneAggregation_Statistics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.inference.v1.LaneAggregation.Statistics)
}
LaneAggregation_Statistics::LaneAggregation_Statistics(const LaneAggregation_Statistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.inference.v1.LaneAggregation.Statistics)
}

inline void LaneAggregation_Statistics::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.lane_id_) { 0 }

    , decltype(_impl_.speed_mean_) { 0 }

    , decltype(_impl_.speed_std_) { 0 }

    , decltype(_impl_.speed_p5_) { 0 }

    , decltype(_impl_.speed_p70_) { 0 }

    , decltype(_impl_.actors_unique_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LaneAggregation_Statistics::~LaneAggregation_Statistics() {
  // @@protoc_insertion_point(destructor:cavnue.messages.inference.v1.LaneAggregation.Statistics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneAggregation_Statistics::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void LaneAggregation_Statistics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneAggregation_Statistics::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.inference.v1.LaneAggregation.Statistics)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.lane_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.actors_unique_) -
      reinterpret_cast<char*>(&_impl_.lane_id_)) + sizeof(_impl_.actors_unique_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneAggregation_Statistics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 lane_id = 1 [json_name = "laneId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // float speed_mean = 2 [json_name = "speedMean", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 21)) {
          _impl_.speed_mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float speed_std = 3 [json_name = "speedStd", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 29)) {
          _impl_.speed_std_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float speed_p5 = 4 [json_name = "speedP5", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 37)) {
          _impl_.speed_p5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float speed_p70 = 5 [json_name = "speedP70", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 45)) {
          _impl_.speed_p70_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 actors_unique = 6 [json_name = "actorsUnique"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.actors_unique_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LaneAggregation_Statistics::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.inference.v1.LaneAggregation.Statistics)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lane_id = 1 [json_name = "laneId"];
  if (this->_internal_lane_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_lane_id(), target);
  }

  // float speed_mean = 2 [json_name = "speedMean", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_speed_mean = this->_internal_speed_mean();
  ::uint32_t raw_speed_mean;
  memcpy(&raw_speed_mean, &tmp_speed_mean, sizeof(tmp_speed_mean));
  if (raw_speed_mean != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_speed_mean(), target);
  }

  // float speed_std = 3 [json_name = "speedStd", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_speed_std = this->_internal_speed_std();
  ::uint32_t raw_speed_std;
  memcpy(&raw_speed_std, &tmp_speed_std, sizeof(tmp_speed_std));
  if (raw_speed_std != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_speed_std(), target);
  }

  // float speed_p5 = 4 [json_name = "speedP5", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_speed_p5 = this->_internal_speed_p5();
  ::uint32_t raw_speed_p5;
  memcpy(&raw_speed_p5, &tmp_speed_p5, sizeof(tmp_speed_p5));
  if (raw_speed_p5 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_speed_p5(), target);
  }

  // float speed_p70 = 5 [json_name = "speedP70", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_speed_p70 = this->_internal_speed_p70();
  ::uint32_t raw_speed_p70;
  memcpy(&raw_speed_p70, &tmp_speed_p70, sizeof(tmp_speed_p70));
  if (raw_speed_p70 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_speed_p70(), target);
  }

  // uint32 actors_unique = 6 [json_name = "actorsUnique"];
  if (this->_internal_actors_unique() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_actors_unique(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.inference.v1.LaneAggregation.Statistics)
  return target;
}

::size_t LaneAggregation_Statistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.inference.v1.LaneAggregation.Statistics)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 lane_id = 1 [json_name = "laneId"];
  if (this->_internal_lane_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_lane_id());
  }

  // float speed_mean = 2 [json_name = "speedMean", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_speed_mean = this->_internal_speed_mean();
  ::uint32_t raw_speed_mean;
  memcpy(&raw_speed_mean, &tmp_speed_mean, sizeof(tmp_speed_mean));
  if (raw_speed_mean != 0) {
    total_size += 5;
  }

  // float speed_std = 3 [json_name = "speedStd", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_speed_std = this->_internal_speed_std();
  ::uint32_t raw_speed_std;
  memcpy(&raw_speed_std, &tmp_speed_std, sizeof(tmp_speed_std));
  if (raw_speed_std != 0) {
    total_size += 5;
  }

  // float speed_p5 = 4 [json_name = "speedP5", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_speed_p5 = this->_internal_speed_p5();
  ::uint32_t raw_speed_p5;
  memcpy(&raw_speed_p5, &tmp_speed_p5, sizeof(tmp_speed_p5));
  if (raw_speed_p5 != 0) {
    total_size += 5;
  }

  // float speed_p70 = 5 [json_name = "speedP70", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_speed_p70 = this->_internal_speed_p70();
  ::uint32_t raw_speed_p70;
  memcpy(&raw_speed_p70, &tmp_speed_p70, sizeof(tmp_speed_p70));
  if (raw_speed_p70 != 0) {
    total_size += 5;
  }

  // uint32 actors_unique = 6 [json_name = "actorsUnique"];
  if (this->_internal_actors_unique() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_actors_unique());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneAggregation_Statistics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LaneAggregation_Statistics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneAggregation_Statistics::GetClassData() const { return &_class_data_; }


void LaneAggregation_Statistics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LaneAggregation_Statistics*>(&to_msg);
  auto& from = static_cast<const LaneAggregation_Statistics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.inference.v1.LaneAggregation.Statistics)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_lane_id() != 0) {
    _this->_internal_set_lane_id(from._internal_lane_id());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_speed_mean = from._internal_speed_mean();
  ::uint32_t raw_speed_mean;
  memcpy(&raw_speed_mean, &tmp_speed_mean, sizeof(tmp_speed_mean));
  if (raw_speed_mean != 0) {
    _this->_internal_set_speed_mean(from._internal_speed_mean());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_speed_std = from._internal_speed_std();
  ::uint32_t raw_speed_std;
  memcpy(&raw_speed_std, &tmp_speed_std, sizeof(tmp_speed_std));
  if (raw_speed_std != 0) {
    _this->_internal_set_speed_std(from._internal_speed_std());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_speed_p5 = from._internal_speed_p5();
  ::uint32_t raw_speed_p5;
  memcpy(&raw_speed_p5, &tmp_speed_p5, sizeof(tmp_speed_p5));
  if (raw_speed_p5 != 0) {
    _this->_internal_set_speed_p5(from._internal_speed_p5());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_speed_p70 = from._internal_speed_p70();
  ::uint32_t raw_speed_p70;
  memcpy(&raw_speed_p70, &tmp_speed_p70, sizeof(tmp_speed_p70));
  if (raw_speed_p70 != 0) {
    _this->_internal_set_speed_p70(from._internal_speed_p70());
  }
  if (from._internal_actors_unique() != 0) {
    _this->_internal_set_actors_unique(from._internal_actors_unique());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneAggregation_Statistics::CopyFrom(const LaneAggregation_Statistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.inference.v1.LaneAggregation.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneAggregation_Statistics::IsInitialized() const {
  return true;
}

void LaneAggregation_Statistics::InternalSwap(LaneAggregation_Statistics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneAggregation_Statistics, _impl_.actors_unique_)
      + sizeof(LaneAggregation_Statistics::_impl_.actors_unique_)
      - PROTOBUF_FIELD_OFFSET(LaneAggregation_Statistics, _impl_.lane_id_)>(
          reinterpret_cast<char*>(&_impl_.lane_id_),
          reinterpret_cast<char*>(&other->_impl_.lane_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneAggregation_Statistics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto_getter, &descriptor_table_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto[0]);
}
// ===================================================================

class LaneAggregation::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneAggregation>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LaneAggregation, _impl_._has_bits_);
  static const ::cavnue::messages::common::v1::Header& header(const LaneAggregation* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& interval_start_ts(const LaneAggregation* msg);
  static void set_has_interval_start_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& interval_end_ts(const LaneAggregation* msg);
  static void set_has_interval_end_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::cavnue::messages::common::v1::Header&
LaneAggregation::_Internal::header(const LaneAggregation* msg) {
  return *msg->_impl_.header_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LaneAggregation::_Internal::interval_start_ts(const LaneAggregation* msg) {
  return *msg->_impl_.interval_start_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LaneAggregation::_Internal::interval_end_ts(const LaneAggregation* msg) {
  return *msg->_impl_.interval_end_ts_;
}
void LaneAggregation::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LaneAggregation::clear_interval_start_ts() {
  if (_impl_.interval_start_ts_ != nullptr) _impl_.interval_start_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void LaneAggregation::clear_interval_end_ts() {
  if (_impl_.interval_end_ts_ != nullptr) _impl_.interval_end_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
LaneAggregation::LaneAggregation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.inference.v1.LaneAggregation)
}
LaneAggregation::LaneAggregation(const LaneAggregation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LaneAggregation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.statistics_){from._impl_.statistics_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.interval_start_ts_){nullptr}
    , decltype(_impl_.interval_end_ts_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_ = new ::cavnue::messages::common::v1::Header(*from._impl_.header_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.interval_start_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.interval_start_ts_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.interval_end_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.interval_end_ts_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.inference.v1.LaneAggregation)
}

inline void LaneAggregation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.statistics_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.interval_start_ts_){nullptr}
    , decltype(_impl_.interval_end_ts_){nullptr}
  };
}

LaneAggregation::~LaneAggregation() {
  // @@protoc_insertion_point(destructor:cavnue.messages.inference.v1.LaneAggregation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneAggregation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_statistics()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.interval_start_ts_;
  if (this != internal_default_instance()) delete _impl_.interval_end_ts_;
}

void LaneAggregation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneAggregation::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.inference.v1.LaneAggregation)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_statistics()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.interval_start_ts_ != nullptr);
      _impl_.interval_start_ts_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.interval_end_ts_ != nullptr);
      _impl_.interval_end_ts_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneAggregation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp interval_start_ts = 2 [json_name = "intervalStartTs", (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval_start_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp interval_end_ts = 3 [json_name = "intervalEndTs", (.gen_bq_schema.bigquery) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval_end_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cavnue.messages.inference.v1.LaneAggregation.Statistics statistics = 4 [json_name = "statistics"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_statistics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LaneAggregation::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.inference.v1.LaneAggregation)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp interval_start_ts = 2 [json_name = "intervalStartTs", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::interval_start_ts(this),
        _Internal::interval_start_ts(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp interval_end_ts = 3 [json_name = "intervalEndTs", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::interval_end_ts(this),
        _Internal::interval_end_ts(this).GetCachedSize(), target, stream);
  }

  // repeated .cavnue.messages.inference.v1.LaneAggregation.Statistics statistics = 4 [json_name = "statistics"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_statistics_size()); i < n; i++) {
    const auto& repfield = this->_internal_statistics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.inference.v1.LaneAggregation)
  return target;
}

::size_t LaneAggregation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.inference.v1.LaneAggregation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cavnue.messages.inference.v1.LaneAggregation.Statistics statistics = 4 [json_name = "statistics"];
  total_size += 1UL * this->_internal_statistics_size();
  for (const auto& msg : this->_internal_statistics()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // .google.protobuf.Timestamp interval_start_ts = 2 [json_name = "intervalStartTs", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interval_start_ts_);
    }

    // .google.protobuf.Timestamp interval_end_ts = 3 [json_name = "intervalEndTs", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interval_end_ts_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneAggregation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LaneAggregation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneAggregation::GetClassData() const { return &_class_data_; }


void LaneAggregation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LaneAggregation*>(&to_msg);
  auto& from = static_cast<const LaneAggregation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.inference.v1.LaneAggregation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_statistics()->MergeFrom(from._internal_statistics());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::cavnue::messages::common::v1::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_interval_start_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_interval_start_ts());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_interval_end_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_interval_end_ts());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneAggregation::CopyFrom(const LaneAggregation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.inference.v1.LaneAggregation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneAggregation::IsInitialized() const {
  return true;
}

void LaneAggregation::InternalSwap(LaneAggregation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_statistics()->InternalSwap(other->_internal_mutable_statistics());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneAggregation, _impl_.interval_end_ts_)
      + sizeof(LaneAggregation::_impl_.interval_end_ts_)
      - PROTOBUF_FIELD_OFFSET(LaneAggregation, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneAggregation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto_getter, &descriptor_table_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto[1]);
}
// ===================================================================

class ActorAggregation_Statistics::_Internal {
 public:
  using HasBits = decltype(std::declval<ActorAggregation_Statistics>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ActorAggregation_Statistics, _impl_._has_bits_);
  static const ::cavnue::messages::geometry::v1::Vector3d& position_last(const ActorAggregation_Statistics* msg);
  static void set_has_position_last(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cavnue::messages::spatial::v1::UTMProjection& projection(const ActorAggregation_Statistics* msg);
  static void set_has_projection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::cavnue::messages::geometry::v1::Vector3d&
ActorAggregation_Statistics::_Internal::position_last(const ActorAggregation_Statistics* msg) {
  return *msg->_impl_.position_last_;
}
const ::cavnue::messages::spatial::v1::UTMProjection&
ActorAggregation_Statistics::_Internal::projection(const ActorAggregation_Statistics* msg) {
  return *msg->_impl_.projection_;
}
void ActorAggregation_Statistics::clear_position_last() {
  if (_impl_.position_last_ != nullptr) _impl_.position_last_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ActorAggregation_Statistics::clear_projection() {
  if (_impl_.projection_ != nullptr) _impl_.projection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ActorAggregation_Statistics::ActorAggregation_Statistics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.inference.v1.ActorAggregation.Statistics)
}
ActorAggregation_Statistics::ActorAggregation_Statistics(const ActorAggregation_Statistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActorAggregation_Statistics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_last_){nullptr}
    , decltype(_impl_.projection_){nullptr}
    , decltype(_impl_.actor_id_) {}

    , decltype(_impl_.speed_mean_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.position_last_ = new ::cavnue::messages::geometry::v1::Vector3d(*from._impl_.position_last_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.projection_ = new ::cavnue::messages::spatial::v1::UTMProjection(*from._impl_.projection_);
  }
  ::memcpy(&_impl_.actor_id_, &from._impl_.actor_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.speed_mean_) -
    reinterpret_cast<char*>(&_impl_.actor_id_)) + sizeof(_impl_.speed_mean_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.inference.v1.ActorAggregation.Statistics)
}

inline void ActorAggregation_Statistics::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_last_){nullptr}
    , decltype(_impl_.projection_){nullptr}
    , decltype(_impl_.actor_id_) { ::int64_t{0} }

    , decltype(_impl_.speed_mean_) { 0 }

  };
}

ActorAggregation_Statistics::~ActorAggregation_Statistics() {
  // @@protoc_insertion_point(destructor:cavnue.messages.inference.v1.ActorAggregation.Statistics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActorAggregation_Statistics::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_last_;
  if (this != internal_default_instance()) delete _impl_.projection_;
}

void ActorAggregation_Statistics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActorAggregation_Statistics::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.inference.v1.ActorAggregation.Statistics)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.position_last_ != nullptr);
      _impl_.position_last_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.projection_ != nullptr);
      _impl_.projection_->Clear();
    }
  }
  ::memset(&_impl_.actor_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.speed_mean_) -
      reinterpret_cast<char*>(&_impl_.actor_id_)) + sizeof(_impl_.speed_mean_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActorAggregation_Statistics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 actor_id = 1 [json_name = "actorId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.actor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // float speed_mean = 2 [json_name = "speedMean", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 21)) {
          _impl_.speed_mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.geometry.v1.Vector3d position_last = 3 [json_name = "positionLast", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_UTM];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_last(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.spatial.v1.UTMProjection projection = 4 [json_name = "projection"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_projection(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ActorAggregation_Statistics::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.inference.v1.ActorAggregation.Statistics)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 actor_id = 1 [json_name = "actorId"];
  if (this->_internal_actor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_actor_id(), target);
  }

  // float speed_mean = 2 [json_name = "speedMean", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_speed_mean = this->_internal_speed_mean();
  ::uint32_t raw_speed_mean;
  memcpy(&raw_speed_mean, &tmp_speed_mean, sizeof(tmp_speed_mean));
  if (raw_speed_mean != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_speed_mean(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.geometry.v1.Vector3d position_last = 3 [json_name = "positionLast", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_UTM];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::position_last(this),
        _Internal::position_last(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.spatial.v1.UTMProjection projection = 4 [json_name = "projection"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::projection(this),
        _Internal::projection(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.inference.v1.ActorAggregation.Statistics)
  return target;
}

::size_t ActorAggregation_Statistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.inference.v1.ActorAggregation.Statistics)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .cavnue.messages.geometry.v1.Vector3d position_last = 3 [json_name = "positionLast", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_UTM];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_last_);
    }

    // .cavnue.messages.spatial.v1.UTMProjection projection = 4 [json_name = "projection"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.projection_);
    }

  }
  // int64 actor_id = 1 [json_name = "actorId"];
  if (this->_internal_actor_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_actor_id());
  }

  // float speed_mean = 2 [json_name = "speedMean", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_speed_mean = this->_internal_speed_mean();
  ::uint32_t raw_speed_mean;
  memcpy(&raw_speed_mean, &tmp_speed_mean, sizeof(tmp_speed_mean));
  if (raw_speed_mean != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActorAggregation_Statistics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActorAggregation_Statistics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActorAggregation_Statistics::GetClassData() const { return &_class_data_; }


void ActorAggregation_Statistics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActorAggregation_Statistics*>(&to_msg);
  auto& from = static_cast<const ActorAggregation_Statistics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.inference.v1.ActorAggregation.Statistics)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position_last()->::cavnue::messages::geometry::v1::Vector3d::MergeFrom(
          from._internal_position_last());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_projection()->::cavnue::messages::spatial::v1::UTMProjection::MergeFrom(
          from._internal_projection());
    }
  }
  if (from._internal_actor_id() != 0) {
    _this->_internal_set_actor_id(from._internal_actor_id());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_speed_mean = from._internal_speed_mean();
  ::uint32_t raw_speed_mean;
  memcpy(&raw_speed_mean, &tmp_speed_mean, sizeof(tmp_speed_mean));
  if (raw_speed_mean != 0) {
    _this->_internal_set_speed_mean(from._internal_speed_mean());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActorAggregation_Statistics::CopyFrom(const ActorAggregation_Statistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.inference.v1.ActorAggregation.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorAggregation_Statistics::IsInitialized() const {
  return true;
}

void ActorAggregation_Statistics::InternalSwap(ActorAggregation_Statistics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActorAggregation_Statistics, _impl_.speed_mean_)
      + sizeof(ActorAggregation_Statistics::_impl_.speed_mean_)
      - PROTOBUF_FIELD_OFFSET(ActorAggregation_Statistics, _impl_.position_last_)>(
          reinterpret_cast<char*>(&_impl_.position_last_),
          reinterpret_cast<char*>(&other->_impl_.position_last_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActorAggregation_Statistics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto_getter, &descriptor_table_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto[2]);
}
// ===================================================================

class ActorAggregation::_Internal {
 public:
  using HasBits = decltype(std::declval<ActorAggregation>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ActorAggregation, _impl_._has_bits_);
  static const ::cavnue::messages::common::v1::Header& header(const ActorAggregation* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& interval_start_ts(const ActorAggregation* msg);
  static void set_has_interval_start_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& interval_end_ts(const ActorAggregation* msg);
  static void set_has_interval_end_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::cavnue::messages::common::v1::Header&
ActorAggregation::_Internal::header(const ActorAggregation* msg) {
  return *msg->_impl_.header_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ActorAggregation::_Internal::interval_start_ts(const ActorAggregation* msg) {
  return *msg->_impl_.interval_start_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ActorAggregation::_Internal::interval_end_ts(const ActorAggregation* msg) {
  return *msg->_impl_.interval_end_ts_;
}
void ActorAggregation::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ActorAggregation::clear_interval_start_ts() {
  if (_impl_.interval_start_ts_ != nullptr) _impl_.interval_start_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ActorAggregation::clear_interval_end_ts() {
  if (_impl_.interval_end_ts_ != nullptr) _impl_.interval_end_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ActorAggregation::ActorAggregation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.inference.v1.ActorAggregation)
}
ActorAggregation::ActorAggregation(const ActorAggregation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActorAggregation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.statistics_){from._impl_.statistics_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.interval_start_ts_){nullptr}
    , decltype(_impl_.interval_end_ts_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_ = new ::cavnue::messages::common::v1::Header(*from._impl_.header_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.interval_start_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.interval_start_ts_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.interval_end_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.interval_end_ts_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.inference.v1.ActorAggregation)
}

inline void ActorAggregation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.statistics_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.interval_start_ts_){nullptr}
    , decltype(_impl_.interval_end_ts_){nullptr}
  };
}

ActorAggregation::~ActorAggregation() {
  // @@protoc_insertion_point(destructor:cavnue.messages.inference.v1.ActorAggregation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActorAggregation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_statistics()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.interval_start_ts_;
  if (this != internal_default_instance()) delete _impl_.interval_end_ts_;
}

void ActorAggregation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActorAggregation::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.inference.v1.ActorAggregation)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_statistics()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.interval_start_ts_ != nullptr);
      _impl_.interval_start_ts_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.interval_end_ts_ != nullptr);
      _impl_.interval_end_ts_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActorAggregation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp interval_start_ts = 2 [json_name = "intervalStartTs", (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval_start_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp interval_end_ts = 3 [json_name = "intervalEndTs", (.gen_bq_schema.bigquery) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval_end_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cavnue.messages.inference.v1.ActorAggregation.Statistics statistics = 4 [json_name = "statistics"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_statistics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ActorAggregation::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.inference.v1.ActorAggregation)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp interval_start_ts = 2 [json_name = "intervalStartTs", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::interval_start_ts(this),
        _Internal::interval_start_ts(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp interval_end_ts = 3 [json_name = "intervalEndTs", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::interval_end_ts(this),
        _Internal::interval_end_ts(this).GetCachedSize(), target, stream);
  }

  // repeated .cavnue.messages.inference.v1.ActorAggregation.Statistics statistics = 4 [json_name = "statistics"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_statistics_size()); i < n; i++) {
    const auto& repfield = this->_internal_statistics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.inference.v1.ActorAggregation)
  return target;
}

::size_t ActorAggregation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.inference.v1.ActorAggregation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cavnue.messages.inference.v1.ActorAggregation.Statistics statistics = 4 [json_name = "statistics"];
  total_size += 1UL * this->_internal_statistics_size();
  for (const auto& msg : this->_internal_statistics()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // .google.protobuf.Timestamp interval_start_ts = 2 [json_name = "intervalStartTs", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interval_start_ts_);
    }

    // .google.protobuf.Timestamp interval_end_ts = 3 [json_name = "intervalEndTs", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interval_end_ts_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActorAggregation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActorAggregation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActorAggregation::GetClassData() const { return &_class_data_; }


void ActorAggregation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActorAggregation*>(&to_msg);
  auto& from = static_cast<const ActorAggregation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.inference.v1.ActorAggregation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_statistics()->MergeFrom(from._internal_statistics());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::cavnue::messages::common::v1::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_interval_start_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_interval_start_ts());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_interval_end_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_interval_end_ts());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActorAggregation::CopyFrom(const ActorAggregation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.inference.v1.ActorAggregation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorAggregation::IsInitialized() const {
  return true;
}

void ActorAggregation::InternalSwap(ActorAggregation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_statistics()->InternalSwap(other->_internal_mutable_statistics());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActorAggregation, _impl_.interval_end_ts_)
      + sizeof(ActorAggregation::_impl_.interval_end_ts_)
      - PROTOBUF_FIELD_OFFSET(ActorAggregation, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActorAggregation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto_getter, &descriptor_table_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace inference
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cavnue::messages::inference::v1::LaneAggregation_Statistics*
Arena::CreateMaybeMessage< ::cavnue::messages::inference::v1::LaneAggregation_Statistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::inference::v1::LaneAggregation_Statistics >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::inference::v1::LaneAggregation*
Arena::CreateMaybeMessage< ::cavnue::messages::inference::v1::LaneAggregation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::inference::v1::LaneAggregation >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::inference::v1::ActorAggregation_Statistics*
Arena::CreateMaybeMessage< ::cavnue::messages::inference::v1::ActorAggregation_Statistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::inference::v1::ActorAggregation_Statistics >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::inference::v1::ActorAggregation*
Arena::CreateMaybeMessage< ::cavnue::messages::inference::v1::ActorAggregation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::inference::v1::ActorAggregation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

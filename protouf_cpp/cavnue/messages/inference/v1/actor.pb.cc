// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/inference/v1/actor.proto

#include "cavnue/messages/inference/v1/actor.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cavnue {
namespace messages {
namespace inference {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR Actor_ActorSize::Actor_ActorSize(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/nullptr
  , /*decltype(_impl_.y_)*/nullptr
  , /*decltype(_impl_.z_)*/nullptr} {}
struct Actor_ActorSizeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Actor_ActorSizeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Actor_ActorSizeDefaultTypeInternal() {}
  union {
    Actor_ActorSize _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Actor_ActorSizeDefaultTypeInternal _Actor_ActorSize_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Actor_Attribute::Actor_Attribute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ts_)*/nullptr
  , /*decltype(_impl_.active_)*/ false

  , /*decltype(_impl_.confidence_)*/ 0
} {}
struct Actor_AttributeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Actor_AttributeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Actor_AttributeDefaultTypeInternal() {}
  union {
    Actor_Attribute _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Actor_AttributeDefaultTypeInternal _Actor_Attribute_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Actor::Actor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.observation_ts_)*/nullptr
  , /*decltype(_impl_.observation_duration_)*/nullptr
  , /*decltype(_impl_.data_source_)*/nullptr
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.velocity_)*/nullptr
  , /*decltype(_impl_.acceleration_)*/nullptr
  , /*decltype(_impl_.projection_)*/nullptr
  , /*decltype(_impl_.size_)*/nullptr
  , /*decltype(_impl_.bbox_)*/nullptr
  , /*decltype(_impl_.speeding_)*/nullptr
  , /*decltype(_impl_.impeding_)*/nullptr
  , /*decltype(_impl_.stationary_)*/nullptr
  , /*decltype(_impl_.update_mask_)*/nullptr
  , /*decltype(_impl_.collision_)*/nullptr
  , /*decltype(_impl_.actor_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.action_)*/ 0

  , /*decltype(_impl_.classification_)*/ 0

  , /*decltype(_impl_.lane_)*/ 0

  , /*decltype(_impl_.severity_)*/ 0
} {}
struct ActorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActorDefaultTypeInternal() {}
  union {
    Actor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActorDefaultTypeInternal _Actor_default_instance_;
}  // namespace v1
}  // namespace inference
}  // namespace messages
}  // namespace cavnue
static ::_pb::Metadata file_level_metadata_cavnue_2fmessages_2finference_2fv1_2factor_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_cavnue_2fmessages_2finference_2fv1_2factor_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cavnue_2fmessages_2finference_2fv1_2factor_2eproto = nullptr;
const ::uint32_t TableStruct_cavnue_2fmessages_2finference_2fv1_2factor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Actor_ActorSize, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Actor_ActorSize, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Actor_ActorSize, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Actor_ActorSize, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Actor_ActorSize, _impl_.z_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Actor_Attribute, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Actor_Attribute, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Actor_Attribute, _impl_.ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Actor_Attribute, _impl_.active_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Actor_Attribute, _impl_.confidence_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Actor, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Actor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Actor, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Actor, _impl_.observation_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Actor, _impl_.observation_duration_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Actor, _impl_.data_source_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Actor, _impl_.action_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Actor, _impl_.actor_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Actor, _impl_.classification_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Actor, _impl_.position_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Actor, _impl_.velocity_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Actor, _impl_.acceleration_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Actor, _impl_.projection_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Actor, _impl_.lane_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Actor, _impl_.size_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Actor, _impl_.bbox_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Actor, _impl_.severity_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Actor, _impl_.speeding_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Actor, _impl_.impeding_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Actor, _impl_.stationary_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Actor, _impl_.update_mask_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::Actor, _impl_.collision_),
    0,
    1,
    2,
    3,
    ~0u,
    ~0u,
    ~0u,
    4,
    5,
    6,
    7,
    15,
    8,
    9,
    ~0u,
    10,
    11,
    12,
    13,
    14,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 11, -1, sizeof(::cavnue::messages::inference::v1::Actor_ActorSize)},
        { 14, 25, -1, sizeof(::cavnue::messages::inference::v1::Actor_Attribute)},
        { 28, 56, -1, sizeof(::cavnue::messages::inference::v1::Actor)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cavnue::messages::inference::v1::_Actor_ActorSize_default_instance_._instance,
    &::cavnue::messages::inference::v1::_Actor_Attribute_default_instance_._instance,
    &::cavnue::messages::inference::v1::_Actor_default_instance_._instance,
};
const char descriptor_table_protodef_cavnue_2fmessages_2finference_2fv1_2factor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n(cavnue/messages/inference/v1/actor.pro"
    "to\022\034cavnue.messages.inference.v1\032&cavnue"
    "/messages/common/v1/common.proto\032-cavnue"
    "/messages/common/v1/field_options.proto\032"
    ".cavnue/messages/geometry/v1/bounding_bo"
    "x.proto\032,cavnue/messages/geometry/v1/cov"
    "ariance.proto\032(cavnue/messages/geometry/"
    "v1/scalar.proto\032$cavnue/messages/spatial"
    "/v1/utm.proto\032\036google/protobuf/duration."
    "proto\032\037google/protobuf/timestamp.proto\032 "
    "google/protobuf/field_mask.proto\032\'cavnue"
    "/third_party/bq/v1/bq_field.proto\"\367\016\n\005Ac"
    "tor\0229\n\006header\030\001 \001(\0132!.cavnue.messages.co"
    "mmon.v1.HeaderR\006header\022A\n\016observation_ts"
    "\030\002 \001(\0132\032.google.protobuf.TimestampR\robse"
    "rvationTs\022L\n\024observation_duration\030\003 \001(\0132"
    "\031.google.protobuf.DurationR\023observationD"
    "uration\022F\n\013data_source\030\004 \001(\0132%.cavnue.me"
    "ssages.common.v1.DataSourceR\ndataSource\022"
    "B\n\006action\030\005 \001(\0162*.cavnue.messages.infere"
    "nce.v1.Actor.ActionR\006action\022\031\n\010actor_id\030"
    "\006 \001(\003R\007actorId\022Q\n\016classification\030\007 \001(\0162)"
    ".cavnue.messages.common.v1.Classificatio"
    "nR\016classification\022Q\n\010position\030\010 \001(\0132/.ca"
    "vnue.messages.geometry.v1.CovarianceVect"
    "or3dB\004\210\361\004\005R\010position\022Q\n\010velocity\030\t \001(\0132/"
    ".cavnue.messages.geometry.v1.CovarianceV"
    "ector3fB\004\210\361\004\001R\010velocity\022Y\n\014acceleration\030"
    "\n \001(\0132/.cavnue.messages.geometry.v1.Cova"
    "rianceVector2fB\004\210\361\004\002R\014acceleration\022I\n\npr"
    "ojection\030\013 \001(\0132).cavnue.messages.spatial"
    ".v1.UTMProjectionR\nprojection\022\027\n\004lane\030\014 "
    "\001(\005H\000R\004lane\210\001\001\022P\n\004size\030\r \001(\0132-.cavnue.me"
    "ssages.inference.v1.Actor.ActorSizeB\010\210\361\004"
    "\005\220\361\004\003H\001R\004size\210\001\001\022>\n\004bbox\030\016 \001(\0132*.cavnue."
    "messages.geometry.v1.BoundingBox2fR\004bbox"
    "\022H\n\010severity\030\017 \001(\0162,.cavnue.messages.inf"
    "erence.v1.Actor.SeverityR\010severity\022I\n\010sp"
    "eeding\030\020 \001(\0132-.cavnue.messages.inference"
    ".v1.Actor.AttributeR\010speeding\022I\n\010impedin"
    "g\030\021 \001(\0132-.cavnue.messages.inference.v1.A"
    "ctor.AttributeR\010impeding\022M\n\nstationary\030\022"
    " \001(\0132-.cavnue.messages.inference.v1.Acto"
    "r.AttributeR\nstationary\022C\n\013update_mask\030\023"
    " \001(\0132\032.google.protobuf.FieldMaskB\006\212\371+\002\030\001"
    "R\nupdateMask\022K\n\tcollision\030\024 \001(\0132-.cavnue"
    ".messages.inference.v1.Actor.AttributeR\t"
    "collision\032\277\001\n\tActorSize\022:\n\001x\030\001 \001(\0132,.cav"
    "nue.messages.geometry.v1.VarianceScalarf"
    "R\001x\022:\n\001y\030\002 \001(\0132,.cavnue.messages.geometr"
    "y.v1.VarianceScalarfR\001y\022:\n\001z\030\003 \001(\0132,.cav"
    "nue.messages.geometry.v1.VarianceScalarf"
    "R\001z\032o\n\tAttribute\022*\n\002ts\030\001 \001(\0132\032.google.pr"
    "otobuf.TimestampR\002ts\022\026\n\006active\030\002 \001(\010R\006ac"
    "tive\022\036\n\nconfidence\030\003 \001(\002R\nconfidence\"V\n\006"
    "Action\022\026\n\022ACTION_UNSPECIFIED\020\000\022\021\n\rACTION"
    "_UPDATE\020\001\022\021\n\rACTION_REMOVE\020\002\022\016\n\nACTION_A"
    "DD\020\003\"S\n\010Severity\022\030\n\024SEVERITY_UNSPECIFIED"
    "\020\000\022\023\n\017SEVERITY_HAZARD\020\001\022\030\n\024SEVERITY_OF_I"
    "NTEREST\020\002B\007\n\005_laneB\007\n\005_sizeb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cavnue_2fmessages_2finference_2fv1_2factor_2eproto_deps[10] =
    {
        &::descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2ffield_5foptions_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fbounding_5fbox_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fspatial_2fv1_2futm_2eproto,
        &::descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ffield_2eproto,
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
        &::descriptor_table_google_2fprotobuf_2ffield_5fmask_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cavnue_2fmessages_2finference_2fv1_2factor_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cavnue_2fmessages_2finference_2fv1_2factor_2eproto = {
    false,
    false,
    2395,
    descriptor_table_protodef_cavnue_2fmessages_2finference_2fv1_2factor_2eproto,
    "cavnue/messages/inference/v1/actor.proto",
    &descriptor_table_cavnue_2fmessages_2finference_2fv1_2factor_2eproto_once,
    descriptor_table_cavnue_2fmessages_2finference_2fv1_2factor_2eproto_deps,
    10,
    3,
    schemas,
    file_default_instances,
    TableStruct_cavnue_2fmessages_2finference_2fv1_2factor_2eproto::offsets,
    file_level_metadata_cavnue_2fmessages_2finference_2fv1_2factor_2eproto,
    file_level_enum_descriptors_cavnue_2fmessages_2finference_2fv1_2factor_2eproto,
    file_level_service_descriptors_cavnue_2fmessages_2finference_2fv1_2factor_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cavnue_2fmessages_2finference_2fv1_2factor_2eproto_getter() {
  return &descriptor_table_cavnue_2fmessages_2finference_2fv1_2factor_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cavnue_2fmessages_2finference_2fv1_2factor_2eproto(&descriptor_table_cavnue_2fmessages_2finference_2fv1_2factor_2eproto);
namespace cavnue {
namespace messages {
namespace inference {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Actor_Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cavnue_2fmessages_2finference_2fv1_2factor_2eproto);
  return file_level_enum_descriptors_cavnue_2fmessages_2finference_2fv1_2factor_2eproto[0];
}
bool Actor_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Actor_Action Actor::ACTION_UNSPECIFIED;
constexpr Actor_Action Actor::ACTION_UPDATE;
constexpr Actor_Action Actor::ACTION_REMOVE;
constexpr Actor_Action Actor::ACTION_ADD;
constexpr Actor_Action Actor::Action_MIN;
constexpr Actor_Action Actor::Action_MAX;
constexpr int Actor::Action_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Actor_Severity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cavnue_2fmessages_2finference_2fv1_2factor_2eproto);
  return file_level_enum_descriptors_cavnue_2fmessages_2finference_2fv1_2factor_2eproto[1];
}
bool Actor_Severity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Actor_Severity Actor::SEVERITY_UNSPECIFIED;
constexpr Actor_Severity Actor::SEVERITY_HAZARD;
constexpr Actor_Severity Actor::SEVERITY_OF_INTEREST;
constexpr Actor_Severity Actor::Severity_MIN;
constexpr Actor_Severity Actor::Severity_MAX;
constexpr int Actor::Severity_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class Actor_ActorSize::_Internal {
 public:
  using HasBits = decltype(std::declval<Actor_ActorSize>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Actor_ActorSize, _impl_._has_bits_);
  static const ::cavnue::messages::geometry::v1::VarianceScalarf& x(const Actor_ActorSize* msg);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cavnue::messages::geometry::v1::VarianceScalarf& y(const Actor_ActorSize* msg);
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::cavnue::messages::geometry::v1::VarianceScalarf& z(const Actor_ActorSize* msg);
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::cavnue::messages::geometry::v1::VarianceScalarf&
Actor_ActorSize::_Internal::x(const Actor_ActorSize* msg) {
  return *msg->_impl_.x_;
}
const ::cavnue::messages::geometry::v1::VarianceScalarf&
Actor_ActorSize::_Internal::y(const Actor_ActorSize* msg) {
  return *msg->_impl_.y_;
}
const ::cavnue::messages::geometry::v1::VarianceScalarf&
Actor_ActorSize::_Internal::z(const Actor_ActorSize* msg) {
  return *msg->_impl_.z_;
}
void Actor_ActorSize::clear_x() {
  if (_impl_.x_ != nullptr) _impl_.x_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Actor_ActorSize::clear_y() {
  if (_impl_.y_ != nullptr) _impl_.y_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Actor_ActorSize::clear_z() {
  if (_impl_.z_ != nullptr) _impl_.z_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
Actor_ActorSize::Actor_ActorSize(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.inference.v1.Actor.ActorSize)
}
Actor_ActorSize::Actor_ActorSize(const Actor_ActorSize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Actor_ActorSize* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){nullptr}
    , decltype(_impl_.y_){nullptr}
    , decltype(_impl_.z_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.x_ = new ::cavnue::messages::geometry::v1::VarianceScalarf(*from._impl_.x_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.y_ = new ::cavnue::messages::geometry::v1::VarianceScalarf(*from._impl_.y_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.z_ = new ::cavnue::messages::geometry::v1::VarianceScalarf(*from._impl_.z_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.inference.v1.Actor.ActorSize)
}

inline void Actor_ActorSize::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){nullptr}
    , decltype(_impl_.y_){nullptr}
    , decltype(_impl_.z_){nullptr}
  };
}

Actor_ActorSize::~Actor_ActorSize() {
  // @@protoc_insertion_point(destructor:cavnue.messages.inference.v1.Actor.ActorSize)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Actor_ActorSize::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.x_;
  if (this != internal_default_instance()) delete _impl_.y_;
  if (this != internal_default_instance()) delete _impl_.z_;
}

void Actor_ActorSize::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Actor_ActorSize::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.inference.v1.Actor.ActorSize)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.x_ != nullptr);
      _impl_.x_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.y_ != nullptr);
      _impl_.y_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.z_ != nullptr);
      _impl_.z_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Actor_ActorSize::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.geometry.v1.VarianceScalarf x = 1 [json_name = "x"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_x(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.geometry.v1.VarianceScalarf y = 2 [json_name = "y"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_y(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.geometry.v1.VarianceScalarf z = 3 [json_name = "z"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_z(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Actor_ActorSize::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.inference.v1.Actor.ActorSize)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.geometry.v1.VarianceScalarf x = 1 [json_name = "x"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::x(this),
        _Internal::x(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.geometry.v1.VarianceScalarf y = 2 [json_name = "y"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::y(this),
        _Internal::y(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.geometry.v1.VarianceScalarf z = 3 [json_name = "z"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::z(this),
        _Internal::z(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.inference.v1.Actor.ActorSize)
  return target;
}

::size_t Actor_ActorSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.inference.v1.Actor.ActorSize)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .cavnue.messages.geometry.v1.VarianceScalarf x = 1 [json_name = "x"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.x_);
    }

    // .cavnue.messages.geometry.v1.VarianceScalarf y = 2 [json_name = "y"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.y_);
    }

    // .cavnue.messages.geometry.v1.VarianceScalarf z = 3 [json_name = "z"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.z_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Actor_ActorSize::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Actor_ActorSize::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Actor_ActorSize::GetClassData() const { return &_class_data_; }


void Actor_ActorSize::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Actor_ActorSize*>(&to_msg);
  auto& from = static_cast<const Actor_ActorSize&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.inference.v1.Actor.ActorSize)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_x()->::cavnue::messages::geometry::v1::VarianceScalarf::MergeFrom(
          from._internal_x());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_y()->::cavnue::messages::geometry::v1::VarianceScalarf::MergeFrom(
          from._internal_y());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_z()->::cavnue::messages::geometry::v1::VarianceScalarf::MergeFrom(
          from._internal_z());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Actor_ActorSize::CopyFrom(const Actor_ActorSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.inference.v1.Actor.ActorSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Actor_ActorSize::IsInitialized() const {
  return true;
}

void Actor_ActorSize::InternalSwap(Actor_ActorSize* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Actor_ActorSize, _impl_.z_)
      + sizeof(Actor_ActorSize::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Actor_ActorSize, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Actor_ActorSize::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2finference_2fv1_2factor_2eproto_getter, &descriptor_table_cavnue_2fmessages_2finference_2fv1_2factor_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2finference_2fv1_2factor_2eproto[0]);
}
// ===================================================================

class Actor_Attribute::_Internal {
 public:
  using HasBits = decltype(std::declval<Actor_Attribute>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Actor_Attribute, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts(const Actor_Attribute* msg);
  static void set_has_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Actor_Attribute::_Internal::ts(const Actor_Attribute* msg) {
  return *msg->_impl_.ts_;
}
void Actor_Attribute::clear_ts() {
  if (_impl_.ts_ != nullptr) _impl_.ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Actor_Attribute::Actor_Attribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.inference.v1.Actor.Attribute)
}
Actor_Attribute::Actor_Attribute(const Actor_Attribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Actor_Attribute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ts_){nullptr}
    , decltype(_impl_.active_) {}

    , decltype(_impl_.confidence_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.ts_);
  }
  ::memcpy(&_impl_.active_, &from._impl_.active_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.confidence_) -
    reinterpret_cast<char*>(&_impl_.active_)) + sizeof(_impl_.confidence_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.inference.v1.Actor.Attribute)
}

inline void Actor_Attribute::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ts_){nullptr}
    , decltype(_impl_.active_) { false }

    , decltype(_impl_.confidence_) { 0 }

  };
}

Actor_Attribute::~Actor_Attribute() {
  // @@protoc_insertion_point(destructor:cavnue.messages.inference.v1.Actor.Attribute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Actor_Attribute::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ts_;
}

void Actor_Attribute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Actor_Attribute::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.inference.v1.Actor.Attribute)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.ts_ != nullptr);
    _impl_.ts_->Clear();
  }
  ::memset(&_impl_.active_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.confidence_) -
      reinterpret_cast<char*>(&_impl_.active_)) + sizeof(_impl_.confidence_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Actor_Attribute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp ts = 1 [json_name = "ts"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool active = 2 [json_name = "active"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // float confidence = 3 [json_name = "confidence"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 29)) {
          _impl_.confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Actor_Attribute::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.inference.v1.Actor.Attribute)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp ts = 1 [json_name = "ts"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ts(this),
        _Internal::ts(this).GetCachedSize(), target, stream);
  }

  // bool active = 2 [json_name = "active"];
  if (this->_internal_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_active(), target);
  }

  // float confidence = 3 [json_name = "confidence"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_confidence = this->_internal_confidence();
  ::uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.inference.v1.Actor.Attribute)
  return target;
}

::size_t Actor_Attribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.inference.v1.Actor.Attribute)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp ts = 1 [json_name = "ts"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ts_);
  }

  // bool active = 2 [json_name = "active"];
  if (this->_internal_active() != 0) {
    total_size += 2;
  }

  // float confidence = 3 [json_name = "confidence"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_confidence = this->_internal_confidence();
  ::uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Actor_Attribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Actor_Attribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Actor_Attribute::GetClassData() const { return &_class_data_; }


void Actor_Attribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Actor_Attribute*>(&to_msg);
  auto& from = static_cast<const Actor_Attribute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.inference.v1.Actor.Attribute)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_ts());
  }
  if (from._internal_active() != 0) {
    _this->_internal_set_active(from._internal_active());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_confidence = from._internal_confidence();
  ::uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    _this->_internal_set_confidence(from._internal_confidence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Actor_Attribute::CopyFrom(const Actor_Attribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.inference.v1.Actor.Attribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Actor_Attribute::IsInitialized() const {
  return true;
}

void Actor_Attribute::InternalSwap(Actor_Attribute* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Actor_Attribute, _impl_.confidence_)
      + sizeof(Actor_Attribute::_impl_.confidence_)
      - PROTOBUF_FIELD_OFFSET(Actor_Attribute, _impl_.ts_)>(
          reinterpret_cast<char*>(&_impl_.ts_),
          reinterpret_cast<char*>(&other->_impl_.ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Actor_Attribute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2finference_2fv1_2factor_2eproto_getter, &descriptor_table_cavnue_2fmessages_2finference_2fv1_2factor_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2finference_2fv1_2factor_2eproto[1]);
}
// ===================================================================

class Actor::_Internal {
 public:
  using HasBits = decltype(std::declval<Actor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Actor, _impl_._has_bits_);
  static const ::cavnue::messages::common::v1::Header& header(const Actor* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& observation_ts(const Actor* msg);
  static void set_has_observation_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Duration& observation_duration(const Actor* msg);
  static void set_has_observation_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::cavnue::messages::common::v1::DataSource& data_source(const Actor* msg);
  static void set_has_data_source(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::cavnue::messages::geometry::v1::CovarianceVector3d& position(const Actor* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::cavnue::messages::geometry::v1::CovarianceVector3f& velocity(const Actor* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::cavnue::messages::geometry::v1::CovarianceVector2f& acceleration(const Actor* msg);
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::cavnue::messages::spatial::v1::UTMProjection& projection(const Actor* msg);
  static void set_has_projection(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::cavnue::messages::inference::v1::Actor_ActorSize& size(const Actor* msg);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::cavnue::messages::geometry::v1::BoundingBox2f& bbox(const Actor* msg);
  static void set_has_bbox(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::cavnue::messages::inference::v1::Actor_Attribute& speeding(const Actor* msg);
  static void set_has_speeding(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::cavnue::messages::inference::v1::Actor_Attribute& impeding(const Actor* msg);
  static void set_has_impeding(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::cavnue::messages::inference::v1::Actor_Attribute& stationary(const Actor* msg);
  static void set_has_stationary(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask(const Actor* msg);
  static void set_has_update_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::cavnue::messages::inference::v1::Actor_Attribute& collision(const Actor* msg);
  static void set_has_collision(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

const ::cavnue::messages::common::v1::Header&
Actor::_Internal::header(const Actor* msg) {
  return *msg->_impl_.header_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Actor::_Internal::observation_ts(const Actor* msg) {
  return *msg->_impl_.observation_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
Actor::_Internal::observation_duration(const Actor* msg) {
  return *msg->_impl_.observation_duration_;
}
const ::cavnue::messages::common::v1::DataSource&
Actor::_Internal::data_source(const Actor* msg) {
  return *msg->_impl_.data_source_;
}
const ::cavnue::messages::geometry::v1::CovarianceVector3d&
Actor::_Internal::position(const Actor* msg) {
  return *msg->_impl_.position_;
}
const ::cavnue::messages::geometry::v1::CovarianceVector3f&
Actor::_Internal::velocity(const Actor* msg) {
  return *msg->_impl_.velocity_;
}
const ::cavnue::messages::geometry::v1::CovarianceVector2f&
Actor::_Internal::acceleration(const Actor* msg) {
  return *msg->_impl_.acceleration_;
}
const ::cavnue::messages::spatial::v1::UTMProjection&
Actor::_Internal::projection(const Actor* msg) {
  return *msg->_impl_.projection_;
}
const ::cavnue::messages::inference::v1::Actor_ActorSize&
Actor::_Internal::size(const Actor* msg) {
  return *msg->_impl_.size_;
}
const ::cavnue::messages::geometry::v1::BoundingBox2f&
Actor::_Internal::bbox(const Actor* msg) {
  return *msg->_impl_.bbox_;
}
const ::cavnue::messages::inference::v1::Actor_Attribute&
Actor::_Internal::speeding(const Actor* msg) {
  return *msg->_impl_.speeding_;
}
const ::cavnue::messages::inference::v1::Actor_Attribute&
Actor::_Internal::impeding(const Actor* msg) {
  return *msg->_impl_.impeding_;
}
const ::cavnue::messages::inference::v1::Actor_Attribute&
Actor::_Internal::stationary(const Actor* msg) {
  return *msg->_impl_.stationary_;
}
const ::PROTOBUF_NAMESPACE_ID::FieldMask&
Actor::_Internal::update_mask(const Actor* msg) {
  return *msg->_impl_.update_mask_;
}
const ::cavnue::messages::inference::v1::Actor_Attribute&
Actor::_Internal::collision(const Actor* msg) {
  return *msg->_impl_.collision_;
}
void Actor::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Actor::clear_observation_ts() {
  if (_impl_.observation_ts_ != nullptr) _impl_.observation_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Actor::clear_observation_duration() {
  if (_impl_.observation_duration_ != nullptr) _impl_.observation_duration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Actor::clear_data_source() {
  if (_impl_.data_source_ != nullptr) _impl_.data_source_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Actor::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void Actor::clear_velocity() {
  if (_impl_.velocity_ != nullptr) _impl_.velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void Actor::clear_acceleration() {
  if (_impl_.acceleration_ != nullptr) _impl_.acceleration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void Actor::clear_projection() {
  if (_impl_.projection_ != nullptr) _impl_.projection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void Actor::clear_bbox() {
  if (_impl_.bbox_ != nullptr) _impl_.bbox_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void Actor::clear_update_mask() {
  if (_impl_.update_mask_ != nullptr) _impl_.update_mask_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
Actor::Actor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.inference.v1.Actor)
}
Actor::Actor(const Actor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Actor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.observation_ts_){nullptr}
    , decltype(_impl_.observation_duration_){nullptr}
    , decltype(_impl_.data_source_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.acceleration_){nullptr}
    , decltype(_impl_.projection_){nullptr}
    , decltype(_impl_.size_){nullptr}
    , decltype(_impl_.bbox_){nullptr}
    , decltype(_impl_.speeding_){nullptr}
    , decltype(_impl_.impeding_){nullptr}
    , decltype(_impl_.stationary_){nullptr}
    , decltype(_impl_.update_mask_){nullptr}
    , decltype(_impl_.collision_){nullptr}
    , decltype(_impl_.actor_id_) {}

    , decltype(_impl_.action_) {}

    , decltype(_impl_.classification_) {}

    , decltype(_impl_.lane_) {}

    , decltype(_impl_.severity_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_ = new ::cavnue::messages::common::v1::Header(*from._impl_.header_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.observation_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.observation_ts_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.observation_duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.observation_duration_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.data_source_ = new ::cavnue::messages::common::v1::DataSource(*from._impl_.data_source_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.position_ = new ::cavnue::messages::geometry::v1::CovarianceVector3d(*from._impl_.position_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
    _this->_impl_.velocity_ = new ::cavnue::messages::geometry::v1::CovarianceVector3f(*from._impl_.velocity_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000040u) != 0) {
    _this->_impl_.acceleration_ = new ::cavnue::messages::geometry::v1::CovarianceVector2f(*from._impl_.acceleration_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000080u) != 0) {
    _this->_impl_.projection_ = new ::cavnue::messages::spatial::v1::UTMProjection(*from._impl_.projection_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000100u) != 0) {
    _this->_impl_.size_ = new ::cavnue::messages::inference::v1::Actor_ActorSize(*from._impl_.size_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000200u) != 0) {
    _this->_impl_.bbox_ = new ::cavnue::messages::geometry::v1::BoundingBox2f(*from._impl_.bbox_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000400u) != 0) {
    _this->_impl_.speeding_ = new ::cavnue::messages::inference::v1::Actor_Attribute(*from._impl_.speeding_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000800u) != 0) {
    _this->_impl_.impeding_ = new ::cavnue::messages::inference::v1::Actor_Attribute(*from._impl_.impeding_);
  }
  if ((from._impl_._has_bits_[0] & 0x00001000u) != 0) {
    _this->_impl_.stationary_ = new ::cavnue::messages::inference::v1::Actor_Attribute(*from._impl_.stationary_);
  }
  if ((from._impl_._has_bits_[0] & 0x00002000u) != 0) {
    _this->_impl_.update_mask_ = new ::PROTOBUF_NAMESPACE_ID::FieldMask(*from._impl_.update_mask_);
  }
  if ((from._impl_._has_bits_[0] & 0x00004000u) != 0) {
    _this->_impl_.collision_ = new ::cavnue::messages::inference::v1::Actor_Attribute(*from._impl_.collision_);
  }
  ::memcpy(&_impl_.actor_id_, &from._impl_.actor_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.severity_) -
    reinterpret_cast<char*>(&_impl_.actor_id_)) + sizeof(_impl_.severity_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.inference.v1.Actor)
}

inline void Actor::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.observation_ts_){nullptr}
    , decltype(_impl_.observation_duration_){nullptr}
    , decltype(_impl_.data_source_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.acceleration_){nullptr}
    , decltype(_impl_.projection_){nullptr}
    , decltype(_impl_.size_){nullptr}
    , decltype(_impl_.bbox_){nullptr}
    , decltype(_impl_.speeding_){nullptr}
    , decltype(_impl_.impeding_){nullptr}
    , decltype(_impl_.stationary_){nullptr}
    , decltype(_impl_.update_mask_){nullptr}
    , decltype(_impl_.collision_){nullptr}
    , decltype(_impl_.actor_id_) { ::int64_t{0} }

    , decltype(_impl_.action_) { 0 }

    , decltype(_impl_.classification_) { 0 }

    , decltype(_impl_.lane_) { 0 }

    , decltype(_impl_.severity_) { 0 }

  };
}

Actor::~Actor() {
  // @@protoc_insertion_point(destructor:cavnue.messages.inference.v1.Actor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Actor::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.observation_ts_;
  if (this != internal_default_instance()) delete _impl_.observation_duration_;
  if (this != internal_default_instance()) delete _impl_.data_source_;
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.velocity_;
  if (this != internal_default_instance()) delete _impl_.acceleration_;
  if (this != internal_default_instance()) delete _impl_.projection_;
  if (this != internal_default_instance()) delete _impl_.size_;
  if (this != internal_default_instance()) delete _impl_.bbox_;
  if (this != internal_default_instance()) delete _impl_.speeding_;
  if (this != internal_default_instance()) delete _impl_.impeding_;
  if (this != internal_default_instance()) delete _impl_.stationary_;
  if (this != internal_default_instance()) delete _impl_.update_mask_;
  if (this != internal_default_instance()) delete _impl_.collision_;
}

void Actor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Actor::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.inference.v1.Actor)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.observation_ts_ != nullptr);
      _impl_.observation_ts_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.observation_duration_ != nullptr);
      _impl_.observation_duration_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.data_source_ != nullptr);
      _impl_.data_source_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.velocity_ != nullptr);
      _impl_.velocity_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.acceleration_ != nullptr);
      _impl_.acceleration_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.projection_ != nullptr);
      _impl_.projection_->Clear();
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.size_ != nullptr);
      _impl_.size_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.bbox_ != nullptr);
      _impl_.bbox_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.speeding_ != nullptr);
      _impl_.speeding_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(_impl_.impeding_ != nullptr);
      _impl_.impeding_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(_impl_.stationary_ != nullptr);
      _impl_.stationary_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      ABSL_DCHECK(_impl_.update_mask_ != nullptr);
      _impl_.update_mask_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      ABSL_DCHECK(_impl_.collision_ != nullptr);
      _impl_.collision_->Clear();
    }
  }
  ::memset(&_impl_.actor_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.classification_) -
      reinterpret_cast<char*>(&_impl_.actor_id_)) + sizeof(_impl_.classification_));
  _impl_.lane_ = 0;
  _impl_.severity_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Actor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp observation_ts = 2 [json_name = "observationTs"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_observation_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Duration observation_duration = 3 [json_name = "observationDuration"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_observation_duration(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.common.v1.DataSource data_source = 4 [json_name = "dataSource"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_source(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.inference.v1.Actor.Action action = 5 [json_name = "action"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::cavnue::messages::inference::v1::Actor_Action>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 actor_id = 6 [json_name = "actorId"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.actor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.common.v1.Classification classification = 7 [json_name = "classification"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_classification(static_cast<::cavnue::messages::common::v1::Classification>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.geometry.v1.CovarianceVector3d position = 8 [json_name = "position", (.cavnue.messages.common.v1.units) = UNITS_METERS];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.geometry.v1.CovarianceVector3f velocity = 9 [json_name = "velocity", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.geometry.v1.CovarianceVector2f acceleration = 10 [json_name = "acceleration", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND_SQUARED];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.spatial.v1.UTMProjection projection = 11 [json_name = "projection"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_projection(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 lane = 12 [json_name = "lane"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _Internal::set_has_lane(&has_bits);
          _impl_.lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .cavnue.messages.inference.v1.Actor.ActorSize size = 13 [json_name = "size", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_ENU];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.geometry.v1.BoundingBox2f bbox = 14 [json_name = "bbox"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_bbox(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.inference.v1.Actor.Severity severity = 15 [json_name = "severity"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 120)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_severity(static_cast<::cavnue::messages::inference::v1::Actor_Severity>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.inference.v1.Actor.Attribute speeding = 16 [json_name = "speeding"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_speeding(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.inference.v1.Actor.Attribute impeding = 17 [json_name = "impeding"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_impeding(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.inference.v1.Actor.Attribute stationary = 18 [json_name = "stationary"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_stationary(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.FieldMask update_mask = 19 [json_name = "updateMask", (.gen_bq_schema.bigquery) = {
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_mask(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.inference.v1.Actor.Attribute collision = 20 [json_name = "collision"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_collision(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Actor::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.inference.v1.Actor)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp observation_ts = 2 [json_name = "observationTs"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::observation_ts(this),
        _Internal::observation_ts(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration observation_duration = 3 [json_name = "observationDuration"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::observation_duration(this),
        _Internal::observation_duration(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.common.v1.DataSource data_source = 4 [json_name = "dataSource"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::data_source(this),
        _Internal::data_source(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.inference.v1.Actor.Action action = 5 [json_name = "action"];
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_action(), target);
  }

  // int64 actor_id = 6 [json_name = "actorId"];
  if (this->_internal_actor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        6, this->_internal_actor_id(), target);
  }

  // .cavnue.messages.common.v1.Classification classification = 7 [json_name = "classification"];
  if (this->_internal_classification() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_classification(), target);
  }

  // .cavnue.messages.geometry.v1.CovarianceVector3d position = 8 [json_name = "position", (.cavnue.messages.common.v1.units) = UNITS_METERS];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.geometry.v1.CovarianceVector3f velocity = 9 [json_name = "velocity", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::velocity(this),
        _Internal::velocity(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.geometry.v1.CovarianceVector2f acceleration = 10 [json_name = "acceleration", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND_SQUARED];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::acceleration(this),
        _Internal::acceleration(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.spatial.v1.UTMProjection projection = 11 [json_name = "projection"];
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::projection(this),
        _Internal::projection(this).GetCachedSize(), target, stream);
  }

  // optional int32 lane = 12 [json_name = "lane"];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        12, this->_internal_lane(), target);
  }

  // optional .cavnue.messages.inference.v1.Actor.ActorSize size = 13 [json_name = "size", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_ENU];
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::size(this),
        _Internal::size(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.geometry.v1.BoundingBox2f bbox = 14 [json_name = "bbox"];
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::bbox(this),
        _Internal::bbox(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.inference.v1.Actor.Severity severity = 15 [json_name = "severity"];
  if (this->_internal_severity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        15, this->_internal_severity(), target);
  }

  // .cavnue.messages.inference.v1.Actor.Attribute speeding = 16 [json_name = "speeding"];
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::speeding(this),
        _Internal::speeding(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.inference.v1.Actor.Attribute impeding = 17 [json_name = "impeding"];
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::impeding(this),
        _Internal::impeding(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.inference.v1.Actor.Attribute stationary = 18 [json_name = "stationary"];
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::stationary(this),
        _Internal::stationary(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.FieldMask update_mask = 19 [json_name = "updateMask", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::update_mask(this),
        _Internal::update_mask(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.inference.v1.Actor.Attribute collision = 20 [json_name = "collision"];
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::collision(this),
        _Internal::collision(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.inference.v1.Actor)
  return target;
}

::size_t Actor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.inference.v1.Actor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // .google.protobuf.Timestamp observation_ts = 2 [json_name = "observationTs"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.observation_ts_);
    }

    // .google.protobuf.Duration observation_duration = 3 [json_name = "observationDuration"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.observation_duration_);
    }

    // .cavnue.messages.common.v1.DataSource data_source = 4 [json_name = "dataSource"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_source_);
    }

    // .cavnue.messages.geometry.v1.CovarianceVector3d position = 8 [json_name = "position", (.cavnue.messages.common.v1.units) = UNITS_METERS];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // .cavnue.messages.geometry.v1.CovarianceVector3f velocity = 9 [json_name = "velocity", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.velocity_);
    }

    // .cavnue.messages.geometry.v1.CovarianceVector2f acceleration = 10 [json_name = "acceleration", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND_SQUARED];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.acceleration_);
    }

    // .cavnue.messages.spatial.v1.UTMProjection projection = 11 [json_name = "projection"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.projection_);
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional .cavnue.messages.inference.v1.Actor.ActorSize size = 13 [json_name = "size", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_ENU];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.size_);
    }

    // .cavnue.messages.geometry.v1.BoundingBox2f bbox = 14 [json_name = "bbox"];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bbox_);
    }

    // .cavnue.messages.inference.v1.Actor.Attribute speeding = 16 [json_name = "speeding"];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.speeding_);
    }

    // .cavnue.messages.inference.v1.Actor.Attribute impeding = 17 [json_name = "impeding"];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.impeding_);
    }

    // .cavnue.messages.inference.v1.Actor.Attribute stationary = 18 [json_name = "stationary"];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stationary_);
    }

    // .google.protobuf.FieldMask update_mask = 19 [json_name = "updateMask", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.update_mask_);
    }

    // .cavnue.messages.inference.v1.Actor.Attribute collision = 20 [json_name = "collision"];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.collision_);
    }

  }
  // int64 actor_id = 6 [json_name = "actorId"];
  if (this->_internal_actor_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_actor_id());
  }

  // .cavnue.messages.inference.v1.Actor.Action action = 5 [json_name = "action"];
  if (this->_internal_action() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_action());
  }

  // .cavnue.messages.common.v1.Classification classification = 7 [json_name = "classification"];
  if (this->_internal_classification() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_classification());
  }

  // optional int32 lane = 12 [json_name = "lane"];
  if (cached_has_bits & 0x00008000u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_lane());
  }

  // .cavnue.messages.inference.v1.Actor.Severity severity = 15 [json_name = "severity"];
  if (this->_internal_severity() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_severity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Actor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Actor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Actor::GetClassData() const { return &_class_data_; }


void Actor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Actor*>(&to_msg);
  auto& from = static_cast<const Actor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.inference.v1.Actor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::cavnue::messages::common::v1::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_observation_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_observation_ts());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_observation_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
          from._internal_observation_duration());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_data_source()->::cavnue::messages::common::v1::DataSource::MergeFrom(
          from._internal_data_source());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_position()->::cavnue::messages::geometry::v1::CovarianceVector3d::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_velocity()->::cavnue::messages::geometry::v1::CovarianceVector3f::MergeFrom(
          from._internal_velocity());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_acceleration()->::cavnue::messages::geometry::v1::CovarianceVector2f::MergeFrom(
          from._internal_acceleration());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_projection()->::cavnue::messages::spatial::v1::UTMProjection::MergeFrom(
          from._internal_projection());
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_size()->::cavnue::messages::inference::v1::Actor_ActorSize::MergeFrom(
          from._internal_size());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_bbox()->::cavnue::messages::geometry::v1::BoundingBox2f::MergeFrom(
          from._internal_bbox());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_speeding()->::cavnue::messages::inference::v1::Actor_Attribute::MergeFrom(
          from._internal_speeding());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_impeding()->::cavnue::messages::inference::v1::Actor_Attribute::MergeFrom(
          from._internal_impeding());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_stationary()->::cavnue::messages::inference::v1::Actor_Attribute::MergeFrom(
          from._internal_stationary());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_update_mask()->::PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(
          from._internal_update_mask());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_collision()->::cavnue::messages::inference::v1::Actor_Attribute::MergeFrom(
          from._internal_collision());
    }
  }
  if (from._internal_actor_id() != 0) {
    _this->_internal_set_actor_id(from._internal_actor_id());
  }
  if (from._internal_action() != 0) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_classification() != 0) {
    _this->_internal_set_classification(from._internal_classification());
  }
  if (cached_has_bits & 0x00008000u) {
    _this->_internal_set_lane(from._internal_lane());
  }
  if (from._internal_severity() != 0) {
    _this->_internal_set_severity(from._internal_severity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Actor::CopyFrom(const Actor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.inference.v1.Actor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Actor::IsInitialized() const {
  return true;
}

void Actor::InternalSwap(Actor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Actor, _impl_.severity_)
      + sizeof(Actor::_impl_.severity_)
      - PROTOBUF_FIELD_OFFSET(Actor, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Actor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2finference_2fv1_2factor_2eproto_getter, &descriptor_table_cavnue_2fmessages_2finference_2fv1_2factor_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2finference_2fv1_2factor_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace inference
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cavnue::messages::inference::v1::Actor_ActorSize*
Arena::CreateMaybeMessage< ::cavnue::messages::inference::v1::Actor_ActorSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::inference::v1::Actor_ActorSize >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::inference::v1::Actor_Attribute*
Arena::CreateMaybeMessage< ::cavnue::messages::inference::v1::Actor_Attribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::inference::v1::Actor_Attribute >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::inference::v1::Actor*
Arena::CreateMaybeMessage< ::cavnue::messages::inference::v1::Actor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::inference::v1::Actor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

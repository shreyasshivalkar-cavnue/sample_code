// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/inference/v1/events.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "cavnue/messages/common/v1/common.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto;
namespace cavnue {
namespace messages {
namespace inference {
namespace v1 {
class Event;
struct EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class TrafficEvent;
struct TrafficEventDefaultTypeInternal;
extern TrafficEventDefaultTypeInternal _TrafficEvent_default_instance_;
}  // namespace v1
}  // namespace inference
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template <>
::cavnue::messages::inference::v1::Event* Arena::CreateMaybeMessage<::cavnue::messages::inference::v1::Event>(Arena*);
template <>
::cavnue::messages::inference::v1::TrafficEvent* Arena::CreateMaybeMessage<::cavnue::messages::inference::v1::TrafficEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cavnue {
namespace messages {
namespace inference {
namespace v1 {
enum Event_Type : int {
  Event_Type_TYPE_UNSPECIFIED = 0,
  Event_Type_TYPE_IMPEDING = 1,
  Event_Type_TYPE_SPEEDING = 2,
  Event_Type_TYPE_STATIONARY = 3,
  Event_Type_TYPE_COLLISION = 4,
  Event_Type_Event_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Event_Type_Event_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Event_Type_IsValid(int value);
constexpr Event_Type Event_Type_Type_MIN = static_cast<Event_Type>(0);
constexpr Event_Type Event_Type_Type_MAX = static_cast<Event_Type>(4);
constexpr int Event_Type_Type_ARRAYSIZE = 4 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
Event_Type_descriptor();
template <typename T>
const std::string& Event_Type_Name(T value) {
  static_assert(std::is_same<T, Event_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return Event_Type_Name(static_cast<Event_Type>(value));
}
template <>
inline const std::string& Event_Type_Name(Event_Type value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<Event_Type_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool Event_Type_Parse(absl::string_view name, Event_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Event_Type>(
      Event_Type_descriptor(), name, value);
}
enum Event_Severity : int {
  Event_Severity_SEVERITY_UNSPECIFIED = 0,
  Event_Severity_SEVERITY_HAZARD = 1,
  Event_Severity_SEVERITY_OF_INTEREST = 2,
  Event_Severity_Event_Severity_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Event_Severity_Event_Severity_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Event_Severity_IsValid(int value);
constexpr Event_Severity Event_Severity_Severity_MIN = static_cast<Event_Severity>(0);
constexpr Event_Severity Event_Severity_Severity_MAX = static_cast<Event_Severity>(2);
constexpr int Event_Severity_Severity_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
Event_Severity_descriptor();
template <typename T>
const std::string& Event_Severity_Name(T value) {
  static_assert(std::is_same<T, Event_Severity>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Severity_Name().");
  return Event_Severity_Name(static_cast<Event_Severity>(value));
}
template <>
inline const std::string& Event_Severity_Name(Event_Severity value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<Event_Severity_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool Event_Severity_Parse(absl::string_view name, Event_Severity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Event_Severity>(
      Event_Severity_descriptor(), name, value);
}
enum TrafficEvent_Type : int {
  TrafficEvent_Type_TYPE_UNSPECIFIED = 0,
  TrafficEvent_Type_TYPE_CONGESTION = 1,
  TrafficEvent_Type_TrafficEvent_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TrafficEvent_Type_TrafficEvent_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TrafficEvent_Type_IsValid(int value);
constexpr TrafficEvent_Type TrafficEvent_Type_Type_MIN = static_cast<TrafficEvent_Type>(0);
constexpr TrafficEvent_Type TrafficEvent_Type_Type_MAX = static_cast<TrafficEvent_Type>(1);
constexpr int TrafficEvent_Type_Type_ARRAYSIZE = 1 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
TrafficEvent_Type_descriptor();
template <typename T>
const std::string& TrafficEvent_Type_Name(T value) {
  static_assert(std::is_same<T, TrafficEvent_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return TrafficEvent_Type_Name(static_cast<TrafficEvent_Type>(value));
}
template <>
inline const std::string& TrafficEvent_Type_Name(TrafficEvent_Type value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<TrafficEvent_Type_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool TrafficEvent_Type_Parse(absl::string_view name, TrafficEvent_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrafficEvent_Type>(
      TrafficEvent_Type_descriptor(), name, value);
}
enum TrafficEvent_Severity : int {
  TrafficEvent_Severity_SEVERITY_UNSPECIFIED = 0,
  TrafficEvent_Severity_SEVERITY_OF_INTEREST = 1,
  TrafficEvent_Severity_TrafficEvent_Severity_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TrafficEvent_Severity_TrafficEvent_Severity_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TrafficEvent_Severity_IsValid(int value);
constexpr TrafficEvent_Severity TrafficEvent_Severity_Severity_MIN = static_cast<TrafficEvent_Severity>(0);
constexpr TrafficEvent_Severity TrafficEvent_Severity_Severity_MAX = static_cast<TrafficEvent_Severity>(1);
constexpr int TrafficEvent_Severity_Severity_ARRAYSIZE = 1 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
TrafficEvent_Severity_descriptor();
template <typename T>
const std::string& TrafficEvent_Severity_Name(T value) {
  static_assert(std::is_same<T, TrafficEvent_Severity>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Severity_Name().");
  return TrafficEvent_Severity_Name(static_cast<TrafficEvent_Severity>(value));
}
template <>
inline const std::string& TrafficEvent_Severity_Name(TrafficEvent_Severity value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<TrafficEvent_Severity_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool TrafficEvent_Severity_Parse(absl::string_view name, TrafficEvent_Severity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrafficEvent_Severity>(
      TrafficEvent_Severity_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.inference.v1.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  ~Event() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Event& default_instance() {
    return *internal_default_instance();
  }
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Event& from) {
    Event::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.inference.v1.Event";
  }
  protected:
  explicit Event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Type = Event_Type;
  static constexpr Type TYPE_UNSPECIFIED = Event_Type_TYPE_UNSPECIFIED;
  static constexpr Type TYPE_IMPEDING = Event_Type_TYPE_IMPEDING;
  static constexpr Type TYPE_SPEEDING = Event_Type_TYPE_SPEEDING;
  static constexpr Type TYPE_STATIONARY = Event_Type_TYPE_STATIONARY;
  static constexpr Type TYPE_COLLISION = Event_Type_TYPE_COLLISION;
  static inline bool Type_IsValid(int value) {
    return Event_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = Event_Type_Type_MIN;
  static constexpr Type Type_MAX = Event_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = Event_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor() {
    return Event_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return Event_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return Event_Type_Parse(name, value);
  }

  using Severity = Event_Severity;
  static constexpr Severity SEVERITY_UNSPECIFIED = Event_Severity_SEVERITY_UNSPECIFIED;
  static constexpr Severity SEVERITY_HAZARD = Event_Severity_SEVERITY_HAZARD;
  static constexpr Severity SEVERITY_OF_INTEREST = Event_Severity_SEVERITY_OF_INTEREST;
  static inline bool Severity_IsValid(int value) {
    return Event_Severity_IsValid(value);
  }
  static constexpr Severity Severity_MIN = Event_Severity_Severity_MIN;
  static constexpr Severity Severity_MAX = Event_Severity_Severity_MAX;
  static constexpr int Severity_ARRAYSIZE = Event_Severity_Severity_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Severity_descriptor() {
    return Event_Severity_descriptor();
  }
  template <typename T>
  static inline const std::string& Severity_Name(T value) {
    return Event_Severity_Name(value);
  }
  static inline bool Severity_Parse(absl::string_view name, Severity* value) {
    return Event_Severity_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kActorIdsFieldNumber = 8,
    kHeaderFieldNumber = 1,
    kStartTimeFieldNumber = 5,
    kEndTimeFieldNumber = 6,
    kEventIdFieldNumber = 2,
    kTypeFieldNumber = 3,
    kSeverityFieldNumber = 4,
    kConfidenceFieldNumber = 7,
  };
  // repeated int64 actor_ids = 8 [json_name = "actorIds"];
  int actor_ids_size() const;
  private:
  int _internal_actor_ids_size() const;

  public:
  void clear_actor_ids() ;
  ::int64_t actor_ids(int index) const;
  void set_actor_ids(int index, ::int64_t value);
  void add_actor_ids(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& actor_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* mutable_actor_ids();

  private:
  ::int64_t _internal_actor_ids(int index) const;
  void _internal_add_actor_ids(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& _internal_actor_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* _internal_mutable_actor_ids();

  public:
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  bool has_header() const;
  void clear_header() ;
  const ::cavnue::messages::common::v1::Header& header() const;
  PROTOBUF_NODISCARD ::cavnue::messages::common::v1::Header* release_header();
  ::cavnue::messages::common::v1::Header* mutable_header();
  void set_allocated_header(::cavnue::messages::common::v1::Header* header);
  private:
  const ::cavnue::messages::common::v1::Header& _internal_header() const;
  ::cavnue::messages::common::v1::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::cavnue::messages::common::v1::Header* header);
  ::cavnue::messages::common::v1::Header* unsafe_arena_release_header();
  // .google.protobuf.Timestamp start_time = 5 [json_name = "startTime"];
  bool has_start_time() const;
  void clear_start_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();
  // .google.protobuf.Timestamp end_time = 6 [json_name = "endTime"];
  bool has_end_time() const;
  void clear_end_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();
  // int64 event_id = 2 [json_name = "eventId"];
  void clear_event_id() ;
  ::int64_t event_id() const;
  void set_event_id(::int64_t value);

  private:
  ::int64_t _internal_event_id() const;
  void _internal_set_event_id(::int64_t value);

  public:
  // .cavnue.messages.inference.v1.Event.Type type = 3 [json_name = "type"];
  void clear_type() ;
  ::cavnue::messages::inference::v1::Event_Type type() const;
  void set_type(::cavnue::messages::inference::v1::Event_Type value);

  private:
  ::cavnue::messages::inference::v1::Event_Type _internal_type() const;
  void _internal_set_type(::cavnue::messages::inference::v1::Event_Type value);

  public:
  // .cavnue.messages.inference.v1.Event.Severity severity = 4 [json_name = "severity"];
  void clear_severity() ;
  ::cavnue::messages::inference::v1::Event_Severity severity() const;
  void set_severity(::cavnue::messages::inference::v1::Event_Severity value);

  private:
  ::cavnue::messages::inference::v1::Event_Severity _internal_severity() const;
  void _internal_set_severity(::cavnue::messages::inference::v1::Event_Severity value);

  public:
  // float confidence = 7 [json_name = "confidence"];
  void clear_confidence() ;
  float confidence() const;
  void set_confidence(float value);

  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.inference.v1.Event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t> actor_ids_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _actor_ids_cached_byte_size_;
    ::cavnue::messages::common::v1::Header* header_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
    ::int64_t event_id_;
    int type_;
    int severity_;
    float confidence_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto;
};// -------------------------------------------------------------------

class TrafficEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.inference.v1.TrafficEvent) */ {
 public:
  inline TrafficEvent() : TrafficEvent(nullptr) {}
  ~TrafficEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TrafficEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrafficEvent(const TrafficEvent& from);
  TrafficEvent(TrafficEvent&& from) noexcept
    : TrafficEvent() {
    *this = ::std::move(from);
  }

  inline TrafficEvent& operator=(const TrafficEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficEvent& operator=(TrafficEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrafficEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrafficEvent* internal_default_instance() {
    return reinterpret_cast<const TrafficEvent*>(
               &_TrafficEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrafficEvent& a, TrafficEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrafficEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrafficEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrafficEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrafficEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrafficEvent& from) {
    TrafficEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.inference.v1.TrafficEvent";
  }
  protected:
  explicit TrafficEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Type = TrafficEvent_Type;
  static constexpr Type TYPE_UNSPECIFIED = TrafficEvent_Type_TYPE_UNSPECIFIED;
  static constexpr Type TYPE_CONGESTION = TrafficEvent_Type_TYPE_CONGESTION;
  static inline bool Type_IsValid(int value) {
    return TrafficEvent_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = TrafficEvent_Type_Type_MIN;
  static constexpr Type Type_MAX = TrafficEvent_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = TrafficEvent_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor() {
    return TrafficEvent_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return TrafficEvent_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return TrafficEvent_Type_Parse(name, value);
  }

  using Severity = TrafficEvent_Severity;
  static constexpr Severity SEVERITY_UNSPECIFIED = TrafficEvent_Severity_SEVERITY_UNSPECIFIED;
  static constexpr Severity SEVERITY_OF_INTEREST = TrafficEvent_Severity_SEVERITY_OF_INTEREST;
  static inline bool Severity_IsValid(int value) {
    return TrafficEvent_Severity_IsValid(value);
  }
  static constexpr Severity Severity_MIN = TrafficEvent_Severity_Severity_MIN;
  static constexpr Severity Severity_MAX = TrafficEvent_Severity_Severity_MAX;
  static constexpr int Severity_ARRAYSIZE = TrafficEvent_Severity_Severity_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Severity_descriptor() {
    return TrafficEvent_Severity_descriptor();
  }
  template <typename T>
  static inline const std::string& Severity_Name(T value) {
    return TrafficEvent_Severity_Name(value);
  }
  static inline bool Severity_Parse(absl::string_view name, Severity* value) {
    return TrafficEvent_Severity_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLaneSegmentIdFieldNumber = 8,
    kHeaderFieldNumber = 1,
    kStartTimeFieldNumber = 5,
    kEndTimeFieldNumber = 6,
    kEventIdFieldNumber = 2,
    kTypeFieldNumber = 3,
    kSeverityFieldNumber = 4,
    kConfidenceFieldNumber = 7,
  };
  // repeated int64 lane_segment_id = 8 [json_name = "laneSegmentId"];
  int lane_segment_id_size() const;
  private:
  int _internal_lane_segment_id_size() const;

  public:
  void clear_lane_segment_id() ;
  ::int64_t lane_segment_id(int index) const;
  void set_lane_segment_id(int index, ::int64_t value);
  void add_lane_segment_id(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& lane_segment_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* mutable_lane_segment_id();

  private:
  ::int64_t _internal_lane_segment_id(int index) const;
  void _internal_add_lane_segment_id(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& _internal_lane_segment_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* _internal_mutable_lane_segment_id();

  public:
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  bool has_header() const;
  void clear_header() ;
  const ::cavnue::messages::common::v1::Header& header() const;
  PROTOBUF_NODISCARD ::cavnue::messages::common::v1::Header* release_header();
  ::cavnue::messages::common::v1::Header* mutable_header();
  void set_allocated_header(::cavnue::messages::common::v1::Header* header);
  private:
  const ::cavnue::messages::common::v1::Header& _internal_header() const;
  ::cavnue::messages::common::v1::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::cavnue::messages::common::v1::Header* header);
  ::cavnue::messages::common::v1::Header* unsafe_arena_release_header();
  // .google.protobuf.Timestamp start_time = 5 [json_name = "startTime"];
  bool has_start_time() const;
  void clear_start_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();
  // .google.protobuf.Timestamp end_time = 6 [json_name = "endTime"];
  bool has_end_time() const;
  void clear_end_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();
  // int64 event_id = 2 [json_name = "eventId"];
  void clear_event_id() ;
  ::int64_t event_id() const;
  void set_event_id(::int64_t value);

  private:
  ::int64_t _internal_event_id() const;
  void _internal_set_event_id(::int64_t value);

  public:
  // .cavnue.messages.inference.v1.TrafficEvent.Type type = 3 [json_name = "type"];
  void clear_type() ;
  ::cavnue::messages::inference::v1::TrafficEvent_Type type() const;
  void set_type(::cavnue::messages::inference::v1::TrafficEvent_Type value);

  private:
  ::cavnue::messages::inference::v1::TrafficEvent_Type _internal_type() const;
  void _internal_set_type(::cavnue::messages::inference::v1::TrafficEvent_Type value);

  public:
  // .cavnue.messages.inference.v1.TrafficEvent.Severity severity = 4 [json_name = "severity"];
  void clear_severity() ;
  ::cavnue::messages::inference::v1::TrafficEvent_Severity severity() const;
  void set_severity(::cavnue::messages::inference::v1::TrafficEvent_Severity value);

  private:
  ::cavnue::messages::inference::v1::TrafficEvent_Severity _internal_severity() const;
  void _internal_set_severity(::cavnue::messages::inference::v1::TrafficEvent_Severity value);

  public:
  // float confidence = 7 [json_name = "confidence"];
  void clear_confidence() ;
  float confidence() const;
  void set_confidence(float value);

  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.inference.v1.TrafficEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t> lane_segment_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _lane_segment_id_cached_byte_size_;
    ::cavnue::messages::common::v1::Header* header_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
    ::int64_t event_id_;
    int type_;
    int severity_;
    float confidence_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Event

// .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
inline bool Event::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::cavnue::messages::common::v1::Header& Event::_internal_header() const {
  const ::cavnue::messages::common::v1::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::common::v1::Header&>(
      ::cavnue::messages::common::v1::_Header_default_instance_);
}
inline const ::cavnue::messages::common::v1::Header& Event::header() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Event.header)
  return _internal_header();
}
inline void Event::unsafe_arena_set_allocated_header(
    ::cavnue::messages::common::v1::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.Event.header)
}
inline ::cavnue::messages::common::v1::Header* Event::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::common::v1::Header* Event::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.Event.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::cavnue::messages::common::v1::Header* Event::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::common::v1::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::cavnue::messages::common::v1::Header* Event::mutable_header() {
  ::cavnue::messages::common::v1::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.Event.header)
  return _msg;
}
inline void Event::set_allocated_header(::cavnue::messages::common::v1::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.Event.header)
}

// int64 event_id = 2 [json_name = "eventId"];
inline void Event::clear_event_id() {
  _impl_.event_id_ = ::int64_t{0};
}
inline ::int64_t Event::event_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Event.event_id)
  return _internal_event_id();
}
inline void Event::set_event_id(::int64_t value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.Event.event_id)
}
inline ::int64_t Event::_internal_event_id() const {
  return _impl_.event_id_;
}
inline void Event::_internal_set_event_id(::int64_t value) {
  ;
  _impl_.event_id_ = value;
}

// .cavnue.messages.inference.v1.Event.Type type = 3 [json_name = "type"];
inline void Event::clear_type() {
  _impl_.type_ = 0;
}
inline ::cavnue::messages::inference::v1::Event_Type Event::type() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Event.type)
  return _internal_type();
}
inline void Event::set_type(::cavnue::messages::inference::v1::Event_Type value) {
   _internal_set_type(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.Event.type)
}
inline ::cavnue::messages::inference::v1::Event_Type Event::_internal_type() const {
  return static_cast<::cavnue::messages::inference::v1::Event_Type>(_impl_.type_);
}
inline void Event::_internal_set_type(::cavnue::messages::inference::v1::Event_Type value) {
  ;
  _impl_.type_ = value;
}

// .cavnue.messages.inference.v1.Event.Severity severity = 4 [json_name = "severity"];
inline void Event::clear_severity() {
  _impl_.severity_ = 0;
}
inline ::cavnue::messages::inference::v1::Event_Severity Event::severity() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Event.severity)
  return _internal_severity();
}
inline void Event::set_severity(::cavnue::messages::inference::v1::Event_Severity value) {
   _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.Event.severity)
}
inline ::cavnue::messages::inference::v1::Event_Severity Event::_internal_severity() const {
  return static_cast<::cavnue::messages::inference::v1::Event_Severity>(_impl_.severity_);
}
inline void Event::_internal_set_severity(::cavnue::messages::inference::v1::Event_Severity value) {
  ;
  _impl_.severity_ = value;
}

// .google.protobuf.Timestamp start_time = 5 [json_name = "startTime"];
inline bool Event::has_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.start_time_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Event::_internal_start_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Event::start_time() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Event.start_time)
  return _internal_start_time();
}
inline void Event::unsafe_arena_set_allocated_start_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_time_);
  }
  _impl_.start_time_ = start_time;
  if (start_time) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.Event.start_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Event::release_start_time() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Event::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.Event.start_time)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Event::_internal_mutable_start_time() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.start_time_ = p;
  }
  return _impl_.start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Event::mutable_start_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.Event.start_time)
  return _msg;
}
inline void Event::set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time));
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.Event.start_time)
}

// .google.protobuf.Timestamp end_time = 6 [json_name = "endTime"];
inline bool Event::has_end_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.end_time_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Event::_internal_end_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Event::end_time() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Event.end_time)
  return _internal_end_time();
}
inline void Event::unsafe_arena_set_allocated_end_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  _impl_.end_time_ = end_time;
  if (end_time) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.Event.end_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Event::release_end_time() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Event::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.Event.end_time)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Event::_internal_mutable_end_time() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.end_time_ = p;
  }
  return _impl_.end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Event::mutable_end_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_end_time();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.Event.end_time)
  return _msg;
}
inline void Event::set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time));
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.Event.end_time)
}

// float confidence = 7 [json_name = "confidence"];
inline void Event::clear_confidence() {
  _impl_.confidence_ = 0;
}
inline float Event::confidence() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Event.confidence)
  return _internal_confidence();
}
inline void Event::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.Event.confidence)
}
inline float Event::_internal_confidence() const {
  return _impl_.confidence_;
}
inline void Event::_internal_set_confidence(float value) {
  ;
  _impl_.confidence_ = value;
}

// repeated int64 actor_ids = 8 [json_name = "actorIds"];
inline int Event::_internal_actor_ids_size() const {
  return _impl_.actor_ids_.size();
}
inline int Event::actor_ids_size() const {
  return _internal_actor_ids_size();
}
inline void Event::clear_actor_ids() {
  _internal_mutable_actor_ids()->Clear();
}
inline ::int64_t Event::actor_ids(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.Event.actor_ids)
  return _internal_actor_ids(index);
}
inline void Event::set_actor_ids(int index, ::int64_t value) {
  _internal_mutable_actor_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.Event.actor_ids)
}
inline void Event::add_actor_ids(::int64_t value) {
  _internal_add_actor_ids(value);
  // @@protoc_insertion_point(field_add:cavnue.messages.inference.v1.Event.actor_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& Event::actor_ids() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.inference.v1.Event.actor_ids)
  return _internal_actor_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* Event::mutable_actor_ids() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.inference.v1.Event.actor_ids)
  return _internal_mutable_actor_ids();
}

inline ::int64_t Event::_internal_actor_ids(int index) const {
  return _internal_actor_ids().Get(index);
}
inline void Event::_internal_add_actor_ids(::int64_t value) {
  _internal_mutable_actor_ids()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& Event::_internal_actor_ids() const {
  return _impl_.actor_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* Event::_internal_mutable_actor_ids() {
  return &_impl_.actor_ids_;
}

// -------------------------------------------------------------------

// TrafficEvent

// .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
inline bool TrafficEvent::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::cavnue::messages::common::v1::Header& TrafficEvent::_internal_header() const {
  const ::cavnue::messages::common::v1::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::common::v1::Header&>(
      ::cavnue::messages::common::v1::_Header_default_instance_);
}
inline const ::cavnue::messages::common::v1::Header& TrafficEvent::header() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.TrafficEvent.header)
  return _internal_header();
}
inline void TrafficEvent::unsafe_arena_set_allocated_header(
    ::cavnue::messages::common::v1::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.TrafficEvent.header)
}
inline ::cavnue::messages::common::v1::Header* TrafficEvent::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::common::v1::Header* TrafficEvent::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.TrafficEvent.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::cavnue::messages::common::v1::Header* TrafficEvent::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::common::v1::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::cavnue::messages::common::v1::Header* TrafficEvent::mutable_header() {
  ::cavnue::messages::common::v1::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.TrafficEvent.header)
  return _msg;
}
inline void TrafficEvent::set_allocated_header(::cavnue::messages::common::v1::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.TrafficEvent.header)
}

// int64 event_id = 2 [json_name = "eventId"];
inline void TrafficEvent::clear_event_id() {
  _impl_.event_id_ = ::int64_t{0};
}
inline ::int64_t TrafficEvent::event_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.TrafficEvent.event_id)
  return _internal_event_id();
}
inline void TrafficEvent::set_event_id(::int64_t value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.TrafficEvent.event_id)
}
inline ::int64_t TrafficEvent::_internal_event_id() const {
  return _impl_.event_id_;
}
inline void TrafficEvent::_internal_set_event_id(::int64_t value) {
  ;
  _impl_.event_id_ = value;
}

// .cavnue.messages.inference.v1.TrafficEvent.Type type = 3 [json_name = "type"];
inline void TrafficEvent::clear_type() {
  _impl_.type_ = 0;
}
inline ::cavnue::messages::inference::v1::TrafficEvent_Type TrafficEvent::type() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.TrafficEvent.type)
  return _internal_type();
}
inline void TrafficEvent::set_type(::cavnue::messages::inference::v1::TrafficEvent_Type value) {
   _internal_set_type(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.TrafficEvent.type)
}
inline ::cavnue::messages::inference::v1::TrafficEvent_Type TrafficEvent::_internal_type() const {
  return static_cast<::cavnue::messages::inference::v1::TrafficEvent_Type>(_impl_.type_);
}
inline void TrafficEvent::_internal_set_type(::cavnue::messages::inference::v1::TrafficEvent_Type value) {
  ;
  _impl_.type_ = value;
}

// .cavnue.messages.inference.v1.TrafficEvent.Severity severity = 4 [json_name = "severity"];
inline void TrafficEvent::clear_severity() {
  _impl_.severity_ = 0;
}
inline ::cavnue::messages::inference::v1::TrafficEvent_Severity TrafficEvent::severity() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.TrafficEvent.severity)
  return _internal_severity();
}
inline void TrafficEvent::set_severity(::cavnue::messages::inference::v1::TrafficEvent_Severity value) {
   _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.TrafficEvent.severity)
}
inline ::cavnue::messages::inference::v1::TrafficEvent_Severity TrafficEvent::_internal_severity() const {
  return static_cast<::cavnue::messages::inference::v1::TrafficEvent_Severity>(_impl_.severity_);
}
inline void TrafficEvent::_internal_set_severity(::cavnue::messages::inference::v1::TrafficEvent_Severity value) {
  ;
  _impl_.severity_ = value;
}

// .google.protobuf.Timestamp start_time = 5 [json_name = "startTime"];
inline bool TrafficEvent::has_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.start_time_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TrafficEvent::_internal_start_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TrafficEvent::start_time() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.TrafficEvent.start_time)
  return _internal_start_time();
}
inline void TrafficEvent::unsafe_arena_set_allocated_start_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_time_);
  }
  _impl_.start_time_ = start_time;
  if (start_time) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.TrafficEvent.start_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TrafficEvent::release_start_time() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TrafficEvent::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.TrafficEvent.start_time)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TrafficEvent::_internal_mutable_start_time() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.start_time_ = p;
  }
  return _impl_.start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TrafficEvent::mutable_start_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.TrafficEvent.start_time)
  return _msg;
}
inline void TrafficEvent::set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time));
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.TrafficEvent.start_time)
}

// .google.protobuf.Timestamp end_time = 6 [json_name = "endTime"];
inline bool TrafficEvent::has_end_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.end_time_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TrafficEvent::_internal_end_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TrafficEvent::end_time() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.TrafficEvent.end_time)
  return _internal_end_time();
}
inline void TrafficEvent::unsafe_arena_set_allocated_end_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  _impl_.end_time_ = end_time;
  if (end_time) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.TrafficEvent.end_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TrafficEvent::release_end_time() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TrafficEvent::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.TrafficEvent.end_time)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TrafficEvent::_internal_mutable_end_time() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.end_time_ = p;
  }
  return _impl_.end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TrafficEvent::mutable_end_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_end_time();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.TrafficEvent.end_time)
  return _msg;
}
inline void TrafficEvent::set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time));
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.TrafficEvent.end_time)
}

// float confidence = 7 [json_name = "confidence"];
inline void TrafficEvent::clear_confidence() {
  _impl_.confidence_ = 0;
}
inline float TrafficEvent::confidence() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.TrafficEvent.confidence)
  return _internal_confidence();
}
inline void TrafficEvent::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.TrafficEvent.confidence)
}
inline float TrafficEvent::_internal_confidence() const {
  return _impl_.confidence_;
}
inline void TrafficEvent::_internal_set_confidence(float value) {
  ;
  _impl_.confidence_ = value;
}

// repeated int64 lane_segment_id = 8 [json_name = "laneSegmentId"];
inline int TrafficEvent::_internal_lane_segment_id_size() const {
  return _impl_.lane_segment_id_.size();
}
inline int TrafficEvent::lane_segment_id_size() const {
  return _internal_lane_segment_id_size();
}
inline void TrafficEvent::clear_lane_segment_id() {
  _internal_mutable_lane_segment_id()->Clear();
}
inline ::int64_t TrafficEvent::lane_segment_id(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.TrafficEvent.lane_segment_id)
  return _internal_lane_segment_id(index);
}
inline void TrafficEvent::set_lane_segment_id(int index, ::int64_t value) {
  _internal_mutable_lane_segment_id()->Set(index, value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.TrafficEvent.lane_segment_id)
}
inline void TrafficEvent::add_lane_segment_id(::int64_t value) {
  _internal_add_lane_segment_id(value);
  // @@protoc_insertion_point(field_add:cavnue.messages.inference.v1.TrafficEvent.lane_segment_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& TrafficEvent::lane_segment_id() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.inference.v1.TrafficEvent.lane_segment_id)
  return _internal_lane_segment_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* TrafficEvent::mutable_lane_segment_id() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.inference.v1.TrafficEvent.lane_segment_id)
  return _internal_mutable_lane_segment_id();
}

inline ::int64_t TrafficEvent::_internal_lane_segment_id(int index) const {
  return _internal_lane_segment_id().Get(index);
}
inline void TrafficEvent::_internal_add_lane_segment_id(::int64_t value) {
  _internal_mutable_lane_segment_id()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& TrafficEvent::_internal_lane_segment_id() const {
  return _impl_.lane_segment_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* TrafficEvent::_internal_mutable_lane_segment_id() {
  return &_impl_.lane_segment_id_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace inference
}  // namespace messages
}  // namespace cavnue


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::cavnue::messages::inference::v1::Event_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::cavnue::messages::inference::v1::Event_Type>() {
  return ::cavnue::messages::inference::v1::Event_Type_descriptor();
}
template <>
struct is_proto_enum<::cavnue::messages::inference::v1::Event_Severity> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::cavnue::messages::inference::v1::Event_Severity>() {
  return ::cavnue::messages::inference::v1::Event_Severity_descriptor();
}
template <>
struct is_proto_enum<::cavnue::messages::inference::v1::TrafficEvent_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::cavnue::messages::inference::v1::TrafficEvent_Type>() {
  return ::cavnue::messages::inference::v1::TrafficEvent_Type_descriptor();
}
template <>
struct is_proto_enum<::cavnue::messages::inference::v1::TrafficEvent_Severity> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::cavnue::messages::inference::v1::TrafficEvent_Severity>() {
  return ::cavnue::messages::inference::v1::TrafficEvent_Severity_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto_2epb_2eh

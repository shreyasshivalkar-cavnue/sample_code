// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/inference/v1/camera.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cavnue/messages/common/v1/common.pb.h"
#include "cavnue/messages/geometry/v1/bounding_box.pb.h"
#include "google/protobuf/duration.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto;
namespace cavnue {
namespace messages {
namespace inference {
namespace v1 {
class CameraDetection;
struct CameraDetectionDefaultTypeInternal;
extern CameraDetectionDefaultTypeInternal _CameraDetection_default_instance_;
class CameraDetection_Detection;
struct CameraDetection_DetectionDefaultTypeInternal;
extern CameraDetection_DetectionDefaultTypeInternal _CameraDetection_Detection_default_instance_;
}  // namespace v1
}  // namespace inference
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template <>
::cavnue::messages::inference::v1::CameraDetection* Arena::CreateMaybeMessage<::cavnue::messages::inference::v1::CameraDetection>(Arena*);
template <>
::cavnue::messages::inference::v1::CameraDetection_Detection* Arena::CreateMaybeMessage<::cavnue::messages::inference::v1::CameraDetection_Detection>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cavnue {
namespace messages {
namespace inference {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class CameraDetection_Detection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.inference.v1.CameraDetection.Detection) */ {
 public:
  inline CameraDetection_Detection() : CameraDetection_Detection(nullptr) {}
  ~CameraDetection_Detection() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CameraDetection_Detection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraDetection_Detection(const CameraDetection_Detection& from);
  CameraDetection_Detection(CameraDetection_Detection&& from) noexcept
    : CameraDetection_Detection() {
    *this = ::std::move(from);
  }

  inline CameraDetection_Detection& operator=(const CameraDetection_Detection& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraDetection_Detection& operator=(CameraDetection_Detection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraDetection_Detection& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraDetection_Detection* internal_default_instance() {
    return reinterpret_cast<const CameraDetection_Detection*>(
               &_CameraDetection_Detection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CameraDetection_Detection& a, CameraDetection_Detection& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraDetection_Detection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraDetection_Detection* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraDetection_Detection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraDetection_Detection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraDetection_Detection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CameraDetection_Detection& from) {
    CameraDetection_Detection::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraDetection_Detection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.inference.v1.CameraDetection.Detection";
  }
  protected:
  explicit CameraDetection_Detection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBboxFieldNumber = 1,
    kClassificationFieldNumber = 2,
    kClassConfidenceFieldNumber = 3,
    kDetectionConfidenceFieldNumber = 4,
  };
  // .cavnue.messages.geometry.v1.BoundingBox2f bbox = 1 [json_name = "bbox"];
  bool has_bbox() const;
  void clear_bbox() ;
  const ::cavnue::messages::geometry::v1::BoundingBox2f& bbox() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::BoundingBox2f* release_bbox();
  ::cavnue::messages::geometry::v1::BoundingBox2f* mutable_bbox();
  void set_allocated_bbox(::cavnue::messages::geometry::v1::BoundingBox2f* bbox);
  private:
  const ::cavnue::messages::geometry::v1::BoundingBox2f& _internal_bbox() const;
  ::cavnue::messages::geometry::v1::BoundingBox2f* _internal_mutable_bbox();
  public:
  void unsafe_arena_set_allocated_bbox(
      ::cavnue::messages::geometry::v1::BoundingBox2f* bbox);
  ::cavnue::messages::geometry::v1::BoundingBox2f* unsafe_arena_release_bbox();
  // .cavnue.messages.common.v1.Classification classification = 2 [json_name = "classification"];
  void clear_classification() ;
  ::cavnue::messages::common::v1::Classification classification() const;
  void set_classification(::cavnue::messages::common::v1::Classification value);

  private:
  ::cavnue::messages::common::v1::Classification _internal_classification() const;
  void _internal_set_classification(::cavnue::messages::common::v1::Classification value);

  public:
  // float class_confidence = 3 [json_name = "classConfidence"];
  void clear_class_confidence() ;
  float class_confidence() const;
  void set_class_confidence(float value);

  private:
  float _internal_class_confidence() const;
  void _internal_set_class_confidence(float value);

  public:
  // float detection_confidence = 4 [json_name = "detectionConfidence"];
  void clear_detection_confidence() ;
  float detection_confidence() const;
  void set_detection_confidence(float value);

  private:
  float _internal_detection_confidence() const;
  void _internal_set_detection_confidence(float value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.inference.v1.CameraDetection.Detection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::geometry::v1::BoundingBox2f* bbox_;
    int classification_;
    float class_confidence_;
    float detection_confidence_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto;
};// -------------------------------------------------------------------

class CameraDetection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.inference.v1.CameraDetection) */ {
 public:
  inline CameraDetection() : CameraDetection(nullptr) {}
  ~CameraDetection() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CameraDetection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraDetection(const CameraDetection& from);
  CameraDetection(CameraDetection&& from) noexcept
    : CameraDetection() {
    *this = ::std::move(from);
  }

  inline CameraDetection& operator=(const CameraDetection& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraDetection& operator=(CameraDetection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraDetection& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraDetection* internal_default_instance() {
    return reinterpret_cast<const CameraDetection*>(
               &_CameraDetection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CameraDetection& a, CameraDetection& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraDetection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraDetection* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraDetection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraDetection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraDetection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CameraDetection& from) {
    CameraDetection::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraDetection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.inference.v1.CameraDetection";
  }
  protected:
  explicit CameraDetection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CameraDetection_Detection Detection;

  // accessors -------------------------------------------------------

  enum : int {
    kDetectionsFieldNumber = 5,
    kHeaderFieldNumber = 1,
    kObservationTsFieldNumber = 2,
    kObservationDurationFieldNumber = 3,
    kDataSourceFieldNumber = 4,
    kDataIdFieldNumber = 6,
  };
  // repeated .cavnue.messages.inference.v1.CameraDetection.Detection detections = 5 [json_name = "detections"];
  int detections_size() const;
  private:
  int _internal_detections_size() const;

  public:
  void clear_detections() ;
  ::cavnue::messages::inference::v1::CameraDetection_Detection* mutable_detections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::CameraDetection_Detection >*
      mutable_detections();
  private:
  const ::cavnue::messages::inference::v1::CameraDetection_Detection& _internal_detections(int index) const;
  ::cavnue::messages::inference::v1::CameraDetection_Detection* _internal_add_detections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::CameraDetection_Detection>& _internal_detections() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::CameraDetection_Detection>* _internal_mutable_detections();
  public:
  const ::cavnue::messages::inference::v1::CameraDetection_Detection& detections(int index) const;
  ::cavnue::messages::inference::v1::CameraDetection_Detection* add_detections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::CameraDetection_Detection >&
      detections() const;
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  bool has_header() const;
  void clear_header() ;
  const ::cavnue::messages::common::v1::Header& header() const;
  PROTOBUF_NODISCARD ::cavnue::messages::common::v1::Header* release_header();
  ::cavnue::messages::common::v1::Header* mutable_header();
  void set_allocated_header(::cavnue::messages::common::v1::Header* header);
  private:
  const ::cavnue::messages::common::v1::Header& _internal_header() const;
  ::cavnue::messages::common::v1::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::cavnue::messages::common::v1::Header* header);
  ::cavnue::messages::common::v1::Header* unsafe_arena_release_header();
  // .google.protobuf.Timestamp observation_ts = 2 [json_name = "observationTs"];
  bool has_observation_ts() const;
  void clear_observation_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& observation_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_observation_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_observation_ts();
  void set_allocated_observation_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* observation_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_observation_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_observation_ts();
  public:
  void unsafe_arena_set_allocated_observation_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* observation_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_observation_ts();
  // .google.protobuf.Duration observation_duration = 3 [json_name = "observationDuration"];
  bool has_observation_duration() const;
  void clear_observation_duration() ;
  const ::PROTOBUF_NAMESPACE_ID::Duration& observation_duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_observation_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_observation_duration();
  void set_allocated_observation_duration(::PROTOBUF_NAMESPACE_ID::Duration* observation_duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_observation_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_observation_duration();
  public:
  void unsafe_arena_set_allocated_observation_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* observation_duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_observation_duration();
  // .cavnue.messages.common.v1.DataSource data_source = 4 [json_name = "dataSource"];
  bool has_data_source() const;
  void clear_data_source() ;
  const ::cavnue::messages::common::v1::DataSource& data_source() const;
  PROTOBUF_NODISCARD ::cavnue::messages::common::v1::DataSource* release_data_source();
  ::cavnue::messages::common::v1::DataSource* mutable_data_source();
  void set_allocated_data_source(::cavnue::messages::common::v1::DataSource* data_source);
  private:
  const ::cavnue::messages::common::v1::DataSource& _internal_data_source() const;
  ::cavnue::messages::common::v1::DataSource* _internal_mutable_data_source();
  public:
  void unsafe_arena_set_allocated_data_source(
      ::cavnue::messages::common::v1::DataSource* data_source);
  ::cavnue::messages::common::v1::DataSource* unsafe_arena_release_data_source();
  // int64 data_id = 6 [json_name = "dataId"];
  void clear_data_id() ;
  ::int64_t data_id() const;
  void set_data_id(::int64_t value);

  private:
  ::int64_t _internal_data_id() const;
  void _internal_set_data_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.inference.v1.CameraDetection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::CameraDetection_Detection > detections_;
    ::cavnue::messages::common::v1::Header* header_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* observation_ts_;
    ::PROTOBUF_NAMESPACE_ID::Duration* observation_duration_;
    ::cavnue::messages::common::v1::DataSource* data_source_;
    ::int64_t data_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CameraDetection_Detection

// .cavnue.messages.geometry.v1.BoundingBox2f bbox = 1 [json_name = "bbox"];
inline bool CameraDetection_Detection::has_bbox() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bbox_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::BoundingBox2f& CameraDetection_Detection::_internal_bbox() const {
  const ::cavnue::messages::geometry::v1::BoundingBox2f* p = _impl_.bbox_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::BoundingBox2f&>(
      ::cavnue::messages::geometry::v1::_BoundingBox2f_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::BoundingBox2f& CameraDetection_Detection::bbox() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.CameraDetection.Detection.bbox)
  return _internal_bbox();
}
inline void CameraDetection_Detection::unsafe_arena_set_allocated_bbox(
    ::cavnue::messages::geometry::v1::BoundingBox2f* bbox) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bbox_);
  }
  _impl_.bbox_ = bbox;
  if (bbox) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.CameraDetection.Detection.bbox)
}
inline ::cavnue::messages::geometry::v1::BoundingBox2f* CameraDetection_Detection::release_bbox() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::BoundingBox2f* temp = _impl_.bbox_;
  _impl_.bbox_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::BoundingBox2f* CameraDetection_Detection::unsafe_arena_release_bbox() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.CameraDetection.Detection.bbox)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::BoundingBox2f* temp = _impl_.bbox_;
  _impl_.bbox_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::BoundingBox2f* CameraDetection_Detection::_internal_mutable_bbox() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.bbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::BoundingBox2f>(GetArenaForAllocation());
    _impl_.bbox_ = p;
  }
  return _impl_.bbox_;
}
inline ::cavnue::messages::geometry::v1::BoundingBox2f* CameraDetection_Detection::mutable_bbox() {
  ::cavnue::messages::geometry::v1::BoundingBox2f* _msg = _internal_mutable_bbox();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.CameraDetection.Detection.bbox)
  return _msg;
}
inline void CameraDetection_Detection::set_allocated_bbox(::cavnue::messages::geometry::v1::BoundingBox2f* bbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bbox_);
  }
  if (bbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bbox));
    if (message_arena != submessage_arena) {
      bbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bbox, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.bbox_ = bbox;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.CameraDetection.Detection.bbox)
}

// .cavnue.messages.common.v1.Classification classification = 2 [json_name = "classification"];
inline void CameraDetection_Detection::clear_classification() {
  _impl_.classification_ = 0;
}
inline ::cavnue::messages::common::v1::Classification CameraDetection_Detection::classification() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.CameraDetection.Detection.classification)
  return _internal_classification();
}
inline void CameraDetection_Detection::set_classification(::cavnue::messages::common::v1::Classification value) {
   _internal_set_classification(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.CameraDetection.Detection.classification)
}
inline ::cavnue::messages::common::v1::Classification CameraDetection_Detection::_internal_classification() const {
  return static_cast<::cavnue::messages::common::v1::Classification>(_impl_.classification_);
}
inline void CameraDetection_Detection::_internal_set_classification(::cavnue::messages::common::v1::Classification value) {
  ;
  _impl_.classification_ = value;
}

// float class_confidence = 3 [json_name = "classConfidence"];
inline void CameraDetection_Detection::clear_class_confidence() {
  _impl_.class_confidence_ = 0;
}
inline float CameraDetection_Detection::class_confidence() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.CameraDetection.Detection.class_confidence)
  return _internal_class_confidence();
}
inline void CameraDetection_Detection::set_class_confidence(float value) {
  _internal_set_class_confidence(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.CameraDetection.Detection.class_confidence)
}
inline float CameraDetection_Detection::_internal_class_confidence() const {
  return _impl_.class_confidence_;
}
inline void CameraDetection_Detection::_internal_set_class_confidence(float value) {
  ;
  _impl_.class_confidence_ = value;
}

// float detection_confidence = 4 [json_name = "detectionConfidence"];
inline void CameraDetection_Detection::clear_detection_confidence() {
  _impl_.detection_confidence_ = 0;
}
inline float CameraDetection_Detection::detection_confidence() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.CameraDetection.Detection.detection_confidence)
  return _internal_detection_confidence();
}
inline void CameraDetection_Detection::set_detection_confidence(float value) {
  _internal_set_detection_confidence(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.CameraDetection.Detection.detection_confidence)
}
inline float CameraDetection_Detection::_internal_detection_confidence() const {
  return _impl_.detection_confidence_;
}
inline void CameraDetection_Detection::_internal_set_detection_confidence(float value) {
  ;
  _impl_.detection_confidence_ = value;
}

// -------------------------------------------------------------------

// CameraDetection

// .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
inline bool CameraDetection::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::cavnue::messages::common::v1::Header& CameraDetection::_internal_header() const {
  const ::cavnue::messages::common::v1::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::common::v1::Header&>(
      ::cavnue::messages::common::v1::_Header_default_instance_);
}
inline const ::cavnue::messages::common::v1::Header& CameraDetection::header() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.CameraDetection.header)
  return _internal_header();
}
inline void CameraDetection::unsafe_arena_set_allocated_header(
    ::cavnue::messages::common::v1::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.CameraDetection.header)
}
inline ::cavnue::messages::common::v1::Header* CameraDetection::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::common::v1::Header* CameraDetection::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.CameraDetection.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::cavnue::messages::common::v1::Header* CameraDetection::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::common::v1::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::cavnue::messages::common::v1::Header* CameraDetection::mutable_header() {
  ::cavnue::messages::common::v1::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.CameraDetection.header)
  return _msg;
}
inline void CameraDetection::set_allocated_header(::cavnue::messages::common::v1::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.CameraDetection.header)
}

// .google.protobuf.Timestamp observation_ts = 2 [json_name = "observationTs"];
inline bool CameraDetection::has_observation_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.observation_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CameraDetection::_internal_observation_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.observation_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CameraDetection::observation_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.CameraDetection.observation_ts)
  return _internal_observation_ts();
}
inline void CameraDetection::unsafe_arena_set_allocated_observation_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* observation_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observation_ts_);
  }
  _impl_.observation_ts_ = observation_ts;
  if (observation_ts) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.CameraDetection.observation_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CameraDetection::release_observation_ts() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.observation_ts_;
  _impl_.observation_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CameraDetection::unsafe_arena_release_observation_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.CameraDetection.observation_ts)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.observation_ts_;
  _impl_.observation_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CameraDetection::_internal_mutable_observation_ts() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.observation_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.observation_ts_ = p;
  }
  return _impl_.observation_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CameraDetection::mutable_observation_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_observation_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.CameraDetection.observation_ts)
  return _msg;
}
inline void CameraDetection::set_allocated_observation_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* observation_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observation_ts_);
  }
  if (observation_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(observation_ts));
    if (message_arena != submessage_arena) {
      observation_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observation_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.observation_ts_ = observation_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.CameraDetection.observation_ts)
}

// .google.protobuf.Duration observation_duration = 3 [json_name = "observationDuration"];
inline bool CameraDetection::has_observation_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.observation_duration_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& CameraDetection::_internal_observation_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.observation_duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& CameraDetection::observation_duration() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.CameraDetection.observation_duration)
  return _internal_observation_duration();
}
inline void CameraDetection::unsafe_arena_set_allocated_observation_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* observation_duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observation_duration_);
  }
  _impl_.observation_duration_ = observation_duration;
  if (observation_duration) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.CameraDetection.observation_duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* CameraDetection::release_observation_duration() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.observation_duration_;
  _impl_.observation_duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* CameraDetection::unsafe_arena_release_observation_duration() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.CameraDetection.observation_duration)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.observation_duration_;
  _impl_.observation_duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* CameraDetection::_internal_mutable_observation_duration() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.observation_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.observation_duration_ = p;
  }
  return _impl_.observation_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* CameraDetection::mutable_observation_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_observation_duration();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.CameraDetection.observation_duration)
  return _msg;
}
inline void CameraDetection::set_allocated_observation_duration(::PROTOBUF_NAMESPACE_ID::Duration* observation_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observation_duration_);
  }
  if (observation_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(observation_duration));
    if (message_arena != submessage_arena) {
      observation_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observation_duration, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.observation_duration_ = observation_duration;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.CameraDetection.observation_duration)
}

// .cavnue.messages.common.v1.DataSource data_source = 4 [json_name = "dataSource"];
inline bool CameraDetection::has_data_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_source_ != nullptr);
  return value;
}
inline const ::cavnue::messages::common::v1::DataSource& CameraDetection::_internal_data_source() const {
  const ::cavnue::messages::common::v1::DataSource* p = _impl_.data_source_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::common::v1::DataSource&>(
      ::cavnue::messages::common::v1::_DataSource_default_instance_);
}
inline const ::cavnue::messages::common::v1::DataSource& CameraDetection::data_source() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.CameraDetection.data_source)
  return _internal_data_source();
}
inline void CameraDetection::unsafe_arena_set_allocated_data_source(
    ::cavnue::messages::common::v1::DataSource* data_source) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_source_);
  }
  _impl_.data_source_ = data_source;
  if (data_source) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.CameraDetection.data_source)
}
inline ::cavnue::messages::common::v1::DataSource* CameraDetection::release_data_source() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::cavnue::messages::common::v1::DataSource* temp = _impl_.data_source_;
  _impl_.data_source_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::common::v1::DataSource* CameraDetection::unsafe_arena_release_data_source() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.CameraDetection.data_source)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::cavnue::messages::common::v1::DataSource* temp = _impl_.data_source_;
  _impl_.data_source_ = nullptr;
  return temp;
}
inline ::cavnue::messages::common::v1::DataSource* CameraDetection::_internal_mutable_data_source() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.data_source_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::common::v1::DataSource>(GetArenaForAllocation());
    _impl_.data_source_ = p;
  }
  return _impl_.data_source_;
}
inline ::cavnue::messages::common::v1::DataSource* CameraDetection::mutable_data_source() {
  ::cavnue::messages::common::v1::DataSource* _msg = _internal_mutable_data_source();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.CameraDetection.data_source)
  return _msg;
}
inline void CameraDetection::set_allocated_data_source(::cavnue::messages::common::v1::DataSource* data_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_source_);
  }
  if (data_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_source));
    if (message_arena != submessage_arena) {
      data_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_source, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.data_source_ = data_source;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.CameraDetection.data_source)
}

// repeated .cavnue.messages.inference.v1.CameraDetection.Detection detections = 5 [json_name = "detections"];
inline int CameraDetection::_internal_detections_size() const {
  return _impl_.detections_.size();
}
inline int CameraDetection::detections_size() const {
  return _internal_detections_size();
}
inline void CameraDetection::clear_detections() {
  _internal_mutable_detections()->Clear();
}
inline ::cavnue::messages::inference::v1::CameraDetection_Detection* CameraDetection::mutable_detections(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.CameraDetection.detections)
  return _internal_mutable_detections()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::CameraDetection_Detection >*
CameraDetection::mutable_detections() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.inference.v1.CameraDetection.detections)
  return _internal_mutable_detections();
}
inline const ::cavnue::messages::inference::v1::CameraDetection_Detection& CameraDetection::_internal_detections(int index) const {
  return _internal_detections().Get(index);
}
inline const ::cavnue::messages::inference::v1::CameraDetection_Detection& CameraDetection::detections(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.CameraDetection.detections)
  return _internal_detections(index);
}
inline ::cavnue::messages::inference::v1::CameraDetection_Detection* CameraDetection::_internal_add_detections() {
  return _internal_mutable_detections()->Add();
}
inline ::cavnue::messages::inference::v1::CameraDetection_Detection* CameraDetection::add_detections() {
  ::cavnue::messages::inference::v1::CameraDetection_Detection* _add = _internal_add_detections();
  // @@protoc_insertion_point(field_add:cavnue.messages.inference.v1.CameraDetection.detections)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::CameraDetection_Detection >&
CameraDetection::detections() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.inference.v1.CameraDetection.detections)
  return _internal_detections();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::CameraDetection_Detection>&
CameraDetection::_internal_detections() const {
  return _impl_.detections_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::CameraDetection_Detection>*
CameraDetection::_internal_mutable_detections() {
  return &_impl_.detections_;
}

// int64 data_id = 6 [json_name = "dataId"];
inline void CameraDetection::clear_data_id() {
  _impl_.data_id_ = ::int64_t{0};
}
inline ::int64_t CameraDetection::data_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.CameraDetection.data_id)
  return _internal_data_id();
}
inline void CameraDetection::set_data_id(::int64_t value) {
  _internal_set_data_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.CameraDetection.data_id)
}
inline ::int64_t CameraDetection::_internal_data_id() const {
  return _impl_.data_id_;
}
inline void CameraDetection::_internal_set_data_id(::int64_t value) {
  ;
  _impl_.data_id_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace inference
}  // namespace messages
}  // namespace cavnue


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2finference_2fv1_2fcamera_2eproto_2epb_2eh

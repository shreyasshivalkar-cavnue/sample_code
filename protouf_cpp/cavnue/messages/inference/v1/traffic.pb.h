// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/inference/v1/traffic.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cavnue/messages/common/v1/common.pb.h"
#include "cavnue/messages/common/v1/field_options.pb.h"
#include "google/protobuf/timestamp.pb.h"
#include "cavnue/third_party/bq/v1/bq_field.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto;
namespace cavnue {
namespace messages {
namespace inference {
namespace v1 {
class AnnualAverageDailyTrafficCalculation;
struct AnnualAverageDailyTrafficCalculationDefaultTypeInternal;
extern AnnualAverageDailyTrafficCalculationDefaultTypeInternal _AnnualAverageDailyTrafficCalculation_default_instance_;
class AverageTrafficCalculation;
struct AverageTrafficCalculationDefaultTypeInternal;
extern AverageTrafficCalculationDefaultTypeInternal _AverageTrafficCalculation_default_instance_;
class AverageTrafficCalculation_Statistics;
struct AverageTrafficCalculation_StatisticsDefaultTypeInternal;
extern AverageTrafficCalculation_StatisticsDefaultTypeInternal _AverageTrafficCalculation_Statistics_default_instance_;
class LaneSegmentAggregation;
struct LaneSegmentAggregationDefaultTypeInternal;
extern LaneSegmentAggregationDefaultTypeInternal _LaneSegmentAggregation_default_instance_;
class LaneSegmentAggregation_Statistics;
struct LaneSegmentAggregation_StatisticsDefaultTypeInternal;
extern LaneSegmentAggregation_StatisticsDefaultTypeInternal _LaneSegmentAggregation_Statistics_default_instance_;
class MonthlyAverageDailyTrafficCalculation;
struct MonthlyAverageDailyTrafficCalculationDefaultTypeInternal;
extern MonthlyAverageDailyTrafficCalculationDefaultTypeInternal _MonthlyAverageDailyTrafficCalculation_default_instance_;
class RoadSegmentAggregation;
struct RoadSegmentAggregationDefaultTypeInternal;
extern RoadSegmentAggregationDefaultTypeInternal _RoadSegmentAggregation_default_instance_;
class RoadSegmentAggregation_Statistics;
struct RoadSegmentAggregation_StatisticsDefaultTypeInternal;
extern RoadSegmentAggregation_StatisticsDefaultTypeInternal _RoadSegmentAggregation_Statistics_default_instance_;
}  // namespace v1
}  // namespace inference
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template <>
::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation* Arena::CreateMaybeMessage<::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation>(Arena*);
template <>
::cavnue::messages::inference::v1::AverageTrafficCalculation* Arena::CreateMaybeMessage<::cavnue::messages::inference::v1::AverageTrafficCalculation>(Arena*);
template <>
::cavnue::messages::inference::v1::AverageTrafficCalculation_Statistics* Arena::CreateMaybeMessage<::cavnue::messages::inference::v1::AverageTrafficCalculation_Statistics>(Arena*);
template <>
::cavnue::messages::inference::v1::LaneSegmentAggregation* Arena::CreateMaybeMessage<::cavnue::messages::inference::v1::LaneSegmentAggregation>(Arena*);
template <>
::cavnue::messages::inference::v1::LaneSegmentAggregation_Statistics* Arena::CreateMaybeMessage<::cavnue::messages::inference::v1::LaneSegmentAggregation_Statistics>(Arena*);
template <>
::cavnue::messages::inference::v1::MonthlyAverageDailyTrafficCalculation* Arena::CreateMaybeMessage<::cavnue::messages::inference::v1::MonthlyAverageDailyTrafficCalculation>(Arena*);
template <>
::cavnue::messages::inference::v1::RoadSegmentAggregation* Arena::CreateMaybeMessage<::cavnue::messages::inference::v1::RoadSegmentAggregation>(Arena*);
template <>
::cavnue::messages::inference::v1::RoadSegmentAggregation_Statistics* Arena::CreateMaybeMessage<::cavnue::messages::inference::v1::RoadSegmentAggregation_Statistics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cavnue {
namespace messages {
namespace inference {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class LaneSegmentAggregation_Statistics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.inference.v1.LaneSegmentAggregation.Statistics) */ {
 public:
  inline LaneSegmentAggregation_Statistics() : LaneSegmentAggregation_Statistics(nullptr) {}
  ~LaneSegmentAggregation_Statistics() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LaneSegmentAggregation_Statistics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaneSegmentAggregation_Statistics(const LaneSegmentAggregation_Statistics& from);
  LaneSegmentAggregation_Statistics(LaneSegmentAggregation_Statistics&& from) noexcept
    : LaneSegmentAggregation_Statistics() {
    *this = ::std::move(from);
  }

  inline LaneSegmentAggregation_Statistics& operator=(const LaneSegmentAggregation_Statistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneSegmentAggregation_Statistics& operator=(LaneSegmentAggregation_Statistics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaneSegmentAggregation_Statistics& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaneSegmentAggregation_Statistics* internal_default_instance() {
    return reinterpret_cast<const LaneSegmentAggregation_Statistics*>(
               &_LaneSegmentAggregation_Statistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LaneSegmentAggregation_Statistics& a, LaneSegmentAggregation_Statistics& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneSegmentAggregation_Statistics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaneSegmentAggregation_Statistics* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaneSegmentAggregation_Statistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LaneSegmentAggregation_Statistics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LaneSegmentAggregation_Statistics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LaneSegmentAggregation_Statistics& from) {
    LaneSegmentAggregation_Statistics::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneSegmentAggregation_Statistics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.inference.v1.LaneSegmentAggregation.Statistics";
  }
  protected:
  explicit LaneSegmentAggregation_Statistics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneSegmentIdFieldNumber = 1,
    kSpeedMeanFieldNumber = 2,
    kActorsUniqueFieldNumber = 3,
    kDensityFieldNumber = 4,
  };
  // int64 lane_segment_id = 1 [json_name = "laneSegmentId"];
  void clear_lane_segment_id() ;
  ::int64_t lane_segment_id() const;
  void set_lane_segment_id(::int64_t value);

  private:
  ::int64_t _internal_lane_segment_id() const;
  void _internal_set_lane_segment_id(::int64_t value);

  public:
  // float speed_mean = 2 [json_name = "speedMean", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
  void clear_speed_mean() ;
  float speed_mean() const;
  void set_speed_mean(float value);

  private:
  float _internal_speed_mean() const;
  void _internal_set_speed_mean(float value);

  public:
  // uint32 actors_unique = 3 [json_name = "actorsUnique"];
  void clear_actors_unique() ;
  ::uint32_t actors_unique() const;
  void set_actors_unique(::uint32_t value);

  private:
  ::uint32_t _internal_actors_unique() const;
  void _internal_set_actors_unique(::uint32_t value);

  public:
  // float density = 4 [json_name = "density", (.cavnue.messages.common.v1.units) = UNITS_VEHICLES_PER_METER];
  void clear_density() ;
  float density() const;
  void set_density(float value);

  private:
  float _internal_density() const;
  void _internal_set_density(float value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.inference.v1.LaneSegmentAggregation.Statistics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int64_t lane_segment_id_;
    float speed_mean_;
    ::uint32_t actors_unique_;
    float density_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto;
};// -------------------------------------------------------------------

class LaneSegmentAggregation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.inference.v1.LaneSegmentAggregation) */ {
 public:
  inline LaneSegmentAggregation() : LaneSegmentAggregation(nullptr) {}
  ~LaneSegmentAggregation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LaneSegmentAggregation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaneSegmentAggregation(const LaneSegmentAggregation& from);
  LaneSegmentAggregation(LaneSegmentAggregation&& from) noexcept
    : LaneSegmentAggregation() {
    *this = ::std::move(from);
  }

  inline LaneSegmentAggregation& operator=(const LaneSegmentAggregation& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneSegmentAggregation& operator=(LaneSegmentAggregation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaneSegmentAggregation& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaneSegmentAggregation* internal_default_instance() {
    return reinterpret_cast<const LaneSegmentAggregation*>(
               &_LaneSegmentAggregation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LaneSegmentAggregation& a, LaneSegmentAggregation& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneSegmentAggregation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaneSegmentAggregation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaneSegmentAggregation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LaneSegmentAggregation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LaneSegmentAggregation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LaneSegmentAggregation& from) {
    LaneSegmentAggregation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneSegmentAggregation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.inference.v1.LaneSegmentAggregation";
  }
  protected:
  explicit LaneSegmentAggregation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LaneSegmentAggregation_Statistics Statistics;

  // accessors -------------------------------------------------------

  enum : int {
    kStatisticsFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kIntervalStartTsFieldNumber = 2,
    kIntervalEndTsFieldNumber = 3,
  };
  // repeated .cavnue.messages.inference.v1.LaneSegmentAggregation.Statistics statistics = 4 [json_name = "statistics"];
  int statistics_size() const;
  private:
  int _internal_statistics_size() const;

  public:
  void clear_statistics() ;
  ::cavnue::messages::inference::v1::LaneSegmentAggregation_Statistics* mutable_statistics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::LaneSegmentAggregation_Statistics >*
      mutable_statistics();
  private:
  const ::cavnue::messages::inference::v1::LaneSegmentAggregation_Statistics& _internal_statistics(int index) const;
  ::cavnue::messages::inference::v1::LaneSegmentAggregation_Statistics* _internal_add_statistics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::LaneSegmentAggregation_Statistics>& _internal_statistics() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::LaneSegmentAggregation_Statistics>* _internal_mutable_statistics();
  public:
  const ::cavnue::messages::inference::v1::LaneSegmentAggregation_Statistics& statistics(int index) const;
  ::cavnue::messages::inference::v1::LaneSegmentAggregation_Statistics* add_statistics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::LaneSegmentAggregation_Statistics >&
      statistics() const;
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  bool has_header() const;
  void clear_header() ;
  const ::cavnue::messages::common::v1::Header& header() const;
  PROTOBUF_NODISCARD ::cavnue::messages::common::v1::Header* release_header();
  ::cavnue::messages::common::v1::Header* mutable_header();
  void set_allocated_header(::cavnue::messages::common::v1::Header* header);
  private:
  const ::cavnue::messages::common::v1::Header& _internal_header() const;
  ::cavnue::messages::common::v1::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::cavnue::messages::common::v1::Header* header);
  ::cavnue::messages::common::v1::Header* unsafe_arena_release_header();
  // .google.protobuf.Timestamp interval_start_ts = 2 [json_name = "intervalStartTs", (.gen_bq_schema.bigquery) = {
  bool has_interval_start_ts() const;
  void clear_interval_start_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& interval_start_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_interval_start_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_interval_start_ts();
  void set_allocated_interval_start_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* interval_start_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_interval_start_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_interval_start_ts();
  public:
  void unsafe_arena_set_allocated_interval_start_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* interval_start_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_interval_start_ts();
  // .google.protobuf.Timestamp interval_end_ts = 3 [json_name = "intervalEndTs", (.gen_bq_schema.bigquery) = {
  bool has_interval_end_ts() const;
  void clear_interval_end_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& interval_end_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_interval_end_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_interval_end_ts();
  void set_allocated_interval_end_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* interval_end_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_interval_end_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_interval_end_ts();
  public:
  void unsafe_arena_set_allocated_interval_end_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* interval_end_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_interval_end_ts();
  // @@protoc_insertion_point(class_scope:cavnue.messages.inference.v1.LaneSegmentAggregation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::LaneSegmentAggregation_Statistics > statistics_;
    ::cavnue::messages::common::v1::Header* header_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* interval_start_ts_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* interval_end_ts_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto;
};// -------------------------------------------------------------------

class RoadSegmentAggregation_Statistics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.inference.v1.RoadSegmentAggregation.Statistics) */ {
 public:
  inline RoadSegmentAggregation_Statistics() : RoadSegmentAggregation_Statistics(nullptr) {}
  ~RoadSegmentAggregation_Statistics() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RoadSegmentAggregation_Statistics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoadSegmentAggregation_Statistics(const RoadSegmentAggregation_Statistics& from);
  RoadSegmentAggregation_Statistics(RoadSegmentAggregation_Statistics&& from) noexcept
    : RoadSegmentAggregation_Statistics() {
    *this = ::std::move(from);
  }

  inline RoadSegmentAggregation_Statistics& operator=(const RoadSegmentAggregation_Statistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoadSegmentAggregation_Statistics& operator=(RoadSegmentAggregation_Statistics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoadSegmentAggregation_Statistics& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoadSegmentAggregation_Statistics* internal_default_instance() {
    return reinterpret_cast<const RoadSegmentAggregation_Statistics*>(
               &_RoadSegmentAggregation_Statistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RoadSegmentAggregation_Statistics& a, RoadSegmentAggregation_Statistics& b) {
    a.Swap(&b);
  }
  inline void Swap(RoadSegmentAggregation_Statistics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoadSegmentAggregation_Statistics* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoadSegmentAggregation_Statistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoadSegmentAggregation_Statistics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoadSegmentAggregation_Statistics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoadSegmentAggregation_Statistics& from) {
    RoadSegmentAggregation_Statistics::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoadSegmentAggregation_Statistics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.inference.v1.RoadSegmentAggregation.Statistics";
  }
  protected:
  explicit RoadSegmentAggregation_Statistics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoadSegmentIdFieldNumber = 1,
    kSpeedMeanFieldNumber = 2,
    kActorsUniqueFieldNumber = 3,
    kDensityFieldNumber = 4,
  };
  // int32 road_segment_id = 1 [json_name = "roadSegmentId"];
  void clear_road_segment_id() ;
  ::int32_t road_segment_id() const;
  void set_road_segment_id(::int32_t value);

  private:
  ::int32_t _internal_road_segment_id() const;
  void _internal_set_road_segment_id(::int32_t value);

  public:
  // float speed_mean = 2 [json_name = "speedMean", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
  void clear_speed_mean() ;
  float speed_mean() const;
  void set_speed_mean(float value);

  private:
  float _internal_speed_mean() const;
  void _internal_set_speed_mean(float value);

  public:
  // uint32 actors_unique = 3 [json_name = "actorsUnique"];
  void clear_actors_unique() ;
  ::uint32_t actors_unique() const;
  void set_actors_unique(::uint32_t value);

  private:
  ::uint32_t _internal_actors_unique() const;
  void _internal_set_actors_unique(::uint32_t value);

  public:
  // float density = 4 [json_name = "density", (.cavnue.messages.common.v1.units) = UNITS_VEHICLES_PER_METER];
  void clear_density() ;
  float density() const;
  void set_density(float value);

  private:
  float _internal_density() const;
  void _internal_set_density(float value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.inference.v1.RoadSegmentAggregation.Statistics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t road_segment_id_;
    float speed_mean_;
    ::uint32_t actors_unique_;
    float density_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto;
};// -------------------------------------------------------------------

class RoadSegmentAggregation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.inference.v1.RoadSegmentAggregation) */ {
 public:
  inline RoadSegmentAggregation() : RoadSegmentAggregation(nullptr) {}
  ~RoadSegmentAggregation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RoadSegmentAggregation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoadSegmentAggregation(const RoadSegmentAggregation& from);
  RoadSegmentAggregation(RoadSegmentAggregation&& from) noexcept
    : RoadSegmentAggregation() {
    *this = ::std::move(from);
  }

  inline RoadSegmentAggregation& operator=(const RoadSegmentAggregation& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoadSegmentAggregation& operator=(RoadSegmentAggregation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoadSegmentAggregation& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoadSegmentAggregation* internal_default_instance() {
    return reinterpret_cast<const RoadSegmentAggregation*>(
               &_RoadSegmentAggregation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RoadSegmentAggregation& a, RoadSegmentAggregation& b) {
    a.Swap(&b);
  }
  inline void Swap(RoadSegmentAggregation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoadSegmentAggregation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoadSegmentAggregation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoadSegmentAggregation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoadSegmentAggregation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoadSegmentAggregation& from) {
    RoadSegmentAggregation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoadSegmentAggregation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.inference.v1.RoadSegmentAggregation";
  }
  protected:
  explicit RoadSegmentAggregation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RoadSegmentAggregation_Statistics Statistics;

  // accessors -------------------------------------------------------

  enum : int {
    kStatisticsFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kIntervalStartTsFieldNumber = 2,
    kIntervalEndTsFieldNumber = 3,
  };
  // repeated .cavnue.messages.inference.v1.RoadSegmentAggregation.Statistics statistics = 4 [json_name = "statistics"];
  int statistics_size() const;
  private:
  int _internal_statistics_size() const;

  public:
  void clear_statistics() ;
  ::cavnue::messages::inference::v1::RoadSegmentAggregation_Statistics* mutable_statistics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::RoadSegmentAggregation_Statistics >*
      mutable_statistics();
  private:
  const ::cavnue::messages::inference::v1::RoadSegmentAggregation_Statistics& _internal_statistics(int index) const;
  ::cavnue::messages::inference::v1::RoadSegmentAggregation_Statistics* _internal_add_statistics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::RoadSegmentAggregation_Statistics>& _internal_statistics() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::RoadSegmentAggregation_Statistics>* _internal_mutable_statistics();
  public:
  const ::cavnue::messages::inference::v1::RoadSegmentAggregation_Statistics& statistics(int index) const;
  ::cavnue::messages::inference::v1::RoadSegmentAggregation_Statistics* add_statistics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::RoadSegmentAggregation_Statistics >&
      statistics() const;
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  bool has_header() const;
  void clear_header() ;
  const ::cavnue::messages::common::v1::Header& header() const;
  PROTOBUF_NODISCARD ::cavnue::messages::common::v1::Header* release_header();
  ::cavnue::messages::common::v1::Header* mutable_header();
  void set_allocated_header(::cavnue::messages::common::v1::Header* header);
  private:
  const ::cavnue::messages::common::v1::Header& _internal_header() const;
  ::cavnue::messages::common::v1::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::cavnue::messages::common::v1::Header* header);
  ::cavnue::messages::common::v1::Header* unsafe_arena_release_header();
  // .google.protobuf.Timestamp interval_start_ts = 2 [json_name = "intervalStartTs", (.gen_bq_schema.bigquery) = {
  bool has_interval_start_ts() const;
  void clear_interval_start_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& interval_start_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_interval_start_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_interval_start_ts();
  void set_allocated_interval_start_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* interval_start_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_interval_start_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_interval_start_ts();
  public:
  void unsafe_arena_set_allocated_interval_start_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* interval_start_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_interval_start_ts();
  // .google.protobuf.Timestamp interval_end_ts = 3 [json_name = "intervalEndTs", (.gen_bq_schema.bigquery) = {
  bool has_interval_end_ts() const;
  void clear_interval_end_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& interval_end_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_interval_end_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_interval_end_ts();
  void set_allocated_interval_end_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* interval_end_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_interval_end_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_interval_end_ts();
  public:
  void unsafe_arena_set_allocated_interval_end_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* interval_end_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_interval_end_ts();
  // @@protoc_insertion_point(class_scope:cavnue.messages.inference.v1.RoadSegmentAggregation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::RoadSegmentAggregation_Statistics > statistics_;
    ::cavnue::messages::common::v1::Header* header_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* interval_start_ts_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* interval_end_ts_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto;
};// -------------------------------------------------------------------

class AverageTrafficCalculation_Statistics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.inference.v1.AverageTrafficCalculation.Statistics) */ {
 public:
  inline AverageTrafficCalculation_Statistics() : AverageTrafficCalculation_Statistics(nullptr) {}
  ~AverageTrafficCalculation_Statistics() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AverageTrafficCalculation_Statistics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AverageTrafficCalculation_Statistics(const AverageTrafficCalculation_Statistics& from);
  AverageTrafficCalculation_Statistics(AverageTrafficCalculation_Statistics&& from) noexcept
    : AverageTrafficCalculation_Statistics() {
    *this = ::std::move(from);
  }

  inline AverageTrafficCalculation_Statistics& operator=(const AverageTrafficCalculation_Statistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline AverageTrafficCalculation_Statistics& operator=(AverageTrafficCalculation_Statistics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AverageTrafficCalculation_Statistics& default_instance() {
    return *internal_default_instance();
  }
  static inline const AverageTrafficCalculation_Statistics* internal_default_instance() {
    return reinterpret_cast<const AverageTrafficCalculation_Statistics*>(
               &_AverageTrafficCalculation_Statistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AverageTrafficCalculation_Statistics& a, AverageTrafficCalculation_Statistics& b) {
    a.Swap(&b);
  }
  inline void Swap(AverageTrafficCalculation_Statistics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AverageTrafficCalculation_Statistics* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AverageTrafficCalculation_Statistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AverageTrafficCalculation_Statistics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AverageTrafficCalculation_Statistics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AverageTrafficCalculation_Statistics& from) {
    AverageTrafficCalculation_Statistics::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AverageTrafficCalculation_Statistics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.inference.v1.AverageTrafficCalculation.Statistics";
  }
  protected:
  explicit AverageTrafficCalculation_Statistics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoadSegmentIdFieldNumber = 1,
    kAverageActorsUniqueFieldNumber = 2,
  };
  // int32 road_segment_id = 1 [json_name = "roadSegmentId"];
  void clear_road_segment_id() ;
  ::int32_t road_segment_id() const;
  void set_road_segment_id(::int32_t value);

  private:
  ::int32_t _internal_road_segment_id() const;
  void _internal_set_road_segment_id(::int32_t value);

  public:
  // float average_actors_unique = 2 [json_name = "averageActorsUnique"];
  void clear_average_actors_unique() ;
  float average_actors_unique() const;
  void set_average_actors_unique(float value);

  private:
  float _internal_average_actors_unique() const;
  void _internal_set_average_actors_unique(float value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.inference.v1.AverageTrafficCalculation.Statistics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t road_segment_id_;
    float average_actors_unique_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto;
};// -------------------------------------------------------------------

class AverageTrafficCalculation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.inference.v1.AverageTrafficCalculation) */ {
 public:
  inline AverageTrafficCalculation() : AverageTrafficCalculation(nullptr) {}
  ~AverageTrafficCalculation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AverageTrafficCalculation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AverageTrafficCalculation(const AverageTrafficCalculation& from);
  AverageTrafficCalculation(AverageTrafficCalculation&& from) noexcept
    : AverageTrafficCalculation() {
    *this = ::std::move(from);
  }

  inline AverageTrafficCalculation& operator=(const AverageTrafficCalculation& from) {
    CopyFrom(from);
    return *this;
  }
  inline AverageTrafficCalculation& operator=(AverageTrafficCalculation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AverageTrafficCalculation& default_instance() {
    return *internal_default_instance();
  }
  static inline const AverageTrafficCalculation* internal_default_instance() {
    return reinterpret_cast<const AverageTrafficCalculation*>(
               &_AverageTrafficCalculation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AverageTrafficCalculation& a, AverageTrafficCalculation& b) {
    a.Swap(&b);
  }
  inline void Swap(AverageTrafficCalculation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AverageTrafficCalculation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AverageTrafficCalculation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AverageTrafficCalculation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AverageTrafficCalculation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AverageTrafficCalculation& from) {
    AverageTrafficCalculation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AverageTrafficCalculation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.inference.v1.AverageTrafficCalculation";
  }
  protected:
  explicit AverageTrafficCalculation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AverageTrafficCalculation_Statistics Statistics;

  // accessors -------------------------------------------------------

  enum : int {
    kStatisticsFieldNumber = 4,
    kIntervalStartTsFieldNumber = 2,
    kIntervalEndTsFieldNumber = 3,
  };
  // repeated .cavnue.messages.inference.v1.AverageTrafficCalculation.Statistics statistics = 4 [json_name = "statistics"];
  int statistics_size() const;
  private:
  int _internal_statistics_size() const;

  public:
  void clear_statistics() ;
  ::cavnue::messages::inference::v1::AverageTrafficCalculation_Statistics* mutable_statistics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::AverageTrafficCalculation_Statistics >*
      mutable_statistics();
  private:
  const ::cavnue::messages::inference::v1::AverageTrafficCalculation_Statistics& _internal_statistics(int index) const;
  ::cavnue::messages::inference::v1::AverageTrafficCalculation_Statistics* _internal_add_statistics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::AverageTrafficCalculation_Statistics>& _internal_statistics() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::AverageTrafficCalculation_Statistics>* _internal_mutable_statistics();
  public:
  const ::cavnue::messages::inference::v1::AverageTrafficCalculation_Statistics& statistics(int index) const;
  ::cavnue::messages::inference::v1::AverageTrafficCalculation_Statistics* add_statistics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::AverageTrafficCalculation_Statistics >&
      statistics() const;
  // optional .google.protobuf.Timestamp interval_start_ts = 2 [json_name = "intervalStartTs", (.gen_bq_schema.bigquery) = {
  bool has_interval_start_ts() const;
  void clear_interval_start_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& interval_start_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_interval_start_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_interval_start_ts();
  void set_allocated_interval_start_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* interval_start_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_interval_start_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_interval_start_ts();
  public:
  void unsafe_arena_set_allocated_interval_start_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* interval_start_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_interval_start_ts();
  // optional .google.protobuf.Timestamp interval_end_ts = 3 [json_name = "intervalEndTs", (.gen_bq_schema.bigquery) = {
  bool has_interval_end_ts() const;
  void clear_interval_end_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& interval_end_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_interval_end_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_interval_end_ts();
  void set_allocated_interval_end_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* interval_end_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_interval_end_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_interval_end_ts();
  public:
  void unsafe_arena_set_allocated_interval_end_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* interval_end_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_interval_end_ts();
  // @@protoc_insertion_point(class_scope:cavnue.messages.inference.v1.AverageTrafficCalculation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::AverageTrafficCalculation_Statistics > statistics_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* interval_start_ts_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* interval_end_ts_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto;
};// -------------------------------------------------------------------

class AnnualAverageDailyTrafficCalculation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.inference.v1.AnnualAverageDailyTrafficCalculation) */ {
 public:
  inline AnnualAverageDailyTrafficCalculation() : AnnualAverageDailyTrafficCalculation(nullptr) {}
  ~AnnualAverageDailyTrafficCalculation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AnnualAverageDailyTrafficCalculation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnnualAverageDailyTrafficCalculation(const AnnualAverageDailyTrafficCalculation& from);
  AnnualAverageDailyTrafficCalculation(AnnualAverageDailyTrafficCalculation&& from) noexcept
    : AnnualAverageDailyTrafficCalculation() {
    *this = ::std::move(from);
  }

  inline AnnualAverageDailyTrafficCalculation& operator=(const AnnualAverageDailyTrafficCalculation& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnnualAverageDailyTrafficCalculation& operator=(AnnualAverageDailyTrafficCalculation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnnualAverageDailyTrafficCalculation& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnnualAverageDailyTrafficCalculation* internal_default_instance() {
    return reinterpret_cast<const AnnualAverageDailyTrafficCalculation*>(
               &_AnnualAverageDailyTrafficCalculation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AnnualAverageDailyTrafficCalculation& a, AnnualAverageDailyTrafficCalculation& b) {
    a.Swap(&b);
  }
  inline void Swap(AnnualAverageDailyTrafficCalculation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnnualAverageDailyTrafficCalculation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnnualAverageDailyTrafficCalculation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnnualAverageDailyTrafficCalculation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnnualAverageDailyTrafficCalculation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AnnualAverageDailyTrafficCalculation& from) {
    AnnualAverageDailyTrafficCalculation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnnualAverageDailyTrafficCalculation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.inference.v1.AnnualAverageDailyTrafficCalculation";
  }
  protected:
  explicit AnnualAverageDailyTrafficCalculation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kAverageTrafficCalculationFieldNumber = 2,
  };
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  bool has_header() const;
  void clear_header() ;
  const ::cavnue::messages::common::v1::Header& header() const;
  PROTOBUF_NODISCARD ::cavnue::messages::common::v1::Header* release_header();
  ::cavnue::messages::common::v1::Header* mutable_header();
  void set_allocated_header(::cavnue::messages::common::v1::Header* header);
  private:
  const ::cavnue::messages::common::v1::Header& _internal_header() const;
  ::cavnue::messages::common::v1::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::cavnue::messages::common::v1::Header* header);
  ::cavnue::messages::common::v1::Header* unsafe_arena_release_header();
  // .cavnue.messages.inference.v1.AverageTrafficCalculation average_traffic_calculation = 2 [json_name = "averageTrafficCalculation"];
  bool has_average_traffic_calculation() const;
  void clear_average_traffic_calculation() ;
  const ::cavnue::messages::inference::v1::AverageTrafficCalculation& average_traffic_calculation() const;
  PROTOBUF_NODISCARD ::cavnue::messages::inference::v1::AverageTrafficCalculation* release_average_traffic_calculation();
  ::cavnue::messages::inference::v1::AverageTrafficCalculation* mutable_average_traffic_calculation();
  void set_allocated_average_traffic_calculation(::cavnue::messages::inference::v1::AverageTrafficCalculation* average_traffic_calculation);
  private:
  const ::cavnue::messages::inference::v1::AverageTrafficCalculation& _internal_average_traffic_calculation() const;
  ::cavnue::messages::inference::v1::AverageTrafficCalculation* _internal_mutable_average_traffic_calculation();
  public:
  void unsafe_arena_set_allocated_average_traffic_calculation(
      ::cavnue::messages::inference::v1::AverageTrafficCalculation* average_traffic_calculation);
  ::cavnue::messages::inference::v1::AverageTrafficCalculation* unsafe_arena_release_average_traffic_calculation();
  // @@protoc_insertion_point(class_scope:cavnue.messages.inference.v1.AnnualAverageDailyTrafficCalculation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::common::v1::Header* header_;
    ::cavnue::messages::inference::v1::AverageTrafficCalculation* average_traffic_calculation_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto;
};// -------------------------------------------------------------------

class MonthlyAverageDailyTrafficCalculation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.inference.v1.MonthlyAverageDailyTrafficCalculation) */ {
 public:
  inline MonthlyAverageDailyTrafficCalculation() : MonthlyAverageDailyTrafficCalculation(nullptr) {}
  ~MonthlyAverageDailyTrafficCalculation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MonthlyAverageDailyTrafficCalculation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonthlyAverageDailyTrafficCalculation(const MonthlyAverageDailyTrafficCalculation& from);
  MonthlyAverageDailyTrafficCalculation(MonthlyAverageDailyTrafficCalculation&& from) noexcept
    : MonthlyAverageDailyTrafficCalculation() {
    *this = ::std::move(from);
  }

  inline MonthlyAverageDailyTrafficCalculation& operator=(const MonthlyAverageDailyTrafficCalculation& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonthlyAverageDailyTrafficCalculation& operator=(MonthlyAverageDailyTrafficCalculation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonthlyAverageDailyTrafficCalculation& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonthlyAverageDailyTrafficCalculation* internal_default_instance() {
    return reinterpret_cast<const MonthlyAverageDailyTrafficCalculation*>(
               &_MonthlyAverageDailyTrafficCalculation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MonthlyAverageDailyTrafficCalculation& a, MonthlyAverageDailyTrafficCalculation& b) {
    a.Swap(&b);
  }
  inline void Swap(MonthlyAverageDailyTrafficCalculation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonthlyAverageDailyTrafficCalculation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MonthlyAverageDailyTrafficCalculation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MonthlyAverageDailyTrafficCalculation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MonthlyAverageDailyTrafficCalculation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MonthlyAverageDailyTrafficCalculation& from) {
    MonthlyAverageDailyTrafficCalculation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonthlyAverageDailyTrafficCalculation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.inference.v1.MonthlyAverageDailyTrafficCalculation";
  }
  protected:
  explicit MonthlyAverageDailyTrafficCalculation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kAverageTrafficCalculationFieldNumber = 4,
    kMonthFieldNumber = 2,
    kYearFieldNumber = 3,
  };
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  bool has_header() const;
  void clear_header() ;
  const ::cavnue::messages::common::v1::Header& header() const;
  PROTOBUF_NODISCARD ::cavnue::messages::common::v1::Header* release_header();
  ::cavnue::messages::common::v1::Header* mutable_header();
  void set_allocated_header(::cavnue::messages::common::v1::Header* header);
  private:
  const ::cavnue::messages::common::v1::Header& _internal_header() const;
  ::cavnue::messages::common::v1::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::cavnue::messages::common::v1::Header* header);
  ::cavnue::messages::common::v1::Header* unsafe_arena_release_header();
  // .cavnue.messages.inference.v1.AverageTrafficCalculation average_traffic_calculation = 4 [json_name = "averageTrafficCalculation"];
  bool has_average_traffic_calculation() const;
  void clear_average_traffic_calculation() ;
  const ::cavnue::messages::inference::v1::AverageTrafficCalculation& average_traffic_calculation() const;
  PROTOBUF_NODISCARD ::cavnue::messages::inference::v1::AverageTrafficCalculation* release_average_traffic_calculation();
  ::cavnue::messages::inference::v1::AverageTrafficCalculation* mutable_average_traffic_calculation();
  void set_allocated_average_traffic_calculation(::cavnue::messages::inference::v1::AverageTrafficCalculation* average_traffic_calculation);
  private:
  const ::cavnue::messages::inference::v1::AverageTrafficCalculation& _internal_average_traffic_calculation() const;
  ::cavnue::messages::inference::v1::AverageTrafficCalculation* _internal_mutable_average_traffic_calculation();
  public:
  void unsafe_arena_set_allocated_average_traffic_calculation(
      ::cavnue::messages::inference::v1::AverageTrafficCalculation* average_traffic_calculation);
  ::cavnue::messages::inference::v1::AverageTrafficCalculation* unsafe_arena_release_average_traffic_calculation();
  // int32 month = 2 [json_name = "month"];
  void clear_month() ;
  ::int32_t month() const;
  void set_month(::int32_t value);

  private:
  ::int32_t _internal_month() const;
  void _internal_set_month(::int32_t value);

  public:
  // int32 year = 3 [json_name = "year"];
  void clear_year() ;
  ::int32_t year() const;
  void set_year(::int32_t value);

  private:
  ::int32_t _internal_year() const;
  void _internal_set_year(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.inference.v1.MonthlyAverageDailyTrafficCalculation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::common::v1::Header* header_;
    ::cavnue::messages::inference::v1::AverageTrafficCalculation* average_traffic_calculation_;
    ::int32_t month_;
    ::int32_t year_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LaneSegmentAggregation_Statistics

// int64 lane_segment_id = 1 [json_name = "laneSegmentId"];
inline void LaneSegmentAggregation_Statistics::clear_lane_segment_id() {
  _impl_.lane_segment_id_ = ::int64_t{0};
}
inline ::int64_t LaneSegmentAggregation_Statistics::lane_segment_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.LaneSegmentAggregation.Statistics.lane_segment_id)
  return _internal_lane_segment_id();
}
inline void LaneSegmentAggregation_Statistics::set_lane_segment_id(::int64_t value) {
  _internal_set_lane_segment_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.LaneSegmentAggregation.Statistics.lane_segment_id)
}
inline ::int64_t LaneSegmentAggregation_Statistics::_internal_lane_segment_id() const {
  return _impl_.lane_segment_id_;
}
inline void LaneSegmentAggregation_Statistics::_internal_set_lane_segment_id(::int64_t value) {
  ;
  _impl_.lane_segment_id_ = value;
}

// float speed_mean = 2 [json_name = "speedMean", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
inline void LaneSegmentAggregation_Statistics::clear_speed_mean() {
  _impl_.speed_mean_ = 0;
}
inline float LaneSegmentAggregation_Statistics::speed_mean() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.LaneSegmentAggregation.Statistics.speed_mean)
  return _internal_speed_mean();
}
inline void LaneSegmentAggregation_Statistics::set_speed_mean(float value) {
  _internal_set_speed_mean(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.LaneSegmentAggregation.Statistics.speed_mean)
}
inline float LaneSegmentAggregation_Statistics::_internal_speed_mean() const {
  return _impl_.speed_mean_;
}
inline void LaneSegmentAggregation_Statistics::_internal_set_speed_mean(float value) {
  ;
  _impl_.speed_mean_ = value;
}

// uint32 actors_unique = 3 [json_name = "actorsUnique"];
inline void LaneSegmentAggregation_Statistics::clear_actors_unique() {
  _impl_.actors_unique_ = 0u;
}
inline ::uint32_t LaneSegmentAggregation_Statistics::actors_unique() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.LaneSegmentAggregation.Statistics.actors_unique)
  return _internal_actors_unique();
}
inline void LaneSegmentAggregation_Statistics::set_actors_unique(::uint32_t value) {
  _internal_set_actors_unique(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.LaneSegmentAggregation.Statistics.actors_unique)
}
inline ::uint32_t LaneSegmentAggregation_Statistics::_internal_actors_unique() const {
  return _impl_.actors_unique_;
}
inline void LaneSegmentAggregation_Statistics::_internal_set_actors_unique(::uint32_t value) {
  ;
  _impl_.actors_unique_ = value;
}

// float density = 4 [json_name = "density", (.cavnue.messages.common.v1.units) = UNITS_VEHICLES_PER_METER];
inline void LaneSegmentAggregation_Statistics::clear_density() {
  _impl_.density_ = 0;
}
inline float LaneSegmentAggregation_Statistics::density() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.LaneSegmentAggregation.Statistics.density)
  return _internal_density();
}
inline void LaneSegmentAggregation_Statistics::set_density(float value) {
  _internal_set_density(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.LaneSegmentAggregation.Statistics.density)
}
inline float LaneSegmentAggregation_Statistics::_internal_density() const {
  return _impl_.density_;
}
inline void LaneSegmentAggregation_Statistics::_internal_set_density(float value) {
  ;
  _impl_.density_ = value;
}

// -------------------------------------------------------------------

// LaneSegmentAggregation

// .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
inline bool LaneSegmentAggregation::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::cavnue::messages::common::v1::Header& LaneSegmentAggregation::_internal_header() const {
  const ::cavnue::messages::common::v1::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::common::v1::Header&>(
      ::cavnue::messages::common::v1::_Header_default_instance_);
}
inline const ::cavnue::messages::common::v1::Header& LaneSegmentAggregation::header() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.LaneSegmentAggregation.header)
  return _internal_header();
}
inline void LaneSegmentAggregation::unsafe_arena_set_allocated_header(
    ::cavnue::messages::common::v1::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.LaneSegmentAggregation.header)
}
inline ::cavnue::messages::common::v1::Header* LaneSegmentAggregation::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::common::v1::Header* LaneSegmentAggregation::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.LaneSegmentAggregation.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::cavnue::messages::common::v1::Header* LaneSegmentAggregation::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::common::v1::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::cavnue::messages::common::v1::Header* LaneSegmentAggregation::mutable_header() {
  ::cavnue::messages::common::v1::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.LaneSegmentAggregation.header)
  return _msg;
}
inline void LaneSegmentAggregation::set_allocated_header(::cavnue::messages::common::v1::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.LaneSegmentAggregation.header)
}

// .google.protobuf.Timestamp interval_start_ts = 2 [json_name = "intervalStartTs", (.gen_bq_schema.bigquery) = {
inline bool LaneSegmentAggregation::has_interval_start_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.interval_start_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LaneSegmentAggregation::_internal_interval_start_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.interval_start_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LaneSegmentAggregation::interval_start_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.LaneSegmentAggregation.interval_start_ts)
  return _internal_interval_start_ts();
}
inline void LaneSegmentAggregation::unsafe_arena_set_allocated_interval_start_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* interval_start_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_start_ts_);
  }
  _impl_.interval_start_ts_ = interval_start_ts;
  if (interval_start_ts) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.LaneSegmentAggregation.interval_start_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LaneSegmentAggregation::release_interval_start_ts() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.interval_start_ts_;
  _impl_.interval_start_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LaneSegmentAggregation::unsafe_arena_release_interval_start_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.LaneSegmentAggregation.interval_start_ts)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.interval_start_ts_;
  _impl_.interval_start_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LaneSegmentAggregation::_internal_mutable_interval_start_ts() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.interval_start_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.interval_start_ts_ = p;
  }
  return _impl_.interval_start_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LaneSegmentAggregation::mutable_interval_start_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_interval_start_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.LaneSegmentAggregation.interval_start_ts)
  return _msg;
}
inline void LaneSegmentAggregation::set_allocated_interval_start_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* interval_start_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_start_ts_);
  }
  if (interval_start_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval_start_ts));
    if (message_arena != submessage_arena) {
      interval_start_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval_start_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.interval_start_ts_ = interval_start_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.LaneSegmentAggregation.interval_start_ts)
}

// .google.protobuf.Timestamp interval_end_ts = 3 [json_name = "intervalEndTs", (.gen_bq_schema.bigquery) = {
inline bool LaneSegmentAggregation::has_interval_end_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.interval_end_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LaneSegmentAggregation::_internal_interval_end_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.interval_end_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LaneSegmentAggregation::interval_end_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.LaneSegmentAggregation.interval_end_ts)
  return _internal_interval_end_ts();
}
inline void LaneSegmentAggregation::unsafe_arena_set_allocated_interval_end_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* interval_end_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_end_ts_);
  }
  _impl_.interval_end_ts_ = interval_end_ts;
  if (interval_end_ts) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.LaneSegmentAggregation.interval_end_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LaneSegmentAggregation::release_interval_end_ts() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.interval_end_ts_;
  _impl_.interval_end_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LaneSegmentAggregation::unsafe_arena_release_interval_end_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.LaneSegmentAggregation.interval_end_ts)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.interval_end_ts_;
  _impl_.interval_end_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LaneSegmentAggregation::_internal_mutable_interval_end_ts() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.interval_end_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.interval_end_ts_ = p;
  }
  return _impl_.interval_end_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LaneSegmentAggregation::mutable_interval_end_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_interval_end_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.LaneSegmentAggregation.interval_end_ts)
  return _msg;
}
inline void LaneSegmentAggregation::set_allocated_interval_end_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* interval_end_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_end_ts_);
  }
  if (interval_end_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval_end_ts));
    if (message_arena != submessage_arena) {
      interval_end_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval_end_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.interval_end_ts_ = interval_end_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.LaneSegmentAggregation.interval_end_ts)
}

// repeated .cavnue.messages.inference.v1.LaneSegmentAggregation.Statistics statistics = 4 [json_name = "statistics"];
inline int LaneSegmentAggregation::_internal_statistics_size() const {
  return _impl_.statistics_.size();
}
inline int LaneSegmentAggregation::statistics_size() const {
  return _internal_statistics_size();
}
inline void LaneSegmentAggregation::clear_statistics() {
  _internal_mutable_statistics()->Clear();
}
inline ::cavnue::messages::inference::v1::LaneSegmentAggregation_Statistics* LaneSegmentAggregation::mutable_statistics(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.LaneSegmentAggregation.statistics)
  return _internal_mutable_statistics()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::LaneSegmentAggregation_Statistics >*
LaneSegmentAggregation::mutable_statistics() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.inference.v1.LaneSegmentAggregation.statistics)
  return _internal_mutable_statistics();
}
inline const ::cavnue::messages::inference::v1::LaneSegmentAggregation_Statistics& LaneSegmentAggregation::_internal_statistics(int index) const {
  return _internal_statistics().Get(index);
}
inline const ::cavnue::messages::inference::v1::LaneSegmentAggregation_Statistics& LaneSegmentAggregation::statistics(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.LaneSegmentAggregation.statistics)
  return _internal_statistics(index);
}
inline ::cavnue::messages::inference::v1::LaneSegmentAggregation_Statistics* LaneSegmentAggregation::_internal_add_statistics() {
  return _internal_mutable_statistics()->Add();
}
inline ::cavnue::messages::inference::v1::LaneSegmentAggregation_Statistics* LaneSegmentAggregation::add_statistics() {
  ::cavnue::messages::inference::v1::LaneSegmentAggregation_Statistics* _add = _internal_add_statistics();
  // @@protoc_insertion_point(field_add:cavnue.messages.inference.v1.LaneSegmentAggregation.statistics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::LaneSegmentAggregation_Statistics >&
LaneSegmentAggregation::statistics() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.inference.v1.LaneSegmentAggregation.statistics)
  return _internal_statistics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::LaneSegmentAggregation_Statistics>&
LaneSegmentAggregation::_internal_statistics() const {
  return _impl_.statistics_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::LaneSegmentAggregation_Statistics>*
LaneSegmentAggregation::_internal_mutable_statistics() {
  return &_impl_.statistics_;
}

// -------------------------------------------------------------------

// RoadSegmentAggregation_Statistics

// int32 road_segment_id = 1 [json_name = "roadSegmentId"];
inline void RoadSegmentAggregation_Statistics::clear_road_segment_id() {
  _impl_.road_segment_id_ = 0;
}
inline ::int32_t RoadSegmentAggregation_Statistics::road_segment_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.RoadSegmentAggregation.Statistics.road_segment_id)
  return _internal_road_segment_id();
}
inline void RoadSegmentAggregation_Statistics::set_road_segment_id(::int32_t value) {
  _internal_set_road_segment_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.RoadSegmentAggregation.Statistics.road_segment_id)
}
inline ::int32_t RoadSegmentAggregation_Statistics::_internal_road_segment_id() const {
  return _impl_.road_segment_id_;
}
inline void RoadSegmentAggregation_Statistics::_internal_set_road_segment_id(::int32_t value) {
  ;
  _impl_.road_segment_id_ = value;
}

// float speed_mean = 2 [json_name = "speedMean", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
inline void RoadSegmentAggregation_Statistics::clear_speed_mean() {
  _impl_.speed_mean_ = 0;
}
inline float RoadSegmentAggregation_Statistics::speed_mean() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.RoadSegmentAggregation.Statistics.speed_mean)
  return _internal_speed_mean();
}
inline void RoadSegmentAggregation_Statistics::set_speed_mean(float value) {
  _internal_set_speed_mean(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.RoadSegmentAggregation.Statistics.speed_mean)
}
inline float RoadSegmentAggregation_Statistics::_internal_speed_mean() const {
  return _impl_.speed_mean_;
}
inline void RoadSegmentAggregation_Statistics::_internal_set_speed_mean(float value) {
  ;
  _impl_.speed_mean_ = value;
}

// uint32 actors_unique = 3 [json_name = "actorsUnique"];
inline void RoadSegmentAggregation_Statistics::clear_actors_unique() {
  _impl_.actors_unique_ = 0u;
}
inline ::uint32_t RoadSegmentAggregation_Statistics::actors_unique() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.RoadSegmentAggregation.Statistics.actors_unique)
  return _internal_actors_unique();
}
inline void RoadSegmentAggregation_Statistics::set_actors_unique(::uint32_t value) {
  _internal_set_actors_unique(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.RoadSegmentAggregation.Statistics.actors_unique)
}
inline ::uint32_t RoadSegmentAggregation_Statistics::_internal_actors_unique() const {
  return _impl_.actors_unique_;
}
inline void RoadSegmentAggregation_Statistics::_internal_set_actors_unique(::uint32_t value) {
  ;
  _impl_.actors_unique_ = value;
}

// float density = 4 [json_name = "density", (.cavnue.messages.common.v1.units) = UNITS_VEHICLES_PER_METER];
inline void RoadSegmentAggregation_Statistics::clear_density() {
  _impl_.density_ = 0;
}
inline float RoadSegmentAggregation_Statistics::density() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.RoadSegmentAggregation.Statistics.density)
  return _internal_density();
}
inline void RoadSegmentAggregation_Statistics::set_density(float value) {
  _internal_set_density(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.RoadSegmentAggregation.Statistics.density)
}
inline float RoadSegmentAggregation_Statistics::_internal_density() const {
  return _impl_.density_;
}
inline void RoadSegmentAggregation_Statistics::_internal_set_density(float value) {
  ;
  _impl_.density_ = value;
}

// -------------------------------------------------------------------

// RoadSegmentAggregation

// .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
inline bool RoadSegmentAggregation::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::cavnue::messages::common::v1::Header& RoadSegmentAggregation::_internal_header() const {
  const ::cavnue::messages::common::v1::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::common::v1::Header&>(
      ::cavnue::messages::common::v1::_Header_default_instance_);
}
inline const ::cavnue::messages::common::v1::Header& RoadSegmentAggregation::header() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.RoadSegmentAggregation.header)
  return _internal_header();
}
inline void RoadSegmentAggregation::unsafe_arena_set_allocated_header(
    ::cavnue::messages::common::v1::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.RoadSegmentAggregation.header)
}
inline ::cavnue::messages::common::v1::Header* RoadSegmentAggregation::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::common::v1::Header* RoadSegmentAggregation::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.RoadSegmentAggregation.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::cavnue::messages::common::v1::Header* RoadSegmentAggregation::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::common::v1::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::cavnue::messages::common::v1::Header* RoadSegmentAggregation::mutable_header() {
  ::cavnue::messages::common::v1::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.RoadSegmentAggregation.header)
  return _msg;
}
inline void RoadSegmentAggregation::set_allocated_header(::cavnue::messages::common::v1::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.RoadSegmentAggregation.header)
}

// .google.protobuf.Timestamp interval_start_ts = 2 [json_name = "intervalStartTs", (.gen_bq_schema.bigquery) = {
inline bool RoadSegmentAggregation::has_interval_start_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.interval_start_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& RoadSegmentAggregation::_internal_interval_start_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.interval_start_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& RoadSegmentAggregation::interval_start_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.RoadSegmentAggregation.interval_start_ts)
  return _internal_interval_start_ts();
}
inline void RoadSegmentAggregation::unsafe_arena_set_allocated_interval_start_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* interval_start_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_start_ts_);
  }
  _impl_.interval_start_ts_ = interval_start_ts;
  if (interval_start_ts) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.RoadSegmentAggregation.interval_start_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RoadSegmentAggregation::release_interval_start_ts() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.interval_start_ts_;
  _impl_.interval_start_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RoadSegmentAggregation::unsafe_arena_release_interval_start_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.RoadSegmentAggregation.interval_start_ts)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.interval_start_ts_;
  _impl_.interval_start_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RoadSegmentAggregation::_internal_mutable_interval_start_ts() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.interval_start_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.interval_start_ts_ = p;
  }
  return _impl_.interval_start_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RoadSegmentAggregation::mutable_interval_start_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_interval_start_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.RoadSegmentAggregation.interval_start_ts)
  return _msg;
}
inline void RoadSegmentAggregation::set_allocated_interval_start_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* interval_start_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_start_ts_);
  }
  if (interval_start_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval_start_ts));
    if (message_arena != submessage_arena) {
      interval_start_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval_start_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.interval_start_ts_ = interval_start_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.RoadSegmentAggregation.interval_start_ts)
}

// .google.protobuf.Timestamp interval_end_ts = 3 [json_name = "intervalEndTs", (.gen_bq_schema.bigquery) = {
inline bool RoadSegmentAggregation::has_interval_end_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.interval_end_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& RoadSegmentAggregation::_internal_interval_end_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.interval_end_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& RoadSegmentAggregation::interval_end_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.RoadSegmentAggregation.interval_end_ts)
  return _internal_interval_end_ts();
}
inline void RoadSegmentAggregation::unsafe_arena_set_allocated_interval_end_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* interval_end_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_end_ts_);
  }
  _impl_.interval_end_ts_ = interval_end_ts;
  if (interval_end_ts) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.RoadSegmentAggregation.interval_end_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RoadSegmentAggregation::release_interval_end_ts() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.interval_end_ts_;
  _impl_.interval_end_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RoadSegmentAggregation::unsafe_arena_release_interval_end_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.RoadSegmentAggregation.interval_end_ts)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.interval_end_ts_;
  _impl_.interval_end_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RoadSegmentAggregation::_internal_mutable_interval_end_ts() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.interval_end_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.interval_end_ts_ = p;
  }
  return _impl_.interval_end_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RoadSegmentAggregation::mutable_interval_end_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_interval_end_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.RoadSegmentAggregation.interval_end_ts)
  return _msg;
}
inline void RoadSegmentAggregation::set_allocated_interval_end_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* interval_end_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_end_ts_);
  }
  if (interval_end_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval_end_ts));
    if (message_arena != submessage_arena) {
      interval_end_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval_end_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.interval_end_ts_ = interval_end_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.RoadSegmentAggregation.interval_end_ts)
}

// repeated .cavnue.messages.inference.v1.RoadSegmentAggregation.Statistics statistics = 4 [json_name = "statistics"];
inline int RoadSegmentAggregation::_internal_statistics_size() const {
  return _impl_.statistics_.size();
}
inline int RoadSegmentAggregation::statistics_size() const {
  return _internal_statistics_size();
}
inline void RoadSegmentAggregation::clear_statistics() {
  _internal_mutable_statistics()->Clear();
}
inline ::cavnue::messages::inference::v1::RoadSegmentAggregation_Statistics* RoadSegmentAggregation::mutable_statistics(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.RoadSegmentAggregation.statistics)
  return _internal_mutable_statistics()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::RoadSegmentAggregation_Statistics >*
RoadSegmentAggregation::mutable_statistics() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.inference.v1.RoadSegmentAggregation.statistics)
  return _internal_mutable_statistics();
}
inline const ::cavnue::messages::inference::v1::RoadSegmentAggregation_Statistics& RoadSegmentAggregation::_internal_statistics(int index) const {
  return _internal_statistics().Get(index);
}
inline const ::cavnue::messages::inference::v1::RoadSegmentAggregation_Statistics& RoadSegmentAggregation::statistics(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.RoadSegmentAggregation.statistics)
  return _internal_statistics(index);
}
inline ::cavnue::messages::inference::v1::RoadSegmentAggregation_Statistics* RoadSegmentAggregation::_internal_add_statistics() {
  return _internal_mutable_statistics()->Add();
}
inline ::cavnue::messages::inference::v1::RoadSegmentAggregation_Statistics* RoadSegmentAggregation::add_statistics() {
  ::cavnue::messages::inference::v1::RoadSegmentAggregation_Statistics* _add = _internal_add_statistics();
  // @@protoc_insertion_point(field_add:cavnue.messages.inference.v1.RoadSegmentAggregation.statistics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::RoadSegmentAggregation_Statistics >&
RoadSegmentAggregation::statistics() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.inference.v1.RoadSegmentAggregation.statistics)
  return _internal_statistics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::RoadSegmentAggregation_Statistics>&
RoadSegmentAggregation::_internal_statistics() const {
  return _impl_.statistics_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::RoadSegmentAggregation_Statistics>*
RoadSegmentAggregation::_internal_mutable_statistics() {
  return &_impl_.statistics_;
}

// -------------------------------------------------------------------

// AverageTrafficCalculation_Statistics

// int32 road_segment_id = 1 [json_name = "roadSegmentId"];
inline void AverageTrafficCalculation_Statistics::clear_road_segment_id() {
  _impl_.road_segment_id_ = 0;
}
inline ::int32_t AverageTrafficCalculation_Statistics::road_segment_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.AverageTrafficCalculation.Statistics.road_segment_id)
  return _internal_road_segment_id();
}
inline void AverageTrafficCalculation_Statistics::set_road_segment_id(::int32_t value) {
  _internal_set_road_segment_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.AverageTrafficCalculation.Statistics.road_segment_id)
}
inline ::int32_t AverageTrafficCalculation_Statistics::_internal_road_segment_id() const {
  return _impl_.road_segment_id_;
}
inline void AverageTrafficCalculation_Statistics::_internal_set_road_segment_id(::int32_t value) {
  ;
  _impl_.road_segment_id_ = value;
}

// float average_actors_unique = 2 [json_name = "averageActorsUnique"];
inline void AverageTrafficCalculation_Statistics::clear_average_actors_unique() {
  _impl_.average_actors_unique_ = 0;
}
inline float AverageTrafficCalculation_Statistics::average_actors_unique() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.AverageTrafficCalculation.Statistics.average_actors_unique)
  return _internal_average_actors_unique();
}
inline void AverageTrafficCalculation_Statistics::set_average_actors_unique(float value) {
  _internal_set_average_actors_unique(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.AverageTrafficCalculation.Statistics.average_actors_unique)
}
inline float AverageTrafficCalculation_Statistics::_internal_average_actors_unique() const {
  return _impl_.average_actors_unique_;
}
inline void AverageTrafficCalculation_Statistics::_internal_set_average_actors_unique(float value) {
  ;
  _impl_.average_actors_unique_ = value;
}

// -------------------------------------------------------------------

// AverageTrafficCalculation

// optional .google.protobuf.Timestamp interval_start_ts = 2 [json_name = "intervalStartTs", (.gen_bq_schema.bigquery) = {
inline bool AverageTrafficCalculation::has_interval_start_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.interval_start_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AverageTrafficCalculation::_internal_interval_start_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.interval_start_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AverageTrafficCalculation::interval_start_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.AverageTrafficCalculation.interval_start_ts)
  return _internal_interval_start_ts();
}
inline void AverageTrafficCalculation::unsafe_arena_set_allocated_interval_start_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* interval_start_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_start_ts_);
  }
  _impl_.interval_start_ts_ = interval_start_ts;
  if (interval_start_ts) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.AverageTrafficCalculation.interval_start_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AverageTrafficCalculation::release_interval_start_ts() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.interval_start_ts_;
  _impl_.interval_start_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AverageTrafficCalculation::unsafe_arena_release_interval_start_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.AverageTrafficCalculation.interval_start_ts)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.interval_start_ts_;
  _impl_.interval_start_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AverageTrafficCalculation::_internal_mutable_interval_start_ts() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.interval_start_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.interval_start_ts_ = p;
  }
  return _impl_.interval_start_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AverageTrafficCalculation::mutable_interval_start_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_interval_start_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.AverageTrafficCalculation.interval_start_ts)
  return _msg;
}
inline void AverageTrafficCalculation::set_allocated_interval_start_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* interval_start_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_start_ts_);
  }
  if (interval_start_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval_start_ts));
    if (message_arena != submessage_arena) {
      interval_start_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval_start_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.interval_start_ts_ = interval_start_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.AverageTrafficCalculation.interval_start_ts)
}

// optional .google.protobuf.Timestamp interval_end_ts = 3 [json_name = "intervalEndTs", (.gen_bq_schema.bigquery) = {
inline bool AverageTrafficCalculation::has_interval_end_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.interval_end_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AverageTrafficCalculation::_internal_interval_end_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.interval_end_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AverageTrafficCalculation::interval_end_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.AverageTrafficCalculation.interval_end_ts)
  return _internal_interval_end_ts();
}
inline void AverageTrafficCalculation::unsafe_arena_set_allocated_interval_end_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* interval_end_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_end_ts_);
  }
  _impl_.interval_end_ts_ = interval_end_ts;
  if (interval_end_ts) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.AverageTrafficCalculation.interval_end_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AverageTrafficCalculation::release_interval_end_ts() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.interval_end_ts_;
  _impl_.interval_end_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AverageTrafficCalculation::unsafe_arena_release_interval_end_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.AverageTrafficCalculation.interval_end_ts)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.interval_end_ts_;
  _impl_.interval_end_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AverageTrafficCalculation::_internal_mutable_interval_end_ts() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.interval_end_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.interval_end_ts_ = p;
  }
  return _impl_.interval_end_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AverageTrafficCalculation::mutable_interval_end_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_interval_end_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.AverageTrafficCalculation.interval_end_ts)
  return _msg;
}
inline void AverageTrafficCalculation::set_allocated_interval_end_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* interval_end_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_end_ts_);
  }
  if (interval_end_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval_end_ts));
    if (message_arena != submessage_arena) {
      interval_end_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval_end_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.interval_end_ts_ = interval_end_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.AverageTrafficCalculation.interval_end_ts)
}

// repeated .cavnue.messages.inference.v1.AverageTrafficCalculation.Statistics statistics = 4 [json_name = "statistics"];
inline int AverageTrafficCalculation::_internal_statistics_size() const {
  return _impl_.statistics_.size();
}
inline int AverageTrafficCalculation::statistics_size() const {
  return _internal_statistics_size();
}
inline void AverageTrafficCalculation::clear_statistics() {
  _internal_mutable_statistics()->Clear();
}
inline ::cavnue::messages::inference::v1::AverageTrafficCalculation_Statistics* AverageTrafficCalculation::mutable_statistics(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.AverageTrafficCalculation.statistics)
  return _internal_mutable_statistics()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::AverageTrafficCalculation_Statistics >*
AverageTrafficCalculation::mutable_statistics() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.inference.v1.AverageTrafficCalculation.statistics)
  return _internal_mutable_statistics();
}
inline const ::cavnue::messages::inference::v1::AverageTrafficCalculation_Statistics& AverageTrafficCalculation::_internal_statistics(int index) const {
  return _internal_statistics().Get(index);
}
inline const ::cavnue::messages::inference::v1::AverageTrafficCalculation_Statistics& AverageTrafficCalculation::statistics(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.AverageTrafficCalculation.statistics)
  return _internal_statistics(index);
}
inline ::cavnue::messages::inference::v1::AverageTrafficCalculation_Statistics* AverageTrafficCalculation::_internal_add_statistics() {
  return _internal_mutable_statistics()->Add();
}
inline ::cavnue::messages::inference::v1::AverageTrafficCalculation_Statistics* AverageTrafficCalculation::add_statistics() {
  ::cavnue::messages::inference::v1::AverageTrafficCalculation_Statistics* _add = _internal_add_statistics();
  // @@protoc_insertion_point(field_add:cavnue.messages.inference.v1.AverageTrafficCalculation.statistics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::AverageTrafficCalculation_Statistics >&
AverageTrafficCalculation::statistics() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.inference.v1.AverageTrafficCalculation.statistics)
  return _internal_statistics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::AverageTrafficCalculation_Statistics>&
AverageTrafficCalculation::_internal_statistics() const {
  return _impl_.statistics_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::AverageTrafficCalculation_Statistics>*
AverageTrafficCalculation::_internal_mutable_statistics() {
  return &_impl_.statistics_;
}

// -------------------------------------------------------------------

// AnnualAverageDailyTrafficCalculation

// .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
inline bool AnnualAverageDailyTrafficCalculation::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::cavnue::messages::common::v1::Header& AnnualAverageDailyTrafficCalculation::_internal_header() const {
  const ::cavnue::messages::common::v1::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::common::v1::Header&>(
      ::cavnue::messages::common::v1::_Header_default_instance_);
}
inline const ::cavnue::messages::common::v1::Header& AnnualAverageDailyTrafficCalculation::header() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.AnnualAverageDailyTrafficCalculation.header)
  return _internal_header();
}
inline void AnnualAverageDailyTrafficCalculation::unsafe_arena_set_allocated_header(
    ::cavnue::messages::common::v1::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.AnnualAverageDailyTrafficCalculation.header)
}
inline ::cavnue::messages::common::v1::Header* AnnualAverageDailyTrafficCalculation::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::common::v1::Header* AnnualAverageDailyTrafficCalculation::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.AnnualAverageDailyTrafficCalculation.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::cavnue::messages::common::v1::Header* AnnualAverageDailyTrafficCalculation::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::common::v1::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::cavnue::messages::common::v1::Header* AnnualAverageDailyTrafficCalculation::mutable_header() {
  ::cavnue::messages::common::v1::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.AnnualAverageDailyTrafficCalculation.header)
  return _msg;
}
inline void AnnualAverageDailyTrafficCalculation::set_allocated_header(::cavnue::messages::common::v1::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.AnnualAverageDailyTrafficCalculation.header)
}

// .cavnue.messages.inference.v1.AverageTrafficCalculation average_traffic_calculation = 2 [json_name = "averageTrafficCalculation"];
inline bool AnnualAverageDailyTrafficCalculation::has_average_traffic_calculation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.average_traffic_calculation_ != nullptr);
  return value;
}
inline void AnnualAverageDailyTrafficCalculation::clear_average_traffic_calculation() {
  if (_impl_.average_traffic_calculation_ != nullptr) _impl_.average_traffic_calculation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::cavnue::messages::inference::v1::AverageTrafficCalculation& AnnualAverageDailyTrafficCalculation::_internal_average_traffic_calculation() const {
  const ::cavnue::messages::inference::v1::AverageTrafficCalculation* p = _impl_.average_traffic_calculation_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::inference::v1::AverageTrafficCalculation&>(
      ::cavnue::messages::inference::v1::_AverageTrafficCalculation_default_instance_);
}
inline const ::cavnue::messages::inference::v1::AverageTrafficCalculation& AnnualAverageDailyTrafficCalculation::average_traffic_calculation() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.AnnualAverageDailyTrafficCalculation.average_traffic_calculation)
  return _internal_average_traffic_calculation();
}
inline void AnnualAverageDailyTrafficCalculation::unsafe_arena_set_allocated_average_traffic_calculation(
    ::cavnue::messages::inference::v1::AverageTrafficCalculation* average_traffic_calculation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.average_traffic_calculation_);
  }
  _impl_.average_traffic_calculation_ = average_traffic_calculation;
  if (average_traffic_calculation) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.AnnualAverageDailyTrafficCalculation.average_traffic_calculation)
}
inline ::cavnue::messages::inference::v1::AverageTrafficCalculation* AnnualAverageDailyTrafficCalculation::release_average_traffic_calculation() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::inference::v1::AverageTrafficCalculation* temp = _impl_.average_traffic_calculation_;
  _impl_.average_traffic_calculation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::inference::v1::AverageTrafficCalculation* AnnualAverageDailyTrafficCalculation::unsafe_arena_release_average_traffic_calculation() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.AnnualAverageDailyTrafficCalculation.average_traffic_calculation)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::inference::v1::AverageTrafficCalculation* temp = _impl_.average_traffic_calculation_;
  _impl_.average_traffic_calculation_ = nullptr;
  return temp;
}
inline ::cavnue::messages::inference::v1::AverageTrafficCalculation* AnnualAverageDailyTrafficCalculation::_internal_mutable_average_traffic_calculation() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.average_traffic_calculation_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::inference::v1::AverageTrafficCalculation>(GetArenaForAllocation());
    _impl_.average_traffic_calculation_ = p;
  }
  return _impl_.average_traffic_calculation_;
}
inline ::cavnue::messages::inference::v1::AverageTrafficCalculation* AnnualAverageDailyTrafficCalculation::mutable_average_traffic_calculation() {
  ::cavnue::messages::inference::v1::AverageTrafficCalculation* _msg = _internal_mutable_average_traffic_calculation();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.AnnualAverageDailyTrafficCalculation.average_traffic_calculation)
  return _msg;
}
inline void AnnualAverageDailyTrafficCalculation::set_allocated_average_traffic_calculation(::cavnue::messages::inference::v1::AverageTrafficCalculation* average_traffic_calculation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.average_traffic_calculation_;
  }
  if (average_traffic_calculation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(average_traffic_calculation);
    if (message_arena != submessage_arena) {
      average_traffic_calculation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, average_traffic_calculation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.average_traffic_calculation_ = average_traffic_calculation;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.AnnualAverageDailyTrafficCalculation.average_traffic_calculation)
}

// -------------------------------------------------------------------

// MonthlyAverageDailyTrafficCalculation

// .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
inline bool MonthlyAverageDailyTrafficCalculation::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::cavnue::messages::common::v1::Header& MonthlyAverageDailyTrafficCalculation::_internal_header() const {
  const ::cavnue::messages::common::v1::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::common::v1::Header&>(
      ::cavnue::messages::common::v1::_Header_default_instance_);
}
inline const ::cavnue::messages::common::v1::Header& MonthlyAverageDailyTrafficCalculation::header() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.MonthlyAverageDailyTrafficCalculation.header)
  return _internal_header();
}
inline void MonthlyAverageDailyTrafficCalculation::unsafe_arena_set_allocated_header(
    ::cavnue::messages::common::v1::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.MonthlyAverageDailyTrafficCalculation.header)
}
inline ::cavnue::messages::common::v1::Header* MonthlyAverageDailyTrafficCalculation::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::common::v1::Header* MonthlyAverageDailyTrafficCalculation::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.MonthlyAverageDailyTrafficCalculation.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::cavnue::messages::common::v1::Header* MonthlyAverageDailyTrafficCalculation::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::common::v1::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::cavnue::messages::common::v1::Header* MonthlyAverageDailyTrafficCalculation::mutable_header() {
  ::cavnue::messages::common::v1::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.MonthlyAverageDailyTrafficCalculation.header)
  return _msg;
}
inline void MonthlyAverageDailyTrafficCalculation::set_allocated_header(::cavnue::messages::common::v1::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.MonthlyAverageDailyTrafficCalculation.header)
}

// int32 month = 2 [json_name = "month"];
inline void MonthlyAverageDailyTrafficCalculation::clear_month() {
  _impl_.month_ = 0;
}
inline ::int32_t MonthlyAverageDailyTrafficCalculation::month() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.MonthlyAverageDailyTrafficCalculation.month)
  return _internal_month();
}
inline void MonthlyAverageDailyTrafficCalculation::set_month(::int32_t value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.MonthlyAverageDailyTrafficCalculation.month)
}
inline ::int32_t MonthlyAverageDailyTrafficCalculation::_internal_month() const {
  return _impl_.month_;
}
inline void MonthlyAverageDailyTrafficCalculation::_internal_set_month(::int32_t value) {
  ;
  _impl_.month_ = value;
}

// int32 year = 3 [json_name = "year"];
inline void MonthlyAverageDailyTrafficCalculation::clear_year() {
  _impl_.year_ = 0;
}
inline ::int32_t MonthlyAverageDailyTrafficCalculation::year() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.MonthlyAverageDailyTrafficCalculation.year)
  return _internal_year();
}
inline void MonthlyAverageDailyTrafficCalculation::set_year(::int32_t value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.MonthlyAverageDailyTrafficCalculation.year)
}
inline ::int32_t MonthlyAverageDailyTrafficCalculation::_internal_year() const {
  return _impl_.year_;
}
inline void MonthlyAverageDailyTrafficCalculation::_internal_set_year(::int32_t value) {
  ;
  _impl_.year_ = value;
}

// .cavnue.messages.inference.v1.AverageTrafficCalculation average_traffic_calculation = 4 [json_name = "averageTrafficCalculation"];
inline bool MonthlyAverageDailyTrafficCalculation::has_average_traffic_calculation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.average_traffic_calculation_ != nullptr);
  return value;
}
inline void MonthlyAverageDailyTrafficCalculation::clear_average_traffic_calculation() {
  if (_impl_.average_traffic_calculation_ != nullptr) _impl_.average_traffic_calculation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::cavnue::messages::inference::v1::AverageTrafficCalculation& MonthlyAverageDailyTrafficCalculation::_internal_average_traffic_calculation() const {
  const ::cavnue::messages::inference::v1::AverageTrafficCalculation* p = _impl_.average_traffic_calculation_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::inference::v1::AverageTrafficCalculation&>(
      ::cavnue::messages::inference::v1::_AverageTrafficCalculation_default_instance_);
}
inline const ::cavnue::messages::inference::v1::AverageTrafficCalculation& MonthlyAverageDailyTrafficCalculation::average_traffic_calculation() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.MonthlyAverageDailyTrafficCalculation.average_traffic_calculation)
  return _internal_average_traffic_calculation();
}
inline void MonthlyAverageDailyTrafficCalculation::unsafe_arena_set_allocated_average_traffic_calculation(
    ::cavnue::messages::inference::v1::AverageTrafficCalculation* average_traffic_calculation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.average_traffic_calculation_);
  }
  _impl_.average_traffic_calculation_ = average_traffic_calculation;
  if (average_traffic_calculation) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.MonthlyAverageDailyTrafficCalculation.average_traffic_calculation)
}
inline ::cavnue::messages::inference::v1::AverageTrafficCalculation* MonthlyAverageDailyTrafficCalculation::release_average_traffic_calculation() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::inference::v1::AverageTrafficCalculation* temp = _impl_.average_traffic_calculation_;
  _impl_.average_traffic_calculation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::inference::v1::AverageTrafficCalculation* MonthlyAverageDailyTrafficCalculation::unsafe_arena_release_average_traffic_calculation() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.MonthlyAverageDailyTrafficCalculation.average_traffic_calculation)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::inference::v1::AverageTrafficCalculation* temp = _impl_.average_traffic_calculation_;
  _impl_.average_traffic_calculation_ = nullptr;
  return temp;
}
inline ::cavnue::messages::inference::v1::AverageTrafficCalculation* MonthlyAverageDailyTrafficCalculation::_internal_mutable_average_traffic_calculation() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.average_traffic_calculation_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::inference::v1::AverageTrafficCalculation>(GetArenaForAllocation());
    _impl_.average_traffic_calculation_ = p;
  }
  return _impl_.average_traffic_calculation_;
}
inline ::cavnue::messages::inference::v1::AverageTrafficCalculation* MonthlyAverageDailyTrafficCalculation::mutable_average_traffic_calculation() {
  ::cavnue::messages::inference::v1::AverageTrafficCalculation* _msg = _internal_mutable_average_traffic_calculation();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.MonthlyAverageDailyTrafficCalculation.average_traffic_calculation)
  return _msg;
}
inline void MonthlyAverageDailyTrafficCalculation::set_allocated_average_traffic_calculation(::cavnue::messages::inference::v1::AverageTrafficCalculation* average_traffic_calculation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.average_traffic_calculation_;
  }
  if (average_traffic_calculation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(average_traffic_calculation);
    if (message_arena != submessage_arena) {
      average_traffic_calculation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, average_traffic_calculation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.average_traffic_calculation_ = average_traffic_calculation;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.MonthlyAverageDailyTrafficCalculation.average_traffic_calculation)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace inference
}  // namespace messages
}  // namespace cavnue


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/inference/v1/radar.proto

#include "cavnue/messages/inference/v1/radar.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cavnue {
namespace messages {
namespace inference {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR RadarInfo::RadarInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.client_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.version_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.time_since_restart_)*/nullptr} {}
struct RadarInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RadarInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RadarInfoDefaultTypeInternal() {}
  union {
    RadarInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RadarInfoDefaultTypeInternal _RadarInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ObjectList_Object_TrackingStatus::ObjectList_Object_TrackingStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mileage_)*/ 0

  , /*decltype(_impl_.cycles_since_last_update_)*/ 0

  , /*decltype(_impl_.new_object_)*/ false

  , /*decltype(_impl_.quality_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObjectList_Object_TrackingStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectList_Object_TrackingStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectList_Object_TrackingStatusDefaultTypeInternal() {}
  union {
    ObjectList_Object_TrackingStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectList_Object_TrackingStatusDefaultTypeInternal _ObjectList_Object_TrackingStatus_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ObjectList_Object::ObjectList_Object(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.position_facing_)*/nullptr
  , /*decltype(_impl_.position_front_)*/nullptr
  , /*decltype(_impl_.tracking_status_)*/nullptr
  , /*decltype(_impl_.acceleration_)*/ 0

  , /*decltype(_impl_.class__)*/ 0

  , /*decltype(_impl_.closest_lane_)*/ 0

  , /*decltype(_impl_.heading_)*/ 0

  , /*decltype(_impl_.height_)*/ 0

  , /*decltype(_impl_.length_)*/ 0

  , /*decltype(_impl_.id_)*/ 0

  , /*decltype(_impl_.within_zone_)*/ 0

  , /*decltype(_impl_.quality_)*/ 0

  , /*decltype(_impl_.speed_)*/ 0
} {}
struct ObjectList_ObjectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectList_ObjectDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectList_ObjectDefaultTypeInternal() {}
  union {
    ObjectList_Object _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectList_ObjectDefaultTypeInternal _ObjectList_Object_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ObjectList::ObjectList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.objects_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_.observation_ts_)*/nullptr
  , /*decltype(_impl_.observation_duration_)*/nullptr
  , /*decltype(_impl_.data_source_)*/nullptr} {}
struct ObjectListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectListDefaultTypeInternal() {}
  union {
    ObjectList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectListDefaultTypeInternal _ObjectList_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TargetList_Target::TargetList_Target(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.azimuth_angle_)*/ 0

  , /*decltype(_impl_.elevation_angle_)*/ 0

  , /*decltype(_impl_.range_)*/ 0

  , /*decltype(_impl_.rcs_)*/ 0

  , /*decltype(_impl_.snr_)*/ 0

  , /*decltype(_impl_.speed_radial_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TargetList_TargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TargetList_TargetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TargetList_TargetDefaultTypeInternal() {}
  union {
    TargetList_Target _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TargetList_TargetDefaultTypeInternal _TargetList_Target_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TargetList::TargetList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.targets_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_.observation_ts_)*/nullptr
  , /*decltype(_impl_.observation_duration_)*/nullptr
  , /*decltype(_impl_.data_source_)*/nullptr} {}
struct TargetListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TargetListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TargetListDefaultTypeInternal() {}
  union {
    TargetList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TargetListDefaultTypeInternal _TargetList_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RadarStats::RadarStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_.observation_ts_)*/nullptr
  , /*decltype(_impl_.observation_duration_)*/nullptr
  , /*decltype(_impl_.data_source_)*/nullptr
  , /*decltype(_impl_.blind_)*/ false

  , /*decltype(_impl_.interference_)*/ false

  , /*decltype(_impl_.rain_)*/ false
} {}
struct RadarStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RadarStatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RadarStatsDefaultTypeInternal() {}
  union {
    RadarStats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RadarStatsDefaultTypeInternal _RadarStats_default_instance_;
}  // namespace v1
}  // namespace inference
}  // namespace messages
}  // namespace cavnue
static ::_pb::Metadata file_level_metadata_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto[7];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto = nullptr;
const ::uint32_t TableStruct_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::RadarInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::RadarInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::RadarInfo, _impl_.client_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::RadarInfo, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::RadarInfo, _impl_.time_since_restart_),
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus, _impl_.cycles_since_last_update_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus, _impl_.mileage_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus, _impl_.new_object_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus, _impl_.quality_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ObjectList_Object, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ObjectList_Object, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ObjectList_Object, _impl_.acceleration_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ObjectList_Object, _impl_.class__),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ObjectList_Object, _impl_.closest_lane_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ObjectList_Object, _impl_.heading_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ObjectList_Object, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ObjectList_Object, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ObjectList_Object, _impl_.length_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ObjectList_Object, _impl_.position_facing_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ObjectList_Object, _impl_.position_front_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ObjectList_Object, _impl_.quality_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ObjectList_Object, _impl_.speed_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ObjectList_Object, _impl_.tracking_status_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ObjectList_Object, _impl_.within_zone_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    ~0u,
    ~0u,
    2,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ObjectList, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ObjectList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ObjectList, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ObjectList, _impl_.info_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ObjectList, _impl_.observation_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ObjectList, _impl_.observation_duration_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ObjectList, _impl_.data_source_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::ObjectList, _impl_.objects_),
    0,
    1,
    2,
    3,
    4,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::TargetList_Target, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::TargetList_Target, _impl_.azimuth_angle_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::TargetList_Target, _impl_.elevation_angle_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::TargetList_Target, _impl_.range_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::TargetList_Target, _impl_.rcs_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::TargetList_Target, _impl_.snr_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::TargetList_Target, _impl_.speed_radial_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::TargetList, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::TargetList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::TargetList, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::TargetList, _impl_.info_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::TargetList, _impl_.observation_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::TargetList, _impl_.observation_duration_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::TargetList, _impl_.data_source_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::TargetList, _impl_.targets_),
    0,
    1,
    2,
    3,
    4,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::RadarStats, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::RadarStats, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::RadarStats, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::RadarStats, _impl_.info_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::RadarStats, _impl_.observation_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::RadarStats, _impl_.observation_duration_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::RadarStats, _impl_.data_source_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::RadarStats, _impl_.blind_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::RadarStats, _impl_.interference_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::inference::v1::RadarStats, _impl_.rain_),
    0,
    1,
    2,
    3,
    4,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 11, -1, sizeof(::cavnue::messages::inference::v1::RadarInfo)},
        { 14, -1, -1, sizeof(::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus)},
        { 26, 47, -1, sizeof(::cavnue::messages::inference::v1::ObjectList_Object)},
        { 60, 74, -1, sizeof(::cavnue::messages::inference::v1::ObjectList)},
        { 80, -1, -1, sizeof(::cavnue::messages::inference::v1::TargetList_Target)},
        { 94, 108, -1, sizeof(::cavnue::messages::inference::v1::TargetList)},
        { 114, 130, -1, sizeof(::cavnue::messages::inference::v1::RadarStats)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cavnue::messages::inference::v1::_RadarInfo_default_instance_._instance,
    &::cavnue::messages::inference::v1::_ObjectList_Object_TrackingStatus_default_instance_._instance,
    &::cavnue::messages::inference::v1::_ObjectList_Object_default_instance_._instance,
    &::cavnue::messages::inference::v1::_ObjectList_default_instance_._instance,
    &::cavnue::messages::inference::v1::_TargetList_Target_default_instance_._instance,
    &::cavnue::messages::inference::v1::_TargetList_default_instance_._instance,
    &::cavnue::messages::inference::v1::_RadarStats_default_instance_._instance,
};
const char descriptor_table_protodef_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n(cavnue/messages/inference/v1/radar.pro"
    "to\022\034cavnue.messages.inference.v1\032&cavnue"
    "/messages/common/v1/common.proto\032-cavnue"
    "/messages/common/v1/field_options.proto\032"
    "(cavnue/messages/geometry/v1/vector.prot"
    "o\032\036google/protobuf/duration.proto\032\037googl"
    "e/protobuf/timestamp.proto\"\213\001\n\tRadarInfo"
    "\022\033\n\tclient_id\030\001 \001(\tR\010clientId\022\030\n\007version"
    "\030\002 \001(\tR\007version\022G\n\022time_since_restart\030\003 "
    "\001(\0132\031.google.protobuf.DurationR\020timeSinc"
    "eRestart\"\227\t\n\nObjectList\0229\n\006header\030\001 \001(\0132"
    "!.cavnue.messages.common.v1.HeaderR\006head"
    "er\022;\n\004info\030\002 \001(\0132\'.cavnue.messages.infer"
    "ence.v1.RadarInfoR\004info\022A\n\016observation_t"
    "s\030\003 \001(\0132\032.google.protobuf.TimestampR\robs"
    "ervationTs\022L\n\024observation_duration\030\004 \001(\013"
    "2\031.google.protobuf.DurationR\023observation"
    "Duration\022F\n\013data_source\030\005 \001(\0132%.cavnue.m"
    "essages.common.v1.DataSourceR\ndataSource"
    "\022I\n\007objects\030\006 \003(\0132/.cavnue.messages.infe"
    "rence.v1.ObjectList.ObjectR\007objects\032\354\005\n\006"
    "Object\022(\n\014acceleration\030\001 \001(\001B\004\210\361\004\000R\014acce"
    "leration\022\032\n\005class\030\002 \001(\005B\004\210\361\004\000R\005class\022!\n\014"
    "closest_lane\030\003 \001(\005R\013closestLane\022\036\n\007headi"
    "ng\030\004 \001(\001B\004\210\361\004\000R\007heading\022\034\n\006height\030\005 \001(\001B"
    "\004\210\361\004\000R\006height\022\016\n\002id\030\006 \001(\005R\002id\022\034\n\006length\030"
    "\007 \001(\001B\004\210\361\004\000R\006length\022T\n\017position_facing\030\010"
    " \001(\0132%.cavnue.messages.geometry.v1.Vecto"
    "r2fB\004\210\361\004\000R\016positionFacing\022R\n\016position_fr"
    "ont\030\t \001(\0132%.cavnue.messages.geometry.v1."
    "Vector2fB\004\210\361\004\000R\rpositionFront\022\030\n\007quality"
    "\030\n \001(\001R\007quality\022\032\n\005speed\030\013 \001(\001B\004\210\361\004\001R\005sp"
    "eed\022g\n\017tracking_status\030\014 \001(\0132>.cavnue.me"
    "ssages.inference.v1.ObjectList.Object.Tr"
    "ackingStatusR\016trackingStatus\022\037\n\013within_z"
    "one\030\r \001(\005R\nwithinZone\032\242\001\n\016TrackingStatus"
    "\0227\n\030cycles_since_last_update\030\001 \001(\005R\025cycl"
    "esSinceLastUpdate\022\036\n\007mileage\030\002 \001(\001B\004\210\361\004\005"
    "R\007mileage\022\035\n\nnew_object\030\003 \001(\010R\tnewObject"
    "\022\030\n\007quality\030\004 \001(\001R\007quality\"\374\004\n\nTargetLis"
    "t\0229\n\006header\030\001 \001(\0132!.cavnue.messages.comm"
    "on.v1.HeaderR\006header\022;\n\004info\030\002 \001(\0132\'.cav"
    "nue.messages.inference.v1.RadarInfoR\004inf"
    "o\022A\n\016observation_ts\030\003 \001(\0132\032.google.proto"
    "buf.TimestampR\robservationTs\022L\n\024observat"
    "ion_duration\030\004 \001(\0132\031.google.protobuf.Dur"
    "ationR\023observationDuration\022F\n\013data_sourc"
    "e\030\005 \001(\0132%.cavnue.messages.common.v1.Data"
    "SourceR\ndataSource\022I\n\007targets\030\006 \003(\0132/.ca"
    "vnue.messages.inference.v1.TargetList.Ta"
    "rgetR\007targets\032\321\001\n\006Target\022)\n\razimuth_angl"
    "e\030\001 \001(\001B\004\210\361\004\tR\014azimuthAngle\022-\n\017elevation"
    "_angle\030\002 \001(\001B\004\210\361\004\tR\016elevationAngle\022\032\n\005ra"
    "nge\030\003 \001(\001B\004\210\361\004\005R\005range\022\020\n\003rcs\030\004 \001(\001R\003rcs"
    "\022\026\n\003snr\030\005 \001(\001B\004\210\361\004\013R\003snr\022\'\n\014speed_radial"
    "\030\006 \001(\001B\004\210\361\004\001R\013speedRadial\"\253\003\n\nRadarStats"
    "\0229\n\006header\030\001 \001(\0132!.cavnue.messages.commo"
    "n.v1.HeaderR\006header\022;\n\004info\030\002 \001(\0132\'.cavn"
    "ue.messages.inference.v1.RadarInfoR\004info"
    "\022A\n\016observation_ts\030\003 \001(\0132\032.google.protob"
    "uf.TimestampR\robservationTs\022L\n\024observati"
    "on_duration\030\004 \001(\0132\031.google.protobuf.Dura"
    "tionR\023observationDuration\022F\n\013data_source"
    "\030\005 \001(\0132%.cavnue.messages.common.v1.DataS"
    "ourceR\ndataSource\022\024\n\005blind\030\006 \001(\010R\005blind\022"
    "\"\n\014interference\030\007 \001(\010R\014interference\022\022\n\004r"
    "ain\030\010 \001(\010R\004rainb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto_deps[5] =
    {
        &::descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2ffield_5foptions_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fvector_2eproto,
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto = {
    false,
    false,
    2663,
    descriptor_table_protodef_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto,
    "cavnue/messages/inference/v1/radar.proto",
    &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto_once,
    descriptor_table_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto_deps,
    5,
    7,
    schemas,
    file_default_instances,
    TableStruct_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto::offsets,
    file_level_metadata_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto,
    file_level_enum_descriptors_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto,
    file_level_service_descriptors_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto_getter() {
  return &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto(&descriptor_table_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto);
namespace cavnue {
namespace messages {
namespace inference {
namespace v1 {
// ===================================================================

class RadarInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<RadarInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RadarInfo, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& time_since_restart(const RadarInfo* msg);
  static void set_has_time_since_restart(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
RadarInfo::_Internal::time_since_restart(const RadarInfo* msg) {
  return *msg->_impl_.time_since_restart_;
}
void RadarInfo::clear_time_since_restart() {
  if (_impl_.time_since_restart_ != nullptr) _impl_.time_since_restart_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RadarInfo::RadarInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.inference.v1.RadarInfo)
}
RadarInfo::RadarInfo(const RadarInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RadarInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.version_) {}

    , decltype(_impl_.time_since_restart_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    _this->_impl_.client_id_.Set(from._internal_client_id(), _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.time_since_restart_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.time_since_restart_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.inference.v1.RadarInfo)
}

inline void RadarInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.version_) {}

    , decltype(_impl_.time_since_restart_){nullptr}
  };
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RadarInfo::~RadarInfo() {
  // @@protoc_insertion_point(destructor:cavnue.messages.inference.v1.RadarInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RadarInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_id_.Destroy();
  _impl_.version_.Destroy();
  if (this != internal_default_instance()) delete _impl_.time_since_restart_;
}

void RadarInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RadarInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.inference.v1.RadarInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_id_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.time_since_restart_ != nullptr);
    _impl_.time_since_restart_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string client_id = 1 [json_name = "clientId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.inference.v1.RadarInfo.client_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string version = 2 [json_name = "version"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.inference.v1.RadarInfo.version"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Duration time_since_restart = 3 [json_name = "timeSinceRestart"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_since_restart(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RadarInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.inference.v1.RadarInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1 [json_name = "clientId"];
  if (!this->_internal_client_id().empty()) {
    const std::string& _s = this->_internal_client_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.inference.v1.RadarInfo.client_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string version = 2 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    const std::string& _s = this->_internal_version();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.inference.v1.RadarInfo.version");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Duration time_since_restart = 3 [json_name = "timeSinceRestart"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::time_since_restart(this),
        _Internal::time_since_restart(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.inference.v1.RadarInfo)
  return target;
}

::size_t RadarInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.inference.v1.RadarInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1 [json_name = "clientId"];
  if (!this->_internal_client_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_client_id());
  }

  // string version = 2 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_version());
  }

  // .google.protobuf.Duration time_since_restart = 3 [json_name = "timeSinceRestart"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_since_restart_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RadarInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RadarInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RadarInfo::GetClassData() const { return &_class_data_; }


void RadarInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RadarInfo*>(&to_msg);
  auto& from = static_cast<const RadarInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.inference.v1.RadarInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_client_id().empty()) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_time_since_restart()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_time_since_restart());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RadarInfo::CopyFrom(const RadarInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.inference.v1.RadarInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarInfo::IsInitialized() const {
  return true;
}

void RadarInfo::InternalSwap(RadarInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_id_, lhs_arena,
                                       &other->_impl_.client_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, lhs_arena,
                                       &other->_impl_.version_, rhs_arena);
  swap(_impl_.time_since_restart_, other->_impl_.time_since_restart_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto_getter, &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto[0]);
}
// ===================================================================

class ObjectList_Object_TrackingStatus::_Internal {
 public:
};

ObjectList_Object_TrackingStatus::ObjectList_Object_TrackingStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.inference.v1.ObjectList.Object.TrackingStatus)
}
ObjectList_Object_TrackingStatus::ObjectList_Object_TrackingStatus(const ObjectList_Object_TrackingStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.inference.v1.ObjectList.Object.TrackingStatus)
}

inline void ObjectList_Object_TrackingStatus::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.mileage_) { 0 }

    , decltype(_impl_.cycles_since_last_update_) { 0 }

    , decltype(_impl_.new_object_) { false }

    , decltype(_impl_.quality_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ObjectList_Object_TrackingStatus::~ObjectList_Object_TrackingStatus() {
  // @@protoc_insertion_point(destructor:cavnue.messages.inference.v1.ObjectList.Object.TrackingStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectList_Object_TrackingStatus::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObjectList_Object_TrackingStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectList_Object_TrackingStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.inference.v1.ObjectList.Object.TrackingStatus)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.mileage_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.quality_) -
      reinterpret_cast<char*>(&_impl_.mileage_)) + sizeof(_impl_.quality_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectList_Object_TrackingStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 cycles_since_last_update = 1 [json_name = "cyclesSinceLastUpdate"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.cycles_since_last_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // double mileage = 2 [json_name = "mileage", (.cavnue.messages.common.v1.units) = UNITS_METERS];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _impl_.mileage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool new_object = 3 [json_name = "newObject"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.new_object_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // double quality = 4 [json_name = "quality"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 33)) {
          _impl_.quality_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ObjectList_Object_TrackingStatus::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.inference.v1.ObjectList.Object.TrackingStatus)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cycles_since_last_update = 1 [json_name = "cyclesSinceLastUpdate"];
  if (this->_internal_cycles_since_last_update() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_cycles_since_last_update(), target);
  }

  // double mileage = 2 [json_name = "mileage", (.cavnue.messages.common.v1.units) = UNITS_METERS];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_mileage = this->_internal_mileage();
  ::uint64_t raw_mileage;
  memcpy(&raw_mileage, &tmp_mileage, sizeof(tmp_mileage));
  if (raw_mileage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_mileage(), target);
  }

  // bool new_object = 3 [json_name = "newObject"];
  if (this->_internal_new_object() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_new_object(), target);
  }

  // double quality = 4 [json_name = "quality"];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_quality = this->_internal_quality();
  ::uint64_t raw_quality;
  memcpy(&raw_quality, &tmp_quality, sizeof(tmp_quality));
  if (raw_quality != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_quality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.inference.v1.ObjectList.Object.TrackingStatus)
  return target;
}

::size_t ObjectList_Object_TrackingStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.inference.v1.ObjectList.Object.TrackingStatus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double mileage = 2 [json_name = "mileage", (.cavnue.messages.common.v1.units) = UNITS_METERS];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_mileage = this->_internal_mileage();
  ::uint64_t raw_mileage;
  memcpy(&raw_mileage, &tmp_mileage, sizeof(tmp_mileage));
  if (raw_mileage != 0) {
    total_size += 9;
  }

  // int32 cycles_since_last_update = 1 [json_name = "cyclesSinceLastUpdate"];
  if (this->_internal_cycles_since_last_update() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_cycles_since_last_update());
  }

  // bool new_object = 3 [json_name = "newObject"];
  if (this->_internal_new_object() != 0) {
    total_size += 2;
  }

  // double quality = 4 [json_name = "quality"];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_quality = this->_internal_quality();
  ::uint64_t raw_quality;
  memcpy(&raw_quality, &tmp_quality, sizeof(tmp_quality));
  if (raw_quality != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectList_Object_TrackingStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectList_Object_TrackingStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectList_Object_TrackingStatus::GetClassData() const { return &_class_data_; }


void ObjectList_Object_TrackingStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectList_Object_TrackingStatus*>(&to_msg);
  auto& from = static_cast<const ObjectList_Object_TrackingStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.inference.v1.ObjectList.Object.TrackingStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_mileage = from._internal_mileage();
  ::uint64_t raw_mileage;
  memcpy(&raw_mileage, &tmp_mileage, sizeof(tmp_mileage));
  if (raw_mileage != 0) {
    _this->_internal_set_mileage(from._internal_mileage());
  }
  if (from._internal_cycles_since_last_update() != 0) {
    _this->_internal_set_cycles_since_last_update(from._internal_cycles_since_last_update());
  }
  if (from._internal_new_object() != 0) {
    _this->_internal_set_new_object(from._internal_new_object());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_quality = from._internal_quality();
  ::uint64_t raw_quality;
  memcpy(&raw_quality, &tmp_quality, sizeof(tmp_quality));
  if (raw_quality != 0) {
    _this->_internal_set_quality(from._internal_quality());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectList_Object_TrackingStatus::CopyFrom(const ObjectList_Object_TrackingStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.inference.v1.ObjectList.Object.TrackingStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectList_Object_TrackingStatus::IsInitialized() const {
  return true;
}

void ObjectList_Object_TrackingStatus::InternalSwap(ObjectList_Object_TrackingStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectList_Object_TrackingStatus, _impl_.quality_)
      + sizeof(ObjectList_Object_TrackingStatus::_impl_.quality_)
      - PROTOBUF_FIELD_OFFSET(ObjectList_Object_TrackingStatus, _impl_.mileage_)>(
          reinterpret_cast<char*>(&_impl_.mileage_),
          reinterpret_cast<char*>(&other->_impl_.mileage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectList_Object_TrackingStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto_getter, &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto[1]);
}
// ===================================================================

class ObjectList_Object::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectList_Object>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ObjectList_Object, _impl_._has_bits_);
  static const ::cavnue::messages::geometry::v1::Vector2f& position_facing(const ObjectList_Object* msg);
  static void set_has_position_facing(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cavnue::messages::geometry::v1::Vector2f& position_front(const ObjectList_Object* msg);
  static void set_has_position_front(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus& tracking_status(const ObjectList_Object* msg);
  static void set_has_tracking_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::cavnue::messages::geometry::v1::Vector2f&
ObjectList_Object::_Internal::position_facing(const ObjectList_Object* msg) {
  return *msg->_impl_.position_facing_;
}
const ::cavnue::messages::geometry::v1::Vector2f&
ObjectList_Object::_Internal::position_front(const ObjectList_Object* msg) {
  return *msg->_impl_.position_front_;
}
const ::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus&
ObjectList_Object::_Internal::tracking_status(const ObjectList_Object* msg) {
  return *msg->_impl_.tracking_status_;
}
void ObjectList_Object::clear_position_facing() {
  if (_impl_.position_facing_ != nullptr) _impl_.position_facing_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ObjectList_Object::clear_position_front() {
  if (_impl_.position_front_ != nullptr) _impl_.position_front_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ObjectList_Object::ObjectList_Object(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.inference.v1.ObjectList.Object)
}
ObjectList_Object::ObjectList_Object(const ObjectList_Object& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectList_Object* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_facing_){nullptr}
    , decltype(_impl_.position_front_){nullptr}
    , decltype(_impl_.tracking_status_){nullptr}
    , decltype(_impl_.acceleration_) {}

    , decltype(_impl_.class__) {}

    , decltype(_impl_.closest_lane_) {}

    , decltype(_impl_.heading_) {}

    , decltype(_impl_.height_) {}

    , decltype(_impl_.length_) {}

    , decltype(_impl_.id_) {}

    , decltype(_impl_.within_zone_) {}

    , decltype(_impl_.quality_) {}

    , decltype(_impl_.speed_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.position_facing_ = new ::cavnue::messages::geometry::v1::Vector2f(*from._impl_.position_facing_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.position_front_ = new ::cavnue::messages::geometry::v1::Vector2f(*from._impl_.position_front_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.tracking_status_ = new ::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus(*from._impl_.tracking_status_);
  }
  ::memcpy(&_impl_.acceleration_, &from._impl_.acceleration_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.speed_) -
    reinterpret_cast<char*>(&_impl_.acceleration_)) + sizeof(_impl_.speed_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.inference.v1.ObjectList.Object)
}

inline void ObjectList_Object::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_facing_){nullptr}
    , decltype(_impl_.position_front_){nullptr}
    , decltype(_impl_.tracking_status_){nullptr}
    , decltype(_impl_.acceleration_) { 0 }

    , decltype(_impl_.class__) { 0 }

    , decltype(_impl_.closest_lane_) { 0 }

    , decltype(_impl_.heading_) { 0 }

    , decltype(_impl_.height_) { 0 }

    , decltype(_impl_.length_) { 0 }

    , decltype(_impl_.id_) { 0 }

    , decltype(_impl_.within_zone_) { 0 }

    , decltype(_impl_.quality_) { 0 }

    , decltype(_impl_.speed_) { 0 }

  };
}

ObjectList_Object::~ObjectList_Object() {
  // @@protoc_insertion_point(destructor:cavnue.messages.inference.v1.ObjectList.Object)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectList_Object::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_facing_;
  if (this != internal_default_instance()) delete _impl_.position_front_;
  if (this != internal_default_instance()) delete _impl_.tracking_status_;
}

void ObjectList_Object::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectList_Object::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.inference.v1.ObjectList.Object)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.position_facing_ != nullptr);
      _impl_.position_facing_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.position_front_ != nullptr);
      _impl_.position_front_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.tracking_status_ != nullptr);
      _impl_.tracking_status_->Clear();
    }
  }
  ::memset(&_impl_.acceleration_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.speed_) -
      reinterpret_cast<char*>(&_impl_.acceleration_)) + sizeof(_impl_.speed_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectList_Object::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double acceleration = 1 [json_name = "acceleration", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _impl_.acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 class = 2 [json_name = "class", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.class__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 closest_lane = 3 [json_name = "closestLane"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.closest_lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // double heading = 4 [json_name = "heading", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 33)) {
          _impl_.heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // double height = 5 [json_name = "height", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 41)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 id = 6 [json_name = "id"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // double length = 7 [json_name = "length", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 57)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.geometry.v1.Vector2f position_facing = 8 [json_name = "positionFacing", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_facing(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.geometry.v1.Vector2f position_front = 9 [json_name = "positionFront", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_front(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // double quality = 10 [json_name = "quality"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 81)) {
          _impl_.quality_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // double speed = 11 [json_name = "speed", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 89)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.inference.v1.ObjectList.Object.TrackingStatus tracking_status = 12 [json_name = "trackingStatus"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tracking_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 within_zone = 13 [json_name = "withinZone"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _impl_.within_zone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ObjectList_Object::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.inference.v1.ObjectList.Object)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double acceleration = 1 [json_name = "acceleration", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_acceleration = this->_internal_acceleration();
  ::uint64_t raw_acceleration;
  memcpy(&raw_acceleration, &tmp_acceleration, sizeof(tmp_acceleration));
  if (raw_acceleration != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_acceleration(), target);
  }

  // int32 class = 2 [json_name = "class", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
  if (this->_internal_class_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_class_(), target);
  }

  // int32 closest_lane = 3 [json_name = "closestLane"];
  if (this->_internal_closest_lane() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_closest_lane(), target);
  }

  // double heading = 4 [json_name = "heading", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_heading = this->_internal_heading();
  ::uint64_t raw_heading;
  memcpy(&raw_heading, &tmp_heading, sizeof(tmp_heading));
  if (raw_heading != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_heading(), target);
  }

  // double height = 5 [json_name = "height", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_height = this->_internal_height();
  ::uint64_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_height(), target);
  }

  // int32 id = 6 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        6, this->_internal_id(), target);
  }

  // double length = 7 [json_name = "length", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_length = this->_internal_length();
  ::uint64_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        7, this->_internal_length(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.geometry.v1.Vector2f position_facing = 8 [json_name = "positionFacing", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::position_facing(this),
        _Internal::position_facing(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.geometry.v1.Vector2f position_front = 9 [json_name = "positionFront", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::position_front(this),
        _Internal::position_front(this).GetCachedSize(), target, stream);
  }

  // double quality = 10 [json_name = "quality"];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_quality = this->_internal_quality();
  ::uint64_t raw_quality;
  memcpy(&raw_quality, &tmp_quality, sizeof(tmp_quality));
  if (raw_quality != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        10, this->_internal_quality(), target);
  }

  // double speed = 11 [json_name = "speed", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_speed = this->_internal_speed();
  ::uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        11, this->_internal_speed(), target);
  }

  // .cavnue.messages.inference.v1.ObjectList.Object.TrackingStatus tracking_status = 12 [json_name = "trackingStatus"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::tracking_status(this),
        _Internal::tracking_status(this).GetCachedSize(), target, stream);
  }

  // int32 within_zone = 13 [json_name = "withinZone"];
  if (this->_internal_within_zone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        13, this->_internal_within_zone(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.inference.v1.ObjectList.Object)
  return target;
}

::size_t ObjectList_Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.inference.v1.ObjectList.Object)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .cavnue.messages.geometry.v1.Vector2f position_facing = 8 [json_name = "positionFacing", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_facing_);
    }

    // .cavnue.messages.geometry.v1.Vector2f position_front = 9 [json_name = "positionFront", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_front_);
    }

    // .cavnue.messages.inference.v1.ObjectList.Object.TrackingStatus tracking_status = 12 [json_name = "trackingStatus"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tracking_status_);
    }

  }
  // double acceleration = 1 [json_name = "acceleration", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_acceleration = this->_internal_acceleration();
  ::uint64_t raw_acceleration;
  memcpy(&raw_acceleration, &tmp_acceleration, sizeof(tmp_acceleration));
  if (raw_acceleration != 0) {
    total_size += 9;
  }

  // int32 class = 2 [json_name = "class", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
  if (this->_internal_class_() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_class_());
  }

  // int32 closest_lane = 3 [json_name = "closestLane"];
  if (this->_internal_closest_lane() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_closest_lane());
  }

  // double heading = 4 [json_name = "heading", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_heading = this->_internal_heading();
  ::uint64_t raw_heading;
  memcpy(&raw_heading, &tmp_heading, sizeof(tmp_heading));
  if (raw_heading != 0) {
    total_size += 9;
  }

  // double height = 5 [json_name = "height", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_height = this->_internal_height();
  ::uint64_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    total_size += 9;
  }

  // double length = 7 [json_name = "length", (.cavnue.messages.common.v1.units) = UNITS_UNSPECIFIED];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_length = this->_internal_length();
  ::uint64_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    total_size += 9;
  }

  // int32 id = 6 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // int32 within_zone = 13 [json_name = "withinZone"];
  if (this->_internal_within_zone() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_within_zone());
  }

  // double quality = 10 [json_name = "quality"];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_quality = this->_internal_quality();
  ::uint64_t raw_quality;
  memcpy(&raw_quality, &tmp_quality, sizeof(tmp_quality));
  if (raw_quality != 0) {
    total_size += 9;
  }

  // double speed = 11 [json_name = "speed", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_speed = this->_internal_speed();
  ::uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectList_Object::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectList_Object::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectList_Object::GetClassData() const { return &_class_data_; }


void ObjectList_Object::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectList_Object*>(&to_msg);
  auto& from = static_cast<const ObjectList_Object&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.inference.v1.ObjectList.Object)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position_facing()->::cavnue::messages::geometry::v1::Vector2f::MergeFrom(
          from._internal_position_facing());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_position_front()->::cavnue::messages::geometry::v1::Vector2f::MergeFrom(
          from._internal_position_front());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tracking_status()->::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus::MergeFrom(
          from._internal_tracking_status());
    }
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_acceleration = from._internal_acceleration();
  ::uint64_t raw_acceleration;
  memcpy(&raw_acceleration, &tmp_acceleration, sizeof(tmp_acceleration));
  if (raw_acceleration != 0) {
    _this->_internal_set_acceleration(from._internal_acceleration());
  }
  if (from._internal_class_() != 0) {
    _this->_internal_set_class_(from._internal_class_());
  }
  if (from._internal_closest_lane() != 0) {
    _this->_internal_set_closest_lane(from._internal_closest_lane());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_heading = from._internal_heading();
  ::uint64_t raw_heading;
  memcpy(&raw_heading, &tmp_heading, sizeof(tmp_heading));
  if (raw_heading != 0) {
    _this->_internal_set_heading(from._internal_heading());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_height = from._internal_height();
  ::uint64_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_length = from._internal_length();
  ::uint64_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_within_zone() != 0) {
    _this->_internal_set_within_zone(from._internal_within_zone());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_quality = from._internal_quality();
  ::uint64_t raw_quality;
  memcpy(&raw_quality, &tmp_quality, sizeof(tmp_quality));
  if (raw_quality != 0) {
    _this->_internal_set_quality(from._internal_quality());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_speed = from._internal_speed();
  ::uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectList_Object::CopyFrom(const ObjectList_Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.inference.v1.ObjectList.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectList_Object::IsInitialized() const {
  return true;
}

void ObjectList_Object::InternalSwap(ObjectList_Object* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectList_Object, _impl_.speed_)
      + sizeof(ObjectList_Object::_impl_.speed_)
      - PROTOBUF_FIELD_OFFSET(ObjectList_Object, _impl_.position_facing_)>(
          reinterpret_cast<char*>(&_impl_.position_facing_),
          reinterpret_cast<char*>(&other->_impl_.position_facing_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectList_Object::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto_getter, &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto[2]);
}
// ===================================================================

class ObjectList::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectList>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ObjectList, _impl_._has_bits_);
  static const ::cavnue::messages::common::v1::Header& header(const ObjectList* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cavnue::messages::inference::v1::RadarInfo& info(const ObjectList* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& observation_ts(const ObjectList* msg);
  static void set_has_observation_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Duration& observation_duration(const ObjectList* msg);
  static void set_has_observation_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::cavnue::messages::common::v1::DataSource& data_source(const ObjectList* msg);
  static void set_has_data_source(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::cavnue::messages::common::v1::Header&
ObjectList::_Internal::header(const ObjectList* msg) {
  return *msg->_impl_.header_;
}
const ::cavnue::messages::inference::v1::RadarInfo&
ObjectList::_Internal::info(const ObjectList* msg) {
  return *msg->_impl_.info_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ObjectList::_Internal::observation_ts(const ObjectList* msg) {
  return *msg->_impl_.observation_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
ObjectList::_Internal::observation_duration(const ObjectList* msg) {
  return *msg->_impl_.observation_duration_;
}
const ::cavnue::messages::common::v1::DataSource&
ObjectList::_Internal::data_source(const ObjectList* msg) {
  return *msg->_impl_.data_source_;
}
void ObjectList::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ObjectList::clear_observation_ts() {
  if (_impl_.observation_ts_ != nullptr) _impl_.observation_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ObjectList::clear_observation_duration() {
  if (_impl_.observation_duration_ != nullptr) _impl_.observation_duration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ObjectList::clear_data_source() {
  if (_impl_.data_source_ != nullptr) _impl_.data_source_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
ObjectList::ObjectList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.inference.v1.ObjectList)
}
ObjectList::ObjectList(const ObjectList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.objects_){from._impl_.objects_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.observation_ts_){nullptr}
    , decltype(_impl_.observation_duration_){nullptr}
    , decltype(_impl_.data_source_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_ = new ::cavnue::messages::common::v1::Header(*from._impl_.header_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.info_ = new ::cavnue::messages::inference::v1::RadarInfo(*from._impl_.info_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.observation_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.observation_ts_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.observation_duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.observation_duration_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.data_source_ = new ::cavnue::messages::common::v1::DataSource(*from._impl_.data_source_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.inference.v1.ObjectList)
}

inline void ObjectList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.objects_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.observation_ts_){nullptr}
    , decltype(_impl_.observation_duration_){nullptr}
    , decltype(_impl_.data_source_){nullptr}
  };
}

ObjectList::~ObjectList() {
  // @@protoc_insertion_point(destructor:cavnue.messages.inference.v1.ObjectList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_objects()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.info_;
  if (this != internal_default_instance()) delete _impl_.observation_ts_;
  if (this != internal_default_instance()) delete _impl_.observation_duration_;
  if (this != internal_default_instance()) delete _impl_.data_source_;
}

void ObjectList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectList::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.inference.v1.ObjectList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_objects()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.info_ != nullptr);
      _impl_.info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.observation_ts_ != nullptr);
      _impl_.observation_ts_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.observation_duration_ != nullptr);
      _impl_.observation_duration_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.data_source_ != nullptr);
      _impl_.data_source_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.inference.v1.RadarInfo info = 2 [json_name = "info"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp observation_ts = 3 [json_name = "observationTs"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_observation_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Duration observation_duration = 4 [json_name = "observationDuration"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_observation_duration(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.common.v1.DataSource data_source = 5 [json_name = "dataSource"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_source(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cavnue.messages.inference.v1.ObjectList.Object objects = 6 [json_name = "objects"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ObjectList::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.inference.v1.ObjectList)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.inference.v1.RadarInfo info = 2 [json_name = "info"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp observation_ts = 3 [json_name = "observationTs"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::observation_ts(this),
        _Internal::observation_ts(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration observation_duration = 4 [json_name = "observationDuration"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::observation_duration(this),
        _Internal::observation_duration(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.common.v1.DataSource data_source = 5 [json_name = "dataSource"];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::data_source(this),
        _Internal::data_source(this).GetCachedSize(), target, stream);
  }

  // repeated .cavnue.messages.inference.v1.ObjectList.Object objects = 6 [json_name = "objects"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_objects_size()); i < n; i++) {
    const auto& repfield = this->_internal_objects(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.inference.v1.ObjectList)
  return target;
}

::size_t ObjectList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.inference.v1.ObjectList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cavnue.messages.inference.v1.ObjectList.Object objects = 6 [json_name = "objects"];
  total_size += 1UL * this->_internal_objects_size();
  for (const auto& msg : this->_internal_objects()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // .cavnue.messages.inference.v1.RadarInfo info = 2 [json_name = "info"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.info_);
    }

    // .google.protobuf.Timestamp observation_ts = 3 [json_name = "observationTs"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.observation_ts_);
    }

    // .google.protobuf.Duration observation_duration = 4 [json_name = "observationDuration"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.observation_duration_);
    }

    // .cavnue.messages.common.v1.DataSource data_source = 5 [json_name = "dataSource"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_source_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectList::GetClassData() const { return &_class_data_; }


void ObjectList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectList*>(&to_msg);
  auto& from = static_cast<const ObjectList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.inference.v1.ObjectList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_objects()->MergeFrom(from._internal_objects());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::cavnue::messages::common::v1::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_info()->::cavnue::messages::inference::v1::RadarInfo::MergeFrom(
          from._internal_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_observation_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_observation_ts());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_observation_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
          from._internal_observation_duration());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_data_source()->::cavnue::messages::common::v1::DataSource::MergeFrom(
          from._internal_data_source());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectList::CopyFrom(const ObjectList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.inference.v1.ObjectList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectList::IsInitialized() const {
  return true;
}

void ObjectList::InternalSwap(ObjectList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_objects()->InternalSwap(other->_internal_mutable_objects());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectList, _impl_.data_source_)
      + sizeof(ObjectList::_impl_.data_source_)
      - PROTOBUF_FIELD_OFFSET(ObjectList, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto_getter, &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto[3]);
}
// ===================================================================

class TargetList_Target::_Internal {
 public:
};

TargetList_Target::TargetList_Target(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.inference.v1.TargetList.Target)
}
TargetList_Target::TargetList_Target(const TargetList_Target& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.inference.v1.TargetList.Target)
}

inline void TargetList_Target::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.azimuth_angle_) { 0 }

    , decltype(_impl_.elevation_angle_) { 0 }

    , decltype(_impl_.range_) { 0 }

    , decltype(_impl_.rcs_) { 0 }

    , decltype(_impl_.snr_) { 0 }

    , decltype(_impl_.speed_radial_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TargetList_Target::~TargetList_Target() {
  // @@protoc_insertion_point(destructor:cavnue.messages.inference.v1.TargetList.Target)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TargetList_Target::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void TargetList_Target::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TargetList_Target::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.inference.v1.TargetList.Target)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.azimuth_angle_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.speed_radial_) -
      reinterpret_cast<char*>(&_impl_.azimuth_angle_)) + sizeof(_impl_.speed_radial_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TargetList_Target::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double azimuth_angle = 1 [json_name = "azimuthAngle", (.cavnue.messages.common.v1.units) = UNITS_RADIANS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _impl_.azimuth_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // double elevation_angle = 2 [json_name = "elevationAngle", (.cavnue.messages.common.v1.units) = UNITS_RADIANS];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _impl_.elevation_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // double range = 3 [json_name = "range", (.cavnue.messages.common.v1.units) = UNITS_METERS];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _impl_.range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // double rcs = 4 [json_name = "rcs"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 33)) {
          _impl_.rcs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // double snr = 5 [json_name = "snr", (.cavnue.messages.common.v1.units) = UNITS_DECIBELS];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 41)) {
          _impl_.snr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // double speed_radial = 6 [json_name = "speedRadial", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 49)) {
          _impl_.speed_radial_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TargetList_Target::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.inference.v1.TargetList.Target)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double azimuth_angle = 1 [json_name = "azimuthAngle", (.cavnue.messages.common.v1.units) = UNITS_RADIANS];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_azimuth_angle = this->_internal_azimuth_angle();
  ::uint64_t raw_azimuth_angle;
  memcpy(&raw_azimuth_angle, &tmp_azimuth_angle, sizeof(tmp_azimuth_angle));
  if (raw_azimuth_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_azimuth_angle(), target);
  }

  // double elevation_angle = 2 [json_name = "elevationAngle", (.cavnue.messages.common.v1.units) = UNITS_RADIANS];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_elevation_angle = this->_internal_elevation_angle();
  ::uint64_t raw_elevation_angle;
  memcpy(&raw_elevation_angle, &tmp_elevation_angle, sizeof(tmp_elevation_angle));
  if (raw_elevation_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_elevation_angle(), target);
  }

  // double range = 3 [json_name = "range", (.cavnue.messages.common.v1.units) = UNITS_METERS];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_range = this->_internal_range();
  ::uint64_t raw_range;
  memcpy(&raw_range, &tmp_range, sizeof(tmp_range));
  if (raw_range != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_range(), target);
  }

  // double rcs = 4 [json_name = "rcs"];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_rcs = this->_internal_rcs();
  ::uint64_t raw_rcs;
  memcpy(&raw_rcs, &tmp_rcs, sizeof(tmp_rcs));
  if (raw_rcs != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_rcs(), target);
  }

  // double snr = 5 [json_name = "snr", (.cavnue.messages.common.v1.units) = UNITS_DECIBELS];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_snr = this->_internal_snr();
  ::uint64_t raw_snr;
  memcpy(&raw_snr, &tmp_snr, sizeof(tmp_snr));
  if (raw_snr != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_snr(), target);
  }

  // double speed_radial = 6 [json_name = "speedRadial", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_speed_radial = this->_internal_speed_radial();
  ::uint64_t raw_speed_radial;
  memcpy(&raw_speed_radial, &tmp_speed_radial, sizeof(tmp_speed_radial));
  if (raw_speed_radial != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        6, this->_internal_speed_radial(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.inference.v1.TargetList.Target)
  return target;
}

::size_t TargetList_Target::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.inference.v1.TargetList.Target)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double azimuth_angle = 1 [json_name = "azimuthAngle", (.cavnue.messages.common.v1.units) = UNITS_RADIANS];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_azimuth_angle = this->_internal_azimuth_angle();
  ::uint64_t raw_azimuth_angle;
  memcpy(&raw_azimuth_angle, &tmp_azimuth_angle, sizeof(tmp_azimuth_angle));
  if (raw_azimuth_angle != 0) {
    total_size += 9;
  }

  // double elevation_angle = 2 [json_name = "elevationAngle", (.cavnue.messages.common.v1.units) = UNITS_RADIANS];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_elevation_angle = this->_internal_elevation_angle();
  ::uint64_t raw_elevation_angle;
  memcpy(&raw_elevation_angle, &tmp_elevation_angle, sizeof(tmp_elevation_angle));
  if (raw_elevation_angle != 0) {
    total_size += 9;
  }

  // double range = 3 [json_name = "range", (.cavnue.messages.common.v1.units) = UNITS_METERS];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_range = this->_internal_range();
  ::uint64_t raw_range;
  memcpy(&raw_range, &tmp_range, sizeof(tmp_range));
  if (raw_range != 0) {
    total_size += 9;
  }

  // double rcs = 4 [json_name = "rcs"];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_rcs = this->_internal_rcs();
  ::uint64_t raw_rcs;
  memcpy(&raw_rcs, &tmp_rcs, sizeof(tmp_rcs));
  if (raw_rcs != 0) {
    total_size += 9;
  }

  // double snr = 5 [json_name = "snr", (.cavnue.messages.common.v1.units) = UNITS_DECIBELS];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_snr = this->_internal_snr();
  ::uint64_t raw_snr;
  memcpy(&raw_snr, &tmp_snr, sizeof(tmp_snr));
  if (raw_snr != 0) {
    total_size += 9;
  }

  // double speed_radial = 6 [json_name = "speedRadial", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_speed_radial = this->_internal_speed_radial();
  ::uint64_t raw_speed_radial;
  memcpy(&raw_speed_radial, &tmp_speed_radial, sizeof(tmp_speed_radial));
  if (raw_speed_radial != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TargetList_Target::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TargetList_Target::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TargetList_Target::GetClassData() const { return &_class_data_; }


void TargetList_Target::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TargetList_Target*>(&to_msg);
  auto& from = static_cast<const TargetList_Target&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.inference.v1.TargetList.Target)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_azimuth_angle = from._internal_azimuth_angle();
  ::uint64_t raw_azimuth_angle;
  memcpy(&raw_azimuth_angle, &tmp_azimuth_angle, sizeof(tmp_azimuth_angle));
  if (raw_azimuth_angle != 0) {
    _this->_internal_set_azimuth_angle(from._internal_azimuth_angle());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_elevation_angle = from._internal_elevation_angle();
  ::uint64_t raw_elevation_angle;
  memcpy(&raw_elevation_angle, &tmp_elevation_angle, sizeof(tmp_elevation_angle));
  if (raw_elevation_angle != 0) {
    _this->_internal_set_elevation_angle(from._internal_elevation_angle());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_range = from._internal_range();
  ::uint64_t raw_range;
  memcpy(&raw_range, &tmp_range, sizeof(tmp_range));
  if (raw_range != 0) {
    _this->_internal_set_range(from._internal_range());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_rcs = from._internal_rcs();
  ::uint64_t raw_rcs;
  memcpy(&raw_rcs, &tmp_rcs, sizeof(tmp_rcs));
  if (raw_rcs != 0) {
    _this->_internal_set_rcs(from._internal_rcs());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_snr = from._internal_snr();
  ::uint64_t raw_snr;
  memcpy(&raw_snr, &tmp_snr, sizeof(tmp_snr));
  if (raw_snr != 0) {
    _this->_internal_set_snr(from._internal_snr());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_speed_radial = from._internal_speed_radial();
  ::uint64_t raw_speed_radial;
  memcpy(&raw_speed_radial, &tmp_speed_radial, sizeof(tmp_speed_radial));
  if (raw_speed_radial != 0) {
    _this->_internal_set_speed_radial(from._internal_speed_radial());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TargetList_Target::CopyFrom(const TargetList_Target& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.inference.v1.TargetList.Target)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetList_Target::IsInitialized() const {
  return true;
}

void TargetList_Target::InternalSwap(TargetList_Target* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TargetList_Target, _impl_.speed_radial_)
      + sizeof(TargetList_Target::_impl_.speed_radial_)
      - PROTOBUF_FIELD_OFFSET(TargetList_Target, _impl_.azimuth_angle_)>(
          reinterpret_cast<char*>(&_impl_.azimuth_angle_),
          reinterpret_cast<char*>(&other->_impl_.azimuth_angle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetList_Target::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto_getter, &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto[4]);
}
// ===================================================================

class TargetList::_Internal {
 public:
  using HasBits = decltype(std::declval<TargetList>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TargetList, _impl_._has_bits_);
  static const ::cavnue::messages::common::v1::Header& header(const TargetList* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cavnue::messages::inference::v1::RadarInfo& info(const TargetList* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& observation_ts(const TargetList* msg);
  static void set_has_observation_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Duration& observation_duration(const TargetList* msg);
  static void set_has_observation_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::cavnue::messages::common::v1::DataSource& data_source(const TargetList* msg);
  static void set_has_data_source(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::cavnue::messages::common::v1::Header&
TargetList::_Internal::header(const TargetList* msg) {
  return *msg->_impl_.header_;
}
const ::cavnue::messages::inference::v1::RadarInfo&
TargetList::_Internal::info(const TargetList* msg) {
  return *msg->_impl_.info_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TargetList::_Internal::observation_ts(const TargetList* msg) {
  return *msg->_impl_.observation_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
TargetList::_Internal::observation_duration(const TargetList* msg) {
  return *msg->_impl_.observation_duration_;
}
const ::cavnue::messages::common::v1::DataSource&
TargetList::_Internal::data_source(const TargetList* msg) {
  return *msg->_impl_.data_source_;
}
void TargetList::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TargetList::clear_observation_ts() {
  if (_impl_.observation_ts_ != nullptr) _impl_.observation_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void TargetList::clear_observation_duration() {
  if (_impl_.observation_duration_ != nullptr) _impl_.observation_duration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void TargetList::clear_data_source() {
  if (_impl_.data_source_ != nullptr) _impl_.data_source_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
TargetList::TargetList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.inference.v1.TargetList)
}
TargetList::TargetList(const TargetList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TargetList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.targets_){from._impl_.targets_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.observation_ts_){nullptr}
    , decltype(_impl_.observation_duration_){nullptr}
    , decltype(_impl_.data_source_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_ = new ::cavnue::messages::common::v1::Header(*from._impl_.header_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.info_ = new ::cavnue::messages::inference::v1::RadarInfo(*from._impl_.info_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.observation_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.observation_ts_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.observation_duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.observation_duration_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.data_source_ = new ::cavnue::messages::common::v1::DataSource(*from._impl_.data_source_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.inference.v1.TargetList)
}

inline void TargetList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.targets_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.observation_ts_){nullptr}
    , decltype(_impl_.observation_duration_){nullptr}
    , decltype(_impl_.data_source_){nullptr}
  };
}

TargetList::~TargetList() {
  // @@protoc_insertion_point(destructor:cavnue.messages.inference.v1.TargetList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TargetList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_targets()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.info_;
  if (this != internal_default_instance()) delete _impl_.observation_ts_;
  if (this != internal_default_instance()) delete _impl_.observation_duration_;
  if (this != internal_default_instance()) delete _impl_.data_source_;
}

void TargetList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TargetList::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.inference.v1.TargetList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_targets()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.info_ != nullptr);
      _impl_.info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.observation_ts_ != nullptr);
      _impl_.observation_ts_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.observation_duration_ != nullptr);
      _impl_.observation_duration_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.data_source_ != nullptr);
      _impl_.data_source_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TargetList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.inference.v1.RadarInfo info = 2 [json_name = "info"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp observation_ts = 3 [json_name = "observationTs"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_observation_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Duration observation_duration = 4 [json_name = "observationDuration"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_observation_duration(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.common.v1.DataSource data_source = 5 [json_name = "dataSource"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_source(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cavnue.messages.inference.v1.TargetList.Target targets = 6 [json_name = "targets"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_targets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TargetList::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.inference.v1.TargetList)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.inference.v1.RadarInfo info = 2 [json_name = "info"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp observation_ts = 3 [json_name = "observationTs"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::observation_ts(this),
        _Internal::observation_ts(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration observation_duration = 4 [json_name = "observationDuration"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::observation_duration(this),
        _Internal::observation_duration(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.common.v1.DataSource data_source = 5 [json_name = "dataSource"];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::data_source(this),
        _Internal::data_source(this).GetCachedSize(), target, stream);
  }

  // repeated .cavnue.messages.inference.v1.TargetList.Target targets = 6 [json_name = "targets"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_targets_size()); i < n; i++) {
    const auto& repfield = this->_internal_targets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.inference.v1.TargetList)
  return target;
}

::size_t TargetList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.inference.v1.TargetList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cavnue.messages.inference.v1.TargetList.Target targets = 6 [json_name = "targets"];
  total_size += 1UL * this->_internal_targets_size();
  for (const auto& msg : this->_internal_targets()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // .cavnue.messages.inference.v1.RadarInfo info = 2 [json_name = "info"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.info_);
    }

    // .google.protobuf.Timestamp observation_ts = 3 [json_name = "observationTs"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.observation_ts_);
    }

    // .google.protobuf.Duration observation_duration = 4 [json_name = "observationDuration"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.observation_duration_);
    }

    // .cavnue.messages.common.v1.DataSource data_source = 5 [json_name = "dataSource"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_source_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TargetList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TargetList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TargetList::GetClassData() const { return &_class_data_; }


void TargetList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TargetList*>(&to_msg);
  auto& from = static_cast<const TargetList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.inference.v1.TargetList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_targets()->MergeFrom(from._internal_targets());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::cavnue::messages::common::v1::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_info()->::cavnue::messages::inference::v1::RadarInfo::MergeFrom(
          from._internal_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_observation_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_observation_ts());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_observation_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
          from._internal_observation_duration());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_data_source()->::cavnue::messages::common::v1::DataSource::MergeFrom(
          from._internal_data_source());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TargetList::CopyFrom(const TargetList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.inference.v1.TargetList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetList::IsInitialized() const {
  return true;
}

void TargetList::InternalSwap(TargetList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_targets()->InternalSwap(other->_internal_mutable_targets());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TargetList, _impl_.data_source_)
      + sizeof(TargetList::_impl_.data_source_)
      - PROTOBUF_FIELD_OFFSET(TargetList, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto_getter, &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto[5]);
}
// ===================================================================

class RadarStats::_Internal {
 public:
  using HasBits = decltype(std::declval<RadarStats>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RadarStats, _impl_._has_bits_);
  static const ::cavnue::messages::common::v1::Header& header(const RadarStats* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cavnue::messages::inference::v1::RadarInfo& info(const RadarStats* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& observation_ts(const RadarStats* msg);
  static void set_has_observation_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Duration& observation_duration(const RadarStats* msg);
  static void set_has_observation_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::cavnue::messages::common::v1::DataSource& data_source(const RadarStats* msg);
  static void set_has_data_source(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::cavnue::messages::common::v1::Header&
RadarStats::_Internal::header(const RadarStats* msg) {
  return *msg->_impl_.header_;
}
const ::cavnue::messages::inference::v1::RadarInfo&
RadarStats::_Internal::info(const RadarStats* msg) {
  return *msg->_impl_.info_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RadarStats::_Internal::observation_ts(const RadarStats* msg) {
  return *msg->_impl_.observation_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
RadarStats::_Internal::observation_duration(const RadarStats* msg) {
  return *msg->_impl_.observation_duration_;
}
const ::cavnue::messages::common::v1::DataSource&
RadarStats::_Internal::data_source(const RadarStats* msg) {
  return *msg->_impl_.data_source_;
}
void RadarStats::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RadarStats::clear_observation_ts() {
  if (_impl_.observation_ts_ != nullptr) _impl_.observation_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void RadarStats::clear_observation_duration() {
  if (_impl_.observation_duration_ != nullptr) _impl_.observation_duration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void RadarStats::clear_data_source() {
  if (_impl_.data_source_ != nullptr) _impl_.data_source_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
RadarStats::RadarStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.inference.v1.RadarStats)
}
RadarStats::RadarStats(const RadarStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RadarStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.observation_ts_){nullptr}
    , decltype(_impl_.observation_duration_){nullptr}
    , decltype(_impl_.data_source_){nullptr}
    , decltype(_impl_.blind_) {}

    , decltype(_impl_.interference_) {}

    , decltype(_impl_.rain_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_ = new ::cavnue::messages::common::v1::Header(*from._impl_.header_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.info_ = new ::cavnue::messages::inference::v1::RadarInfo(*from._impl_.info_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.observation_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.observation_ts_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.observation_duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.observation_duration_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.data_source_ = new ::cavnue::messages::common::v1::DataSource(*from._impl_.data_source_);
  }
  ::memcpy(&_impl_.blind_, &from._impl_.blind_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.rain_) -
    reinterpret_cast<char*>(&_impl_.blind_)) + sizeof(_impl_.rain_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.inference.v1.RadarStats)
}

inline void RadarStats::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.observation_ts_){nullptr}
    , decltype(_impl_.observation_duration_){nullptr}
    , decltype(_impl_.data_source_){nullptr}
    , decltype(_impl_.blind_) { false }

    , decltype(_impl_.interference_) { false }

    , decltype(_impl_.rain_) { false }

  };
}

RadarStats::~RadarStats() {
  // @@protoc_insertion_point(destructor:cavnue.messages.inference.v1.RadarStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RadarStats::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.info_;
  if (this != internal_default_instance()) delete _impl_.observation_ts_;
  if (this != internal_default_instance()) delete _impl_.observation_duration_;
  if (this != internal_default_instance()) delete _impl_.data_source_;
}

void RadarStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RadarStats::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.inference.v1.RadarStats)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.info_ != nullptr);
      _impl_.info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.observation_ts_ != nullptr);
      _impl_.observation_ts_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.observation_duration_ != nullptr);
      _impl_.observation_duration_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.data_source_ != nullptr);
      _impl_.data_source_->Clear();
    }
  }
  ::memset(&_impl_.blind_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.rain_) -
      reinterpret_cast<char*>(&_impl_.blind_)) + sizeof(_impl_.rain_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.inference.v1.RadarInfo info = 2 [json_name = "info"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp observation_ts = 3 [json_name = "observationTs"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_observation_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Duration observation_duration = 4 [json_name = "observationDuration"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_observation_duration(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.common.v1.DataSource data_source = 5 [json_name = "dataSource"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_source(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool blind = 6 [json_name = "blind"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.blind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool interference = 7 [json_name = "interference"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.interference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool rain = 8 [json_name = "rain"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.rain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RadarStats::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.inference.v1.RadarStats)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.inference.v1.RadarInfo info = 2 [json_name = "info"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp observation_ts = 3 [json_name = "observationTs"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::observation_ts(this),
        _Internal::observation_ts(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration observation_duration = 4 [json_name = "observationDuration"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::observation_duration(this),
        _Internal::observation_duration(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.common.v1.DataSource data_source = 5 [json_name = "dataSource"];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::data_source(this),
        _Internal::data_source(this).GetCachedSize(), target, stream);
  }

  // bool blind = 6 [json_name = "blind"];
  if (this->_internal_blind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_blind(), target);
  }

  // bool interference = 7 [json_name = "interference"];
  if (this->_internal_interference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_interference(), target);
  }

  // bool rain = 8 [json_name = "rain"];
  if (this->_internal_rain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_rain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.inference.v1.RadarStats)
  return target;
}

::size_t RadarStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.inference.v1.RadarStats)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // .cavnue.messages.inference.v1.RadarInfo info = 2 [json_name = "info"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.info_);
    }

    // .google.protobuf.Timestamp observation_ts = 3 [json_name = "observationTs"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.observation_ts_);
    }

    // .google.protobuf.Duration observation_duration = 4 [json_name = "observationDuration"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.observation_duration_);
    }

    // .cavnue.messages.common.v1.DataSource data_source = 5 [json_name = "dataSource"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_source_);
    }

  }
  // bool blind = 6 [json_name = "blind"];
  if (this->_internal_blind() != 0) {
    total_size += 2;
  }

  // bool interference = 7 [json_name = "interference"];
  if (this->_internal_interference() != 0) {
    total_size += 2;
  }

  // bool rain = 8 [json_name = "rain"];
  if (this->_internal_rain() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RadarStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RadarStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RadarStats::GetClassData() const { return &_class_data_; }


void RadarStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RadarStats*>(&to_msg);
  auto& from = static_cast<const RadarStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.inference.v1.RadarStats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::cavnue::messages::common::v1::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_info()->::cavnue::messages::inference::v1::RadarInfo::MergeFrom(
          from._internal_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_observation_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_observation_ts());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_observation_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
          from._internal_observation_duration());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_data_source()->::cavnue::messages::common::v1::DataSource::MergeFrom(
          from._internal_data_source());
    }
  }
  if (from._internal_blind() != 0) {
    _this->_internal_set_blind(from._internal_blind());
  }
  if (from._internal_interference() != 0) {
    _this->_internal_set_interference(from._internal_interference());
  }
  if (from._internal_rain() != 0) {
    _this->_internal_set_rain(from._internal_rain());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RadarStats::CopyFrom(const RadarStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.inference.v1.RadarStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarStats::IsInitialized() const {
  return true;
}

void RadarStats::InternalSwap(RadarStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarStats, _impl_.rain_)
      + sizeof(RadarStats::_impl_.rain_)
      - PROTOBUF_FIELD_OFFSET(RadarStats, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto_getter, &descriptor_table_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2finference_2fv1_2fradar_2eproto[6]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace inference
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cavnue::messages::inference::v1::RadarInfo*
Arena::CreateMaybeMessage< ::cavnue::messages::inference::v1::RadarInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::inference::v1::RadarInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus*
Arena::CreateMaybeMessage< ::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::inference::v1::ObjectList_Object_TrackingStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::inference::v1::ObjectList_Object*
Arena::CreateMaybeMessage< ::cavnue::messages::inference::v1::ObjectList_Object >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::inference::v1::ObjectList_Object >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::inference::v1::ObjectList*
Arena::CreateMaybeMessage< ::cavnue::messages::inference::v1::ObjectList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::inference::v1::ObjectList >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::inference::v1::TargetList_Target*
Arena::CreateMaybeMessage< ::cavnue::messages::inference::v1::TargetList_Target >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::inference::v1::TargetList_Target >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::inference::v1::TargetList*
Arena::CreateMaybeMessage< ::cavnue::messages::inference::v1::TargetList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::inference::v1::TargetList >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::inference::v1::RadarStats*
Arena::CreateMaybeMessage< ::cavnue::messages::inference::v1::RadarStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::inference::v1::RadarStats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

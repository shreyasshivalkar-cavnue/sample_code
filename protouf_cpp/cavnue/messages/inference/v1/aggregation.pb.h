// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/inference/v1/aggregation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cavnue/messages/common/v1/common.pb.h"
#include "cavnue/messages/common/v1/field_options.pb.h"
#include "google/protobuf/timestamp.pb.h"
#include "cavnue/third_party/bq/v1/bq_field.pb.h"
#include "cavnue/messages/geometry/v1/vector.pb.h"
#include "cavnue/messages/spatial/v1/utm.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto;
namespace cavnue {
namespace messages {
namespace inference {
namespace v1 {
class ActorAggregation;
struct ActorAggregationDefaultTypeInternal;
extern ActorAggregationDefaultTypeInternal _ActorAggregation_default_instance_;
class ActorAggregation_Statistics;
struct ActorAggregation_StatisticsDefaultTypeInternal;
extern ActorAggregation_StatisticsDefaultTypeInternal _ActorAggregation_Statistics_default_instance_;
class LaneAggregation;
struct LaneAggregationDefaultTypeInternal;
extern LaneAggregationDefaultTypeInternal _LaneAggregation_default_instance_;
class LaneAggregation_Statistics;
struct LaneAggregation_StatisticsDefaultTypeInternal;
extern LaneAggregation_StatisticsDefaultTypeInternal _LaneAggregation_Statistics_default_instance_;
}  // namespace v1
}  // namespace inference
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template <>
::cavnue::messages::inference::v1::ActorAggregation* Arena::CreateMaybeMessage<::cavnue::messages::inference::v1::ActorAggregation>(Arena*);
template <>
::cavnue::messages::inference::v1::ActorAggregation_Statistics* Arena::CreateMaybeMessage<::cavnue::messages::inference::v1::ActorAggregation_Statistics>(Arena*);
template <>
::cavnue::messages::inference::v1::LaneAggregation* Arena::CreateMaybeMessage<::cavnue::messages::inference::v1::LaneAggregation>(Arena*);
template <>
::cavnue::messages::inference::v1::LaneAggregation_Statistics* Arena::CreateMaybeMessage<::cavnue::messages::inference::v1::LaneAggregation_Statistics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cavnue {
namespace messages {
namespace inference {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class LaneAggregation_Statistics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.inference.v1.LaneAggregation.Statistics) */ {
 public:
  inline LaneAggregation_Statistics() : LaneAggregation_Statistics(nullptr) {}
  ~LaneAggregation_Statistics() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LaneAggregation_Statistics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaneAggregation_Statistics(const LaneAggregation_Statistics& from);
  LaneAggregation_Statistics(LaneAggregation_Statistics&& from) noexcept
    : LaneAggregation_Statistics() {
    *this = ::std::move(from);
  }

  inline LaneAggregation_Statistics& operator=(const LaneAggregation_Statistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneAggregation_Statistics& operator=(LaneAggregation_Statistics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaneAggregation_Statistics& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaneAggregation_Statistics* internal_default_instance() {
    return reinterpret_cast<const LaneAggregation_Statistics*>(
               &_LaneAggregation_Statistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LaneAggregation_Statistics& a, LaneAggregation_Statistics& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneAggregation_Statistics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaneAggregation_Statistics* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaneAggregation_Statistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LaneAggregation_Statistics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LaneAggregation_Statistics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LaneAggregation_Statistics& from) {
    LaneAggregation_Statistics::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneAggregation_Statistics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.inference.v1.LaneAggregation.Statistics";
  }
  protected:
  explicit LaneAggregation_Statistics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneIdFieldNumber = 1,
    kSpeedMeanFieldNumber = 2,
    kSpeedStdFieldNumber = 3,
    kSpeedP5FieldNumber = 4,
    kSpeedP70FieldNumber = 5,
    kActorsUniqueFieldNumber = 6,
  };
  // int32 lane_id = 1 [json_name = "laneId"];
  void clear_lane_id() ;
  ::int32_t lane_id() const;
  void set_lane_id(::int32_t value);

  private:
  ::int32_t _internal_lane_id() const;
  void _internal_set_lane_id(::int32_t value);

  public:
  // float speed_mean = 2 [json_name = "speedMean", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
  void clear_speed_mean() ;
  float speed_mean() const;
  void set_speed_mean(float value);

  private:
  float _internal_speed_mean() const;
  void _internal_set_speed_mean(float value);

  public:
  // float speed_std = 3 [json_name = "speedStd", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
  void clear_speed_std() ;
  float speed_std() const;
  void set_speed_std(float value);

  private:
  float _internal_speed_std() const;
  void _internal_set_speed_std(float value);

  public:
  // float speed_p5 = 4 [json_name = "speedP5", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
  void clear_speed_p5() ;
  float speed_p5() const;
  void set_speed_p5(float value);

  private:
  float _internal_speed_p5() const;
  void _internal_set_speed_p5(float value);

  public:
  // float speed_p70 = 5 [json_name = "speedP70", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
  void clear_speed_p70() ;
  float speed_p70() const;
  void set_speed_p70(float value);

  private:
  float _internal_speed_p70() const;
  void _internal_set_speed_p70(float value);

  public:
  // uint32 actors_unique = 6 [json_name = "actorsUnique"];
  void clear_actors_unique() ;
  ::uint32_t actors_unique() const;
  void set_actors_unique(::uint32_t value);

  private:
  ::uint32_t _internal_actors_unique() const;
  void _internal_set_actors_unique(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.inference.v1.LaneAggregation.Statistics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t lane_id_;
    float speed_mean_;
    float speed_std_;
    float speed_p5_;
    float speed_p70_;
    ::uint32_t actors_unique_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto;
};// -------------------------------------------------------------------

class LaneAggregation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.inference.v1.LaneAggregation) */ {
 public:
  inline LaneAggregation() : LaneAggregation(nullptr) {}
  ~LaneAggregation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LaneAggregation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaneAggregation(const LaneAggregation& from);
  LaneAggregation(LaneAggregation&& from) noexcept
    : LaneAggregation() {
    *this = ::std::move(from);
  }

  inline LaneAggregation& operator=(const LaneAggregation& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneAggregation& operator=(LaneAggregation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaneAggregation& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaneAggregation* internal_default_instance() {
    return reinterpret_cast<const LaneAggregation*>(
               &_LaneAggregation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LaneAggregation& a, LaneAggregation& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneAggregation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaneAggregation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaneAggregation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LaneAggregation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LaneAggregation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LaneAggregation& from) {
    LaneAggregation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneAggregation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.inference.v1.LaneAggregation";
  }
  protected:
  explicit LaneAggregation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LaneAggregation_Statistics Statistics;

  // accessors -------------------------------------------------------

  enum : int {
    kStatisticsFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kIntervalStartTsFieldNumber = 2,
    kIntervalEndTsFieldNumber = 3,
  };
  // repeated .cavnue.messages.inference.v1.LaneAggregation.Statistics statistics = 4 [json_name = "statistics"];
  int statistics_size() const;
  private:
  int _internal_statistics_size() const;

  public:
  void clear_statistics() ;
  ::cavnue::messages::inference::v1::LaneAggregation_Statistics* mutable_statistics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::LaneAggregation_Statistics >*
      mutable_statistics();
  private:
  const ::cavnue::messages::inference::v1::LaneAggregation_Statistics& _internal_statistics(int index) const;
  ::cavnue::messages::inference::v1::LaneAggregation_Statistics* _internal_add_statistics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::LaneAggregation_Statistics>& _internal_statistics() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::LaneAggregation_Statistics>* _internal_mutable_statistics();
  public:
  const ::cavnue::messages::inference::v1::LaneAggregation_Statistics& statistics(int index) const;
  ::cavnue::messages::inference::v1::LaneAggregation_Statistics* add_statistics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::LaneAggregation_Statistics >&
      statistics() const;
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  bool has_header() const;
  void clear_header() ;
  const ::cavnue::messages::common::v1::Header& header() const;
  PROTOBUF_NODISCARD ::cavnue::messages::common::v1::Header* release_header();
  ::cavnue::messages::common::v1::Header* mutable_header();
  void set_allocated_header(::cavnue::messages::common::v1::Header* header);
  private:
  const ::cavnue::messages::common::v1::Header& _internal_header() const;
  ::cavnue::messages::common::v1::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::cavnue::messages::common::v1::Header* header);
  ::cavnue::messages::common::v1::Header* unsafe_arena_release_header();
  // .google.protobuf.Timestamp interval_start_ts = 2 [json_name = "intervalStartTs", (.gen_bq_schema.bigquery) = {
  bool has_interval_start_ts() const;
  void clear_interval_start_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& interval_start_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_interval_start_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_interval_start_ts();
  void set_allocated_interval_start_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* interval_start_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_interval_start_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_interval_start_ts();
  public:
  void unsafe_arena_set_allocated_interval_start_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* interval_start_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_interval_start_ts();
  // .google.protobuf.Timestamp interval_end_ts = 3 [json_name = "intervalEndTs", (.gen_bq_schema.bigquery) = {
  bool has_interval_end_ts() const;
  void clear_interval_end_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& interval_end_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_interval_end_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_interval_end_ts();
  void set_allocated_interval_end_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* interval_end_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_interval_end_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_interval_end_ts();
  public:
  void unsafe_arena_set_allocated_interval_end_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* interval_end_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_interval_end_ts();
  // @@protoc_insertion_point(class_scope:cavnue.messages.inference.v1.LaneAggregation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::LaneAggregation_Statistics > statistics_;
    ::cavnue::messages::common::v1::Header* header_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* interval_start_ts_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* interval_end_ts_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto;
};// -------------------------------------------------------------------

class ActorAggregation_Statistics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.inference.v1.ActorAggregation.Statistics) */ {
 public:
  inline ActorAggregation_Statistics() : ActorAggregation_Statistics(nullptr) {}
  ~ActorAggregation_Statistics() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ActorAggregation_Statistics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActorAggregation_Statistics(const ActorAggregation_Statistics& from);
  ActorAggregation_Statistics(ActorAggregation_Statistics&& from) noexcept
    : ActorAggregation_Statistics() {
    *this = ::std::move(from);
  }

  inline ActorAggregation_Statistics& operator=(const ActorAggregation_Statistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActorAggregation_Statistics& operator=(ActorAggregation_Statistics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActorAggregation_Statistics& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActorAggregation_Statistics* internal_default_instance() {
    return reinterpret_cast<const ActorAggregation_Statistics*>(
               &_ActorAggregation_Statistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ActorAggregation_Statistics& a, ActorAggregation_Statistics& b) {
    a.Swap(&b);
  }
  inline void Swap(ActorAggregation_Statistics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActorAggregation_Statistics* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActorAggregation_Statistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActorAggregation_Statistics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActorAggregation_Statistics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ActorAggregation_Statistics& from) {
    ActorAggregation_Statistics::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActorAggregation_Statistics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.inference.v1.ActorAggregation.Statistics";
  }
  protected:
  explicit ActorAggregation_Statistics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionLastFieldNumber = 3,
    kProjectionFieldNumber = 4,
    kActorIdFieldNumber = 1,
    kSpeedMeanFieldNumber = 2,
  };
  // .cavnue.messages.geometry.v1.Vector3d position_last = 3 [json_name = "positionLast", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_UTM];
  bool has_position_last() const;
  void clear_position_last() ;
  const ::cavnue::messages::geometry::v1::Vector3d& position_last() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::Vector3d* release_position_last();
  ::cavnue::messages::geometry::v1::Vector3d* mutable_position_last();
  void set_allocated_position_last(::cavnue::messages::geometry::v1::Vector3d* position_last);
  private:
  const ::cavnue::messages::geometry::v1::Vector3d& _internal_position_last() const;
  ::cavnue::messages::geometry::v1::Vector3d* _internal_mutable_position_last();
  public:
  void unsafe_arena_set_allocated_position_last(
      ::cavnue::messages::geometry::v1::Vector3d* position_last);
  ::cavnue::messages::geometry::v1::Vector3d* unsafe_arena_release_position_last();
  // .cavnue.messages.spatial.v1.UTMProjection projection = 4 [json_name = "projection"];
  bool has_projection() const;
  void clear_projection() ;
  const ::cavnue::messages::spatial::v1::UTMProjection& projection() const;
  PROTOBUF_NODISCARD ::cavnue::messages::spatial::v1::UTMProjection* release_projection();
  ::cavnue::messages::spatial::v1::UTMProjection* mutable_projection();
  void set_allocated_projection(::cavnue::messages::spatial::v1::UTMProjection* projection);
  private:
  const ::cavnue::messages::spatial::v1::UTMProjection& _internal_projection() const;
  ::cavnue::messages::spatial::v1::UTMProjection* _internal_mutable_projection();
  public:
  void unsafe_arena_set_allocated_projection(
      ::cavnue::messages::spatial::v1::UTMProjection* projection);
  ::cavnue::messages::spatial::v1::UTMProjection* unsafe_arena_release_projection();
  // int64 actor_id = 1 [json_name = "actorId"];
  void clear_actor_id() ;
  ::int64_t actor_id() const;
  void set_actor_id(::int64_t value);

  private:
  ::int64_t _internal_actor_id() const;
  void _internal_set_actor_id(::int64_t value);

  public:
  // float speed_mean = 2 [json_name = "speedMean", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
  void clear_speed_mean() ;
  float speed_mean() const;
  void set_speed_mean(float value);

  private:
  float _internal_speed_mean() const;
  void _internal_set_speed_mean(float value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.inference.v1.ActorAggregation.Statistics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::geometry::v1::Vector3d* position_last_;
    ::cavnue::messages::spatial::v1::UTMProjection* projection_;
    ::int64_t actor_id_;
    float speed_mean_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto;
};// -------------------------------------------------------------------

class ActorAggregation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.inference.v1.ActorAggregation) */ {
 public:
  inline ActorAggregation() : ActorAggregation(nullptr) {}
  ~ActorAggregation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ActorAggregation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActorAggregation(const ActorAggregation& from);
  ActorAggregation(ActorAggregation&& from) noexcept
    : ActorAggregation() {
    *this = ::std::move(from);
  }

  inline ActorAggregation& operator=(const ActorAggregation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActorAggregation& operator=(ActorAggregation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActorAggregation& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActorAggregation* internal_default_instance() {
    return reinterpret_cast<const ActorAggregation*>(
               &_ActorAggregation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ActorAggregation& a, ActorAggregation& b) {
    a.Swap(&b);
  }
  inline void Swap(ActorAggregation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActorAggregation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActorAggregation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActorAggregation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActorAggregation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ActorAggregation& from) {
    ActorAggregation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActorAggregation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.inference.v1.ActorAggregation";
  }
  protected:
  explicit ActorAggregation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ActorAggregation_Statistics Statistics;

  // accessors -------------------------------------------------------

  enum : int {
    kStatisticsFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kIntervalStartTsFieldNumber = 2,
    kIntervalEndTsFieldNumber = 3,
  };
  // repeated .cavnue.messages.inference.v1.ActorAggregation.Statistics statistics = 4 [json_name = "statistics"];
  int statistics_size() const;
  private:
  int _internal_statistics_size() const;

  public:
  void clear_statistics() ;
  ::cavnue::messages::inference::v1::ActorAggregation_Statistics* mutable_statistics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::ActorAggregation_Statistics >*
      mutable_statistics();
  private:
  const ::cavnue::messages::inference::v1::ActorAggregation_Statistics& _internal_statistics(int index) const;
  ::cavnue::messages::inference::v1::ActorAggregation_Statistics* _internal_add_statistics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::ActorAggregation_Statistics>& _internal_statistics() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::ActorAggregation_Statistics>* _internal_mutable_statistics();
  public:
  const ::cavnue::messages::inference::v1::ActorAggregation_Statistics& statistics(int index) const;
  ::cavnue::messages::inference::v1::ActorAggregation_Statistics* add_statistics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::ActorAggregation_Statistics >&
      statistics() const;
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  bool has_header() const;
  void clear_header() ;
  const ::cavnue::messages::common::v1::Header& header() const;
  PROTOBUF_NODISCARD ::cavnue::messages::common::v1::Header* release_header();
  ::cavnue::messages::common::v1::Header* mutable_header();
  void set_allocated_header(::cavnue::messages::common::v1::Header* header);
  private:
  const ::cavnue::messages::common::v1::Header& _internal_header() const;
  ::cavnue::messages::common::v1::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::cavnue::messages::common::v1::Header* header);
  ::cavnue::messages::common::v1::Header* unsafe_arena_release_header();
  // .google.protobuf.Timestamp interval_start_ts = 2 [json_name = "intervalStartTs", (.gen_bq_schema.bigquery) = {
  bool has_interval_start_ts() const;
  void clear_interval_start_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& interval_start_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_interval_start_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_interval_start_ts();
  void set_allocated_interval_start_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* interval_start_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_interval_start_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_interval_start_ts();
  public:
  void unsafe_arena_set_allocated_interval_start_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* interval_start_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_interval_start_ts();
  // .google.protobuf.Timestamp interval_end_ts = 3 [json_name = "intervalEndTs", (.gen_bq_schema.bigquery) = {
  bool has_interval_end_ts() const;
  void clear_interval_end_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& interval_end_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_interval_end_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_interval_end_ts();
  void set_allocated_interval_end_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* interval_end_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_interval_end_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_interval_end_ts();
  public:
  void unsafe_arena_set_allocated_interval_end_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* interval_end_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_interval_end_ts();
  // @@protoc_insertion_point(class_scope:cavnue.messages.inference.v1.ActorAggregation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::ActorAggregation_Statistics > statistics_;
    ::cavnue::messages::common::v1::Header* header_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* interval_start_ts_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* interval_end_ts_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LaneAggregation_Statistics

// int32 lane_id = 1 [json_name = "laneId"];
inline void LaneAggregation_Statistics::clear_lane_id() {
  _impl_.lane_id_ = 0;
}
inline ::int32_t LaneAggregation_Statistics::lane_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.LaneAggregation.Statistics.lane_id)
  return _internal_lane_id();
}
inline void LaneAggregation_Statistics::set_lane_id(::int32_t value) {
  _internal_set_lane_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.LaneAggregation.Statistics.lane_id)
}
inline ::int32_t LaneAggregation_Statistics::_internal_lane_id() const {
  return _impl_.lane_id_;
}
inline void LaneAggregation_Statistics::_internal_set_lane_id(::int32_t value) {
  ;
  _impl_.lane_id_ = value;
}

// float speed_mean = 2 [json_name = "speedMean", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
inline void LaneAggregation_Statistics::clear_speed_mean() {
  _impl_.speed_mean_ = 0;
}
inline float LaneAggregation_Statistics::speed_mean() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.LaneAggregation.Statistics.speed_mean)
  return _internal_speed_mean();
}
inline void LaneAggregation_Statistics::set_speed_mean(float value) {
  _internal_set_speed_mean(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.LaneAggregation.Statistics.speed_mean)
}
inline float LaneAggregation_Statistics::_internal_speed_mean() const {
  return _impl_.speed_mean_;
}
inline void LaneAggregation_Statistics::_internal_set_speed_mean(float value) {
  ;
  _impl_.speed_mean_ = value;
}

// float speed_std = 3 [json_name = "speedStd", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
inline void LaneAggregation_Statistics::clear_speed_std() {
  _impl_.speed_std_ = 0;
}
inline float LaneAggregation_Statistics::speed_std() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.LaneAggregation.Statistics.speed_std)
  return _internal_speed_std();
}
inline void LaneAggregation_Statistics::set_speed_std(float value) {
  _internal_set_speed_std(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.LaneAggregation.Statistics.speed_std)
}
inline float LaneAggregation_Statistics::_internal_speed_std() const {
  return _impl_.speed_std_;
}
inline void LaneAggregation_Statistics::_internal_set_speed_std(float value) {
  ;
  _impl_.speed_std_ = value;
}

// float speed_p5 = 4 [json_name = "speedP5", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
inline void LaneAggregation_Statistics::clear_speed_p5() {
  _impl_.speed_p5_ = 0;
}
inline float LaneAggregation_Statistics::speed_p5() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.LaneAggregation.Statistics.speed_p5)
  return _internal_speed_p5();
}
inline void LaneAggregation_Statistics::set_speed_p5(float value) {
  _internal_set_speed_p5(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.LaneAggregation.Statistics.speed_p5)
}
inline float LaneAggregation_Statistics::_internal_speed_p5() const {
  return _impl_.speed_p5_;
}
inline void LaneAggregation_Statistics::_internal_set_speed_p5(float value) {
  ;
  _impl_.speed_p5_ = value;
}

// float speed_p70 = 5 [json_name = "speedP70", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
inline void LaneAggregation_Statistics::clear_speed_p70() {
  _impl_.speed_p70_ = 0;
}
inline float LaneAggregation_Statistics::speed_p70() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.LaneAggregation.Statistics.speed_p70)
  return _internal_speed_p70();
}
inline void LaneAggregation_Statistics::set_speed_p70(float value) {
  _internal_set_speed_p70(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.LaneAggregation.Statistics.speed_p70)
}
inline float LaneAggregation_Statistics::_internal_speed_p70() const {
  return _impl_.speed_p70_;
}
inline void LaneAggregation_Statistics::_internal_set_speed_p70(float value) {
  ;
  _impl_.speed_p70_ = value;
}

// uint32 actors_unique = 6 [json_name = "actorsUnique"];
inline void LaneAggregation_Statistics::clear_actors_unique() {
  _impl_.actors_unique_ = 0u;
}
inline ::uint32_t LaneAggregation_Statistics::actors_unique() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.LaneAggregation.Statistics.actors_unique)
  return _internal_actors_unique();
}
inline void LaneAggregation_Statistics::set_actors_unique(::uint32_t value) {
  _internal_set_actors_unique(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.LaneAggregation.Statistics.actors_unique)
}
inline ::uint32_t LaneAggregation_Statistics::_internal_actors_unique() const {
  return _impl_.actors_unique_;
}
inline void LaneAggregation_Statistics::_internal_set_actors_unique(::uint32_t value) {
  ;
  _impl_.actors_unique_ = value;
}

// -------------------------------------------------------------------

// LaneAggregation

// .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
inline bool LaneAggregation::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::cavnue::messages::common::v1::Header& LaneAggregation::_internal_header() const {
  const ::cavnue::messages::common::v1::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::common::v1::Header&>(
      ::cavnue::messages::common::v1::_Header_default_instance_);
}
inline const ::cavnue::messages::common::v1::Header& LaneAggregation::header() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.LaneAggregation.header)
  return _internal_header();
}
inline void LaneAggregation::unsafe_arena_set_allocated_header(
    ::cavnue::messages::common::v1::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.LaneAggregation.header)
}
inline ::cavnue::messages::common::v1::Header* LaneAggregation::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::common::v1::Header* LaneAggregation::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.LaneAggregation.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::cavnue::messages::common::v1::Header* LaneAggregation::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::common::v1::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::cavnue::messages::common::v1::Header* LaneAggregation::mutable_header() {
  ::cavnue::messages::common::v1::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.LaneAggregation.header)
  return _msg;
}
inline void LaneAggregation::set_allocated_header(::cavnue::messages::common::v1::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.LaneAggregation.header)
}

// .google.protobuf.Timestamp interval_start_ts = 2 [json_name = "intervalStartTs", (.gen_bq_schema.bigquery) = {
inline bool LaneAggregation::has_interval_start_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.interval_start_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LaneAggregation::_internal_interval_start_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.interval_start_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LaneAggregation::interval_start_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.LaneAggregation.interval_start_ts)
  return _internal_interval_start_ts();
}
inline void LaneAggregation::unsafe_arena_set_allocated_interval_start_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* interval_start_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_start_ts_);
  }
  _impl_.interval_start_ts_ = interval_start_ts;
  if (interval_start_ts) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.LaneAggregation.interval_start_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LaneAggregation::release_interval_start_ts() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.interval_start_ts_;
  _impl_.interval_start_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LaneAggregation::unsafe_arena_release_interval_start_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.LaneAggregation.interval_start_ts)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.interval_start_ts_;
  _impl_.interval_start_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LaneAggregation::_internal_mutable_interval_start_ts() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.interval_start_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.interval_start_ts_ = p;
  }
  return _impl_.interval_start_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LaneAggregation::mutable_interval_start_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_interval_start_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.LaneAggregation.interval_start_ts)
  return _msg;
}
inline void LaneAggregation::set_allocated_interval_start_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* interval_start_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_start_ts_);
  }
  if (interval_start_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval_start_ts));
    if (message_arena != submessage_arena) {
      interval_start_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval_start_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.interval_start_ts_ = interval_start_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.LaneAggregation.interval_start_ts)
}

// .google.protobuf.Timestamp interval_end_ts = 3 [json_name = "intervalEndTs", (.gen_bq_schema.bigquery) = {
inline bool LaneAggregation::has_interval_end_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.interval_end_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LaneAggregation::_internal_interval_end_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.interval_end_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LaneAggregation::interval_end_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.LaneAggregation.interval_end_ts)
  return _internal_interval_end_ts();
}
inline void LaneAggregation::unsafe_arena_set_allocated_interval_end_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* interval_end_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_end_ts_);
  }
  _impl_.interval_end_ts_ = interval_end_ts;
  if (interval_end_ts) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.LaneAggregation.interval_end_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LaneAggregation::release_interval_end_ts() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.interval_end_ts_;
  _impl_.interval_end_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LaneAggregation::unsafe_arena_release_interval_end_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.LaneAggregation.interval_end_ts)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.interval_end_ts_;
  _impl_.interval_end_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LaneAggregation::_internal_mutable_interval_end_ts() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.interval_end_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.interval_end_ts_ = p;
  }
  return _impl_.interval_end_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LaneAggregation::mutable_interval_end_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_interval_end_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.LaneAggregation.interval_end_ts)
  return _msg;
}
inline void LaneAggregation::set_allocated_interval_end_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* interval_end_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_end_ts_);
  }
  if (interval_end_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval_end_ts));
    if (message_arena != submessage_arena) {
      interval_end_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval_end_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.interval_end_ts_ = interval_end_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.LaneAggregation.interval_end_ts)
}

// repeated .cavnue.messages.inference.v1.LaneAggregation.Statistics statistics = 4 [json_name = "statistics"];
inline int LaneAggregation::_internal_statistics_size() const {
  return _impl_.statistics_.size();
}
inline int LaneAggregation::statistics_size() const {
  return _internal_statistics_size();
}
inline void LaneAggregation::clear_statistics() {
  _internal_mutable_statistics()->Clear();
}
inline ::cavnue::messages::inference::v1::LaneAggregation_Statistics* LaneAggregation::mutable_statistics(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.LaneAggregation.statistics)
  return _internal_mutable_statistics()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::LaneAggregation_Statistics >*
LaneAggregation::mutable_statistics() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.inference.v1.LaneAggregation.statistics)
  return _internal_mutable_statistics();
}
inline const ::cavnue::messages::inference::v1::LaneAggregation_Statistics& LaneAggregation::_internal_statistics(int index) const {
  return _internal_statistics().Get(index);
}
inline const ::cavnue::messages::inference::v1::LaneAggregation_Statistics& LaneAggregation::statistics(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.LaneAggregation.statistics)
  return _internal_statistics(index);
}
inline ::cavnue::messages::inference::v1::LaneAggregation_Statistics* LaneAggregation::_internal_add_statistics() {
  return _internal_mutable_statistics()->Add();
}
inline ::cavnue::messages::inference::v1::LaneAggregation_Statistics* LaneAggregation::add_statistics() {
  ::cavnue::messages::inference::v1::LaneAggregation_Statistics* _add = _internal_add_statistics();
  // @@protoc_insertion_point(field_add:cavnue.messages.inference.v1.LaneAggregation.statistics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::LaneAggregation_Statistics >&
LaneAggregation::statistics() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.inference.v1.LaneAggregation.statistics)
  return _internal_statistics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::LaneAggregation_Statistics>&
LaneAggregation::_internal_statistics() const {
  return _impl_.statistics_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::LaneAggregation_Statistics>*
LaneAggregation::_internal_mutable_statistics() {
  return &_impl_.statistics_;
}

// -------------------------------------------------------------------

// ActorAggregation_Statistics

// int64 actor_id = 1 [json_name = "actorId"];
inline void ActorAggregation_Statistics::clear_actor_id() {
  _impl_.actor_id_ = ::int64_t{0};
}
inline ::int64_t ActorAggregation_Statistics::actor_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.ActorAggregation.Statistics.actor_id)
  return _internal_actor_id();
}
inline void ActorAggregation_Statistics::set_actor_id(::int64_t value) {
  _internal_set_actor_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.ActorAggregation.Statistics.actor_id)
}
inline ::int64_t ActorAggregation_Statistics::_internal_actor_id() const {
  return _impl_.actor_id_;
}
inline void ActorAggregation_Statistics::_internal_set_actor_id(::int64_t value) {
  ;
  _impl_.actor_id_ = value;
}

// float speed_mean = 2 [json_name = "speedMean", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
inline void ActorAggregation_Statistics::clear_speed_mean() {
  _impl_.speed_mean_ = 0;
}
inline float ActorAggregation_Statistics::speed_mean() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.ActorAggregation.Statistics.speed_mean)
  return _internal_speed_mean();
}
inline void ActorAggregation_Statistics::set_speed_mean(float value) {
  _internal_set_speed_mean(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.inference.v1.ActorAggregation.Statistics.speed_mean)
}
inline float ActorAggregation_Statistics::_internal_speed_mean() const {
  return _impl_.speed_mean_;
}
inline void ActorAggregation_Statistics::_internal_set_speed_mean(float value) {
  ;
  _impl_.speed_mean_ = value;
}

// .cavnue.messages.geometry.v1.Vector3d position_last = 3 [json_name = "positionLast", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_UTM];
inline bool ActorAggregation_Statistics::has_position_last() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_last_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::Vector3d& ActorAggregation_Statistics::_internal_position_last() const {
  const ::cavnue::messages::geometry::v1::Vector3d* p = _impl_.position_last_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::Vector3d&>(
      ::cavnue::messages::geometry::v1::_Vector3d_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::Vector3d& ActorAggregation_Statistics::position_last() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.ActorAggregation.Statistics.position_last)
  return _internal_position_last();
}
inline void ActorAggregation_Statistics::unsafe_arena_set_allocated_position_last(
    ::cavnue::messages::geometry::v1::Vector3d* position_last) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_last_);
  }
  _impl_.position_last_ = position_last;
  if (position_last) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.ActorAggregation.Statistics.position_last)
}
inline ::cavnue::messages::geometry::v1::Vector3d* ActorAggregation_Statistics::release_position_last() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::Vector3d* temp = _impl_.position_last_;
  _impl_.position_last_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector3d* ActorAggregation_Statistics::unsafe_arena_release_position_last() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.ActorAggregation.Statistics.position_last)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::Vector3d* temp = _impl_.position_last_;
  _impl_.position_last_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector3d* ActorAggregation_Statistics::_internal_mutable_position_last() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.position_last_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::Vector3d>(GetArenaForAllocation());
    _impl_.position_last_ = p;
  }
  return _impl_.position_last_;
}
inline ::cavnue::messages::geometry::v1::Vector3d* ActorAggregation_Statistics::mutable_position_last() {
  ::cavnue::messages::geometry::v1::Vector3d* _msg = _internal_mutable_position_last();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.ActorAggregation.Statistics.position_last)
  return _msg;
}
inline void ActorAggregation_Statistics::set_allocated_position_last(::cavnue::messages::geometry::v1::Vector3d* position_last) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_last_);
  }
  if (position_last) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_last));
    if (message_arena != submessage_arena) {
      position_last = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_last, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.position_last_ = position_last;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.ActorAggregation.Statistics.position_last)
}

// .cavnue.messages.spatial.v1.UTMProjection projection = 4 [json_name = "projection"];
inline bool ActorAggregation_Statistics::has_projection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.projection_ != nullptr);
  return value;
}
inline const ::cavnue::messages::spatial::v1::UTMProjection& ActorAggregation_Statistics::_internal_projection() const {
  const ::cavnue::messages::spatial::v1::UTMProjection* p = _impl_.projection_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::spatial::v1::UTMProjection&>(
      ::cavnue::messages::spatial::v1::_UTMProjection_default_instance_);
}
inline const ::cavnue::messages::spatial::v1::UTMProjection& ActorAggregation_Statistics::projection() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.ActorAggregation.Statistics.projection)
  return _internal_projection();
}
inline void ActorAggregation_Statistics::unsafe_arena_set_allocated_projection(
    ::cavnue::messages::spatial::v1::UTMProjection* projection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projection_);
  }
  _impl_.projection_ = projection;
  if (projection) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.ActorAggregation.Statistics.projection)
}
inline ::cavnue::messages::spatial::v1::UTMProjection* ActorAggregation_Statistics::release_projection() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::spatial::v1::UTMProjection* temp = _impl_.projection_;
  _impl_.projection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::spatial::v1::UTMProjection* ActorAggregation_Statistics::unsafe_arena_release_projection() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.ActorAggregation.Statistics.projection)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::spatial::v1::UTMProjection* temp = _impl_.projection_;
  _impl_.projection_ = nullptr;
  return temp;
}
inline ::cavnue::messages::spatial::v1::UTMProjection* ActorAggregation_Statistics::_internal_mutable_projection() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.projection_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::spatial::v1::UTMProjection>(GetArenaForAllocation());
    _impl_.projection_ = p;
  }
  return _impl_.projection_;
}
inline ::cavnue::messages::spatial::v1::UTMProjection* ActorAggregation_Statistics::mutable_projection() {
  ::cavnue::messages::spatial::v1::UTMProjection* _msg = _internal_mutable_projection();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.ActorAggregation.Statistics.projection)
  return _msg;
}
inline void ActorAggregation_Statistics::set_allocated_projection(::cavnue::messages::spatial::v1::UTMProjection* projection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projection_);
  }
  if (projection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projection));
    if (message_arena != submessage_arena) {
      projection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.projection_ = projection;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.ActorAggregation.Statistics.projection)
}

// -------------------------------------------------------------------

// ActorAggregation

// .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
inline bool ActorAggregation::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::cavnue::messages::common::v1::Header& ActorAggregation::_internal_header() const {
  const ::cavnue::messages::common::v1::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::common::v1::Header&>(
      ::cavnue::messages::common::v1::_Header_default_instance_);
}
inline const ::cavnue::messages::common::v1::Header& ActorAggregation::header() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.ActorAggregation.header)
  return _internal_header();
}
inline void ActorAggregation::unsafe_arena_set_allocated_header(
    ::cavnue::messages::common::v1::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.ActorAggregation.header)
}
inline ::cavnue::messages::common::v1::Header* ActorAggregation::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::common::v1::Header* ActorAggregation::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.ActorAggregation.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::cavnue::messages::common::v1::Header* ActorAggregation::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::common::v1::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::cavnue::messages::common::v1::Header* ActorAggregation::mutable_header() {
  ::cavnue::messages::common::v1::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.ActorAggregation.header)
  return _msg;
}
inline void ActorAggregation::set_allocated_header(::cavnue::messages::common::v1::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.ActorAggregation.header)
}

// .google.protobuf.Timestamp interval_start_ts = 2 [json_name = "intervalStartTs", (.gen_bq_schema.bigquery) = {
inline bool ActorAggregation::has_interval_start_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.interval_start_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ActorAggregation::_internal_interval_start_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.interval_start_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ActorAggregation::interval_start_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.ActorAggregation.interval_start_ts)
  return _internal_interval_start_ts();
}
inline void ActorAggregation::unsafe_arena_set_allocated_interval_start_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* interval_start_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_start_ts_);
  }
  _impl_.interval_start_ts_ = interval_start_ts;
  if (interval_start_ts) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.ActorAggregation.interval_start_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ActorAggregation::release_interval_start_ts() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.interval_start_ts_;
  _impl_.interval_start_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ActorAggregation::unsafe_arena_release_interval_start_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.ActorAggregation.interval_start_ts)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.interval_start_ts_;
  _impl_.interval_start_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ActorAggregation::_internal_mutable_interval_start_ts() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.interval_start_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.interval_start_ts_ = p;
  }
  return _impl_.interval_start_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ActorAggregation::mutable_interval_start_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_interval_start_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.ActorAggregation.interval_start_ts)
  return _msg;
}
inline void ActorAggregation::set_allocated_interval_start_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* interval_start_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_start_ts_);
  }
  if (interval_start_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval_start_ts));
    if (message_arena != submessage_arena) {
      interval_start_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval_start_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.interval_start_ts_ = interval_start_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.ActorAggregation.interval_start_ts)
}

// .google.protobuf.Timestamp interval_end_ts = 3 [json_name = "intervalEndTs", (.gen_bq_schema.bigquery) = {
inline bool ActorAggregation::has_interval_end_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.interval_end_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ActorAggregation::_internal_interval_end_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.interval_end_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ActorAggregation::interval_end_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.ActorAggregation.interval_end_ts)
  return _internal_interval_end_ts();
}
inline void ActorAggregation::unsafe_arena_set_allocated_interval_end_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* interval_end_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_end_ts_);
  }
  _impl_.interval_end_ts_ = interval_end_ts;
  if (interval_end_ts) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.inference.v1.ActorAggregation.interval_end_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ActorAggregation::release_interval_end_ts() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.interval_end_ts_;
  _impl_.interval_end_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ActorAggregation::unsafe_arena_release_interval_end_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.inference.v1.ActorAggregation.interval_end_ts)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.interval_end_ts_;
  _impl_.interval_end_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ActorAggregation::_internal_mutable_interval_end_ts() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.interval_end_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.interval_end_ts_ = p;
  }
  return _impl_.interval_end_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ActorAggregation::mutable_interval_end_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_interval_end_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.ActorAggregation.interval_end_ts)
  return _msg;
}
inline void ActorAggregation::set_allocated_interval_end_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* interval_end_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_end_ts_);
  }
  if (interval_end_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval_end_ts));
    if (message_arena != submessage_arena) {
      interval_end_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval_end_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.interval_end_ts_ = interval_end_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.inference.v1.ActorAggregation.interval_end_ts)
}

// repeated .cavnue.messages.inference.v1.ActorAggregation.Statistics statistics = 4 [json_name = "statistics"];
inline int ActorAggregation::_internal_statistics_size() const {
  return _impl_.statistics_.size();
}
inline int ActorAggregation::statistics_size() const {
  return _internal_statistics_size();
}
inline void ActorAggregation::clear_statistics() {
  _internal_mutable_statistics()->Clear();
}
inline ::cavnue::messages::inference::v1::ActorAggregation_Statistics* ActorAggregation::mutable_statistics(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.inference.v1.ActorAggregation.statistics)
  return _internal_mutable_statistics()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::ActorAggregation_Statistics >*
ActorAggregation::mutable_statistics() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.inference.v1.ActorAggregation.statistics)
  return _internal_mutable_statistics();
}
inline const ::cavnue::messages::inference::v1::ActorAggregation_Statistics& ActorAggregation::_internal_statistics(int index) const {
  return _internal_statistics().Get(index);
}
inline const ::cavnue::messages::inference::v1::ActorAggregation_Statistics& ActorAggregation::statistics(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.inference.v1.ActorAggregation.statistics)
  return _internal_statistics(index);
}
inline ::cavnue::messages::inference::v1::ActorAggregation_Statistics* ActorAggregation::_internal_add_statistics() {
  return _internal_mutable_statistics()->Add();
}
inline ::cavnue::messages::inference::v1::ActorAggregation_Statistics* ActorAggregation::add_statistics() {
  ::cavnue::messages::inference::v1::ActorAggregation_Statistics* _add = _internal_add_statistics();
  // @@protoc_insertion_point(field_add:cavnue.messages.inference.v1.ActorAggregation.statistics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::ActorAggregation_Statistics >&
ActorAggregation::statistics() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.inference.v1.ActorAggregation.statistics)
  return _internal_statistics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::ActorAggregation_Statistics>&
ActorAggregation::_internal_statistics() const {
  return _impl_.statistics_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::ActorAggregation_Statistics>*
ActorAggregation::_internal_mutable_statistics() {
  return &_impl_.statistics_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace inference
}  // namespace messages
}  // namespace cavnue


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2finference_2fv1_2faggregation_2eproto_2epb_2eh

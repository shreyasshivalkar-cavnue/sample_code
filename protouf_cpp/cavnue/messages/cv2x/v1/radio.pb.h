// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/cv2x/v1/radio.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cavnue/messages/common/v1/common.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto;
namespace cavnue {
namespace messages {
namespace cv2x {
namespace v1 {
class RadioCommon;
struct RadioCommonDefaultTypeInternal;
extern RadioCommonDefaultTypeInternal _RadioCommon_default_instance_;
class RadioReceive;
struct RadioReceiveDefaultTypeInternal;
extern RadioReceiveDefaultTypeInternal _RadioReceive_default_instance_;
class RadioSend;
struct RadioSendDefaultTypeInternal;
extern RadioSendDefaultTypeInternal _RadioSend_default_instance_;
}  // namespace v1
}  // namespace cv2x
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template <>
::cavnue::messages::cv2x::v1::RadioCommon* Arena::CreateMaybeMessage<::cavnue::messages::cv2x::v1::RadioCommon>(Arena*);
template <>
::cavnue::messages::cv2x::v1::RadioReceive* Arena::CreateMaybeMessage<::cavnue::messages::cv2x::v1::RadioReceive>(Arena*);
template <>
::cavnue::messages::cv2x::v1::RadioSend* Arena::CreateMaybeMessage<::cavnue::messages::cv2x::v1::RadioSend>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cavnue {
namespace messages {
namespace cv2x {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class RadioCommon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.cv2x.v1.RadioCommon) */ {
 public:
  inline RadioCommon() : RadioCommon(nullptr) {}
  ~RadioCommon() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RadioCommon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RadioCommon(const RadioCommon& from);
  RadioCommon(RadioCommon&& from) noexcept
    : RadioCommon() {
    *this = ::std::move(from);
  }

  inline RadioCommon& operator=(const RadioCommon& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadioCommon& operator=(RadioCommon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RadioCommon& default_instance() {
    return *internal_default_instance();
  }
  static inline const RadioCommon* internal_default_instance() {
    return reinterpret_cast<const RadioCommon*>(
               &_RadioCommon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RadioCommon& a, RadioCommon& b) {
    a.Swap(&b);
  }
  inline void Swap(RadioCommon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadioCommon* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RadioCommon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RadioCommon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RadioCommon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RadioCommon& from) {
    RadioCommon::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadioCommon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.cv2x.v1.RadioCommon";
  }
  protected:
  explicit RadioCommon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedPayloadFieldNumber = 3,
    kRadioIdFieldNumber = 1,
    kPsidFieldNumber = 2,
  };
  // bytes encoded_payload = 3 [json_name = "encodedPayload"];
  void clear_encoded_payload() ;
  const std::string& encoded_payload() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_encoded_payload(Arg_&& arg, Args_... args);
  std::string* mutable_encoded_payload();
  PROTOBUF_NODISCARD std::string* release_encoded_payload();
  void set_allocated_encoded_payload(std::string* ptr);

  private:
  const std::string& _internal_encoded_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encoded_payload(
      const std::string& value);
  std::string* _internal_mutable_encoded_payload();

  public:
  // uint64 radio_id = 1 [json_name = "radioId"];
  void clear_radio_id() ;
  ::uint64_t radio_id() const;
  void set_radio_id(::uint64_t value);

  private:
  ::uint64_t _internal_radio_id() const;
  void _internal_set_radio_id(::uint64_t value);

  public:
  // uint32 psid = 2 [json_name = "psid"];
  void clear_psid() ;
  ::uint32_t psid() const;
  void set_psid(::uint32_t value);

  private:
  ::uint32_t _internal_psid() const;
  void _internal_set_psid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.cv2x.v1.RadioCommon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_payload_;
    ::uint64_t radio_id_;
    ::uint32_t psid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto;
};// -------------------------------------------------------------------

class RadioSend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.cv2x.v1.RadioSend) */ {
 public:
  inline RadioSend() : RadioSend(nullptr) {}
  ~RadioSend() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RadioSend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RadioSend(const RadioSend& from);
  RadioSend(RadioSend&& from) noexcept
    : RadioSend() {
    *this = ::std::move(from);
  }

  inline RadioSend& operator=(const RadioSend& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadioSend& operator=(RadioSend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RadioSend& default_instance() {
    return *internal_default_instance();
  }
  static inline const RadioSend* internal_default_instance() {
    return reinterpret_cast<const RadioSend*>(
               &_RadioSend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RadioSend& a, RadioSend& b) {
    a.Swap(&b);
  }
  inline void Swap(RadioSend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadioSend* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RadioSend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RadioSend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RadioSend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RadioSend& from) {
    RadioSend::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadioSend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.cv2x.v1.RadioSend";
  }
  protected:
  explicit RadioSend(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kSentCommonFieldNumber = 2,
    kActorCountFieldNumber = 3,
  };
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  bool has_header() const;
  void clear_header() ;
  const ::cavnue::messages::common::v1::Header& header() const;
  PROTOBUF_NODISCARD ::cavnue::messages::common::v1::Header* release_header();
  ::cavnue::messages::common::v1::Header* mutable_header();
  void set_allocated_header(::cavnue::messages::common::v1::Header* header);
  private:
  const ::cavnue::messages::common::v1::Header& _internal_header() const;
  ::cavnue::messages::common::v1::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::cavnue::messages::common::v1::Header* header);
  ::cavnue::messages::common::v1::Header* unsafe_arena_release_header();
  // .cavnue.messages.cv2x.v1.RadioCommon sent_common = 2 [json_name = "sentCommon"];
  bool has_sent_common() const;
  void clear_sent_common() ;
  const ::cavnue::messages::cv2x::v1::RadioCommon& sent_common() const;
  PROTOBUF_NODISCARD ::cavnue::messages::cv2x::v1::RadioCommon* release_sent_common();
  ::cavnue::messages::cv2x::v1::RadioCommon* mutable_sent_common();
  void set_allocated_sent_common(::cavnue::messages::cv2x::v1::RadioCommon* sent_common);
  private:
  const ::cavnue::messages::cv2x::v1::RadioCommon& _internal_sent_common() const;
  ::cavnue::messages::cv2x::v1::RadioCommon* _internal_mutable_sent_common();
  public:
  void unsafe_arena_set_allocated_sent_common(
      ::cavnue::messages::cv2x::v1::RadioCommon* sent_common);
  ::cavnue::messages::cv2x::v1::RadioCommon* unsafe_arena_release_sent_common();
  // int32 actor_count = 3 [json_name = "actorCount"];
  void clear_actor_count() ;
  ::int32_t actor_count() const;
  void set_actor_count(::int32_t value);

  private:
  ::int32_t _internal_actor_count() const;
  void _internal_set_actor_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.cv2x.v1.RadioSend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::common::v1::Header* header_;
    ::cavnue::messages::cv2x::v1::RadioCommon* sent_common_;
    ::int32_t actor_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto;
};// -------------------------------------------------------------------

class RadioReceive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.cv2x.v1.RadioReceive) */ {
 public:
  inline RadioReceive() : RadioReceive(nullptr) {}
  ~RadioReceive() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RadioReceive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RadioReceive(const RadioReceive& from);
  RadioReceive(RadioReceive&& from) noexcept
    : RadioReceive() {
    *this = ::std::move(from);
  }

  inline RadioReceive& operator=(const RadioReceive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadioReceive& operator=(RadioReceive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RadioReceive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RadioReceive* internal_default_instance() {
    return reinterpret_cast<const RadioReceive*>(
               &_RadioReceive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RadioReceive& a, RadioReceive& b) {
    a.Swap(&b);
  }
  inline void Swap(RadioReceive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadioReceive* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RadioReceive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RadioReceive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RadioReceive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RadioReceive& from) {
    RadioReceive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadioReceive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.cv2x.v1.RadioReceive";
  }
  protected:
  explicit RadioReceive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kReceivedCommonFieldNumber = 2,
    kRadioTimestampFieldNumber = 3,
    kServiceTimestampFieldNumber = 4,
  };
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  bool has_header() const;
  void clear_header() ;
  const ::cavnue::messages::common::v1::Header& header() const;
  PROTOBUF_NODISCARD ::cavnue::messages::common::v1::Header* release_header();
  ::cavnue::messages::common::v1::Header* mutable_header();
  void set_allocated_header(::cavnue::messages::common::v1::Header* header);
  private:
  const ::cavnue::messages::common::v1::Header& _internal_header() const;
  ::cavnue::messages::common::v1::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::cavnue::messages::common::v1::Header* header);
  ::cavnue::messages::common::v1::Header* unsafe_arena_release_header();
  // .cavnue.messages.cv2x.v1.RadioCommon received_common = 2 [json_name = "receivedCommon"];
  bool has_received_common() const;
  void clear_received_common() ;
  const ::cavnue::messages::cv2x::v1::RadioCommon& received_common() const;
  PROTOBUF_NODISCARD ::cavnue::messages::cv2x::v1::RadioCommon* release_received_common();
  ::cavnue::messages::cv2x::v1::RadioCommon* mutable_received_common();
  void set_allocated_received_common(::cavnue::messages::cv2x::v1::RadioCommon* received_common);
  private:
  const ::cavnue::messages::cv2x::v1::RadioCommon& _internal_received_common() const;
  ::cavnue::messages::cv2x::v1::RadioCommon* _internal_mutable_received_common();
  public:
  void unsafe_arena_set_allocated_received_common(
      ::cavnue::messages::cv2x::v1::RadioCommon* received_common);
  ::cavnue::messages::cv2x::v1::RadioCommon* unsafe_arena_release_received_common();
  // .google.protobuf.Timestamp radio_timestamp = 3 [json_name = "radioTimestamp"];
  bool has_radio_timestamp() const;
  void clear_radio_timestamp() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& radio_timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_radio_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_radio_timestamp();
  void set_allocated_radio_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* radio_timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_radio_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_radio_timestamp();
  public:
  void unsafe_arena_set_allocated_radio_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* radio_timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_radio_timestamp();
  // .google.protobuf.Timestamp service_timestamp = 4 [json_name = "serviceTimestamp"];
  bool has_service_timestamp() const;
  void clear_service_timestamp() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& service_timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_service_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_service_timestamp();
  void set_allocated_service_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* service_timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_service_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_service_timestamp();
  public:
  void unsafe_arena_set_allocated_service_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* service_timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_service_timestamp();
  // @@protoc_insertion_point(class_scope:cavnue.messages.cv2x.v1.RadioReceive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::common::v1::Header* header_;
    ::cavnue::messages::cv2x::v1::RadioCommon* received_common_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* radio_timestamp_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* service_timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RadioCommon

// uint64 radio_id = 1 [json_name = "radioId"];
inline void RadioCommon::clear_radio_id() {
  _impl_.radio_id_ = ::uint64_t{0u};
}
inline ::uint64_t RadioCommon::radio_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.cv2x.v1.RadioCommon.radio_id)
  return _internal_radio_id();
}
inline void RadioCommon::set_radio_id(::uint64_t value) {
  _internal_set_radio_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.cv2x.v1.RadioCommon.radio_id)
}
inline ::uint64_t RadioCommon::_internal_radio_id() const {
  return _impl_.radio_id_;
}
inline void RadioCommon::_internal_set_radio_id(::uint64_t value) {
  ;
  _impl_.radio_id_ = value;
}

// uint32 psid = 2 [json_name = "psid"];
inline void RadioCommon::clear_psid() {
  _impl_.psid_ = 0u;
}
inline ::uint32_t RadioCommon::psid() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.cv2x.v1.RadioCommon.psid)
  return _internal_psid();
}
inline void RadioCommon::set_psid(::uint32_t value) {
  _internal_set_psid(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.cv2x.v1.RadioCommon.psid)
}
inline ::uint32_t RadioCommon::_internal_psid() const {
  return _impl_.psid_;
}
inline void RadioCommon::_internal_set_psid(::uint32_t value) {
  ;
  _impl_.psid_ = value;
}

// bytes encoded_payload = 3 [json_name = "encodedPayload"];
inline void RadioCommon::clear_encoded_payload() {
  _impl_.encoded_payload_.ClearToEmpty();
}
inline const std::string& RadioCommon::encoded_payload() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.cv2x.v1.RadioCommon.encoded_payload)
  return _internal_encoded_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RadioCommon::set_encoded_payload(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.encoded_payload_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.cv2x.v1.RadioCommon.encoded_payload)
}
inline std::string* RadioCommon::mutable_encoded_payload() {
  std::string* _s = _internal_mutable_encoded_payload();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.cv2x.v1.RadioCommon.encoded_payload)
  return _s;
}
inline const std::string& RadioCommon::_internal_encoded_payload() const {
  return _impl_.encoded_payload_.Get();
}
inline void RadioCommon::_internal_set_encoded_payload(const std::string& value) {
  ;


  _impl_.encoded_payload_.Set(value, GetArenaForAllocation());
}
inline std::string* RadioCommon::_internal_mutable_encoded_payload() {
  ;
  return _impl_.encoded_payload_.Mutable( GetArenaForAllocation());
}
inline std::string* RadioCommon::release_encoded_payload() {
  // @@protoc_insertion_point(field_release:cavnue.messages.cv2x.v1.RadioCommon.encoded_payload)
  return _impl_.encoded_payload_.Release();
}
inline void RadioCommon::set_allocated_encoded_payload(std::string* value) {
  _impl_.encoded_payload_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.encoded_payload_.IsDefault()) {
          _impl_.encoded_payload_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.cv2x.v1.RadioCommon.encoded_payload)
}

// -------------------------------------------------------------------

// RadioSend

// .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
inline bool RadioSend::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::cavnue::messages::common::v1::Header& RadioSend::_internal_header() const {
  const ::cavnue::messages::common::v1::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::common::v1::Header&>(
      ::cavnue::messages::common::v1::_Header_default_instance_);
}
inline const ::cavnue::messages::common::v1::Header& RadioSend::header() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.cv2x.v1.RadioSend.header)
  return _internal_header();
}
inline void RadioSend::unsafe_arena_set_allocated_header(
    ::cavnue::messages::common::v1::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.cv2x.v1.RadioSend.header)
}
inline ::cavnue::messages::common::v1::Header* RadioSend::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::common::v1::Header* RadioSend::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:cavnue.messages.cv2x.v1.RadioSend.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::cavnue::messages::common::v1::Header* RadioSend::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::common::v1::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::cavnue::messages::common::v1::Header* RadioSend::mutable_header() {
  ::cavnue::messages::common::v1::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.cv2x.v1.RadioSend.header)
  return _msg;
}
inline void RadioSend::set_allocated_header(::cavnue::messages::common::v1::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.cv2x.v1.RadioSend.header)
}

// .cavnue.messages.cv2x.v1.RadioCommon sent_common = 2 [json_name = "sentCommon"];
inline bool RadioSend::has_sent_common() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sent_common_ != nullptr);
  return value;
}
inline void RadioSend::clear_sent_common() {
  if (_impl_.sent_common_ != nullptr) _impl_.sent_common_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::cavnue::messages::cv2x::v1::RadioCommon& RadioSend::_internal_sent_common() const {
  const ::cavnue::messages::cv2x::v1::RadioCommon* p = _impl_.sent_common_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::cv2x::v1::RadioCommon&>(
      ::cavnue::messages::cv2x::v1::_RadioCommon_default_instance_);
}
inline const ::cavnue::messages::cv2x::v1::RadioCommon& RadioSend::sent_common() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.cv2x.v1.RadioSend.sent_common)
  return _internal_sent_common();
}
inline void RadioSend::unsafe_arena_set_allocated_sent_common(
    ::cavnue::messages::cv2x::v1::RadioCommon* sent_common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sent_common_);
  }
  _impl_.sent_common_ = sent_common;
  if (sent_common) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.cv2x.v1.RadioSend.sent_common)
}
inline ::cavnue::messages::cv2x::v1::RadioCommon* RadioSend::release_sent_common() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::cv2x::v1::RadioCommon* temp = _impl_.sent_common_;
  _impl_.sent_common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::cv2x::v1::RadioCommon* RadioSend::unsafe_arena_release_sent_common() {
  // @@protoc_insertion_point(field_release:cavnue.messages.cv2x.v1.RadioSend.sent_common)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::cv2x::v1::RadioCommon* temp = _impl_.sent_common_;
  _impl_.sent_common_ = nullptr;
  return temp;
}
inline ::cavnue::messages::cv2x::v1::RadioCommon* RadioSend::_internal_mutable_sent_common() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.sent_common_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::cv2x::v1::RadioCommon>(GetArenaForAllocation());
    _impl_.sent_common_ = p;
  }
  return _impl_.sent_common_;
}
inline ::cavnue::messages::cv2x::v1::RadioCommon* RadioSend::mutable_sent_common() {
  ::cavnue::messages::cv2x::v1::RadioCommon* _msg = _internal_mutable_sent_common();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.cv2x.v1.RadioSend.sent_common)
  return _msg;
}
inline void RadioSend::set_allocated_sent_common(::cavnue::messages::cv2x::v1::RadioCommon* sent_common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sent_common_;
  }
  if (sent_common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sent_common);
    if (message_arena != submessage_arena) {
      sent_common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sent_common, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.sent_common_ = sent_common;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.cv2x.v1.RadioSend.sent_common)
}

// int32 actor_count = 3 [json_name = "actorCount"];
inline void RadioSend::clear_actor_count() {
  _impl_.actor_count_ = 0;
}
inline ::int32_t RadioSend::actor_count() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.cv2x.v1.RadioSend.actor_count)
  return _internal_actor_count();
}
inline void RadioSend::set_actor_count(::int32_t value) {
  _internal_set_actor_count(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.cv2x.v1.RadioSend.actor_count)
}
inline ::int32_t RadioSend::_internal_actor_count() const {
  return _impl_.actor_count_;
}
inline void RadioSend::_internal_set_actor_count(::int32_t value) {
  ;
  _impl_.actor_count_ = value;
}

// -------------------------------------------------------------------

// RadioReceive

// .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
inline bool RadioReceive::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::cavnue::messages::common::v1::Header& RadioReceive::_internal_header() const {
  const ::cavnue::messages::common::v1::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::common::v1::Header&>(
      ::cavnue::messages::common::v1::_Header_default_instance_);
}
inline const ::cavnue::messages::common::v1::Header& RadioReceive::header() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.cv2x.v1.RadioReceive.header)
  return _internal_header();
}
inline void RadioReceive::unsafe_arena_set_allocated_header(
    ::cavnue::messages::common::v1::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.cv2x.v1.RadioReceive.header)
}
inline ::cavnue::messages::common::v1::Header* RadioReceive::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::common::v1::Header* RadioReceive::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:cavnue.messages.cv2x.v1.RadioReceive.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::cavnue::messages::common::v1::Header* RadioReceive::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::common::v1::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::cavnue::messages::common::v1::Header* RadioReceive::mutable_header() {
  ::cavnue::messages::common::v1::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.cv2x.v1.RadioReceive.header)
  return _msg;
}
inline void RadioReceive::set_allocated_header(::cavnue::messages::common::v1::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.cv2x.v1.RadioReceive.header)
}

// .cavnue.messages.cv2x.v1.RadioCommon received_common = 2 [json_name = "receivedCommon"];
inline bool RadioReceive::has_received_common() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.received_common_ != nullptr);
  return value;
}
inline void RadioReceive::clear_received_common() {
  if (_impl_.received_common_ != nullptr) _impl_.received_common_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::cavnue::messages::cv2x::v1::RadioCommon& RadioReceive::_internal_received_common() const {
  const ::cavnue::messages::cv2x::v1::RadioCommon* p = _impl_.received_common_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::cv2x::v1::RadioCommon&>(
      ::cavnue::messages::cv2x::v1::_RadioCommon_default_instance_);
}
inline const ::cavnue::messages::cv2x::v1::RadioCommon& RadioReceive::received_common() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.cv2x.v1.RadioReceive.received_common)
  return _internal_received_common();
}
inline void RadioReceive::unsafe_arena_set_allocated_received_common(
    ::cavnue::messages::cv2x::v1::RadioCommon* received_common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.received_common_);
  }
  _impl_.received_common_ = received_common;
  if (received_common) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.cv2x.v1.RadioReceive.received_common)
}
inline ::cavnue::messages::cv2x::v1::RadioCommon* RadioReceive::release_received_common() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::cv2x::v1::RadioCommon* temp = _impl_.received_common_;
  _impl_.received_common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::cv2x::v1::RadioCommon* RadioReceive::unsafe_arena_release_received_common() {
  // @@protoc_insertion_point(field_release:cavnue.messages.cv2x.v1.RadioReceive.received_common)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::cv2x::v1::RadioCommon* temp = _impl_.received_common_;
  _impl_.received_common_ = nullptr;
  return temp;
}
inline ::cavnue::messages::cv2x::v1::RadioCommon* RadioReceive::_internal_mutable_received_common() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.received_common_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::cv2x::v1::RadioCommon>(GetArenaForAllocation());
    _impl_.received_common_ = p;
  }
  return _impl_.received_common_;
}
inline ::cavnue::messages::cv2x::v1::RadioCommon* RadioReceive::mutable_received_common() {
  ::cavnue::messages::cv2x::v1::RadioCommon* _msg = _internal_mutable_received_common();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.cv2x.v1.RadioReceive.received_common)
  return _msg;
}
inline void RadioReceive::set_allocated_received_common(::cavnue::messages::cv2x::v1::RadioCommon* received_common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.received_common_;
  }
  if (received_common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(received_common);
    if (message_arena != submessage_arena) {
      received_common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, received_common, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.received_common_ = received_common;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.cv2x.v1.RadioReceive.received_common)
}

// .google.protobuf.Timestamp radio_timestamp = 3 [json_name = "radioTimestamp"];
inline bool RadioReceive::has_radio_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.radio_timestamp_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& RadioReceive::_internal_radio_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.radio_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& RadioReceive::radio_timestamp() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.cv2x.v1.RadioReceive.radio_timestamp)
  return _internal_radio_timestamp();
}
inline void RadioReceive::unsafe_arena_set_allocated_radio_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* radio_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.radio_timestamp_);
  }
  _impl_.radio_timestamp_ = radio_timestamp;
  if (radio_timestamp) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.cv2x.v1.RadioReceive.radio_timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RadioReceive::release_radio_timestamp() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.radio_timestamp_;
  _impl_.radio_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RadioReceive::unsafe_arena_release_radio_timestamp() {
  // @@protoc_insertion_point(field_release:cavnue.messages.cv2x.v1.RadioReceive.radio_timestamp)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.radio_timestamp_;
  _impl_.radio_timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RadioReceive::_internal_mutable_radio_timestamp() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.radio_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.radio_timestamp_ = p;
  }
  return _impl_.radio_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RadioReceive::mutable_radio_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_radio_timestamp();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.cv2x.v1.RadioReceive.radio_timestamp)
  return _msg;
}
inline void RadioReceive::set_allocated_radio_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* radio_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.radio_timestamp_);
  }
  if (radio_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(radio_timestamp));
    if (message_arena != submessage_arena) {
      radio_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, radio_timestamp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.radio_timestamp_ = radio_timestamp;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.cv2x.v1.RadioReceive.radio_timestamp)
}

// .google.protobuf.Timestamp service_timestamp = 4 [json_name = "serviceTimestamp"];
inline bool RadioReceive::has_service_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.service_timestamp_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& RadioReceive::_internal_service_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.service_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& RadioReceive::service_timestamp() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.cv2x.v1.RadioReceive.service_timestamp)
  return _internal_service_timestamp();
}
inline void RadioReceive::unsafe_arena_set_allocated_service_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* service_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.service_timestamp_);
  }
  _impl_.service_timestamp_ = service_timestamp;
  if (service_timestamp) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.cv2x.v1.RadioReceive.service_timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RadioReceive::release_service_timestamp() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.service_timestamp_;
  _impl_.service_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RadioReceive::unsafe_arena_release_service_timestamp() {
  // @@protoc_insertion_point(field_release:cavnue.messages.cv2x.v1.RadioReceive.service_timestamp)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.service_timestamp_;
  _impl_.service_timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RadioReceive::_internal_mutable_service_timestamp() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.service_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.service_timestamp_ = p;
  }
  return _impl_.service_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RadioReceive::mutable_service_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_service_timestamp();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.cv2x.v1.RadioReceive.service_timestamp)
  return _msg;
}
inline void RadioReceive::set_allocated_service_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* service_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.service_timestamp_);
  }
  if (service_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_timestamp));
    if (message_arena != submessage_arena) {
      service_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_timestamp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.service_timestamp_ = service_timestamp;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.cv2x.v1.RadioReceive.service_timestamp)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace cv2x
}  // namespace messages
}  // namespace cavnue


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto_2epb_2eh

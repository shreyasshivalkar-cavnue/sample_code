// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/cv2x/v1/radio.proto

#include "cavnue/messages/cv2x/v1/radio.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cavnue {
namespace messages {
namespace cv2x {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR RadioCommon::RadioCommon(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.encoded_payload_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.radio_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.psid_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RadioCommonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RadioCommonDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RadioCommonDefaultTypeInternal() {}
  union {
    RadioCommon _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RadioCommonDefaultTypeInternal _RadioCommon_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RadioSend::RadioSend(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.sent_common_)*/nullptr
  , /*decltype(_impl_.actor_count_)*/ 0
} {}
struct RadioSendDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RadioSendDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RadioSendDefaultTypeInternal() {}
  union {
    RadioSend _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RadioSendDefaultTypeInternal _RadioSend_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RadioReceive::RadioReceive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.received_common_)*/nullptr
  , /*decltype(_impl_.radio_timestamp_)*/nullptr
  , /*decltype(_impl_.service_timestamp_)*/nullptr} {}
struct RadioReceiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RadioReceiveDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RadioReceiveDefaultTypeInternal() {}
  union {
    RadioReceive _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RadioReceiveDefaultTypeInternal _RadioReceive_default_instance_;
}  // namespace v1
}  // namespace cv2x
}  // namespace messages
}  // namespace cavnue
static ::_pb::Metadata file_level_metadata_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto = nullptr;
const ::uint32_t TableStruct_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::cv2x::v1::RadioCommon, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::cv2x::v1::RadioCommon, _impl_.radio_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::cv2x::v1::RadioCommon, _impl_.psid_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::cv2x::v1::RadioCommon, _impl_.encoded_payload_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::cv2x::v1::RadioSend, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::cv2x::v1::RadioSend, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::cv2x::v1::RadioSend, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::cv2x::v1::RadioSend, _impl_.sent_common_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::cv2x::v1::RadioSend, _impl_.actor_count_),
    0,
    1,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::cv2x::v1::RadioReceive, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::cv2x::v1::RadioReceive, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::cv2x::v1::RadioReceive, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::cv2x::v1::RadioReceive, _impl_.received_common_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::cv2x::v1::RadioReceive, _impl_.radio_timestamp_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::cv2x::v1::RadioReceive, _impl_.service_timestamp_),
    0,
    1,
    2,
    3,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::cavnue::messages::cv2x::v1::RadioCommon)},
        { 11, 22, -1, sizeof(::cavnue::messages::cv2x::v1::RadioSend)},
        { 25, 37, -1, sizeof(::cavnue::messages::cv2x::v1::RadioReceive)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cavnue::messages::cv2x::v1::_RadioCommon_default_instance_._instance,
    &::cavnue::messages::cv2x::v1::_RadioSend_default_instance_._instance,
    &::cavnue::messages::cv2x::v1::_RadioReceive_default_instance_._instance,
};
const char descriptor_table_protodef_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n#cavnue/messages/cv2x/v1/radio.proto\022\027c"
    "avnue.messages.cv2x.v1\032&cavnue/messages/"
    "common/v1/common.proto\032\037google/protobuf/"
    "timestamp.proto\"e\n\013RadioCommon\022\031\n\010radio_"
    "id\030\001 \001(\004R\007radioId\022\022\n\004psid\030\002 \001(\rR\004psid\022\'\n"
    "\017encoded_payload\030\003 \001(\014R\016encodedPayload\"\256"
    "\001\n\tRadioSend\0229\n\006header\030\001 \001(\0132!.cavnue.me"
    "ssages.common.v1.HeaderR\006header\022E\n\013sent_"
    "common\030\002 \001(\0132$.cavnue.messages.cv2x.v1.R"
    "adioCommonR\nsentCommon\022\037\n\013actor_count\030\003 "
    "\001(\005R\nactorCount\"\246\002\n\014RadioReceive\0229\n\006head"
    "er\030\001 \001(\0132!.cavnue.messages.common.v1.Hea"
    "derR\006header\022M\n\017received_common\030\002 \001(\0132$.c"
    "avnue.messages.cv2x.v1.RadioCommonR\016rece"
    "ivedCommon\022C\n\017radio_timestamp\030\003 \001(\0132\032.go"
    "ogle.protobuf.TimestampR\016radioTimestamp\022"
    "G\n\021service_timestamp\030\004 \001(\0132\032.google.prot"
    "obuf.TimestampR\020serviceTimestampb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto_deps[2] =
    {
        &::descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto = {
    false,
    false,
    720,
    descriptor_table_protodef_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto,
    "cavnue/messages/cv2x/v1/radio.proto",
    &descriptor_table_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto_once,
    descriptor_table_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto_deps,
    2,
    3,
    schemas,
    file_default_instances,
    TableStruct_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto::offsets,
    file_level_metadata_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto,
    file_level_enum_descriptors_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto,
    file_level_service_descriptors_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto_getter() {
  return &descriptor_table_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto(&descriptor_table_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto);
namespace cavnue {
namespace messages {
namespace cv2x {
namespace v1 {
// ===================================================================

class RadioCommon::_Internal {
 public:
};

RadioCommon::RadioCommon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.cv2x.v1.RadioCommon)
}
RadioCommon::RadioCommon(const RadioCommon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RadioCommon* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.encoded_payload_) {}

    , decltype(_impl_.radio_id_) {}

    , decltype(_impl_.psid_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.encoded_payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.encoded_payload_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encoded_payload().empty()) {
    _this->_impl_.encoded_payload_.Set(from._internal_encoded_payload(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.radio_id_, &from._impl_.radio_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.psid_) -
    reinterpret_cast<char*>(&_impl_.radio_id_)) + sizeof(_impl_.psid_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.cv2x.v1.RadioCommon)
}

inline void RadioCommon::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.encoded_payload_) {}

    , decltype(_impl_.radio_id_) { ::uint64_t{0u} }

    , decltype(_impl_.psid_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.encoded_payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.encoded_payload_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RadioCommon::~RadioCommon() {
  // @@protoc_insertion_point(destructor:cavnue.messages.cv2x.v1.RadioCommon)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RadioCommon::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.encoded_payload_.Destroy();
}

void RadioCommon::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RadioCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.cv2x.v1.RadioCommon)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.encoded_payload_.ClearToEmpty();
  ::memset(&_impl_.radio_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.psid_) -
      reinterpret_cast<char*>(&_impl_.radio_id_)) + sizeof(_impl_.psid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadioCommon::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 radio_id = 1 [json_name = "radioId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.radio_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 psid = 2 [json_name = "psid"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.psid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes encoded_payload = 3 [json_name = "encodedPayload"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_encoded_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RadioCommon::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.cv2x.v1.RadioCommon)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 radio_id = 1 [json_name = "radioId"];
  if (this->_internal_radio_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_radio_id(), target);
  }

  // uint32 psid = 2 [json_name = "psid"];
  if (this->_internal_psid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_psid(), target);
  }

  // bytes encoded_payload = 3 [json_name = "encodedPayload"];
  if (!this->_internal_encoded_payload().empty()) {
    const std::string& _s = this->_internal_encoded_payload();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.cv2x.v1.RadioCommon)
  return target;
}

::size_t RadioCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.cv2x.v1.RadioCommon)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encoded_payload = 3 [json_name = "encodedPayload"];
  if (!this->_internal_encoded_payload().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_encoded_payload());
  }

  // uint64 radio_id = 1 [json_name = "radioId"];
  if (this->_internal_radio_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_radio_id());
  }

  // uint32 psid = 2 [json_name = "psid"];
  if (this->_internal_psid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_psid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RadioCommon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RadioCommon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RadioCommon::GetClassData() const { return &_class_data_; }


void RadioCommon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RadioCommon*>(&to_msg);
  auto& from = static_cast<const RadioCommon&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.cv2x.v1.RadioCommon)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_encoded_payload().empty()) {
    _this->_internal_set_encoded_payload(from._internal_encoded_payload());
  }
  if (from._internal_radio_id() != 0) {
    _this->_internal_set_radio_id(from._internal_radio_id());
  }
  if (from._internal_psid() != 0) {
    _this->_internal_set_psid(from._internal_psid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RadioCommon::CopyFrom(const RadioCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.cv2x.v1.RadioCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadioCommon::IsInitialized() const {
  return true;
}

void RadioCommon::InternalSwap(RadioCommon* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encoded_payload_, lhs_arena,
                                       &other->_impl_.encoded_payload_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadioCommon, _impl_.psid_)
      + sizeof(RadioCommon::_impl_.psid_)
      - PROTOBUF_FIELD_OFFSET(RadioCommon, _impl_.radio_id_)>(
          reinterpret_cast<char*>(&_impl_.radio_id_),
          reinterpret_cast<char*>(&other->_impl_.radio_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadioCommon::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto[0]);
}
// ===================================================================

class RadioSend::_Internal {
 public:
  using HasBits = decltype(std::declval<RadioSend>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RadioSend, _impl_._has_bits_);
  static const ::cavnue::messages::common::v1::Header& header(const RadioSend* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cavnue::messages::cv2x::v1::RadioCommon& sent_common(const RadioSend* msg);
  static void set_has_sent_common(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::cavnue::messages::common::v1::Header&
RadioSend::_Internal::header(const RadioSend* msg) {
  return *msg->_impl_.header_;
}
const ::cavnue::messages::cv2x::v1::RadioCommon&
RadioSend::_Internal::sent_common(const RadioSend* msg) {
  return *msg->_impl_.sent_common_;
}
void RadioSend::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RadioSend::RadioSend(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.cv2x.v1.RadioSend)
}
RadioSend::RadioSend(const RadioSend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RadioSend* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.sent_common_){nullptr}
    , decltype(_impl_.actor_count_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_ = new ::cavnue::messages::common::v1::Header(*from._impl_.header_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.sent_common_ = new ::cavnue::messages::cv2x::v1::RadioCommon(*from._impl_.sent_common_);
  }
  _this->_impl_.actor_count_ = from._impl_.actor_count_;
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.cv2x.v1.RadioSend)
}

inline void RadioSend::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.sent_common_){nullptr}
    , decltype(_impl_.actor_count_) { 0 }

  };
}

RadioSend::~RadioSend() {
  // @@protoc_insertion_point(destructor:cavnue.messages.cv2x.v1.RadioSend)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RadioSend::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.sent_common_;
}

void RadioSend::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RadioSend::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.cv2x.v1.RadioSend)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.sent_common_ != nullptr);
      _impl_.sent_common_->Clear();
    }
  }
  _impl_.actor_count_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadioSend::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.cv2x.v1.RadioCommon sent_common = 2 [json_name = "sentCommon"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sent_common(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 actor_count = 3 [json_name = "actorCount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.actor_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RadioSend::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.cv2x.v1.RadioSend)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.cv2x.v1.RadioCommon sent_common = 2 [json_name = "sentCommon"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sent_common(this),
        _Internal::sent_common(this).GetCachedSize(), target, stream);
  }

  // int32 actor_count = 3 [json_name = "actorCount"];
  if (this->_internal_actor_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_actor_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.cv2x.v1.RadioSend)
  return target;
}

::size_t RadioSend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.cv2x.v1.RadioSend)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // .cavnue.messages.cv2x.v1.RadioCommon sent_common = 2 [json_name = "sentCommon"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sent_common_);
    }

  }
  // int32 actor_count = 3 [json_name = "actorCount"];
  if (this->_internal_actor_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_actor_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RadioSend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RadioSend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RadioSend::GetClassData() const { return &_class_data_; }


void RadioSend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RadioSend*>(&to_msg);
  auto& from = static_cast<const RadioSend&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.cv2x.v1.RadioSend)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::cavnue::messages::common::v1::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_sent_common()->::cavnue::messages::cv2x::v1::RadioCommon::MergeFrom(
          from._internal_sent_common());
    }
  }
  if (from._internal_actor_count() != 0) {
    _this->_internal_set_actor_count(from._internal_actor_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RadioSend::CopyFrom(const RadioSend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.cv2x.v1.RadioSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadioSend::IsInitialized() const {
  return true;
}

void RadioSend::InternalSwap(RadioSend* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadioSend, _impl_.actor_count_)
      + sizeof(RadioSend::_impl_.actor_count_)
      - PROTOBUF_FIELD_OFFSET(RadioSend, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadioSend::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto[1]);
}
// ===================================================================

class RadioReceive::_Internal {
 public:
  using HasBits = decltype(std::declval<RadioReceive>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RadioReceive, _impl_._has_bits_);
  static const ::cavnue::messages::common::v1::Header& header(const RadioReceive* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cavnue::messages::cv2x::v1::RadioCommon& received_common(const RadioReceive* msg);
  static void set_has_received_common(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& radio_timestamp(const RadioReceive* msg);
  static void set_has_radio_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& service_timestamp(const RadioReceive* msg);
  static void set_has_service_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::cavnue::messages::common::v1::Header&
RadioReceive::_Internal::header(const RadioReceive* msg) {
  return *msg->_impl_.header_;
}
const ::cavnue::messages::cv2x::v1::RadioCommon&
RadioReceive::_Internal::received_common(const RadioReceive* msg) {
  return *msg->_impl_.received_common_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RadioReceive::_Internal::radio_timestamp(const RadioReceive* msg) {
  return *msg->_impl_.radio_timestamp_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RadioReceive::_Internal::service_timestamp(const RadioReceive* msg) {
  return *msg->_impl_.service_timestamp_;
}
void RadioReceive::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RadioReceive::clear_radio_timestamp() {
  if (_impl_.radio_timestamp_ != nullptr) _impl_.radio_timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void RadioReceive::clear_service_timestamp() {
  if (_impl_.service_timestamp_ != nullptr) _impl_.service_timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
RadioReceive::RadioReceive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.cv2x.v1.RadioReceive)
}
RadioReceive::RadioReceive(const RadioReceive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RadioReceive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.received_common_){nullptr}
    , decltype(_impl_.radio_timestamp_){nullptr}
    , decltype(_impl_.service_timestamp_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_ = new ::cavnue::messages::common::v1::Header(*from._impl_.header_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.received_common_ = new ::cavnue::messages::cv2x::v1::RadioCommon(*from._impl_.received_common_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.radio_timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.radio_timestamp_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.service_timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.service_timestamp_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.cv2x.v1.RadioReceive)
}

inline void RadioReceive::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.received_common_){nullptr}
    , decltype(_impl_.radio_timestamp_){nullptr}
    , decltype(_impl_.service_timestamp_){nullptr}
  };
}

RadioReceive::~RadioReceive() {
  // @@protoc_insertion_point(destructor:cavnue.messages.cv2x.v1.RadioReceive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RadioReceive::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.received_common_;
  if (this != internal_default_instance()) delete _impl_.radio_timestamp_;
  if (this != internal_default_instance()) delete _impl_.service_timestamp_;
}

void RadioReceive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RadioReceive::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.cv2x.v1.RadioReceive)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.received_common_ != nullptr);
      _impl_.received_common_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.radio_timestamp_ != nullptr);
      _impl_.radio_timestamp_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.service_timestamp_ != nullptr);
      _impl_.service_timestamp_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadioReceive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.cv2x.v1.RadioCommon received_common = 2 [json_name = "receivedCommon"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_received_common(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp radio_timestamp = 3 [json_name = "radioTimestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_radio_timestamp(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp service_timestamp = 4 [json_name = "serviceTimestamp"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_service_timestamp(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RadioReceive::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.cv2x.v1.RadioReceive)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.cv2x.v1.RadioCommon received_common = 2 [json_name = "receivedCommon"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::received_common(this),
        _Internal::received_common(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp radio_timestamp = 3 [json_name = "radioTimestamp"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::radio_timestamp(this),
        _Internal::radio_timestamp(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp service_timestamp = 4 [json_name = "serviceTimestamp"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::service_timestamp(this),
        _Internal::service_timestamp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.cv2x.v1.RadioReceive)
  return target;
}

::size_t RadioReceive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.cv2x.v1.RadioReceive)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // .cavnue.messages.cv2x.v1.RadioCommon received_common = 2 [json_name = "receivedCommon"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.received_common_);
    }

    // .google.protobuf.Timestamp radio_timestamp = 3 [json_name = "radioTimestamp"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.radio_timestamp_);
    }

    // .google.protobuf.Timestamp service_timestamp = 4 [json_name = "serviceTimestamp"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.service_timestamp_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RadioReceive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RadioReceive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RadioReceive::GetClassData() const { return &_class_data_; }


void RadioReceive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RadioReceive*>(&to_msg);
  auto& from = static_cast<const RadioReceive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.cv2x.v1.RadioReceive)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::cavnue::messages::common::v1::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_received_common()->::cavnue::messages::cv2x::v1::RadioCommon::MergeFrom(
          from._internal_received_common());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_radio_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_radio_timestamp());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_service_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_service_timestamp());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RadioReceive::CopyFrom(const RadioReceive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.cv2x.v1.RadioReceive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadioReceive::IsInitialized() const {
  return true;
}

void RadioReceive::InternalSwap(RadioReceive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadioReceive, _impl_.service_timestamp_)
      + sizeof(RadioReceive::_impl_.service_timestamp_)
      - PROTOBUF_FIELD_OFFSET(RadioReceive, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadioReceive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace cv2x
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cavnue::messages::cv2x::v1::RadioCommon*
Arena::CreateMaybeMessage< ::cavnue::messages::cv2x::v1::RadioCommon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::cv2x::v1::RadioCommon >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::cv2x::v1::RadioSend*
Arena::CreateMaybeMessage< ::cavnue::messages::cv2x::v1::RadioSend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::cv2x::v1::RadioSend >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::cv2x::v1::RadioReceive*
Arena::CreateMaybeMessage< ::cavnue::messages::cv2x::v1::RadioReceive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::cv2x::v1::RadioReceive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

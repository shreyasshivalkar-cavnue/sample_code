// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/common/v1/common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto;
namespace cavnue {
namespace messages {
namespace common {
namespace v1 {
class DataSource;
struct DataSourceDefaultTypeInternal;
extern DataSourceDefaultTypeInternal _DataSource_default_instance_;
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Location;
struct LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class Sensor;
struct SensorDefaultTypeInternal;
extern SensorDefaultTypeInternal _Sensor_default_instance_;
}  // namespace v1
}  // namespace common
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template <>
::cavnue::messages::common::v1::DataSource* Arena::CreateMaybeMessage<::cavnue::messages::common::v1::DataSource>(Arena*);
template <>
::cavnue::messages::common::v1::Header* Arena::CreateMaybeMessage<::cavnue::messages::common::v1::Header>(Arena*);
template <>
::cavnue::messages::common::v1::Location* Arena::CreateMaybeMessage<::cavnue::messages::common::v1::Location>(Arena*);
template <>
::cavnue::messages::common::v1::Sensor* Arena::CreateMaybeMessage<::cavnue::messages::common::v1::Sensor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cavnue {
namespace messages {
namespace common {
namespace v1 {
enum Sensor_Type : int {
  Sensor_Type_TYPE_UNSPECIFIED = 0,
  Sensor_Type_TYPE_CAMERA = 1,
  Sensor_Type_TYPE_RADAR = 2,
  Sensor_Type_Sensor_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Sensor_Type_Sensor_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Sensor_Type_IsValid(int value);
constexpr Sensor_Type Sensor_Type_Type_MIN = static_cast<Sensor_Type>(0);
constexpr Sensor_Type Sensor_Type_Type_MAX = static_cast<Sensor_Type>(2);
constexpr int Sensor_Type_Type_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
Sensor_Type_descriptor();
template <typename T>
const std::string& Sensor_Type_Name(T value) {
  static_assert(std::is_same<T, Sensor_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return Sensor_Type_Name(static_cast<Sensor_Type>(value));
}
template <>
inline const std::string& Sensor_Type_Name(Sensor_Type value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<Sensor_Type_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool Sensor_Type_Parse(absl::string_view name, Sensor_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Sensor_Type>(
      Sensor_Type_descriptor(), name, value);
}
enum DataSource_Deployment : int {
  DataSource_Deployment_DEPLOYMENT_UNSPECIFIED = 0,
  DataSource_Deployment_DEPLOYMENT_MPG_CTY = 1,
  DataSource_Deployment_DEPLOYMENT_MPG_STW = 2,
  DataSource_Deployment_DEPLOYMENT_I96 = 3,
  DataSource_Deployment_DEPLOYMENT_MPG_CTY_SIM = 4,
  DataSource_Deployment_DEPLOYMENT_MPG_STW_SIM = 5,
  DataSource_Deployment_DEPLOYMENT_I96_SIM = 6,
  DataSource_Deployment_DEPLOYMENT_I94 = 7,
  DataSource_Deployment_DEPLOYMENT_I94_SIM = 8,
  DataSource_Deployment_DEPLOYMENT_CAVNUE_I94 = 9,
  DataSource_Deployment_DataSource_Deployment_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DataSource_Deployment_DataSource_Deployment_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool DataSource_Deployment_IsValid(int value);
constexpr DataSource_Deployment DataSource_Deployment_Deployment_MIN = static_cast<DataSource_Deployment>(0);
constexpr DataSource_Deployment DataSource_Deployment_Deployment_MAX = static_cast<DataSource_Deployment>(9);
constexpr int DataSource_Deployment_Deployment_ARRAYSIZE = 9 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
DataSource_Deployment_descriptor();
template <typename T>
const std::string& DataSource_Deployment_Name(T value) {
  static_assert(std::is_same<T, DataSource_Deployment>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Deployment_Name().");
  return DataSource_Deployment_Name(static_cast<DataSource_Deployment>(value));
}
template <>
inline const std::string& DataSource_Deployment_Name(DataSource_Deployment value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<DataSource_Deployment_descriptor,
                                                 0, 9>(
      static_cast<int>(value));
}
inline bool DataSource_Deployment_Parse(absl::string_view name, DataSource_Deployment* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataSource_Deployment>(
      DataSource_Deployment_descriptor(), name, value);
}
enum Classification : int {
  CLASSIFICATION_UNSPECIFIED = 0,
  CLASSIFICATION_BUS = 1,
  CLASSIFICATION_CAR = 2,
  CLASSIFICATION_COMMERCIAL_TRUCK = 3,
  CLASSIFICATION_MOTORBIKE = 4,
  CLASSIFICATION_PEDESTRIAN = 5,
  CLASSIFICATION_EMERGENCY_VEHICLE = 6,
  CLASSIFICATION_BICYCLE = 7,
  CLASSIFICATION_TRAILER = 8,
  CLASSIFICATION_HEAVY_EQUIPMENT = 9,
  CLASSIFICATION_SMALL_VEHICLE = 10,
  Classification_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Classification_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Classification_IsValid(int value);
constexpr Classification Classification_MIN = static_cast<Classification>(0);
constexpr Classification Classification_MAX = static_cast<Classification>(10);
constexpr int Classification_ARRAYSIZE = 10 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
Classification_descriptor();
template <typename T>
const std::string& Classification_Name(T value) {
  static_assert(std::is_same<T, Classification>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Classification_Name().");
  return Classification_Name(static_cast<Classification>(value));
}
template <>
inline const std::string& Classification_Name(Classification value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<Classification_descriptor,
                                                 0, 10>(
      static_cast<int>(value));
}
inline bool Classification_Parse(absl::string_view name, Classification* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Classification>(
      Classification_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Header final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.common.v1.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  ~Header() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Header& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Header& from) {
    Header::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.common.v1.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentIdsFieldNumber = 3,
    kTraceContextFieldNumber = 2,
    kTsFieldNumber = 1,
    kIdFieldNumber = 4,
    kRunIdFieldNumber = 5,
  };
  // repeated int64 parent_ids = 3 [json_name = "parentIds"];
  int parent_ids_size() const;
  private:
  int _internal_parent_ids_size() const;

  public:
  void clear_parent_ids() ;
  ::int64_t parent_ids(int index) const;
  void set_parent_ids(int index, ::int64_t value);
  void add_parent_ids(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& parent_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* mutable_parent_ids();

  private:
  ::int64_t _internal_parent_ids(int index) const;
  void _internal_add_parent_ids(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& _internal_parent_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* _internal_mutable_parent_ids();

  public:
  // string trace_context = 2 [json_name = "traceContext"];
  void clear_trace_context() ;
  const std::string& trace_context() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_trace_context(Arg_&& arg, Args_... args);
  std::string* mutable_trace_context();
  PROTOBUF_NODISCARD std::string* release_trace_context();
  void set_allocated_trace_context(std::string* ptr);

  private:
  const std::string& _internal_trace_context() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trace_context(
      const std::string& value);
  std::string* _internal_mutable_trace_context();

  public:
  // .google.protobuf.Timestamp ts = 1 [json_name = "ts"];
  bool has_ts() const;
  void clear_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_ts();
  void set_allocated_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_ts();
  public:
  void unsafe_arena_set_allocated_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_ts();
  // int64 id = 4 [json_name = "id"];
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // int64 run_id = 5 [json_name = "runId"];
  void clear_run_id() ;
  ::int64_t run_id() const;
  void set_run_id(::int64_t value);

  private:
  ::int64_t _internal_run_id() const;
  void _internal_set_run_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.common.v1.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t> parent_ids_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _parent_ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_context_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_;
    ::int64_t id_;
    ::int64_t run_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto;
};// -------------------------------------------------------------------

class Location final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.common.v1.Location) */ {
 public:
  inline Location() : Location(nullptr) {}
  ~Location() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Location(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Location(const Location& from);
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location& operator=(Location&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Location& default_instance() {
    return *internal_default_instance();
  }
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Location* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Location* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Location& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Location& from) {
    Location::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.common.v1.Location";
  }
  protected:
  explicit Location(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string identifier = 1 [json_name = "identifier"];
  void clear_identifier() ;
  const std::string& identifier() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_identifier(Arg_&& arg, Args_... args);
  std::string* mutable_identifier();
  PROTOBUF_NODISCARD std::string* release_identifier();
  void set_allocated_identifier(std::string* ptr);

  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(
      const std::string& value);
  std::string* _internal_mutable_identifier();

  public:
  // int64 id = 2 [json_name = "id"];
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.common.v1.Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
    ::int64_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto;
};// -------------------------------------------------------------------

class Sensor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.common.v1.Sensor) */ {
 public:
  inline Sensor() : Sensor(nullptr) {}
  ~Sensor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Sensor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sensor(const Sensor& from);
  Sensor(Sensor&& from) noexcept
    : Sensor() {
    *this = ::std::move(from);
  }

  inline Sensor& operator=(const Sensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sensor& operator=(Sensor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sensor& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sensor* internal_default_instance() {
    return reinterpret_cast<const Sensor*>(
               &_Sensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Sensor& a, Sensor& b) {
    a.Swap(&b);
  }
  inline void Swap(Sensor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sensor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Sensor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sensor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Sensor& from) {
    Sensor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sensor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.common.v1.Sensor";
  }
  protected:
  explicit Sensor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Type = Sensor_Type;
  static constexpr Type TYPE_UNSPECIFIED = Sensor_Type_TYPE_UNSPECIFIED;
  static constexpr Type TYPE_CAMERA = Sensor_Type_TYPE_CAMERA;
  static constexpr Type TYPE_RADAR = Sensor_Type_TYPE_RADAR;
  static inline bool Type_IsValid(int value) {
    return Sensor_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = Sensor_Type_Type_MIN;
  static constexpr Type Type_MAX = Sensor_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = Sensor_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor() {
    return Sensor_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return Sensor_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return Sensor_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kIdFieldNumber = 3,
    kTypeFieldNumber = 2,
  };
  // string identifier = 1 [json_name = "identifier"];
  void clear_identifier() ;
  const std::string& identifier() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_identifier(Arg_&& arg, Args_... args);
  std::string* mutable_identifier();
  PROTOBUF_NODISCARD std::string* release_identifier();
  void set_allocated_identifier(std::string* ptr);

  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(
      const std::string& value);
  std::string* _internal_mutable_identifier();

  public:
  // int64 id = 3 [json_name = "id"];
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // .cavnue.messages.common.v1.Sensor.Type type = 2 [json_name = "type"];
  void clear_type() ;
  ::cavnue::messages::common::v1::Sensor_Type type() const;
  void set_type(::cavnue::messages::common::v1::Sensor_Type value);

  private:
  ::cavnue::messages::common::v1::Sensor_Type _internal_type() const;
  void _internal_set_type(::cavnue::messages::common::v1::Sensor_Type value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.common.v1.Sensor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
    ::int64_t id_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto;
};// -------------------------------------------------------------------

class DataSource final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.common.v1.DataSource) */ {
 public:
  inline DataSource() : DataSource(nullptr) {}
  ~DataSource() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DataSource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataSource(const DataSource& from);
  DataSource(DataSource&& from) noexcept
    : DataSource() {
    *this = ::std::move(from);
  }

  inline DataSource& operator=(const DataSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataSource& operator=(DataSource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataSource& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataSource* internal_default_instance() {
    return reinterpret_cast<const DataSource*>(
               &_DataSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DataSource& a, DataSource& b) {
    a.Swap(&b);
  }
  inline void Swap(DataSource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataSource* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataSource>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataSource& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DataSource& from) {
    DataSource::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataSource* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.common.v1.DataSource";
  }
  protected:
  explicit DataSource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Deployment = DataSource_Deployment;
  static constexpr Deployment DEPLOYMENT_UNSPECIFIED = DataSource_Deployment_DEPLOYMENT_UNSPECIFIED;
  static constexpr Deployment DEPLOYMENT_MPG_CTY = DataSource_Deployment_DEPLOYMENT_MPG_CTY;
  static constexpr Deployment DEPLOYMENT_MPG_STW = DataSource_Deployment_DEPLOYMENT_MPG_STW;
  static constexpr Deployment DEPLOYMENT_I96 = DataSource_Deployment_DEPLOYMENT_I96;
  static constexpr Deployment DEPLOYMENT_MPG_CTY_SIM = DataSource_Deployment_DEPLOYMENT_MPG_CTY_SIM;
  static constexpr Deployment DEPLOYMENT_MPG_STW_SIM = DataSource_Deployment_DEPLOYMENT_MPG_STW_SIM;
  static constexpr Deployment DEPLOYMENT_I96_SIM = DataSource_Deployment_DEPLOYMENT_I96_SIM;
  static constexpr Deployment DEPLOYMENT_I94 = DataSource_Deployment_DEPLOYMENT_I94;
  static constexpr Deployment DEPLOYMENT_I94_SIM = DataSource_Deployment_DEPLOYMENT_I94_SIM;
  static constexpr Deployment DEPLOYMENT_CAVNUE_I94 = DataSource_Deployment_DEPLOYMENT_CAVNUE_I94;
  static inline bool Deployment_IsValid(int value) {
    return DataSource_Deployment_IsValid(value);
  }
  static constexpr Deployment Deployment_MIN = DataSource_Deployment_Deployment_MIN;
  static constexpr Deployment Deployment_MAX = DataSource_Deployment_Deployment_MAX;
  static constexpr int Deployment_ARRAYSIZE = DataSource_Deployment_Deployment_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Deployment_descriptor() {
    return DataSource_Deployment_descriptor();
  }
  template <typename T>
  static inline const std::string& Deployment_Name(T value) {
    return DataSource_Deployment_Name(value);
  }
  static inline bool Deployment_Parse(absl::string_view name, Deployment* value) {
    return DataSource_Deployment_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSimulationIdFieldNumber = 4,
    kLocationFieldNumber = 2,
    kSensorFieldNumber = 3,
    kDeploymentFieldNumber = 1,
  };
  // string simulation_id = 4 [json_name = "simulationId"];
  void clear_simulation_id() ;
  const std::string& simulation_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_simulation_id(Arg_&& arg, Args_... args);
  std::string* mutable_simulation_id();
  PROTOBUF_NODISCARD std::string* release_simulation_id();
  void set_allocated_simulation_id(std::string* ptr);

  private:
  const std::string& _internal_simulation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_simulation_id(
      const std::string& value);
  std::string* _internal_mutable_simulation_id();

  public:
  // .cavnue.messages.common.v1.Location location = 2 [json_name = "location"];
  bool has_location() const;
  void clear_location() ;
  const ::cavnue::messages::common::v1::Location& location() const;
  PROTOBUF_NODISCARD ::cavnue::messages::common::v1::Location* release_location();
  ::cavnue::messages::common::v1::Location* mutable_location();
  void set_allocated_location(::cavnue::messages::common::v1::Location* location);
  private:
  const ::cavnue::messages::common::v1::Location& _internal_location() const;
  ::cavnue::messages::common::v1::Location* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::cavnue::messages::common::v1::Location* location);
  ::cavnue::messages::common::v1::Location* unsafe_arena_release_location();
  // .cavnue.messages.common.v1.Sensor sensor = 3 [json_name = "sensor"];
  bool has_sensor() const;
  void clear_sensor() ;
  const ::cavnue::messages::common::v1::Sensor& sensor() const;
  PROTOBUF_NODISCARD ::cavnue::messages::common::v1::Sensor* release_sensor();
  ::cavnue::messages::common::v1::Sensor* mutable_sensor();
  void set_allocated_sensor(::cavnue::messages::common::v1::Sensor* sensor);
  private:
  const ::cavnue::messages::common::v1::Sensor& _internal_sensor() const;
  ::cavnue::messages::common::v1::Sensor* _internal_mutable_sensor();
  public:
  void unsafe_arena_set_allocated_sensor(
      ::cavnue::messages::common::v1::Sensor* sensor);
  ::cavnue::messages::common::v1::Sensor* unsafe_arena_release_sensor();
  // .cavnue.messages.common.v1.DataSource.Deployment deployment = 1 [json_name = "deployment"];
  void clear_deployment() ;
  ::cavnue::messages::common::v1::DataSource_Deployment deployment() const;
  void set_deployment(::cavnue::messages::common::v1::DataSource_Deployment value);

  private:
  ::cavnue::messages::common::v1::DataSource_Deployment _internal_deployment() const;
  void _internal_set_deployment(::cavnue::messages::common::v1::DataSource_Deployment value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.common.v1.DataSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr simulation_id_;
    ::cavnue::messages::common::v1::Location* location_;
    ::cavnue::messages::common::v1::Sensor* sensor_;
    int deployment_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Header

// .google.protobuf.Timestamp ts = 1 [json_name = "ts"];
inline bool Header::has_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Header::_internal_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Header::ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.common.v1.Header.ts)
  return _internal_ts();
}
inline void Header::unsafe_arena_set_allocated_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_);
  }
  _impl_.ts_ = ts;
  if (ts) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.common.v1.Header.ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Header::release_ts() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_;
  _impl_.ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Header::unsafe_arena_release_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.common.v1.Header.ts)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_;
  _impl_.ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Header::_internal_mutable_ts() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.ts_ = p;
  }
  return _impl_.ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Header::mutable_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.common.v1.Header.ts)
  return _msg;
}
inline void Header::set_allocated_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_);
  }
  if (ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts));
    if (message_arena != submessage_arena) {
      ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ts_ = ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.common.v1.Header.ts)
}

// string trace_context = 2 [json_name = "traceContext"];
inline void Header::clear_trace_context() {
  _impl_.trace_context_.ClearToEmpty();
}
inline const std::string& Header::trace_context() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.common.v1.Header.trace_context)
  return _internal_trace_context();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_trace_context(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.trace_context_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.common.v1.Header.trace_context)
}
inline std::string* Header::mutable_trace_context() {
  std::string* _s = _internal_mutable_trace_context();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.common.v1.Header.trace_context)
  return _s;
}
inline const std::string& Header::_internal_trace_context() const {
  return _impl_.trace_context_.Get();
}
inline void Header::_internal_set_trace_context(const std::string& value) {
  ;


  _impl_.trace_context_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_trace_context() {
  ;
  return _impl_.trace_context_.Mutable( GetArenaForAllocation());
}
inline std::string* Header::release_trace_context() {
  // @@protoc_insertion_point(field_release:cavnue.messages.common.v1.Header.trace_context)
  return _impl_.trace_context_.Release();
}
inline void Header::set_allocated_trace_context(std::string* value) {
  _impl_.trace_context_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.trace_context_.IsDefault()) {
          _impl_.trace_context_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.common.v1.Header.trace_context)
}

// repeated int64 parent_ids = 3 [json_name = "parentIds"];
inline int Header::_internal_parent_ids_size() const {
  return _impl_.parent_ids_.size();
}
inline int Header::parent_ids_size() const {
  return _internal_parent_ids_size();
}
inline void Header::clear_parent_ids() {
  _internal_mutable_parent_ids()->Clear();
}
inline ::int64_t Header::parent_ids(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.common.v1.Header.parent_ids)
  return _internal_parent_ids(index);
}
inline void Header::set_parent_ids(int index, ::int64_t value) {
  _internal_mutable_parent_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:cavnue.messages.common.v1.Header.parent_ids)
}
inline void Header::add_parent_ids(::int64_t value) {
  _internal_add_parent_ids(value);
  // @@protoc_insertion_point(field_add:cavnue.messages.common.v1.Header.parent_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& Header::parent_ids() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.common.v1.Header.parent_ids)
  return _internal_parent_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* Header::mutable_parent_ids() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.common.v1.Header.parent_ids)
  return _internal_mutable_parent_ids();
}

inline ::int64_t Header::_internal_parent_ids(int index) const {
  return _internal_parent_ids().Get(index);
}
inline void Header::_internal_add_parent_ids(::int64_t value) {
  _internal_mutable_parent_ids()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& Header::_internal_parent_ids() const {
  return _impl_.parent_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* Header::_internal_mutable_parent_ids() {
  return &_impl_.parent_ids_;
}

// int64 id = 4 [json_name = "id"];
inline void Header::clear_id() {
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t Header::id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.common.v1.Header.id)
  return _internal_id();
}
inline void Header::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.common.v1.Header.id)
}
inline ::int64_t Header::_internal_id() const {
  return _impl_.id_;
}
inline void Header::_internal_set_id(::int64_t value) {
  ;
  _impl_.id_ = value;
}

// int64 run_id = 5 [json_name = "runId"];
inline void Header::clear_run_id() {
  _impl_.run_id_ = ::int64_t{0};
}
inline ::int64_t Header::run_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.common.v1.Header.run_id)
  return _internal_run_id();
}
inline void Header::set_run_id(::int64_t value) {
  _internal_set_run_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.common.v1.Header.run_id)
}
inline ::int64_t Header::_internal_run_id() const {
  return _impl_.run_id_;
}
inline void Header::_internal_set_run_id(::int64_t value) {
  ;
  _impl_.run_id_ = value;
}

// -------------------------------------------------------------------

// Location

// string identifier = 1 [json_name = "identifier"];
inline void Location::clear_identifier() {
  _impl_.identifier_.ClearToEmpty();
}
inline const std::string& Location::identifier() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.common.v1.Location.identifier)
  return _internal_identifier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Location::set_identifier(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.identifier_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.common.v1.Location.identifier)
}
inline std::string* Location::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.common.v1.Location.identifier)
  return _s;
}
inline const std::string& Location::_internal_identifier() const {
  return _impl_.identifier_.Get();
}
inline void Location::_internal_set_identifier(const std::string& value) {
  ;


  _impl_.identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* Location::_internal_mutable_identifier() {
  ;
  return _impl_.identifier_.Mutable( GetArenaForAllocation());
}
inline std::string* Location::release_identifier() {
  // @@protoc_insertion_point(field_release:cavnue.messages.common.v1.Location.identifier)
  return _impl_.identifier_.Release();
}
inline void Location::set_allocated_identifier(std::string* value) {
  _impl_.identifier_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.identifier_.IsDefault()) {
          _impl_.identifier_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.common.v1.Location.identifier)
}

// int64 id = 2 [json_name = "id"];
inline void Location::clear_id() {
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t Location::id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.common.v1.Location.id)
  return _internal_id();
}
inline void Location::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.common.v1.Location.id)
}
inline ::int64_t Location::_internal_id() const {
  return _impl_.id_;
}
inline void Location::_internal_set_id(::int64_t value) {
  ;
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// Sensor

// string identifier = 1 [json_name = "identifier"];
inline void Sensor::clear_identifier() {
  _impl_.identifier_.ClearToEmpty();
}
inline const std::string& Sensor::identifier() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.common.v1.Sensor.identifier)
  return _internal_identifier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Sensor::set_identifier(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.identifier_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.common.v1.Sensor.identifier)
}
inline std::string* Sensor::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.common.v1.Sensor.identifier)
  return _s;
}
inline const std::string& Sensor::_internal_identifier() const {
  return _impl_.identifier_.Get();
}
inline void Sensor::_internal_set_identifier(const std::string& value) {
  ;


  _impl_.identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* Sensor::_internal_mutable_identifier() {
  ;
  return _impl_.identifier_.Mutable( GetArenaForAllocation());
}
inline std::string* Sensor::release_identifier() {
  // @@protoc_insertion_point(field_release:cavnue.messages.common.v1.Sensor.identifier)
  return _impl_.identifier_.Release();
}
inline void Sensor::set_allocated_identifier(std::string* value) {
  _impl_.identifier_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.identifier_.IsDefault()) {
          _impl_.identifier_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.common.v1.Sensor.identifier)
}

// .cavnue.messages.common.v1.Sensor.Type type = 2 [json_name = "type"];
inline void Sensor::clear_type() {
  _impl_.type_ = 0;
}
inline ::cavnue::messages::common::v1::Sensor_Type Sensor::type() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.common.v1.Sensor.type)
  return _internal_type();
}
inline void Sensor::set_type(::cavnue::messages::common::v1::Sensor_Type value) {
   _internal_set_type(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.common.v1.Sensor.type)
}
inline ::cavnue::messages::common::v1::Sensor_Type Sensor::_internal_type() const {
  return static_cast<::cavnue::messages::common::v1::Sensor_Type>(_impl_.type_);
}
inline void Sensor::_internal_set_type(::cavnue::messages::common::v1::Sensor_Type value) {
  ;
  _impl_.type_ = value;
}

// int64 id = 3 [json_name = "id"];
inline void Sensor::clear_id() {
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t Sensor::id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.common.v1.Sensor.id)
  return _internal_id();
}
inline void Sensor::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.common.v1.Sensor.id)
}
inline ::int64_t Sensor::_internal_id() const {
  return _impl_.id_;
}
inline void Sensor::_internal_set_id(::int64_t value) {
  ;
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// DataSource

// .cavnue.messages.common.v1.DataSource.Deployment deployment = 1 [json_name = "deployment"];
inline void DataSource::clear_deployment() {
  _impl_.deployment_ = 0;
}
inline ::cavnue::messages::common::v1::DataSource_Deployment DataSource::deployment() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.common.v1.DataSource.deployment)
  return _internal_deployment();
}
inline void DataSource::set_deployment(::cavnue::messages::common::v1::DataSource_Deployment value) {
   _internal_set_deployment(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.common.v1.DataSource.deployment)
}
inline ::cavnue::messages::common::v1::DataSource_Deployment DataSource::_internal_deployment() const {
  return static_cast<::cavnue::messages::common::v1::DataSource_Deployment>(_impl_.deployment_);
}
inline void DataSource::_internal_set_deployment(::cavnue::messages::common::v1::DataSource_Deployment value) {
  ;
  _impl_.deployment_ = value;
}

// .cavnue.messages.common.v1.Location location = 2 [json_name = "location"];
inline bool DataSource::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline void DataSource::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cavnue::messages::common::v1::Location& DataSource::_internal_location() const {
  const ::cavnue::messages::common::v1::Location* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::common::v1::Location&>(
      ::cavnue::messages::common::v1::_Location_default_instance_);
}
inline const ::cavnue::messages::common::v1::Location& DataSource::location() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.common.v1.DataSource.location)
  return _internal_location();
}
inline void DataSource::unsafe_arena_set_allocated_location(
    ::cavnue::messages::common::v1::Location* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.common.v1.DataSource.location)
}
inline ::cavnue::messages::common::v1::Location* DataSource::release_location() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Location* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::common::v1::Location* DataSource::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:cavnue.messages.common.v1.DataSource.location)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Location* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::cavnue::messages::common::v1::Location* DataSource::_internal_mutable_location() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::common::v1::Location>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::cavnue::messages::common::v1::Location* DataSource::mutable_location() {
  ::cavnue::messages::common::v1::Location* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.common.v1.DataSource.location)
  return _msg;
}
inline void DataSource::set_allocated_location(::cavnue::messages::common::v1::Location* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.common.v1.DataSource.location)
}

// .cavnue.messages.common.v1.Sensor sensor = 3 [json_name = "sensor"];
inline bool DataSource::has_sensor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sensor_ != nullptr);
  return value;
}
inline void DataSource::clear_sensor() {
  if (_impl_.sensor_ != nullptr) _impl_.sensor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::cavnue::messages::common::v1::Sensor& DataSource::_internal_sensor() const {
  const ::cavnue::messages::common::v1::Sensor* p = _impl_.sensor_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::common::v1::Sensor&>(
      ::cavnue::messages::common::v1::_Sensor_default_instance_);
}
inline const ::cavnue::messages::common::v1::Sensor& DataSource::sensor() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.common.v1.DataSource.sensor)
  return _internal_sensor();
}
inline void DataSource::unsafe_arena_set_allocated_sensor(
    ::cavnue::messages::common::v1::Sensor* sensor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sensor_);
  }
  _impl_.sensor_ = sensor;
  if (sensor) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.common.v1.DataSource.sensor)
}
inline ::cavnue::messages::common::v1::Sensor* DataSource::release_sensor() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::common::v1::Sensor* temp = _impl_.sensor_;
  _impl_.sensor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::common::v1::Sensor* DataSource::unsafe_arena_release_sensor() {
  // @@protoc_insertion_point(field_release:cavnue.messages.common.v1.DataSource.sensor)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::common::v1::Sensor* temp = _impl_.sensor_;
  _impl_.sensor_ = nullptr;
  return temp;
}
inline ::cavnue::messages::common::v1::Sensor* DataSource::_internal_mutable_sensor() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.sensor_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::common::v1::Sensor>(GetArenaForAllocation());
    _impl_.sensor_ = p;
  }
  return _impl_.sensor_;
}
inline ::cavnue::messages::common::v1::Sensor* DataSource::mutable_sensor() {
  ::cavnue::messages::common::v1::Sensor* _msg = _internal_mutable_sensor();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.common.v1.DataSource.sensor)
  return _msg;
}
inline void DataSource::set_allocated_sensor(::cavnue::messages::common::v1::Sensor* sensor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sensor_;
  }
  if (sensor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sensor);
    if (message_arena != submessage_arena) {
      sensor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sensor, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.sensor_ = sensor;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.common.v1.DataSource.sensor)
}

// string simulation_id = 4 [json_name = "simulationId"];
inline void DataSource::clear_simulation_id() {
  _impl_.simulation_id_.ClearToEmpty();
}
inline const std::string& DataSource::simulation_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.common.v1.DataSource.simulation_id)
  return _internal_simulation_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DataSource::set_simulation_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.simulation_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.common.v1.DataSource.simulation_id)
}
inline std::string* DataSource::mutable_simulation_id() {
  std::string* _s = _internal_mutable_simulation_id();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.common.v1.DataSource.simulation_id)
  return _s;
}
inline const std::string& DataSource::_internal_simulation_id() const {
  return _impl_.simulation_id_.Get();
}
inline void DataSource::_internal_set_simulation_id(const std::string& value) {
  ;


  _impl_.simulation_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DataSource::_internal_mutable_simulation_id() {
  ;
  return _impl_.simulation_id_.Mutable( GetArenaForAllocation());
}
inline std::string* DataSource::release_simulation_id() {
  // @@protoc_insertion_point(field_release:cavnue.messages.common.v1.DataSource.simulation_id)
  return _impl_.simulation_id_.Release();
}
inline void DataSource::set_allocated_simulation_id(std::string* value) {
  _impl_.simulation_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.simulation_id_.IsDefault()) {
          _impl_.simulation_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.common.v1.DataSource.simulation_id)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace common
}  // namespace messages
}  // namespace cavnue


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::cavnue::messages::common::v1::Sensor_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::cavnue::messages::common::v1::Sensor_Type>() {
  return ::cavnue::messages::common::v1::Sensor_Type_descriptor();
}
template <>
struct is_proto_enum<::cavnue::messages::common::v1::DataSource_Deployment> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::cavnue::messages::common::v1::DataSource_Deployment>() {
  return ::cavnue::messages::common::v1::DataSource_Deployment_descriptor();
}
template <>
struct is_proto_enum<::cavnue::messages::common::v1::Classification> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::cavnue::messages::common::v1::Classification>() {
  return ::cavnue::messages::common::v1::Classification_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto_2epb_2eh

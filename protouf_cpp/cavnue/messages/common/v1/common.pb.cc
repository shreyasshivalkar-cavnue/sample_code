// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/common/v1/common.proto

#include "cavnue/messages/common/v1/common.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cavnue {
namespace messages {
namespace common {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR Header::Header(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parent_ids_)*/ {}
  ,/* _impl_._parent_ids_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.trace_context_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.ts_)*/nullptr
  , /*decltype(_impl_.id_)*/ ::int64_t{0}

  , /*decltype(_impl_.run_id_)*/ ::int64_t{0}
} {}
struct HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderDefaultTypeInternal _Header_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Location::Location(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.identifier_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.id_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocationDefaultTypeInternal() {}
  union {
    Location _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocationDefaultTypeInternal _Location_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Sensor::Sensor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.identifier_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.id_)*/ ::int64_t{0}

  , /*decltype(_impl_.type_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SensorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorDefaultTypeInternal() {}
  union {
    Sensor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorDefaultTypeInternal _Sensor_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DataSource::DataSource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.simulation_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.sensor_)*/nullptr
  , /*decltype(_impl_.deployment_)*/ 0
} {}
struct DataSourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataSourceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataSourceDefaultTypeInternal() {}
  union {
    DataSource _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataSourceDefaultTypeInternal _DataSource_default_instance_;
}  // namespace v1
}  // namespace common
}  // namespace messages
}  // namespace cavnue
static ::_pb::Metadata file_level_metadata_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto = nullptr;
const ::uint32_t TableStruct_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::common::v1::Header, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::common::v1::Header, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::common::v1::Header, _impl_.ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::common::v1::Header, _impl_.trace_context_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::common::v1::Header, _impl_.parent_ids_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::common::v1::Header, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::common::v1::Header, _impl_.run_id_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::common::v1::Location, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::common::v1::Location, _impl_.identifier_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::common::v1::Location, _impl_.id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::common::v1::Sensor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::common::v1::Sensor, _impl_.identifier_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::common::v1::Sensor, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::common::v1::Sensor, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::common::v1::DataSource, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::common::v1::DataSource, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::common::v1::DataSource, _impl_.deployment_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::common::v1::DataSource, _impl_.location_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::common::v1::DataSource, _impl_.sensor_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::common::v1::DataSource, _impl_.simulation_id_),
    ~0u,
    0,
    1,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 13, -1, sizeof(::cavnue::messages::common::v1::Header)},
        { 18, -1, -1, sizeof(::cavnue::messages::common::v1::Location)},
        { 28, -1, -1, sizeof(::cavnue::messages::common::v1::Sensor)},
        { 39, 51, -1, sizeof(::cavnue::messages::common::v1::DataSource)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cavnue::messages::common::v1::_Header_default_instance_._instance,
    &::cavnue::messages::common::v1::_Location_default_instance_._instance,
    &::cavnue::messages::common::v1::_Sensor_default_instance_._instance,
    &::cavnue::messages::common::v1::_DataSource_default_instance_._instance,
};
const char descriptor_table_protodef_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n&cavnue/messages/common/v1/common.proto"
    "\022\031cavnue.messages.common.v1\032\037google/prot"
    "obuf/timestamp.proto\"\237\001\n\006Header\022*\n\002ts\030\001 "
    "\001(\0132\032.google.protobuf.TimestampR\002ts\022#\n\rt"
    "race_context\030\002 \001(\tR\014traceContext\022\035\n\npare"
    "nt_ids\030\003 \003(\003R\tparentIds\022\016\n\002id\030\004 \001(\003R\002id\022"
    "\025\n\006run_id\030\005 \001(\003R\005runId\":\n\010Location\022\036\n\nid"
    "entifier\030\001 \001(\tR\nidentifier\022\016\n\002id\030\002 \001(\003R\002"
    "id\"\263\001\n\006Sensor\022\036\n\nidentifier\030\001 \001(\tR\nident"
    "ifier\022:\n\004type\030\002 \001(\0162&.cavnue.messages.co"
    "mmon.v1.Sensor.TypeR\004type\022\016\n\002id\030\003 \001(\003R\002i"
    "d\"=\n\004Type\022\024\n\020TYPE_UNSPECIFIED\020\000\022\017\n\013TYPE_"
    "CAMERA\020\001\022\016\n\nTYPE_RADAR\020\002\"\205\004\n\nDataSource\022"
    "P\n\ndeployment\030\001 \001(\01620.cavnue.messages.co"
    "mmon.v1.DataSource.DeploymentR\ndeploymen"
    "t\022\?\n\010location\030\002 \001(\0132#.cavnue.messages.co"
    "mmon.v1.LocationR\010location\0229\n\006sensor\030\003 \001"
    "(\0132!.cavnue.messages.common.v1.SensorR\006s"
    "ensor\022#\n\rsimulation_id\030\004 \001(\tR\014simulation"
    "Id\"\203\002\n\nDeployment\022\032\n\026DEPLOYMENT_UNSPECIF"
    "IED\020\000\022\026\n\022DEPLOYMENT_MPG_CTY\020\001\022\026\n\022DEPLOYM"
    "ENT_MPG_STW\020\002\022\022\n\016DEPLOYMENT_I96\020\003\022\032\n\026DEP"
    "LOYMENT_MPG_CTY_SIM\020\004\022\032\n\026DEPLOYMENT_MPG_"
    "STW_SIM\020\005\022\026\n\022DEPLOYMENT_I96_SIM\020\006\022\022\n\016DEP"
    "LOYMENT_I94\020\007\022\026\n\022DEPLOYMENT_I94_SIM\020\010\022\031\n"
    "\025DEPLOYMENT_CAVNUE_I94\020\t*\346\002\n\016Classificat"
    "ion\022\036\n\032CLASSIFICATION_UNSPECIFIED\020\000\022\026\n\022C"
    "LASSIFICATION_BUS\020\001\022\026\n\022CLASSIFICATION_CA"
    "R\020\002\022#\n\037CLASSIFICATION_COMMERCIAL_TRUCK\020\003"
    "\022\034\n\030CLASSIFICATION_MOTORBIKE\020\004\022\035\n\031CLASSI"
    "FICATION_PEDESTRIAN\020\005\022$\n CLASSIFICATION_"
    "EMERGENCY_VEHICLE\020\006\022\032\n\026CLASSIFICATION_BI"
    "CYCLE\020\007\022\032\n\026CLASSIFICATION_TRAILER\020\010\022\"\n\036C"
    "LASSIFICATION_HEAVY_EQUIPMENT\020\t\022 \n\034CLASS"
    "IFICATION_SMALL_VEHICLE\020\nb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto = {
    false,
    false,
    1393,
    descriptor_table_protodef_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto,
    "cavnue/messages/common/v1/common.proto",
    &descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto_once,
    descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto_deps,
    1,
    4,
    schemas,
    file_default_instances,
    TableStruct_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto::offsets,
    file_level_metadata_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto,
    file_level_enum_descriptors_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto,
    file_level_service_descriptors_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto_getter() {
  return &descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto(&descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto);
namespace cavnue {
namespace messages {
namespace common {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Sensor_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto);
  return file_level_enum_descriptors_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto[0];
}
bool Sensor_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Sensor_Type Sensor::TYPE_UNSPECIFIED;
constexpr Sensor_Type Sensor::TYPE_CAMERA;
constexpr Sensor_Type Sensor::TYPE_RADAR;
constexpr Sensor_Type Sensor::Type_MIN;
constexpr Sensor_Type Sensor::Type_MAX;
constexpr int Sensor::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataSource_Deployment_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto);
  return file_level_enum_descriptors_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto[1];
}
bool DataSource_Deployment_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr DataSource_Deployment DataSource::DEPLOYMENT_UNSPECIFIED;
constexpr DataSource_Deployment DataSource::DEPLOYMENT_MPG_CTY;
constexpr DataSource_Deployment DataSource::DEPLOYMENT_MPG_STW;
constexpr DataSource_Deployment DataSource::DEPLOYMENT_I96;
constexpr DataSource_Deployment DataSource::DEPLOYMENT_MPG_CTY_SIM;
constexpr DataSource_Deployment DataSource::DEPLOYMENT_MPG_STW_SIM;
constexpr DataSource_Deployment DataSource::DEPLOYMENT_I96_SIM;
constexpr DataSource_Deployment DataSource::DEPLOYMENT_I94;
constexpr DataSource_Deployment DataSource::DEPLOYMENT_I94_SIM;
constexpr DataSource_Deployment DataSource::DEPLOYMENT_CAVNUE_I94;
constexpr DataSource_Deployment DataSource::Deployment_MIN;
constexpr DataSource_Deployment DataSource::Deployment_MAX;
constexpr int DataSource::Deployment_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Classification_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto);
  return file_level_enum_descriptors_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto[2];
}
bool Classification_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class Header::_Internal {
 public:
  using HasBits = decltype(std::declval<Header>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Header, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts(const Header* msg);
  static void set_has_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Header::_Internal::ts(const Header* msg) {
  return *msg->_impl_.ts_;
}
void Header::clear_ts() {
  if (_impl_.ts_ != nullptr) _impl_.ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.common.v1.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Header* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_ids_) { from._impl_.parent_ids_ }
    ,/* _impl_._parent_ids_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.trace_context_) {}

    , decltype(_impl_.ts_){nullptr}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.run_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.trace_context_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.trace_context_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trace_context().empty()) {
    _this->_impl_.trace_context_.Set(from._internal_trace_context(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.ts_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.run_id_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.run_id_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.common.v1.Header)
}

inline void Header::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parent_ids_) { arena }
    ,/* _impl_._parent_ids_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.trace_context_) {}

    , decltype(_impl_.ts_){nullptr}
    , decltype(_impl_.id_) { ::int64_t{0} }

    , decltype(_impl_.run_id_) { ::int64_t{0} }

  };
  _impl_.trace_context_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.trace_context_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:cavnue.messages.common.v1.Header)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Header::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parent_ids_.~RepeatedField();
  _impl_.trace_context_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ts_;
}

void Header::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.common.v1.Header)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_parent_ids()->Clear();
  _impl_.trace_context_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.ts_ != nullptr);
    _impl_.ts_->Clear();
  }
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.run_id_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.run_id_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp ts = 1 [json_name = "ts"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string trace_context = 2 [json_name = "traceContext"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_trace_context();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.common.v1.Header.trace_context"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int64 parent_ids = 3 [json_name = "parentIds"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_parent_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 24) {
          _internal_add_parent_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 id = 4 [json_name = "id"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 run_id = 5 [json_name = "runId"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.run_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Header::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.common.v1.Header)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp ts = 1 [json_name = "ts"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ts(this),
        _Internal::ts(this).GetCachedSize(), target, stream);
  }

  // string trace_context = 2 [json_name = "traceContext"];
  if (!this->_internal_trace_context().empty()) {
    const std::string& _s = this->_internal_trace_context();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.common.v1.Header.trace_context");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated int64 parent_ids = 3 [json_name = "parentIds"];
  {
    int byte_size = _impl_._parent_ids_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(3, _internal_parent_ids(),
                                                 byte_size, target);
    }
  }

  // int64 id = 4 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_id(), target);
  }

  // int64 run_id = 5 [json_name = "runId"];
  if (this->_internal_run_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        5, this->_internal_run_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.common.v1.Header)
  return target;
}

::size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.common.v1.Header)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 parent_ids = 3 [json_name = "parentIds"];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_parent_ids())
    ;
    _impl_._parent_ids_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // string trace_context = 2 [json_name = "traceContext"];
  if (!this->_internal_trace_context().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_trace_context());
  }

  // .google.protobuf.Timestamp ts = 1 [json_name = "ts"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ts_);
  }

  // int64 id = 4 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id());
  }

  // int64 run_id = 5 [json_name = "runId"];
  if (this->_internal_run_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_run_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Header::GetClassData() const { return &_class_data_; }


void Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Header*>(&to_msg);
  auto& from = static_cast<const Header&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.common.v1.Header)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.parent_ids_.MergeFrom(from._impl_.parent_ids_);
  if (!from._internal_trace_context().empty()) {
    _this->_internal_set_trace_context(from._internal_trace_context());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_ts());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_run_id() != 0) {
    _this->_internal_set_run_id(from._internal_run_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.common.v1.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.parent_ids_.InternalSwap(&other->_impl_.parent_ids_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.trace_context_, lhs_arena,
                                       &other->_impl_.trace_context_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, _impl_.run_id_)
      + sizeof(Header::_impl_.run_id_)
      - PROTOBUF_FIELD_OFFSET(Header, _impl_.ts_)>(
          reinterpret_cast<char*>(&_impl_.ts_),
          reinterpret_cast<char*>(&other->_impl_.ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto[0]);
}
// ===================================================================

class Location::_Internal {
 public:
};

Location::Location(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.common.v1.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Location* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.identifier_) {}

    , decltype(_impl_.id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identifier().empty()) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.common.v1.Location)
}

inline void Location::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.identifier_) {}

    , decltype(_impl_.id_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:cavnue.messages.common.v1.Location)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Location::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identifier_.Destroy();
}

void Location::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.common.v1.Location)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.identifier_.ClearToEmpty();
  _impl_.id_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Location::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string identifier = 1 [json_name = "identifier"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.common.v1.Location.identifier"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 id = 2 [json_name = "id"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Location::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.common.v1.Location)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string identifier = 1 [json_name = "identifier"];
  if (!this->_internal_identifier().empty()) {
    const std::string& _s = this->_internal_identifier();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.common.v1.Location.identifier");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int64 id = 2 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.common.v1.Location)
  return target;
}

::size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.common.v1.Location)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string identifier = 1 [json_name = "identifier"];
  if (!this->_internal_identifier().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_identifier());
  }

  // int64 id = 2 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Location::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Location::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Location::GetClassData() const { return &_class_data_; }


void Location::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Location*>(&to_msg);
  auto& from = static_cast<const Location&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.common.v1.Location)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_identifier().empty()) {
    _this->_internal_set_identifier(from._internal_identifier());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.common.v1.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identifier_, lhs_arena,
                                       &other->_impl_.identifier_, rhs_arena);

  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Location::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto[1]);
}
// ===================================================================

class Sensor::_Internal {
 public:
};

Sensor::Sensor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.common.v1.Sensor)
}
Sensor::Sensor(const Sensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Sensor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.identifier_) {}

    , decltype(_impl_.id_) {}

    , decltype(_impl_.type_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identifier().empty()) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.common.v1.Sensor)
}

inline void Sensor::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.identifier_) {}

    , decltype(_impl_.id_) { ::int64_t{0} }

    , decltype(_impl_.type_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Sensor::~Sensor() {
  // @@protoc_insertion_point(destructor:cavnue.messages.common.v1.Sensor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sensor::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identifier_.Destroy();
}

void Sensor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Sensor::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.common.v1.Sensor)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.identifier_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sensor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string identifier = 1 [json_name = "identifier"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.common.v1.Sensor.identifier"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.common.v1.Sensor.Type type = 2 [json_name = "type"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::cavnue::messages::common::v1::Sensor_Type>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 id = 3 [json_name = "id"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Sensor::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.common.v1.Sensor)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string identifier = 1 [json_name = "identifier"];
  if (!this->_internal_identifier().empty()) {
    const std::string& _s = this->_internal_identifier();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.common.v1.Sensor.identifier");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .cavnue.messages.common.v1.Sensor.Type type = 2 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_type(), target);
  }

  // int64 id = 3 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.common.v1.Sensor)
  return target;
}

::size_t Sensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.common.v1.Sensor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string identifier = 1 [json_name = "identifier"];
  if (!this->_internal_identifier().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_identifier());
  }

  // int64 id = 3 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id());
  }

  // .cavnue.messages.common.v1.Sensor.Type type = 2 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sensor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Sensor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sensor::GetClassData() const { return &_class_data_; }


void Sensor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Sensor*>(&to_msg);
  auto& from = static_cast<const Sensor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.common.v1.Sensor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_identifier().empty()) {
    _this->_internal_set_identifier(from._internal_identifier());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sensor::CopyFrom(const Sensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.common.v1.Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sensor::IsInitialized() const {
  return true;
}

void Sensor::InternalSwap(Sensor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identifier_, lhs_arena,
                                       &other->_impl_.identifier_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sensor, _impl_.type_)
      + sizeof(Sensor::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Sensor, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sensor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto[2]);
}
// ===================================================================

class DataSource::_Internal {
 public:
  using HasBits = decltype(std::declval<DataSource>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DataSource, _impl_._has_bits_);
  static const ::cavnue::messages::common::v1::Location& location(const DataSource* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cavnue::messages::common::v1::Sensor& sensor(const DataSource* msg);
  static void set_has_sensor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::cavnue::messages::common::v1::Location&
DataSource::_Internal::location(const DataSource* msg) {
  return *msg->_impl_.location_;
}
const ::cavnue::messages::common::v1::Sensor&
DataSource::_Internal::sensor(const DataSource* msg) {
  return *msg->_impl_.sensor_;
}
DataSource::DataSource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.common.v1.DataSource)
}
DataSource::DataSource(const DataSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataSource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.simulation_id_) {}

    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.sensor_){nullptr}
    , decltype(_impl_.deployment_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.simulation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.simulation_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_simulation_id().empty()) {
    _this->_impl_.simulation_id_.Set(from._internal_simulation_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.location_ = new ::cavnue::messages::common::v1::Location(*from._impl_.location_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.sensor_ = new ::cavnue::messages::common::v1::Sensor(*from._impl_.sensor_);
  }
  _this->_impl_.deployment_ = from._impl_.deployment_;
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.common.v1.DataSource)
}

inline void DataSource::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.simulation_id_) {}

    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.sensor_){nullptr}
    , decltype(_impl_.deployment_) { 0 }

  };
  _impl_.simulation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.simulation_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataSource::~DataSource() {
  // @@protoc_insertion_point(destructor:cavnue.messages.common.v1.DataSource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataSource::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.simulation_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.location_;
  if (this != internal_default_instance()) delete _impl_.sensor_;
}

void DataSource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataSource::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.common.v1.DataSource)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.simulation_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.sensor_ != nullptr);
      _impl_.sensor_->Clear();
    }
  }
  _impl_.deployment_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataSource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.common.v1.DataSource.Deployment deployment = 1 [json_name = "deployment"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_deployment(static_cast<::cavnue::messages::common::v1::DataSource_Deployment>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.common.v1.Location location = 2 [json_name = "location"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.common.v1.Sensor sensor = 3 [json_name = "sensor"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sensor(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string simulation_id = 4 [json_name = "simulationId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_simulation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.common.v1.DataSource.simulation_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DataSource::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.common.v1.DataSource)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cavnue.messages.common.v1.DataSource.Deployment deployment = 1 [json_name = "deployment"];
  if (this->_internal_deployment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_deployment(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.common.v1.Location location = 2 [json_name = "location"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.common.v1.Sensor sensor = 3 [json_name = "sensor"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::sensor(this),
        _Internal::sensor(this).GetCachedSize(), target, stream);
  }

  // string simulation_id = 4 [json_name = "simulationId"];
  if (!this->_internal_simulation_id().empty()) {
    const std::string& _s = this->_internal_simulation_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.common.v1.DataSource.simulation_id");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.common.v1.DataSource)
  return target;
}

::size_t DataSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.common.v1.DataSource)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string simulation_id = 4 [json_name = "simulationId"];
  if (!this->_internal_simulation_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_simulation_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .cavnue.messages.common.v1.Location location = 2 [json_name = "location"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

    // .cavnue.messages.common.v1.Sensor sensor = 3 [json_name = "sensor"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sensor_);
    }

  }
  // .cavnue.messages.common.v1.DataSource.Deployment deployment = 1 [json_name = "deployment"];
  if (this->_internal_deployment() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_deployment());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataSource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataSource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataSource::GetClassData() const { return &_class_data_; }


void DataSource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataSource*>(&to_msg);
  auto& from = static_cast<const DataSource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.common.v1.DataSource)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_simulation_id().empty()) {
    _this->_internal_set_simulation_id(from._internal_simulation_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::cavnue::messages::common::v1::Location::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_sensor()->::cavnue::messages::common::v1::Sensor::MergeFrom(
          from._internal_sensor());
    }
  }
  if (from._internal_deployment() != 0) {
    _this->_internal_set_deployment(from._internal_deployment());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataSource::CopyFrom(const DataSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.common.v1.DataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSource::IsInitialized() const {
  return true;
}

void DataSource::InternalSwap(DataSource* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.simulation_id_, lhs_arena,
                                       &other->_impl_.simulation_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataSource, _impl_.deployment_)
      + sizeof(DataSource::_impl_.deployment_)
      - PROTOBUF_FIELD_OFFSET(DataSource, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataSource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace common
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cavnue::messages::common::v1::Header*
Arena::CreateMaybeMessage< ::cavnue::messages::common::v1::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::common::v1::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::common::v1::Location*
Arena::CreateMaybeMessage< ::cavnue::messages::common::v1::Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::common::v1::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::common::v1::Sensor*
Arena::CreateMaybeMessage< ::cavnue::messages::common::v1::Sensor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::common::v1::Sensor >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::common::v1::DataSource*
Arena::CreateMaybeMessage< ::cavnue::messages::common::v1::DataSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::common::v1::DataSource >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

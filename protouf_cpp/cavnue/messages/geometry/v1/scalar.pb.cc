// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/geometry/v1/scalar.proto

#include "cavnue/messages/geometry/v1/scalar.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cavnue {
namespace messages {
namespace geometry {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR Scalarf::Scalarf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scalar_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ScalarfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScalarfDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScalarfDefaultTypeInternal() {}
  union {
    Scalarf _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScalarfDefaultTypeInternal _Scalarf_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Scalard::Scalard(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scalar_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ScalardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScalardDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScalardDefaultTypeInternal() {}
  union {
    Scalard _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScalardDefaultTypeInternal _Scalard_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR VarianceScalarf::VarianceScalarf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scalar_)*/ 0

  , /*decltype(_impl_.variance_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VarianceScalarfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VarianceScalarfDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VarianceScalarfDefaultTypeInternal() {}
  union {
    VarianceScalarf _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VarianceScalarfDefaultTypeInternal _VarianceScalarf_default_instance_;
}  // namespace v1
}  // namespace geometry
}  // namespace messages
}  // namespace cavnue
static ::_pb::Metadata file_level_metadata_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto = nullptr;
const ::uint32_t TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::Scalarf, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::Scalarf, _impl_.scalar_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::Scalard, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::Scalard, _impl_.scalar_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::VarianceScalarf, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::VarianceScalarf, _impl_.scalar_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::VarianceScalarf, _impl_.variance_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::cavnue::messages::geometry::v1::Scalarf)},
        { 9, -1, -1, sizeof(::cavnue::messages::geometry::v1::Scalard)},
        { 18, -1, -1, sizeof(::cavnue::messages::geometry::v1::VarianceScalarf)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cavnue::messages::geometry::v1::_Scalarf_default_instance_._instance,
    &::cavnue::messages::geometry::v1::_Scalard_default_instance_._instance,
    &::cavnue::messages::geometry::v1::_VarianceScalarf_default_instance_._instance,
};
const char descriptor_table_protodef_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n(cavnue/messages/geometry/v1/scalar.pro"
    "to\022\033cavnue.messages.geometry.v1\"!\n\007Scala"
    "rf\022\026\n\006scalar\030\001 \001(\002R\006scalar\"!\n\007Scalard\022\026\n"
    "\006scalar\030\001 \001(\001R\006scalar\"E\n\017VarianceScalarf"
    "\022\026\n\006scalar\030\001 \001(\002R\006scalar\022\032\n\010variance\030\002 \001"
    "(\002R\010varianceb\006proto3"
};
static ::absl::once_flag descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto = {
    false,
    false,
    220,
    descriptor_table_protodef_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto,
    "cavnue/messages/geometry/v1/scalar.proto",
    &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto::offsets,
    file_level_metadata_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto,
    file_level_enum_descriptors_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto,
    file_level_service_descriptors_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto_getter() {
  return &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto(&descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto);
namespace cavnue {
namespace messages {
namespace geometry {
namespace v1 {
// ===================================================================

class Scalarf::_Internal {
 public:
};

Scalarf::Scalarf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.geometry.v1.Scalarf)
}
Scalarf::Scalarf(const Scalarf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.geometry.v1.Scalarf)
}

inline void Scalarf::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.scalar_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Scalarf::~Scalarf() {
  // @@protoc_insertion_point(destructor:cavnue.messages.geometry.v1.Scalarf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Scalarf::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Scalarf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Scalarf::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.geometry.v1.Scalarf)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.scalar_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Scalarf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float scalar = 1 [json_name = "scalar"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 13)) {
          _impl_.scalar_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Scalarf::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.geometry.v1.Scalarf)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float scalar = 1 [json_name = "scalar"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_scalar = this->_internal_scalar();
  ::uint32_t raw_scalar;
  memcpy(&raw_scalar, &tmp_scalar, sizeof(tmp_scalar));
  if (raw_scalar != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_scalar(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.geometry.v1.Scalarf)
  return target;
}

::size_t Scalarf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.geometry.v1.Scalarf)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float scalar = 1 [json_name = "scalar"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_scalar = this->_internal_scalar();
  ::uint32_t raw_scalar;
  memcpy(&raw_scalar, &tmp_scalar, sizeof(tmp_scalar));
  if (raw_scalar != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Scalarf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Scalarf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Scalarf::GetClassData() const { return &_class_data_; }


void Scalarf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Scalarf*>(&to_msg);
  auto& from = static_cast<const Scalarf&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.geometry.v1.Scalarf)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_scalar = from._internal_scalar();
  ::uint32_t raw_scalar;
  memcpy(&raw_scalar, &tmp_scalar, sizeof(tmp_scalar));
  if (raw_scalar != 0) {
    _this->_internal_set_scalar(from._internal_scalar());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Scalarf::CopyFrom(const Scalarf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.geometry.v1.Scalarf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scalarf::IsInitialized() const {
  return true;
}

void Scalarf::InternalSwap(Scalarf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.scalar_, other->_impl_.scalar_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Scalarf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto[0]);
}
// ===================================================================

class Scalard::_Internal {
 public:
};

Scalard::Scalard(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.geometry.v1.Scalard)
}
Scalard::Scalard(const Scalard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.geometry.v1.Scalard)
}

inline void Scalard::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.scalar_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Scalard::~Scalard() {
  // @@protoc_insertion_point(destructor:cavnue.messages.geometry.v1.Scalard)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Scalard::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Scalard::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Scalard::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.geometry.v1.Scalard)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.scalar_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Scalard::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double scalar = 1 [json_name = "scalar"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _impl_.scalar_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Scalard::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.geometry.v1.Scalard)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double scalar = 1 [json_name = "scalar"];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_scalar = this->_internal_scalar();
  ::uint64_t raw_scalar;
  memcpy(&raw_scalar, &tmp_scalar, sizeof(tmp_scalar));
  if (raw_scalar != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_scalar(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.geometry.v1.Scalard)
  return target;
}

::size_t Scalard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.geometry.v1.Scalard)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double scalar = 1 [json_name = "scalar"];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_scalar = this->_internal_scalar();
  ::uint64_t raw_scalar;
  memcpy(&raw_scalar, &tmp_scalar, sizeof(tmp_scalar));
  if (raw_scalar != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Scalard::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Scalard::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Scalard::GetClassData() const { return &_class_data_; }


void Scalard::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Scalard*>(&to_msg);
  auto& from = static_cast<const Scalard&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.geometry.v1.Scalard)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_scalar = from._internal_scalar();
  ::uint64_t raw_scalar;
  memcpy(&raw_scalar, &tmp_scalar, sizeof(tmp_scalar));
  if (raw_scalar != 0) {
    _this->_internal_set_scalar(from._internal_scalar());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Scalard::CopyFrom(const Scalard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.geometry.v1.Scalard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scalard::IsInitialized() const {
  return true;
}

void Scalard::InternalSwap(Scalard* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.scalar_, other->_impl_.scalar_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Scalard::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto[1]);
}
// ===================================================================

class VarianceScalarf::_Internal {
 public:
};

VarianceScalarf::VarianceScalarf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.geometry.v1.VarianceScalarf)
}
VarianceScalarf::VarianceScalarf(const VarianceScalarf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.geometry.v1.VarianceScalarf)
}

inline void VarianceScalarf::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.scalar_) { 0 }

    , decltype(_impl_.variance_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VarianceScalarf::~VarianceScalarf() {
  // @@protoc_insertion_point(destructor:cavnue.messages.geometry.v1.VarianceScalarf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VarianceScalarf::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void VarianceScalarf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VarianceScalarf::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.geometry.v1.VarianceScalarf)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.scalar_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.variance_) -
      reinterpret_cast<char*>(&_impl_.scalar_)) + sizeof(_impl_.variance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VarianceScalarf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float scalar = 1 [json_name = "scalar"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 13)) {
          _impl_.scalar_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float variance = 2 [json_name = "variance"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 21)) {
          _impl_.variance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* VarianceScalarf::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.geometry.v1.VarianceScalarf)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float scalar = 1 [json_name = "scalar"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_scalar = this->_internal_scalar();
  ::uint32_t raw_scalar;
  memcpy(&raw_scalar, &tmp_scalar, sizeof(tmp_scalar));
  if (raw_scalar != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_scalar(), target);
  }

  // float variance = 2 [json_name = "variance"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_variance = this->_internal_variance();
  ::uint32_t raw_variance;
  memcpy(&raw_variance, &tmp_variance, sizeof(tmp_variance));
  if (raw_variance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_variance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.geometry.v1.VarianceScalarf)
  return target;
}

::size_t VarianceScalarf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.geometry.v1.VarianceScalarf)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float scalar = 1 [json_name = "scalar"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_scalar = this->_internal_scalar();
  ::uint32_t raw_scalar;
  memcpy(&raw_scalar, &tmp_scalar, sizeof(tmp_scalar));
  if (raw_scalar != 0) {
    total_size += 5;
  }

  // float variance = 2 [json_name = "variance"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_variance = this->_internal_variance();
  ::uint32_t raw_variance;
  memcpy(&raw_variance, &tmp_variance, sizeof(tmp_variance));
  if (raw_variance != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VarianceScalarf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VarianceScalarf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VarianceScalarf::GetClassData() const { return &_class_data_; }


void VarianceScalarf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VarianceScalarf*>(&to_msg);
  auto& from = static_cast<const VarianceScalarf&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.geometry.v1.VarianceScalarf)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_scalar = from._internal_scalar();
  ::uint32_t raw_scalar;
  memcpy(&raw_scalar, &tmp_scalar, sizeof(tmp_scalar));
  if (raw_scalar != 0) {
    _this->_internal_set_scalar(from._internal_scalar());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_variance = from._internal_variance();
  ::uint32_t raw_variance;
  memcpy(&raw_variance, &tmp_variance, sizeof(tmp_variance));
  if (raw_variance != 0) {
    _this->_internal_set_variance(from._internal_variance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VarianceScalarf::CopyFrom(const VarianceScalarf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.geometry.v1.VarianceScalarf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VarianceScalarf::IsInitialized() const {
  return true;
}

void VarianceScalarf::InternalSwap(VarianceScalarf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VarianceScalarf, _impl_.variance_)
      + sizeof(VarianceScalarf::_impl_.variance_)
      - PROTOBUF_FIELD_OFFSET(VarianceScalarf, _impl_.scalar_)>(
          reinterpret_cast<char*>(&_impl_.scalar_),
          reinterpret_cast<char*>(&other->_impl_.scalar_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VarianceScalarf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace geometry
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cavnue::messages::geometry::v1::Scalarf*
Arena::CreateMaybeMessage< ::cavnue::messages::geometry::v1::Scalarf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::geometry::v1::Scalarf >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::geometry::v1::Scalard*
Arena::CreateMaybeMessage< ::cavnue::messages::geometry::v1::Scalard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::geometry::v1::Scalard >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::geometry::v1::VarianceScalarf*
Arena::CreateMaybeMessage< ::cavnue::messages::geometry::v1::VarianceScalarf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::geometry::v1::VarianceScalarf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/geometry/v1/pose.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fgeometry_2fv1_2fpose_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fgeometry_2fv1_2fpose_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cavnue/messages/geometry/v1/point.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cavnue_2fmessages_2fgeometry_2fv1_2fpose_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fpose_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fpose_2eproto;
namespace cavnue {
namespace messages {
namespace geometry {
namespace v1 {
class Attitude;
struct AttitudeDefaultTypeInternal;
extern AttitudeDefaultTypeInternal _Attitude_default_instance_;
class Pose;
struct PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
class Pose_None;
struct Pose_NoneDefaultTypeInternal;
extern Pose_NoneDefaultTypeInternal _Pose_None_default_instance_;
}  // namespace v1
}  // namespace geometry
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template <>
::cavnue::messages::geometry::v1::Attitude* Arena::CreateMaybeMessage<::cavnue::messages::geometry::v1::Attitude>(Arena*);
template <>
::cavnue::messages::geometry::v1::Pose* Arena::CreateMaybeMessage<::cavnue::messages::geometry::v1::Pose>(Arena*);
template <>
::cavnue::messages::geometry::v1::Pose_None* Arena::CreateMaybeMessage<::cavnue::messages::geometry::v1::Pose_None>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cavnue {
namespace messages {
namespace geometry {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class Attitude final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.geometry.v1.Attitude) */ {
 public:
  inline Attitude() : Attitude(nullptr) {}
  ~Attitude() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Attitude(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Attitude(const Attitude& from);
  Attitude(Attitude&& from) noexcept
    : Attitude() {
    *this = ::std::move(from);
  }

  inline Attitude& operator=(const Attitude& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attitude& operator=(Attitude&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Attitude& default_instance() {
    return *internal_default_instance();
  }
  static inline const Attitude* internal_default_instance() {
    return reinterpret_cast<const Attitude*>(
               &_Attitude_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Attitude& a, Attitude& b) {
    a.Swap(&b);
  }
  inline void Swap(Attitude* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Attitude* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Attitude* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Attitude>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Attitude& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Attitude& from) {
    Attitude::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attitude* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.geometry.v1.Attitude";
  }
  protected:
  explicit Attitude(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollFieldNumber = 1,
    kPitchFieldNumber = 2,
    kYawFieldNumber = 3,
  };
  // float roll = 1 [json_name = "roll"];
  void clear_roll() ;
  float roll() const;
  void set_roll(float value);

  private:
  float _internal_roll() const;
  void _internal_set_roll(float value);

  public:
  // float pitch = 2 [json_name = "pitch"];
  void clear_pitch() ;
  float pitch() const;
  void set_pitch(float value);

  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);

  public:
  // float yaw = 3 [json_name = "yaw"];
  void clear_yaw() ;
  float yaw() const;
  void set_yaw(float value);

  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.geometry.v1.Attitude)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float roll_;
    float pitch_;
    float yaw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fpose_2eproto;
};// -------------------------------------------------------------------

class Pose_None final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cavnue.messages.geometry.v1.Pose.None) */ {
 public:
  inline Pose_None() : Pose_None(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Pose_None(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pose_None(const Pose_None& from);
  Pose_None(Pose_None&& from) noexcept
    : Pose_None() {
    *this = ::std::move(from);
  }

  inline Pose_None& operator=(const Pose_None& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose_None& operator=(Pose_None&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pose_None& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pose_None* internal_default_instance() {
    return reinterpret_cast<const Pose_None*>(
               &_Pose_None_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Pose_None& a, Pose_None& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose_None* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pose_None* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pose_None* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pose_None>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Pose_None& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Pose_None& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.geometry.v1.Pose.None";
  }
  protected:
  explicit Pose_None(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cavnue.messages.geometry.v1.Pose.None)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fpose_2eproto;
};// -------------------------------------------------------------------

class Pose final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.geometry.v1.Pose) */ {
 public:
  inline Pose() : Pose(nullptr) {}
  ~Pose() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Pose(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pose(const Pose& from);
  Pose(Pose&& from) noexcept
    : Pose() {
    *this = ::std::move(from);
  }

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose& operator=(Pose&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pose& default_instance() {
    return *internal_default_instance();
  }
  enum OrientationCase {
    kAttitude = 2,
    kAngle = 3,
    kNone = 4,
    ORIENTATION_NOT_SET = 0,
  };

  static inline const Pose* internal_default_instance() {
    return reinterpret_cast<const Pose*>(
               &_Pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Pose& a, Pose& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pose* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pose>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pose& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Pose& from) {
    Pose::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.geometry.v1.Pose";
  }
  protected:
  explicit Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Pose_None None;

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
    kAttitudeFieldNumber = 2,
    kAngleFieldNumber = 3,
    kNoneFieldNumber = 4,
  };
  // .cavnue.messages.geometry.v1.Point3f point = 1 [json_name = "point"];
  bool has_point() const;
  void clear_point() ;
  const ::cavnue::messages::geometry::v1::Point3f& point() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::Point3f* release_point();
  ::cavnue::messages::geometry::v1::Point3f* mutable_point();
  void set_allocated_point(::cavnue::messages::geometry::v1::Point3f* point);
  private:
  const ::cavnue::messages::geometry::v1::Point3f& _internal_point() const;
  ::cavnue::messages::geometry::v1::Point3f* _internal_mutable_point();
  public:
  void unsafe_arena_set_allocated_point(
      ::cavnue::messages::geometry::v1::Point3f* point);
  ::cavnue::messages::geometry::v1::Point3f* unsafe_arena_release_point();
  // .cavnue.messages.geometry.v1.Attitude attitude = 2 [json_name = "attitude"];
  bool has_attitude() const;
  private:
  bool _internal_has_attitude() const;

  public:
  void clear_attitude() ;
  const ::cavnue::messages::geometry::v1::Attitude& attitude() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::Attitude* release_attitude();
  ::cavnue::messages::geometry::v1::Attitude* mutable_attitude();
  void set_allocated_attitude(::cavnue::messages::geometry::v1::Attitude* attitude);
  private:
  const ::cavnue::messages::geometry::v1::Attitude& _internal_attitude() const;
  ::cavnue::messages::geometry::v1::Attitude* _internal_mutable_attitude();
  public:
  void unsafe_arena_set_allocated_attitude(
      ::cavnue::messages::geometry::v1::Attitude* attitude);
  ::cavnue::messages::geometry::v1::Attitude* unsafe_arena_release_attitude();
  // .cavnue.messages.geometry.v1.Quaternionf angle = 3 [json_name = "angle"];
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;

  public:
  void clear_angle() ;
  const ::cavnue::messages::geometry::v1::Quaternionf& angle() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::Quaternionf* release_angle();
  ::cavnue::messages::geometry::v1::Quaternionf* mutable_angle();
  void set_allocated_angle(::cavnue::messages::geometry::v1::Quaternionf* angle);
  private:
  const ::cavnue::messages::geometry::v1::Quaternionf& _internal_angle() const;
  ::cavnue::messages::geometry::v1::Quaternionf* _internal_mutable_angle();
  public:
  void unsafe_arena_set_allocated_angle(
      ::cavnue::messages::geometry::v1::Quaternionf* angle);
  ::cavnue::messages::geometry::v1::Quaternionf* unsafe_arena_release_angle();
  // .cavnue.messages.geometry.v1.Pose.None none = 4 [json_name = "none"];
  bool has_none() const;
  private:
  bool _internal_has_none() const;

  public:
  void clear_none() ;
  const ::cavnue::messages::geometry::v1::Pose_None& none() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::Pose_None* release_none();
  ::cavnue::messages::geometry::v1::Pose_None* mutable_none();
  void set_allocated_none(::cavnue::messages::geometry::v1::Pose_None* none);
  private:
  const ::cavnue::messages::geometry::v1::Pose_None& _internal_none() const;
  ::cavnue::messages::geometry::v1::Pose_None* _internal_mutable_none();
  public:
  void unsafe_arena_set_allocated_none(
      ::cavnue::messages::geometry::v1::Pose_None* none);
  ::cavnue::messages::geometry::v1::Pose_None* unsafe_arena_release_none();
  void clear_orientation();
  OrientationCase orientation_case() const;
  // @@protoc_insertion_point(class_scope:cavnue.messages.geometry.v1.Pose)
 private:
  class _Internal;
  void set_has_attitude();
  void set_has_angle();
  void set_has_none();

  inline bool has_orientation() const;
  inline void clear_has_orientation();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::geometry::v1::Point3f* point_;
    union OrientationUnion {
      constexpr OrientationUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::cavnue::messages::geometry::v1::Attitude* attitude_;
      ::cavnue::messages::geometry::v1::Quaternionf* angle_;
      ::cavnue::messages::geometry::v1::Pose_None* none_;
    } orientation_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fpose_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Attitude

// float roll = 1 [json_name = "roll"];
inline void Attitude::clear_roll() {
  _impl_.roll_ = 0;
}
inline float Attitude::roll() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Attitude.roll)
  return _internal_roll();
}
inline void Attitude::set_roll(float value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Attitude.roll)
}
inline float Attitude::_internal_roll() const {
  return _impl_.roll_;
}
inline void Attitude::_internal_set_roll(float value) {
  ;
  _impl_.roll_ = value;
}

// float pitch = 2 [json_name = "pitch"];
inline void Attitude::clear_pitch() {
  _impl_.pitch_ = 0;
}
inline float Attitude::pitch() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Attitude.pitch)
  return _internal_pitch();
}
inline void Attitude::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Attitude.pitch)
}
inline float Attitude::_internal_pitch() const {
  return _impl_.pitch_;
}
inline void Attitude::_internal_set_pitch(float value) {
  ;
  _impl_.pitch_ = value;
}

// float yaw = 3 [json_name = "yaw"];
inline void Attitude::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float Attitude::yaw() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Attitude.yaw)
  return _internal_yaw();
}
inline void Attitude::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Attitude.yaw)
}
inline float Attitude::_internal_yaw() const {
  return _impl_.yaw_;
}
inline void Attitude::_internal_set_yaw(float value) {
  ;
  _impl_.yaw_ = value;
}

// -------------------------------------------------------------------

// Pose_None

// -------------------------------------------------------------------

// Pose

// .cavnue.messages.geometry.v1.Point3f point = 1 [json_name = "point"];
inline bool Pose::has_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.point_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::Point3f& Pose::_internal_point() const {
  const ::cavnue::messages::geometry::v1::Point3f* p = _impl_.point_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::Point3f&>(
      ::cavnue::messages::geometry::v1::_Point3f_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::Point3f& Pose::point() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Pose.point)
  return _internal_point();
}
inline void Pose::unsafe_arena_set_allocated_point(
    ::cavnue::messages::geometry::v1::Point3f* point) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.point_);
  }
  _impl_.point_ = point;
  if (point) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.geometry.v1.Pose.point)
}
inline ::cavnue::messages::geometry::v1::Point3f* Pose::release_point() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::Point3f* temp = _impl_.point_;
  _impl_.point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::Point3f* Pose::unsafe_arena_release_point() {
  // @@protoc_insertion_point(field_release:cavnue.messages.geometry.v1.Pose.point)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::Point3f* temp = _impl_.point_;
  _impl_.point_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::Point3f* Pose::_internal_mutable_point() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.point_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::Point3f>(GetArenaForAllocation());
    _impl_.point_ = p;
  }
  return _impl_.point_;
}
inline ::cavnue::messages::geometry::v1::Point3f* Pose::mutable_point() {
  ::cavnue::messages::geometry::v1::Point3f* _msg = _internal_mutable_point();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.geometry.v1.Pose.point)
  return _msg;
}
inline void Pose::set_allocated_point(::cavnue::messages::geometry::v1::Point3f* point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.point_);
  }
  if (point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(point));
    if (message_arena != submessage_arena) {
      point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.point_ = point;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.geometry.v1.Pose.point)
}

// .cavnue.messages.geometry.v1.Attitude attitude = 2 [json_name = "attitude"];
inline bool Pose::has_attitude() const {
  return orientation_case() == kAttitude;
}
inline bool Pose::_internal_has_attitude() const {
  return orientation_case() == kAttitude;
}
inline void Pose::set_has_attitude() {
  _impl_._oneof_case_[0] = kAttitude;
}
inline void Pose::clear_attitude() {
  if (orientation_case() == kAttitude) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.orientation_.attitude_;
    }
    clear_has_orientation();
  }
}
inline ::cavnue::messages::geometry::v1::Attitude* Pose::release_attitude() {
  // @@protoc_insertion_point(field_release:cavnue.messages.geometry.v1.Pose.attitude)
  if (orientation_case() == kAttitude) {
    clear_has_orientation();
    ::cavnue::messages::geometry::v1::Attitude* temp = _impl_.orientation_.attitude_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.orientation_.attitude_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cavnue::messages::geometry::v1::Attitude& Pose::_internal_attitude() const {
  return orientation_case() == kAttitude
      ? *_impl_.orientation_.attitude_
      : reinterpret_cast<::cavnue::messages::geometry::v1::Attitude&>(::cavnue::messages::geometry::v1::_Attitude_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::Attitude& Pose::attitude() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Pose.attitude)
  return _internal_attitude();
}
inline ::cavnue::messages::geometry::v1::Attitude* Pose::unsafe_arena_release_attitude() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cavnue.messages.geometry.v1.Pose.attitude)
  if (orientation_case() == kAttitude) {
    clear_has_orientation();
    ::cavnue::messages::geometry::v1::Attitude* temp = _impl_.orientation_.attitude_;
    _impl_.orientation_.attitude_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Pose::unsafe_arena_set_allocated_attitude(::cavnue::messages::geometry::v1::Attitude* attitude) {
  clear_orientation();
  if (attitude) {
    set_has_attitude();
    _impl_.orientation_.attitude_ = attitude;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.geometry.v1.Pose.attitude)
}
inline ::cavnue::messages::geometry::v1::Attitude* Pose::_internal_mutable_attitude() {
  if (orientation_case() != kAttitude) {
    clear_orientation();
    set_has_attitude();
    _impl_.orientation_.attitude_ = CreateMaybeMessage< ::cavnue::messages::geometry::v1::Attitude >(GetArenaForAllocation());
  }
  return _impl_.orientation_.attitude_;
}
inline ::cavnue::messages::geometry::v1::Attitude* Pose::mutable_attitude() {
  ::cavnue::messages::geometry::v1::Attitude* _msg = _internal_mutable_attitude();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.geometry.v1.Pose.attitude)
  return _msg;
}

// .cavnue.messages.geometry.v1.Quaternionf angle = 3 [json_name = "angle"];
inline bool Pose::has_angle() const {
  return orientation_case() == kAngle;
}
inline bool Pose::_internal_has_angle() const {
  return orientation_case() == kAngle;
}
inline void Pose::set_has_angle() {
  _impl_._oneof_case_[0] = kAngle;
}
inline ::cavnue::messages::geometry::v1::Quaternionf* Pose::release_angle() {
  // @@protoc_insertion_point(field_release:cavnue.messages.geometry.v1.Pose.angle)
  if (orientation_case() == kAngle) {
    clear_has_orientation();
    ::cavnue::messages::geometry::v1::Quaternionf* temp = _impl_.orientation_.angle_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.orientation_.angle_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cavnue::messages::geometry::v1::Quaternionf& Pose::_internal_angle() const {
  return orientation_case() == kAngle
      ? *_impl_.orientation_.angle_
      : reinterpret_cast<::cavnue::messages::geometry::v1::Quaternionf&>(::cavnue::messages::geometry::v1::_Quaternionf_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::Quaternionf& Pose::angle() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Pose.angle)
  return _internal_angle();
}
inline ::cavnue::messages::geometry::v1::Quaternionf* Pose::unsafe_arena_release_angle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cavnue.messages.geometry.v1.Pose.angle)
  if (orientation_case() == kAngle) {
    clear_has_orientation();
    ::cavnue::messages::geometry::v1::Quaternionf* temp = _impl_.orientation_.angle_;
    _impl_.orientation_.angle_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Pose::unsafe_arena_set_allocated_angle(::cavnue::messages::geometry::v1::Quaternionf* angle) {
  clear_orientation();
  if (angle) {
    set_has_angle();
    _impl_.orientation_.angle_ = angle;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.geometry.v1.Pose.angle)
}
inline ::cavnue::messages::geometry::v1::Quaternionf* Pose::_internal_mutable_angle() {
  if (orientation_case() != kAngle) {
    clear_orientation();
    set_has_angle();
    _impl_.orientation_.angle_ = CreateMaybeMessage< ::cavnue::messages::geometry::v1::Quaternionf >(GetArenaForAllocation());
  }
  return _impl_.orientation_.angle_;
}
inline ::cavnue::messages::geometry::v1::Quaternionf* Pose::mutable_angle() {
  ::cavnue::messages::geometry::v1::Quaternionf* _msg = _internal_mutable_angle();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.geometry.v1.Pose.angle)
  return _msg;
}

// .cavnue.messages.geometry.v1.Pose.None none = 4 [json_name = "none"];
inline bool Pose::has_none() const {
  return orientation_case() == kNone;
}
inline bool Pose::_internal_has_none() const {
  return orientation_case() == kNone;
}
inline void Pose::set_has_none() {
  _impl_._oneof_case_[0] = kNone;
}
inline void Pose::clear_none() {
  if (orientation_case() == kNone) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.orientation_.none_;
    }
    clear_has_orientation();
  }
}
inline ::cavnue::messages::geometry::v1::Pose_None* Pose::release_none() {
  // @@protoc_insertion_point(field_release:cavnue.messages.geometry.v1.Pose.none)
  if (orientation_case() == kNone) {
    clear_has_orientation();
    ::cavnue::messages::geometry::v1::Pose_None* temp = _impl_.orientation_.none_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.orientation_.none_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cavnue::messages::geometry::v1::Pose_None& Pose::_internal_none() const {
  return orientation_case() == kNone
      ? *_impl_.orientation_.none_
      : reinterpret_cast<::cavnue::messages::geometry::v1::Pose_None&>(::cavnue::messages::geometry::v1::_Pose_None_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::Pose_None& Pose::none() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Pose.none)
  return _internal_none();
}
inline ::cavnue::messages::geometry::v1::Pose_None* Pose::unsafe_arena_release_none() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cavnue.messages.geometry.v1.Pose.none)
  if (orientation_case() == kNone) {
    clear_has_orientation();
    ::cavnue::messages::geometry::v1::Pose_None* temp = _impl_.orientation_.none_;
    _impl_.orientation_.none_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Pose::unsafe_arena_set_allocated_none(::cavnue::messages::geometry::v1::Pose_None* none) {
  clear_orientation();
  if (none) {
    set_has_none();
    _impl_.orientation_.none_ = none;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.geometry.v1.Pose.none)
}
inline ::cavnue::messages::geometry::v1::Pose_None* Pose::_internal_mutable_none() {
  if (orientation_case() != kNone) {
    clear_orientation();
    set_has_none();
    _impl_.orientation_.none_ = CreateMaybeMessage< ::cavnue::messages::geometry::v1::Pose_None >(GetArenaForAllocation());
  }
  return _impl_.orientation_.none_;
}
inline ::cavnue::messages::geometry::v1::Pose_None* Pose::mutable_none() {
  ::cavnue::messages::geometry::v1::Pose_None* _msg = _internal_mutable_none();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.geometry.v1.Pose.none)
  return _msg;
}

inline bool Pose::has_orientation() const {
  return orientation_case() != ORIENTATION_NOT_SET;
}
inline void Pose::clear_has_orientation() {
  _impl_._oneof_case_[0] = ORIENTATION_NOT_SET;
}
inline Pose::OrientationCase Pose::orientation_case() const {
  return Pose::OrientationCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace geometry
}  // namespace messages
}  // namespace cavnue


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fgeometry_2fv1_2fpose_2eproto_2epb_2eh

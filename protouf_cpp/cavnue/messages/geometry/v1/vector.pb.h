// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/geometry/v1/vector.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fgeometry_2fv1_2fvector_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fgeometry_2fv1_2fvector_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cavnue_2fmessages_2fgeometry_2fv1_2fvector_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fvector_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fvector_2eproto;
namespace cavnue {
namespace messages {
namespace geometry {
namespace v1 {
class Vector2d;
struct Vector2dDefaultTypeInternal;
extern Vector2dDefaultTypeInternal _Vector2d_default_instance_;
class Vector2f;
struct Vector2fDefaultTypeInternal;
extern Vector2fDefaultTypeInternal _Vector2f_default_instance_;
class Vector3d;
struct Vector3dDefaultTypeInternal;
extern Vector3dDefaultTypeInternal _Vector3d_default_instance_;
class Vector3f;
struct Vector3fDefaultTypeInternal;
extern Vector3fDefaultTypeInternal _Vector3f_default_instance_;
class Vector4d;
struct Vector4dDefaultTypeInternal;
extern Vector4dDefaultTypeInternal _Vector4d_default_instance_;
class Vector4f;
struct Vector4fDefaultTypeInternal;
extern Vector4fDefaultTypeInternal _Vector4f_default_instance_;
}  // namespace v1
}  // namespace geometry
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template <>
::cavnue::messages::geometry::v1::Vector2d* Arena::CreateMaybeMessage<::cavnue::messages::geometry::v1::Vector2d>(Arena*);
template <>
::cavnue::messages::geometry::v1::Vector2f* Arena::CreateMaybeMessage<::cavnue::messages::geometry::v1::Vector2f>(Arena*);
template <>
::cavnue::messages::geometry::v1::Vector3d* Arena::CreateMaybeMessage<::cavnue::messages::geometry::v1::Vector3d>(Arena*);
template <>
::cavnue::messages::geometry::v1::Vector3f* Arena::CreateMaybeMessage<::cavnue::messages::geometry::v1::Vector3f>(Arena*);
template <>
::cavnue::messages::geometry::v1::Vector4d* Arena::CreateMaybeMessage<::cavnue::messages::geometry::v1::Vector4d>(Arena*);
template <>
::cavnue::messages::geometry::v1::Vector4f* Arena::CreateMaybeMessage<::cavnue::messages::geometry::v1::Vector4f>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cavnue {
namespace messages {
namespace geometry {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class Vector2f final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.geometry.v1.Vector2f) */ {
 public:
  inline Vector2f() : Vector2f(nullptr) {}
  ~Vector2f() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Vector2f(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector2f(const Vector2f& from);
  Vector2f(Vector2f&& from) noexcept
    : Vector2f() {
    *this = ::std::move(from);
  }

  inline Vector2f& operator=(const Vector2f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector2f& operator=(Vector2f&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector2f& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector2f* internal_default_instance() {
    return reinterpret_cast<const Vector2f*>(
               &_Vector2f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector2f& a, Vector2f& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector2f* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector2f* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector2f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector2f>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector2f& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector2f& from) {
    Vector2f::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector2f* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.geometry.v1.Vector2f";
  }
  protected:
  explicit Vector2f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1 [json_name = "x"];
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 2 [json_name = "y"];
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.geometry.v1.Vector2f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fvector_2eproto;
};// -------------------------------------------------------------------

class Vector2d final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.geometry.v1.Vector2d) */ {
 public:
  inline Vector2d() : Vector2d(nullptr) {}
  ~Vector2d() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Vector2d(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector2d(const Vector2d& from);
  Vector2d(Vector2d&& from) noexcept
    : Vector2d() {
    *this = ::std::move(from);
  }

  inline Vector2d& operator=(const Vector2d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector2d& operator=(Vector2d&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector2d& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector2d* internal_default_instance() {
    return reinterpret_cast<const Vector2d*>(
               &_Vector2d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vector2d& a, Vector2d& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector2d* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector2d* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector2d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector2d>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector2d& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector2d& from) {
    Vector2d::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector2d* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.geometry.v1.Vector2d";
  }
  protected:
  explicit Vector2d(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double x = 1 [json_name = "x"];
  void clear_x() ;
  double x() const;
  void set_x(double value);

  private:
  double _internal_x() const;
  void _internal_set_x(double value);

  public:
  // double y = 2 [json_name = "y"];
  void clear_y() ;
  double y() const;
  void set_y(double value);

  private:
  double _internal_y() const;
  void _internal_set_y(double value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.geometry.v1.Vector2d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_;
    double y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fvector_2eproto;
};// -------------------------------------------------------------------

class Vector3f final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.geometry.v1.Vector3f) */ {
 public:
  inline Vector3f() : Vector3f(nullptr) {}
  ~Vector3f() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Vector3f(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3f(const Vector3f& from);
  Vector3f(Vector3f&& from) noexcept
    : Vector3f() {
    *this = ::std::move(from);
  }

  inline Vector3f& operator=(const Vector3f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3f& operator=(Vector3f&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3f& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3f* internal_default_instance() {
    return reinterpret_cast<const Vector3f*>(
               &_Vector3f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Vector3f& a, Vector3f& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3f* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3f* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector3f>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector3f& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector3f& from) {
    Vector3f::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3f* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.geometry.v1.Vector3f";
  }
  protected:
  explicit Vector3f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1 [json_name = "x"];
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 2 [json_name = "y"];
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // float z = 3 [json_name = "z"];
  void clear_z() ;
  float z() const;
  void set_z(float value);

  private:
  float _internal_z() const;
  void _internal_set_z(float value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.geometry.v1.Vector3f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fvector_2eproto;
};// -------------------------------------------------------------------

class Vector3d final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.geometry.v1.Vector3d) */ {
 public:
  inline Vector3d() : Vector3d(nullptr) {}
  ~Vector3d() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Vector3d(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3d(const Vector3d& from);
  Vector3d(Vector3d&& from) noexcept
    : Vector3d() {
    *this = ::std::move(from);
  }

  inline Vector3d& operator=(const Vector3d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3d& operator=(Vector3d&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3d& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3d* internal_default_instance() {
    return reinterpret_cast<const Vector3d*>(
               &_Vector3d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Vector3d& a, Vector3d& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3d* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3d* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector3d>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector3d& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector3d& from) {
    Vector3d::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3d* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.geometry.v1.Vector3d";
  }
  protected:
  explicit Vector3d(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1 [json_name = "x"];
  void clear_x() ;
  double x() const;
  void set_x(double value);

  private:
  double _internal_x() const;
  void _internal_set_x(double value);

  public:
  // double y = 2 [json_name = "y"];
  void clear_y() ;
  double y() const;
  void set_y(double value);

  private:
  double _internal_y() const;
  void _internal_set_y(double value);

  public:
  // double z = 3 [json_name = "z"];
  void clear_z() ;
  double z() const;
  void set_z(double value);

  private:
  double _internal_z() const;
  void _internal_set_z(double value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.geometry.v1.Vector3d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_;
    double y_;
    double z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fvector_2eproto;
};// -------------------------------------------------------------------

class Vector4f final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.geometry.v1.Vector4f) */ {
 public:
  inline Vector4f() : Vector4f(nullptr) {}
  ~Vector4f() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Vector4f(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector4f(const Vector4f& from);
  Vector4f(Vector4f&& from) noexcept
    : Vector4f() {
    *this = ::std::move(from);
  }

  inline Vector4f& operator=(const Vector4f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector4f& operator=(Vector4f&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector4f& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector4f* internal_default_instance() {
    return reinterpret_cast<const Vector4f*>(
               &_Vector4f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Vector4f& a, Vector4f& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector4f* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector4f* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector4f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector4f>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector4f& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector4f& from) {
    Vector4f::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector4f* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.geometry.v1.Vector4f";
  }
  protected:
  explicit Vector4f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // float x = 1 [json_name = "x"];
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 2 [json_name = "y"];
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // float z = 3 [json_name = "z"];
  void clear_z() ;
  float z() const;
  void set_z(float value);

  private:
  float _internal_z() const;
  void _internal_set_z(float value);

  public:
  // float w = 4 [json_name = "w"];
  void clear_w() ;
  float w() const;
  void set_w(float value);

  private:
  float _internal_w() const;
  void _internal_set_w(float value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.geometry.v1.Vector4f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    float w_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fvector_2eproto;
};// -------------------------------------------------------------------

class Vector4d final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.geometry.v1.Vector4d) */ {
 public:
  inline Vector4d() : Vector4d(nullptr) {}
  ~Vector4d() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Vector4d(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector4d(const Vector4d& from);
  Vector4d(Vector4d&& from) noexcept
    : Vector4d() {
    *this = ::std::move(from);
  }

  inline Vector4d& operator=(const Vector4d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector4d& operator=(Vector4d&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector4d& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector4d* internal_default_instance() {
    return reinterpret_cast<const Vector4d*>(
               &_Vector4d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Vector4d& a, Vector4d& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector4d* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector4d* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector4d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector4d>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector4d& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector4d& from) {
    Vector4d::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector4d* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.geometry.v1.Vector4d";
  }
  protected:
  explicit Vector4d(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // double x = 1 [json_name = "x"];
  void clear_x() ;
  double x() const;
  void set_x(double value);

  private:
  double _internal_x() const;
  void _internal_set_x(double value);

  public:
  // double y = 2 [json_name = "y"];
  void clear_y() ;
  double y() const;
  void set_y(double value);

  private:
  double _internal_y() const;
  void _internal_set_y(double value);

  public:
  // double z = 3 [json_name = "z"];
  void clear_z() ;
  double z() const;
  void set_z(double value);

  private:
  double _internal_z() const;
  void _internal_set_z(double value);

  public:
  // double w = 4 [json_name = "w"];
  void clear_w() ;
  double w() const;
  void set_w(double value);

  private:
  double _internal_w() const;
  void _internal_set_w(double value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.geometry.v1.Vector4d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_;
    double y_;
    double z_;
    double w_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fvector_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Vector2f

// float x = 1 [json_name = "x"];
inline void Vector2f::clear_x() {
  _impl_.x_ = 0;
}
inline float Vector2f::x() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Vector2f.x)
  return _internal_x();
}
inline void Vector2f::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Vector2f.x)
}
inline float Vector2f::_internal_x() const {
  return _impl_.x_;
}
inline void Vector2f::_internal_set_x(float value) {
  ;
  _impl_.x_ = value;
}

// float y = 2 [json_name = "y"];
inline void Vector2f::clear_y() {
  _impl_.y_ = 0;
}
inline float Vector2f::y() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Vector2f.y)
  return _internal_y();
}
inline void Vector2f::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Vector2f.y)
}
inline float Vector2f::_internal_y() const {
  return _impl_.y_;
}
inline void Vector2f::_internal_set_y(float value) {
  ;
  _impl_.y_ = value;
}

// -------------------------------------------------------------------

// Vector2d

// double x = 1 [json_name = "x"];
inline void Vector2d::clear_x() {
  _impl_.x_ = 0;
}
inline double Vector2d::x() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Vector2d.x)
  return _internal_x();
}
inline void Vector2d::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Vector2d.x)
}
inline double Vector2d::_internal_x() const {
  return _impl_.x_;
}
inline void Vector2d::_internal_set_x(double value) {
  ;
  _impl_.x_ = value;
}

// double y = 2 [json_name = "y"];
inline void Vector2d::clear_y() {
  _impl_.y_ = 0;
}
inline double Vector2d::y() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Vector2d.y)
  return _internal_y();
}
inline void Vector2d::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Vector2d.y)
}
inline double Vector2d::_internal_y() const {
  return _impl_.y_;
}
inline void Vector2d::_internal_set_y(double value) {
  ;
  _impl_.y_ = value;
}

// -------------------------------------------------------------------

// Vector3f

// float x = 1 [json_name = "x"];
inline void Vector3f::clear_x() {
  _impl_.x_ = 0;
}
inline float Vector3f::x() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Vector3f.x)
  return _internal_x();
}
inline void Vector3f::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Vector3f.x)
}
inline float Vector3f::_internal_x() const {
  return _impl_.x_;
}
inline void Vector3f::_internal_set_x(float value) {
  ;
  _impl_.x_ = value;
}

// float y = 2 [json_name = "y"];
inline void Vector3f::clear_y() {
  _impl_.y_ = 0;
}
inline float Vector3f::y() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Vector3f.y)
  return _internal_y();
}
inline void Vector3f::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Vector3f.y)
}
inline float Vector3f::_internal_y() const {
  return _impl_.y_;
}
inline void Vector3f::_internal_set_y(float value) {
  ;
  _impl_.y_ = value;
}

// float z = 3 [json_name = "z"];
inline void Vector3f::clear_z() {
  _impl_.z_ = 0;
}
inline float Vector3f::z() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Vector3f.z)
  return _internal_z();
}
inline void Vector3f::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Vector3f.z)
}
inline float Vector3f::_internal_z() const {
  return _impl_.z_;
}
inline void Vector3f::_internal_set_z(float value) {
  ;
  _impl_.z_ = value;
}

// -------------------------------------------------------------------

// Vector3d

// double x = 1 [json_name = "x"];
inline void Vector3d::clear_x() {
  _impl_.x_ = 0;
}
inline double Vector3d::x() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Vector3d.x)
  return _internal_x();
}
inline void Vector3d::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Vector3d.x)
}
inline double Vector3d::_internal_x() const {
  return _impl_.x_;
}
inline void Vector3d::_internal_set_x(double value) {
  ;
  _impl_.x_ = value;
}

// double y = 2 [json_name = "y"];
inline void Vector3d::clear_y() {
  _impl_.y_ = 0;
}
inline double Vector3d::y() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Vector3d.y)
  return _internal_y();
}
inline void Vector3d::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Vector3d.y)
}
inline double Vector3d::_internal_y() const {
  return _impl_.y_;
}
inline void Vector3d::_internal_set_y(double value) {
  ;
  _impl_.y_ = value;
}

// double z = 3 [json_name = "z"];
inline void Vector3d::clear_z() {
  _impl_.z_ = 0;
}
inline double Vector3d::z() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Vector3d.z)
  return _internal_z();
}
inline void Vector3d::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Vector3d.z)
}
inline double Vector3d::_internal_z() const {
  return _impl_.z_;
}
inline void Vector3d::_internal_set_z(double value) {
  ;
  _impl_.z_ = value;
}

// -------------------------------------------------------------------

// Vector4f

// float x = 1 [json_name = "x"];
inline void Vector4f::clear_x() {
  _impl_.x_ = 0;
}
inline float Vector4f::x() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Vector4f.x)
  return _internal_x();
}
inline void Vector4f::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Vector4f.x)
}
inline float Vector4f::_internal_x() const {
  return _impl_.x_;
}
inline void Vector4f::_internal_set_x(float value) {
  ;
  _impl_.x_ = value;
}

// float y = 2 [json_name = "y"];
inline void Vector4f::clear_y() {
  _impl_.y_ = 0;
}
inline float Vector4f::y() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Vector4f.y)
  return _internal_y();
}
inline void Vector4f::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Vector4f.y)
}
inline float Vector4f::_internal_y() const {
  return _impl_.y_;
}
inline void Vector4f::_internal_set_y(float value) {
  ;
  _impl_.y_ = value;
}

// float z = 3 [json_name = "z"];
inline void Vector4f::clear_z() {
  _impl_.z_ = 0;
}
inline float Vector4f::z() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Vector4f.z)
  return _internal_z();
}
inline void Vector4f::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Vector4f.z)
}
inline float Vector4f::_internal_z() const {
  return _impl_.z_;
}
inline void Vector4f::_internal_set_z(float value) {
  ;
  _impl_.z_ = value;
}

// float w = 4 [json_name = "w"];
inline void Vector4f::clear_w() {
  _impl_.w_ = 0;
}
inline float Vector4f::w() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Vector4f.w)
  return _internal_w();
}
inline void Vector4f::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Vector4f.w)
}
inline float Vector4f::_internal_w() const {
  return _impl_.w_;
}
inline void Vector4f::_internal_set_w(float value) {
  ;
  _impl_.w_ = value;
}

// -------------------------------------------------------------------

// Vector4d

// double x = 1 [json_name = "x"];
inline void Vector4d::clear_x() {
  _impl_.x_ = 0;
}
inline double Vector4d::x() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Vector4d.x)
  return _internal_x();
}
inline void Vector4d::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Vector4d.x)
}
inline double Vector4d::_internal_x() const {
  return _impl_.x_;
}
inline void Vector4d::_internal_set_x(double value) {
  ;
  _impl_.x_ = value;
}

// double y = 2 [json_name = "y"];
inline void Vector4d::clear_y() {
  _impl_.y_ = 0;
}
inline double Vector4d::y() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Vector4d.y)
  return _internal_y();
}
inline void Vector4d::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Vector4d.y)
}
inline double Vector4d::_internal_y() const {
  return _impl_.y_;
}
inline void Vector4d::_internal_set_y(double value) {
  ;
  _impl_.y_ = value;
}

// double z = 3 [json_name = "z"];
inline void Vector4d::clear_z() {
  _impl_.z_ = 0;
}
inline double Vector4d::z() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Vector4d.z)
  return _internal_z();
}
inline void Vector4d::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Vector4d.z)
}
inline double Vector4d::_internal_z() const {
  return _impl_.z_;
}
inline void Vector4d::_internal_set_z(double value) {
  ;
  _impl_.z_ = value;
}

// double w = 4 [json_name = "w"];
inline void Vector4d::clear_w() {
  _impl_.w_ = 0;
}
inline double Vector4d::w() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Vector4d.w)
  return _internal_w();
}
inline void Vector4d::set_w(double value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Vector4d.w)
}
inline double Vector4d::_internal_w() const {
  return _impl_.w_;
}
inline void Vector4d::_internal_set_w(double value) {
  ;
  _impl_.w_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace geometry
}  // namespace messages
}  // namespace cavnue


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fgeometry_2fv1_2fvector_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/geometry/v1/scalar.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto;
namespace cavnue {
namespace messages {
namespace geometry {
namespace v1 {
class Scalard;
struct ScalardDefaultTypeInternal;
extern ScalardDefaultTypeInternal _Scalard_default_instance_;
class Scalarf;
struct ScalarfDefaultTypeInternal;
extern ScalarfDefaultTypeInternal _Scalarf_default_instance_;
class VarianceScalarf;
struct VarianceScalarfDefaultTypeInternal;
extern VarianceScalarfDefaultTypeInternal _VarianceScalarf_default_instance_;
}  // namespace v1
}  // namespace geometry
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template <>
::cavnue::messages::geometry::v1::Scalard* Arena::CreateMaybeMessage<::cavnue::messages::geometry::v1::Scalard>(Arena*);
template <>
::cavnue::messages::geometry::v1::Scalarf* Arena::CreateMaybeMessage<::cavnue::messages::geometry::v1::Scalarf>(Arena*);
template <>
::cavnue::messages::geometry::v1::VarianceScalarf* Arena::CreateMaybeMessage<::cavnue::messages::geometry::v1::VarianceScalarf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cavnue {
namespace messages {
namespace geometry {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class Scalarf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.geometry.v1.Scalarf) */ {
 public:
  inline Scalarf() : Scalarf(nullptr) {}
  ~Scalarf() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Scalarf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Scalarf(const Scalarf& from);
  Scalarf(Scalarf&& from) noexcept
    : Scalarf() {
    *this = ::std::move(from);
  }

  inline Scalarf& operator=(const Scalarf& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scalarf& operator=(Scalarf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scalarf& default_instance() {
    return *internal_default_instance();
  }
  static inline const Scalarf* internal_default_instance() {
    return reinterpret_cast<const Scalarf*>(
               &_Scalarf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Scalarf& a, Scalarf& b) {
    a.Swap(&b);
  }
  inline void Swap(Scalarf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scalarf* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Scalarf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Scalarf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Scalarf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Scalarf& from) {
    Scalarf::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scalarf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.geometry.v1.Scalarf";
  }
  protected:
  explicit Scalarf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarFieldNumber = 1,
  };
  // float scalar = 1 [json_name = "scalar"];
  void clear_scalar() ;
  float scalar() const;
  void set_scalar(float value);

  private:
  float _internal_scalar() const;
  void _internal_set_scalar(float value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.geometry.v1.Scalarf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float scalar_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto;
};// -------------------------------------------------------------------

class Scalard final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.geometry.v1.Scalard) */ {
 public:
  inline Scalard() : Scalard(nullptr) {}
  ~Scalard() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Scalard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Scalard(const Scalard& from);
  Scalard(Scalard&& from) noexcept
    : Scalard() {
    *this = ::std::move(from);
  }

  inline Scalard& operator=(const Scalard& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scalard& operator=(Scalard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scalard& default_instance() {
    return *internal_default_instance();
  }
  static inline const Scalard* internal_default_instance() {
    return reinterpret_cast<const Scalard*>(
               &_Scalard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Scalard& a, Scalard& b) {
    a.Swap(&b);
  }
  inline void Swap(Scalard* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scalard* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Scalard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Scalard>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Scalard& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Scalard& from) {
    Scalard::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scalard* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.geometry.v1.Scalard";
  }
  protected:
  explicit Scalard(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarFieldNumber = 1,
  };
  // double scalar = 1 [json_name = "scalar"];
  void clear_scalar() ;
  double scalar() const;
  void set_scalar(double value);

  private:
  double _internal_scalar() const;
  void _internal_set_scalar(double value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.geometry.v1.Scalard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double scalar_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto;
};// -------------------------------------------------------------------

class VarianceScalarf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.geometry.v1.VarianceScalarf) */ {
 public:
  inline VarianceScalarf() : VarianceScalarf(nullptr) {}
  ~VarianceScalarf() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VarianceScalarf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VarianceScalarf(const VarianceScalarf& from);
  VarianceScalarf(VarianceScalarf&& from) noexcept
    : VarianceScalarf() {
    *this = ::std::move(from);
  }

  inline VarianceScalarf& operator=(const VarianceScalarf& from) {
    CopyFrom(from);
    return *this;
  }
  inline VarianceScalarf& operator=(VarianceScalarf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VarianceScalarf& default_instance() {
    return *internal_default_instance();
  }
  static inline const VarianceScalarf* internal_default_instance() {
    return reinterpret_cast<const VarianceScalarf*>(
               &_VarianceScalarf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VarianceScalarf& a, VarianceScalarf& b) {
    a.Swap(&b);
  }
  inline void Swap(VarianceScalarf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VarianceScalarf* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VarianceScalarf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VarianceScalarf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VarianceScalarf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VarianceScalarf& from) {
    VarianceScalarf::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VarianceScalarf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.geometry.v1.VarianceScalarf";
  }
  protected:
  explicit VarianceScalarf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarFieldNumber = 1,
    kVarianceFieldNumber = 2,
  };
  // float scalar = 1 [json_name = "scalar"];
  void clear_scalar() ;
  float scalar() const;
  void set_scalar(float value);

  private:
  float _internal_scalar() const;
  void _internal_set_scalar(float value);

  public:
  // float variance = 2 [json_name = "variance"];
  void clear_variance() ;
  float variance() const;
  void set_variance(float value);

  private:
  float _internal_variance() const;
  void _internal_set_variance(float value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.geometry.v1.VarianceScalarf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float scalar_;
    float variance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Scalarf

// float scalar = 1 [json_name = "scalar"];
inline void Scalarf::clear_scalar() {
  _impl_.scalar_ = 0;
}
inline float Scalarf::scalar() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Scalarf.scalar)
  return _internal_scalar();
}
inline void Scalarf::set_scalar(float value) {
  _internal_set_scalar(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Scalarf.scalar)
}
inline float Scalarf::_internal_scalar() const {
  return _impl_.scalar_;
}
inline void Scalarf::_internal_set_scalar(float value) {
  ;
  _impl_.scalar_ = value;
}

// -------------------------------------------------------------------

// Scalard

// double scalar = 1 [json_name = "scalar"];
inline void Scalard::clear_scalar() {
  _impl_.scalar_ = 0;
}
inline double Scalard::scalar() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Scalard.scalar)
  return _internal_scalar();
}
inline void Scalard::set_scalar(double value) {
  _internal_set_scalar(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Scalard.scalar)
}
inline double Scalard::_internal_scalar() const {
  return _impl_.scalar_;
}
inline void Scalard::_internal_set_scalar(double value) {
  ;
  _impl_.scalar_ = value;
}

// -------------------------------------------------------------------

// VarianceScalarf

// float scalar = 1 [json_name = "scalar"];
inline void VarianceScalarf::clear_scalar() {
  _impl_.scalar_ = 0;
}
inline float VarianceScalarf::scalar() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.VarianceScalarf.scalar)
  return _internal_scalar();
}
inline void VarianceScalarf::set_scalar(float value) {
  _internal_set_scalar(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.VarianceScalarf.scalar)
}
inline float VarianceScalarf::_internal_scalar() const {
  return _impl_.scalar_;
}
inline void VarianceScalarf::_internal_set_scalar(float value) {
  ;
  _impl_.scalar_ = value;
}

// float variance = 2 [json_name = "variance"];
inline void VarianceScalarf::clear_variance() {
  _impl_.variance_ = 0;
}
inline float VarianceScalarf::variance() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.VarianceScalarf.variance)
  return _internal_variance();
}
inline void VarianceScalarf::set_variance(float value) {
  _internal_set_variance(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.VarianceScalarf.variance)
}
inline float VarianceScalarf::_internal_variance() const {
  return _impl_.variance_;
}
inline void VarianceScalarf::_internal_set_variance(float value) {
  ;
  _impl_.variance_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace geometry
}  // namespace messages
}  // namespace cavnue


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fgeometry_2fv1_2fscalar_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/geometry/v1/point.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fgeometry_2fv1_2fpoint_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fgeometry_2fv1_2fpoint_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cavnue_2fmessages_2fgeometry_2fv1_2fpoint_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fpoint_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fpoint_2eproto;
namespace cavnue {
namespace messages {
namespace geometry {
namespace v1 {
class Point2d;
struct Point2dDefaultTypeInternal;
extern Point2dDefaultTypeInternal _Point2d_default_instance_;
class Point2f;
struct Point2fDefaultTypeInternal;
extern Point2fDefaultTypeInternal _Point2f_default_instance_;
class Point3d;
struct Point3dDefaultTypeInternal;
extern Point3dDefaultTypeInternal _Point3d_default_instance_;
class Point3f;
struct Point3fDefaultTypeInternal;
extern Point3fDefaultTypeInternal _Point3f_default_instance_;
class Quaternionf;
struct QuaternionfDefaultTypeInternal;
extern QuaternionfDefaultTypeInternal _Quaternionf_default_instance_;
}  // namespace v1
}  // namespace geometry
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template <>
::cavnue::messages::geometry::v1::Point2d* Arena::CreateMaybeMessage<::cavnue::messages::geometry::v1::Point2d>(Arena*);
template <>
::cavnue::messages::geometry::v1::Point2f* Arena::CreateMaybeMessage<::cavnue::messages::geometry::v1::Point2f>(Arena*);
template <>
::cavnue::messages::geometry::v1::Point3d* Arena::CreateMaybeMessage<::cavnue::messages::geometry::v1::Point3d>(Arena*);
template <>
::cavnue::messages::geometry::v1::Point3f* Arena::CreateMaybeMessage<::cavnue::messages::geometry::v1::Point3f>(Arena*);
template <>
::cavnue::messages::geometry::v1::Quaternionf* Arena::CreateMaybeMessage<::cavnue::messages::geometry::v1::Quaternionf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cavnue {
namespace messages {
namespace geometry {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class Point2f final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.geometry.v1.Point2f) */ {
 public:
  inline Point2f() : Point2f(nullptr) {}
  ~Point2f() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Point2f(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point2f(const Point2f& from);
  Point2f(Point2f&& from) noexcept
    : Point2f() {
    *this = ::std::move(from);
  }

  inline Point2f& operator=(const Point2f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point2f& operator=(Point2f&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point2f& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point2f* internal_default_instance() {
    return reinterpret_cast<const Point2f*>(
               &_Point2f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point2f& a, Point2f& b) {
    a.Swap(&b);
  }
  inline void Swap(Point2f* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point2f* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point2f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point2f>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point2f& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Point2f& from) {
    Point2f::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point2f* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.geometry.v1.Point2f";
  }
  protected:
  explicit Point2f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1 [json_name = "x"];
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 2 [json_name = "y"];
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.geometry.v1.Point2f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fpoint_2eproto;
};// -------------------------------------------------------------------

class Point2d final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.geometry.v1.Point2d) */ {
 public:
  inline Point2d() : Point2d(nullptr) {}
  ~Point2d() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Point2d(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point2d(const Point2d& from);
  Point2d(Point2d&& from) noexcept
    : Point2d() {
    *this = ::std::move(from);
  }

  inline Point2d& operator=(const Point2d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point2d& operator=(Point2d&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point2d& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point2d* internal_default_instance() {
    return reinterpret_cast<const Point2d*>(
               &_Point2d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Point2d& a, Point2d& b) {
    a.Swap(&b);
  }
  inline void Swap(Point2d* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point2d* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point2d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point2d>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point2d& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Point2d& from) {
    Point2d::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point2d* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.geometry.v1.Point2d";
  }
  protected:
  explicit Point2d(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double x = 1 [json_name = "x"];
  void clear_x() ;
  double x() const;
  void set_x(double value);

  private:
  double _internal_x() const;
  void _internal_set_x(double value);

  public:
  // double y = 2 [json_name = "y"];
  void clear_y() ;
  double y() const;
  void set_y(double value);

  private:
  double _internal_y() const;
  void _internal_set_y(double value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.geometry.v1.Point2d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_;
    double y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fpoint_2eproto;
};// -------------------------------------------------------------------

class Point3f final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.geometry.v1.Point3f) */ {
 public:
  inline Point3f() : Point3f(nullptr) {}
  ~Point3f() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Point3f(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point3f(const Point3f& from);
  Point3f(Point3f&& from) noexcept
    : Point3f() {
    *this = ::std::move(from);
  }

  inline Point3f& operator=(const Point3f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point3f& operator=(Point3f&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point3f& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point3f* internal_default_instance() {
    return reinterpret_cast<const Point3f*>(
               &_Point3f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Point3f& a, Point3f& b) {
    a.Swap(&b);
  }
  inline void Swap(Point3f* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point3f* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point3f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point3f>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point3f& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Point3f& from) {
    Point3f::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point3f* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.geometry.v1.Point3f";
  }
  protected:
  explicit Point3f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1 [json_name = "x"];
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 2 [json_name = "y"];
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // float z = 3 [json_name = "z"];
  void clear_z() ;
  float z() const;
  void set_z(float value);

  private:
  float _internal_z() const;
  void _internal_set_z(float value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.geometry.v1.Point3f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fpoint_2eproto;
};// -------------------------------------------------------------------

class Point3d final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.geometry.v1.Point3d) */ {
 public:
  inline Point3d() : Point3d(nullptr) {}
  ~Point3d() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Point3d(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point3d(const Point3d& from);
  Point3d(Point3d&& from) noexcept
    : Point3d() {
    *this = ::std::move(from);
  }

  inline Point3d& operator=(const Point3d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point3d& operator=(Point3d&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point3d& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point3d* internal_default_instance() {
    return reinterpret_cast<const Point3d*>(
               &_Point3d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Point3d& a, Point3d& b) {
    a.Swap(&b);
  }
  inline void Swap(Point3d* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point3d* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point3d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point3d>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point3d& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Point3d& from) {
    Point3d::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point3d* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.geometry.v1.Point3d";
  }
  protected:
  explicit Point3d(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1 [json_name = "x"];
  void clear_x() ;
  double x() const;
  void set_x(double value);

  private:
  double _internal_x() const;
  void _internal_set_x(double value);

  public:
  // double y = 2 [json_name = "y"];
  void clear_y() ;
  double y() const;
  void set_y(double value);

  private:
  double _internal_y() const;
  void _internal_set_y(double value);

  public:
  // double z = 3 [json_name = "z"];
  void clear_z() ;
  double z() const;
  void set_z(double value);

  private:
  double _internal_z() const;
  void _internal_set_z(double value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.geometry.v1.Point3d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_;
    double y_;
    double z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fpoint_2eproto;
};// -------------------------------------------------------------------

class Quaternionf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.geometry.v1.Quaternionf) */ {
 public:
  inline Quaternionf() : Quaternionf(nullptr) {}
  ~Quaternionf() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Quaternionf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Quaternionf(const Quaternionf& from);
  Quaternionf(Quaternionf&& from) noexcept
    : Quaternionf() {
    *this = ::std::move(from);
  }

  inline Quaternionf& operator=(const Quaternionf& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternionf& operator=(Quaternionf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Quaternionf& default_instance() {
    return *internal_default_instance();
  }
  static inline const Quaternionf* internal_default_instance() {
    return reinterpret_cast<const Quaternionf*>(
               &_Quaternionf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Quaternionf& a, Quaternionf& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaternionf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quaternionf* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Quaternionf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Quaternionf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Quaternionf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Quaternionf& from) {
    Quaternionf::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternionf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.geometry.v1.Quaternionf";
  }
  protected:
  explicit Quaternionf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // float x = 1 [json_name = "x"];
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 2 [json_name = "y"];
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // float z = 3 [json_name = "z"];
  void clear_z() ;
  float z() const;
  void set_z(float value);

  private:
  float _internal_z() const;
  void _internal_set_z(float value);

  public:
  // float w = 4 [json_name = "w"];
  void clear_w() ;
  float w() const;
  void set_w(float value);

  private:
  float _internal_w() const;
  void _internal_set_w(float value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.geometry.v1.Quaternionf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    float w_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fpoint_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Point2f

// float x = 1 [json_name = "x"];
inline void Point2f::clear_x() {
  _impl_.x_ = 0;
}
inline float Point2f::x() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Point2f.x)
  return _internal_x();
}
inline void Point2f::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Point2f.x)
}
inline float Point2f::_internal_x() const {
  return _impl_.x_;
}
inline void Point2f::_internal_set_x(float value) {
  ;
  _impl_.x_ = value;
}

// float y = 2 [json_name = "y"];
inline void Point2f::clear_y() {
  _impl_.y_ = 0;
}
inline float Point2f::y() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Point2f.y)
  return _internal_y();
}
inline void Point2f::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Point2f.y)
}
inline float Point2f::_internal_y() const {
  return _impl_.y_;
}
inline void Point2f::_internal_set_y(float value) {
  ;
  _impl_.y_ = value;
}

// -------------------------------------------------------------------

// Point2d

// double x = 1 [json_name = "x"];
inline void Point2d::clear_x() {
  _impl_.x_ = 0;
}
inline double Point2d::x() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Point2d.x)
  return _internal_x();
}
inline void Point2d::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Point2d.x)
}
inline double Point2d::_internal_x() const {
  return _impl_.x_;
}
inline void Point2d::_internal_set_x(double value) {
  ;
  _impl_.x_ = value;
}

// double y = 2 [json_name = "y"];
inline void Point2d::clear_y() {
  _impl_.y_ = 0;
}
inline double Point2d::y() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Point2d.y)
  return _internal_y();
}
inline void Point2d::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Point2d.y)
}
inline double Point2d::_internal_y() const {
  return _impl_.y_;
}
inline void Point2d::_internal_set_y(double value) {
  ;
  _impl_.y_ = value;
}

// -------------------------------------------------------------------

// Point3f

// float x = 1 [json_name = "x"];
inline void Point3f::clear_x() {
  _impl_.x_ = 0;
}
inline float Point3f::x() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Point3f.x)
  return _internal_x();
}
inline void Point3f::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Point3f.x)
}
inline float Point3f::_internal_x() const {
  return _impl_.x_;
}
inline void Point3f::_internal_set_x(float value) {
  ;
  _impl_.x_ = value;
}

// float y = 2 [json_name = "y"];
inline void Point3f::clear_y() {
  _impl_.y_ = 0;
}
inline float Point3f::y() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Point3f.y)
  return _internal_y();
}
inline void Point3f::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Point3f.y)
}
inline float Point3f::_internal_y() const {
  return _impl_.y_;
}
inline void Point3f::_internal_set_y(float value) {
  ;
  _impl_.y_ = value;
}

// float z = 3 [json_name = "z"];
inline void Point3f::clear_z() {
  _impl_.z_ = 0;
}
inline float Point3f::z() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Point3f.z)
  return _internal_z();
}
inline void Point3f::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Point3f.z)
}
inline float Point3f::_internal_z() const {
  return _impl_.z_;
}
inline void Point3f::_internal_set_z(float value) {
  ;
  _impl_.z_ = value;
}

// -------------------------------------------------------------------

// Point3d

// double x = 1 [json_name = "x"];
inline void Point3d::clear_x() {
  _impl_.x_ = 0;
}
inline double Point3d::x() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Point3d.x)
  return _internal_x();
}
inline void Point3d::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Point3d.x)
}
inline double Point3d::_internal_x() const {
  return _impl_.x_;
}
inline void Point3d::_internal_set_x(double value) {
  ;
  _impl_.x_ = value;
}

// double y = 2 [json_name = "y"];
inline void Point3d::clear_y() {
  _impl_.y_ = 0;
}
inline double Point3d::y() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Point3d.y)
  return _internal_y();
}
inline void Point3d::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Point3d.y)
}
inline double Point3d::_internal_y() const {
  return _impl_.y_;
}
inline void Point3d::_internal_set_y(double value) {
  ;
  _impl_.y_ = value;
}

// double z = 3 [json_name = "z"];
inline void Point3d::clear_z() {
  _impl_.z_ = 0;
}
inline double Point3d::z() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Point3d.z)
  return _internal_z();
}
inline void Point3d::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Point3d.z)
}
inline double Point3d::_internal_z() const {
  return _impl_.z_;
}
inline void Point3d::_internal_set_z(double value) {
  ;
  _impl_.z_ = value;
}

// -------------------------------------------------------------------

// Quaternionf

// float x = 1 [json_name = "x"];
inline void Quaternionf::clear_x() {
  _impl_.x_ = 0;
}
inline float Quaternionf::x() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Quaternionf.x)
  return _internal_x();
}
inline void Quaternionf::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Quaternionf.x)
}
inline float Quaternionf::_internal_x() const {
  return _impl_.x_;
}
inline void Quaternionf::_internal_set_x(float value) {
  ;
  _impl_.x_ = value;
}

// float y = 2 [json_name = "y"];
inline void Quaternionf::clear_y() {
  _impl_.y_ = 0;
}
inline float Quaternionf::y() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Quaternionf.y)
  return _internal_y();
}
inline void Quaternionf::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Quaternionf.y)
}
inline float Quaternionf::_internal_y() const {
  return _impl_.y_;
}
inline void Quaternionf::_internal_set_y(float value) {
  ;
  _impl_.y_ = value;
}

// float z = 3 [json_name = "z"];
inline void Quaternionf::clear_z() {
  _impl_.z_ = 0;
}
inline float Quaternionf::z() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Quaternionf.z)
  return _internal_z();
}
inline void Quaternionf::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Quaternionf.z)
}
inline float Quaternionf::_internal_z() const {
  return _impl_.z_;
}
inline void Quaternionf::_internal_set_z(float value) {
  ;
  _impl_.z_ = value;
}

// float w = 4 [json_name = "w"];
inline void Quaternionf::clear_w() {
  _impl_.w_ = 0;
}
inline float Quaternionf::w() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.Quaternionf.w)
  return _internal_w();
}
inline void Quaternionf::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.geometry.v1.Quaternionf.w)
}
inline float Quaternionf::_internal_w() const {
  return _impl_.w_;
}
inline void Quaternionf::_internal_set_w(float value) {
  ;
  _impl_.w_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace geometry
}  // namespace messages
}  // namespace cavnue


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fgeometry_2fv1_2fpoint_2eproto_2epb_2eh

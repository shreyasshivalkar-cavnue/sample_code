// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/geometry/v1/covariance.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cavnue/messages/geometry/v1/matrix.pb.h"
#include "cavnue/messages/geometry/v1/vector.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto;
namespace cavnue {
namespace messages {
namespace geometry {
namespace v1 {
class CovarianceVector2f;
struct CovarianceVector2fDefaultTypeInternal;
extern CovarianceVector2fDefaultTypeInternal _CovarianceVector2f_default_instance_;
class CovarianceVector3d;
struct CovarianceVector3dDefaultTypeInternal;
extern CovarianceVector3dDefaultTypeInternal _CovarianceVector3d_default_instance_;
class CovarianceVector3f;
struct CovarianceVector3fDefaultTypeInternal;
extern CovarianceVector3fDefaultTypeInternal _CovarianceVector3f_default_instance_;
}  // namespace v1
}  // namespace geometry
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template <>
::cavnue::messages::geometry::v1::CovarianceVector2f* Arena::CreateMaybeMessage<::cavnue::messages::geometry::v1::CovarianceVector2f>(Arena*);
template <>
::cavnue::messages::geometry::v1::CovarianceVector3d* Arena::CreateMaybeMessage<::cavnue::messages::geometry::v1::CovarianceVector3d>(Arena*);
template <>
::cavnue::messages::geometry::v1::CovarianceVector3f* Arena::CreateMaybeMessage<::cavnue::messages::geometry::v1::CovarianceVector3f>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cavnue {
namespace messages {
namespace geometry {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class CovarianceVector2f final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.geometry.v1.CovarianceVector2f) */ {
 public:
  inline CovarianceVector2f() : CovarianceVector2f(nullptr) {}
  ~CovarianceVector2f() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CovarianceVector2f(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CovarianceVector2f(const CovarianceVector2f& from);
  CovarianceVector2f(CovarianceVector2f&& from) noexcept
    : CovarianceVector2f() {
    *this = ::std::move(from);
  }

  inline CovarianceVector2f& operator=(const CovarianceVector2f& from) {
    CopyFrom(from);
    return *this;
  }
  inline CovarianceVector2f& operator=(CovarianceVector2f&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CovarianceVector2f& default_instance() {
    return *internal_default_instance();
  }
  static inline const CovarianceVector2f* internal_default_instance() {
    return reinterpret_cast<const CovarianceVector2f*>(
               &_CovarianceVector2f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CovarianceVector2f& a, CovarianceVector2f& b) {
    a.Swap(&b);
  }
  inline void Swap(CovarianceVector2f* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CovarianceVector2f* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CovarianceVector2f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CovarianceVector2f>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CovarianceVector2f& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CovarianceVector2f& from) {
    CovarianceVector2f::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CovarianceVector2f* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.geometry.v1.CovarianceVector2f";
  }
  protected:
  explicit CovarianceVector2f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kCovarianceFieldNumber = 2,
  };
  // .cavnue.messages.geometry.v1.Vector2f value = 1 [json_name = "value"];
  bool has_value() const;
  void clear_value() ;
  const ::cavnue::messages::geometry::v1::Vector2f& value() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::Vector2f* release_value();
  ::cavnue::messages::geometry::v1::Vector2f* mutable_value();
  void set_allocated_value(::cavnue::messages::geometry::v1::Vector2f* value);
  private:
  const ::cavnue::messages::geometry::v1::Vector2f& _internal_value() const;
  ::cavnue::messages::geometry::v1::Vector2f* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::cavnue::messages::geometry::v1::Vector2f* value);
  ::cavnue::messages::geometry::v1::Vector2f* unsafe_arena_release_value();
  // .cavnue.messages.geometry.v1.Matrix22f covariance = 2 [json_name = "covariance"];
  bool has_covariance() const;
  void clear_covariance() ;
  const ::cavnue::messages::geometry::v1::Matrix22f& covariance() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::Matrix22f* release_covariance();
  ::cavnue::messages::geometry::v1::Matrix22f* mutable_covariance();
  void set_allocated_covariance(::cavnue::messages::geometry::v1::Matrix22f* covariance);
  private:
  const ::cavnue::messages::geometry::v1::Matrix22f& _internal_covariance() const;
  ::cavnue::messages::geometry::v1::Matrix22f* _internal_mutable_covariance();
  public:
  void unsafe_arena_set_allocated_covariance(
      ::cavnue::messages::geometry::v1::Matrix22f* covariance);
  ::cavnue::messages::geometry::v1::Matrix22f* unsafe_arena_release_covariance();
  // @@protoc_insertion_point(class_scope:cavnue.messages.geometry.v1.CovarianceVector2f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::geometry::v1::Vector2f* value_;
    ::cavnue::messages::geometry::v1::Matrix22f* covariance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto;
};// -------------------------------------------------------------------

class CovarianceVector3f final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.geometry.v1.CovarianceVector3f) */ {
 public:
  inline CovarianceVector3f() : CovarianceVector3f(nullptr) {}
  ~CovarianceVector3f() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CovarianceVector3f(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CovarianceVector3f(const CovarianceVector3f& from);
  CovarianceVector3f(CovarianceVector3f&& from) noexcept
    : CovarianceVector3f() {
    *this = ::std::move(from);
  }

  inline CovarianceVector3f& operator=(const CovarianceVector3f& from) {
    CopyFrom(from);
    return *this;
  }
  inline CovarianceVector3f& operator=(CovarianceVector3f&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CovarianceVector3f& default_instance() {
    return *internal_default_instance();
  }
  static inline const CovarianceVector3f* internal_default_instance() {
    return reinterpret_cast<const CovarianceVector3f*>(
               &_CovarianceVector3f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CovarianceVector3f& a, CovarianceVector3f& b) {
    a.Swap(&b);
  }
  inline void Swap(CovarianceVector3f* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CovarianceVector3f* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CovarianceVector3f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CovarianceVector3f>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CovarianceVector3f& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CovarianceVector3f& from) {
    CovarianceVector3f::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CovarianceVector3f* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.geometry.v1.CovarianceVector3f";
  }
  protected:
  explicit CovarianceVector3f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kCovarianceFieldNumber = 2,
  };
  // .cavnue.messages.geometry.v1.Vector3f value = 1 [json_name = "value"];
  bool has_value() const;
  void clear_value() ;
  const ::cavnue::messages::geometry::v1::Vector3f& value() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::Vector3f* release_value();
  ::cavnue::messages::geometry::v1::Vector3f* mutable_value();
  void set_allocated_value(::cavnue::messages::geometry::v1::Vector3f* value);
  private:
  const ::cavnue::messages::geometry::v1::Vector3f& _internal_value() const;
  ::cavnue::messages::geometry::v1::Vector3f* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::cavnue::messages::geometry::v1::Vector3f* value);
  ::cavnue::messages::geometry::v1::Vector3f* unsafe_arena_release_value();
  // .cavnue.messages.geometry.v1.Matrix33f covariance = 2 [json_name = "covariance"];
  bool has_covariance() const;
  void clear_covariance() ;
  const ::cavnue::messages::geometry::v1::Matrix33f& covariance() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::Matrix33f* release_covariance();
  ::cavnue::messages::geometry::v1::Matrix33f* mutable_covariance();
  void set_allocated_covariance(::cavnue::messages::geometry::v1::Matrix33f* covariance);
  private:
  const ::cavnue::messages::geometry::v1::Matrix33f& _internal_covariance() const;
  ::cavnue::messages::geometry::v1::Matrix33f* _internal_mutable_covariance();
  public:
  void unsafe_arena_set_allocated_covariance(
      ::cavnue::messages::geometry::v1::Matrix33f* covariance);
  ::cavnue::messages::geometry::v1::Matrix33f* unsafe_arena_release_covariance();
  // @@protoc_insertion_point(class_scope:cavnue.messages.geometry.v1.CovarianceVector3f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::geometry::v1::Vector3f* value_;
    ::cavnue::messages::geometry::v1::Matrix33f* covariance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto;
};// -------------------------------------------------------------------

class CovarianceVector3d final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.geometry.v1.CovarianceVector3d) */ {
 public:
  inline CovarianceVector3d() : CovarianceVector3d(nullptr) {}
  ~CovarianceVector3d() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CovarianceVector3d(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CovarianceVector3d(const CovarianceVector3d& from);
  CovarianceVector3d(CovarianceVector3d&& from) noexcept
    : CovarianceVector3d() {
    *this = ::std::move(from);
  }

  inline CovarianceVector3d& operator=(const CovarianceVector3d& from) {
    CopyFrom(from);
    return *this;
  }
  inline CovarianceVector3d& operator=(CovarianceVector3d&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CovarianceVector3d& default_instance() {
    return *internal_default_instance();
  }
  static inline const CovarianceVector3d* internal_default_instance() {
    return reinterpret_cast<const CovarianceVector3d*>(
               &_CovarianceVector3d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CovarianceVector3d& a, CovarianceVector3d& b) {
    a.Swap(&b);
  }
  inline void Swap(CovarianceVector3d* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CovarianceVector3d* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CovarianceVector3d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CovarianceVector3d>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CovarianceVector3d& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CovarianceVector3d& from) {
    CovarianceVector3d::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CovarianceVector3d* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.geometry.v1.CovarianceVector3d";
  }
  protected:
  explicit CovarianceVector3d(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kCovarianceFieldNumber = 2,
  };
  // .cavnue.messages.geometry.v1.Vector3d value = 1 [json_name = "value"];
  bool has_value() const;
  void clear_value() ;
  const ::cavnue::messages::geometry::v1::Vector3d& value() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::Vector3d* release_value();
  ::cavnue::messages::geometry::v1::Vector3d* mutable_value();
  void set_allocated_value(::cavnue::messages::geometry::v1::Vector3d* value);
  private:
  const ::cavnue::messages::geometry::v1::Vector3d& _internal_value() const;
  ::cavnue::messages::geometry::v1::Vector3d* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::cavnue::messages::geometry::v1::Vector3d* value);
  ::cavnue::messages::geometry::v1::Vector3d* unsafe_arena_release_value();
  // .cavnue.messages.geometry.v1.Matrix33f covariance = 2 [json_name = "covariance"];
  bool has_covariance() const;
  void clear_covariance() ;
  const ::cavnue::messages::geometry::v1::Matrix33f& covariance() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::Matrix33f* release_covariance();
  ::cavnue::messages::geometry::v1::Matrix33f* mutable_covariance();
  void set_allocated_covariance(::cavnue::messages::geometry::v1::Matrix33f* covariance);
  private:
  const ::cavnue::messages::geometry::v1::Matrix33f& _internal_covariance() const;
  ::cavnue::messages::geometry::v1::Matrix33f* _internal_mutable_covariance();
  public:
  void unsafe_arena_set_allocated_covariance(
      ::cavnue::messages::geometry::v1::Matrix33f* covariance);
  ::cavnue::messages::geometry::v1::Matrix33f* unsafe_arena_release_covariance();
  // @@protoc_insertion_point(class_scope:cavnue.messages.geometry.v1.CovarianceVector3d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::geometry::v1::Vector3d* value_;
    ::cavnue::messages::geometry::v1::Matrix33f* covariance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CovarianceVector2f

// .cavnue.messages.geometry.v1.Vector2f value = 1 [json_name = "value"];
inline bool CovarianceVector2f::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::Vector2f& CovarianceVector2f::_internal_value() const {
  const ::cavnue::messages::geometry::v1::Vector2f* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::Vector2f&>(
      ::cavnue::messages::geometry::v1::_Vector2f_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::Vector2f& CovarianceVector2f::value() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.CovarianceVector2f.value)
  return _internal_value();
}
inline void CovarianceVector2f::unsafe_arena_set_allocated_value(
    ::cavnue::messages::geometry::v1::Vector2f* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.geometry.v1.CovarianceVector2f.value)
}
inline ::cavnue::messages::geometry::v1::Vector2f* CovarianceVector2f::release_value() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::Vector2f* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector2f* CovarianceVector2f::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:cavnue.messages.geometry.v1.CovarianceVector2f.value)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::Vector2f* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector2f* CovarianceVector2f::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::Vector2f>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::cavnue::messages::geometry::v1::Vector2f* CovarianceVector2f::mutable_value() {
  ::cavnue::messages::geometry::v1::Vector2f* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.geometry.v1.CovarianceVector2f.value)
  return _msg;
}
inline void CovarianceVector2f::set_allocated_value(::cavnue::messages::geometry::v1::Vector2f* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.geometry.v1.CovarianceVector2f.value)
}

// .cavnue.messages.geometry.v1.Matrix22f covariance = 2 [json_name = "covariance"];
inline bool CovarianceVector2f::has_covariance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.covariance_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::Matrix22f& CovarianceVector2f::_internal_covariance() const {
  const ::cavnue::messages::geometry::v1::Matrix22f* p = _impl_.covariance_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::Matrix22f&>(
      ::cavnue::messages::geometry::v1::_Matrix22f_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::Matrix22f& CovarianceVector2f::covariance() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.CovarianceVector2f.covariance)
  return _internal_covariance();
}
inline void CovarianceVector2f::unsafe_arena_set_allocated_covariance(
    ::cavnue::messages::geometry::v1::Matrix22f* covariance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.covariance_);
  }
  _impl_.covariance_ = covariance;
  if (covariance) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.geometry.v1.CovarianceVector2f.covariance)
}
inline ::cavnue::messages::geometry::v1::Matrix22f* CovarianceVector2f::release_covariance() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::geometry::v1::Matrix22f* temp = _impl_.covariance_;
  _impl_.covariance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::Matrix22f* CovarianceVector2f::unsafe_arena_release_covariance() {
  // @@protoc_insertion_point(field_release:cavnue.messages.geometry.v1.CovarianceVector2f.covariance)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::geometry::v1::Matrix22f* temp = _impl_.covariance_;
  _impl_.covariance_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::Matrix22f* CovarianceVector2f::_internal_mutable_covariance() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.covariance_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::Matrix22f>(GetArenaForAllocation());
    _impl_.covariance_ = p;
  }
  return _impl_.covariance_;
}
inline ::cavnue::messages::geometry::v1::Matrix22f* CovarianceVector2f::mutable_covariance() {
  ::cavnue::messages::geometry::v1::Matrix22f* _msg = _internal_mutable_covariance();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.geometry.v1.CovarianceVector2f.covariance)
  return _msg;
}
inline void CovarianceVector2f::set_allocated_covariance(::cavnue::messages::geometry::v1::Matrix22f* covariance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.covariance_);
  }
  if (covariance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(covariance));
    if (message_arena != submessage_arena) {
      covariance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, covariance, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.covariance_ = covariance;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.geometry.v1.CovarianceVector2f.covariance)
}

// -------------------------------------------------------------------

// CovarianceVector3f

// .cavnue.messages.geometry.v1.Vector3f value = 1 [json_name = "value"];
inline bool CovarianceVector3f::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::Vector3f& CovarianceVector3f::_internal_value() const {
  const ::cavnue::messages::geometry::v1::Vector3f* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::Vector3f&>(
      ::cavnue::messages::geometry::v1::_Vector3f_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::Vector3f& CovarianceVector3f::value() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.CovarianceVector3f.value)
  return _internal_value();
}
inline void CovarianceVector3f::unsafe_arena_set_allocated_value(
    ::cavnue::messages::geometry::v1::Vector3f* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.geometry.v1.CovarianceVector3f.value)
}
inline ::cavnue::messages::geometry::v1::Vector3f* CovarianceVector3f::release_value() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::Vector3f* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector3f* CovarianceVector3f::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:cavnue.messages.geometry.v1.CovarianceVector3f.value)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::Vector3f* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector3f* CovarianceVector3f::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::Vector3f>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::cavnue::messages::geometry::v1::Vector3f* CovarianceVector3f::mutable_value() {
  ::cavnue::messages::geometry::v1::Vector3f* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.geometry.v1.CovarianceVector3f.value)
  return _msg;
}
inline void CovarianceVector3f::set_allocated_value(::cavnue::messages::geometry::v1::Vector3f* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.geometry.v1.CovarianceVector3f.value)
}

// .cavnue.messages.geometry.v1.Matrix33f covariance = 2 [json_name = "covariance"];
inline bool CovarianceVector3f::has_covariance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.covariance_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::Matrix33f& CovarianceVector3f::_internal_covariance() const {
  const ::cavnue::messages::geometry::v1::Matrix33f* p = _impl_.covariance_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::Matrix33f&>(
      ::cavnue::messages::geometry::v1::_Matrix33f_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::Matrix33f& CovarianceVector3f::covariance() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.CovarianceVector3f.covariance)
  return _internal_covariance();
}
inline void CovarianceVector3f::unsafe_arena_set_allocated_covariance(
    ::cavnue::messages::geometry::v1::Matrix33f* covariance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.covariance_);
  }
  _impl_.covariance_ = covariance;
  if (covariance) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.geometry.v1.CovarianceVector3f.covariance)
}
inline ::cavnue::messages::geometry::v1::Matrix33f* CovarianceVector3f::release_covariance() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::geometry::v1::Matrix33f* temp = _impl_.covariance_;
  _impl_.covariance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::Matrix33f* CovarianceVector3f::unsafe_arena_release_covariance() {
  // @@protoc_insertion_point(field_release:cavnue.messages.geometry.v1.CovarianceVector3f.covariance)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::geometry::v1::Matrix33f* temp = _impl_.covariance_;
  _impl_.covariance_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::Matrix33f* CovarianceVector3f::_internal_mutable_covariance() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.covariance_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::Matrix33f>(GetArenaForAllocation());
    _impl_.covariance_ = p;
  }
  return _impl_.covariance_;
}
inline ::cavnue::messages::geometry::v1::Matrix33f* CovarianceVector3f::mutable_covariance() {
  ::cavnue::messages::geometry::v1::Matrix33f* _msg = _internal_mutable_covariance();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.geometry.v1.CovarianceVector3f.covariance)
  return _msg;
}
inline void CovarianceVector3f::set_allocated_covariance(::cavnue::messages::geometry::v1::Matrix33f* covariance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.covariance_);
  }
  if (covariance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(covariance));
    if (message_arena != submessage_arena) {
      covariance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, covariance, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.covariance_ = covariance;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.geometry.v1.CovarianceVector3f.covariance)
}

// -------------------------------------------------------------------

// CovarianceVector3d

// .cavnue.messages.geometry.v1.Vector3d value = 1 [json_name = "value"];
inline bool CovarianceVector3d::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::Vector3d& CovarianceVector3d::_internal_value() const {
  const ::cavnue::messages::geometry::v1::Vector3d* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::Vector3d&>(
      ::cavnue::messages::geometry::v1::_Vector3d_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::Vector3d& CovarianceVector3d::value() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.CovarianceVector3d.value)
  return _internal_value();
}
inline void CovarianceVector3d::unsafe_arena_set_allocated_value(
    ::cavnue::messages::geometry::v1::Vector3d* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.geometry.v1.CovarianceVector3d.value)
}
inline ::cavnue::messages::geometry::v1::Vector3d* CovarianceVector3d::release_value() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::Vector3d* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector3d* CovarianceVector3d::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:cavnue.messages.geometry.v1.CovarianceVector3d.value)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::Vector3d* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector3d* CovarianceVector3d::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::Vector3d>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::cavnue::messages::geometry::v1::Vector3d* CovarianceVector3d::mutable_value() {
  ::cavnue::messages::geometry::v1::Vector3d* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.geometry.v1.CovarianceVector3d.value)
  return _msg;
}
inline void CovarianceVector3d::set_allocated_value(::cavnue::messages::geometry::v1::Vector3d* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.geometry.v1.CovarianceVector3d.value)
}

// .cavnue.messages.geometry.v1.Matrix33f covariance = 2 [json_name = "covariance"];
inline bool CovarianceVector3d::has_covariance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.covariance_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::Matrix33f& CovarianceVector3d::_internal_covariance() const {
  const ::cavnue::messages::geometry::v1::Matrix33f* p = _impl_.covariance_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::Matrix33f&>(
      ::cavnue::messages::geometry::v1::_Matrix33f_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::Matrix33f& CovarianceVector3d::covariance() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.CovarianceVector3d.covariance)
  return _internal_covariance();
}
inline void CovarianceVector3d::unsafe_arena_set_allocated_covariance(
    ::cavnue::messages::geometry::v1::Matrix33f* covariance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.covariance_);
  }
  _impl_.covariance_ = covariance;
  if (covariance) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.geometry.v1.CovarianceVector3d.covariance)
}
inline ::cavnue::messages::geometry::v1::Matrix33f* CovarianceVector3d::release_covariance() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::geometry::v1::Matrix33f* temp = _impl_.covariance_;
  _impl_.covariance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::Matrix33f* CovarianceVector3d::unsafe_arena_release_covariance() {
  // @@protoc_insertion_point(field_release:cavnue.messages.geometry.v1.CovarianceVector3d.covariance)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::geometry::v1::Matrix33f* temp = _impl_.covariance_;
  _impl_.covariance_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::Matrix33f* CovarianceVector3d::_internal_mutable_covariance() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.covariance_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::Matrix33f>(GetArenaForAllocation());
    _impl_.covariance_ = p;
  }
  return _impl_.covariance_;
}
inline ::cavnue::messages::geometry::v1::Matrix33f* CovarianceVector3d::mutable_covariance() {
  ::cavnue::messages::geometry::v1::Matrix33f* _msg = _internal_mutable_covariance();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.geometry.v1.CovarianceVector3d.covariance)
  return _msg;
}
inline void CovarianceVector3d::set_allocated_covariance(::cavnue::messages::geometry::v1::Matrix33f* covariance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.covariance_);
  }
  if (covariance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(covariance));
    if (message_arena != submessage_arena) {
      covariance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, covariance, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.covariance_ = covariance;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.geometry.v1.CovarianceVector3d.covariance)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace geometry
}  // namespace messages
}  // namespace cavnue


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto_2epb_2eh

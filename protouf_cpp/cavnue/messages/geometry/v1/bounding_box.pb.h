// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/geometry/v1/bounding_box.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fgeometry_2fv1_2fbounding_5fbox_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fgeometry_2fv1_2fbounding_5fbox_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cavnue/messages/geometry/v1/vector.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cavnue_2fmessages_2fgeometry_2fv1_2fbounding_5fbox_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fbounding_5fbox_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fbounding_5fbox_2eproto;
namespace cavnue {
namespace messages {
namespace geometry {
namespace v1 {
class BoundingBox2f;
struct BoundingBox2fDefaultTypeInternal;
extern BoundingBox2fDefaultTypeInternal _BoundingBox2f_default_instance_;
class BoundingBox3f;
struct BoundingBox3fDefaultTypeInternal;
extern BoundingBox3fDefaultTypeInternal _BoundingBox3f_default_instance_;
class RotatedBoundingBox3d;
struct RotatedBoundingBox3dDefaultTypeInternal;
extern RotatedBoundingBox3dDefaultTypeInternal _RotatedBoundingBox3d_default_instance_;
class RotatedBoundingBox3f;
struct RotatedBoundingBox3fDefaultTypeInternal;
extern RotatedBoundingBox3fDefaultTypeInternal _RotatedBoundingBox3f_default_instance_;
}  // namespace v1
}  // namespace geometry
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template <>
::cavnue::messages::geometry::v1::BoundingBox2f* Arena::CreateMaybeMessage<::cavnue::messages::geometry::v1::BoundingBox2f>(Arena*);
template <>
::cavnue::messages::geometry::v1::BoundingBox3f* Arena::CreateMaybeMessage<::cavnue::messages::geometry::v1::BoundingBox3f>(Arena*);
template <>
::cavnue::messages::geometry::v1::RotatedBoundingBox3d* Arena::CreateMaybeMessage<::cavnue::messages::geometry::v1::RotatedBoundingBox3d>(Arena*);
template <>
::cavnue::messages::geometry::v1::RotatedBoundingBox3f* Arena::CreateMaybeMessage<::cavnue::messages::geometry::v1::RotatedBoundingBox3f>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cavnue {
namespace messages {
namespace geometry {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class BoundingBox2f final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.geometry.v1.BoundingBox2f) */ {
 public:
  inline BoundingBox2f() : BoundingBox2f(nullptr) {}
  ~BoundingBox2f() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BoundingBox2f(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoundingBox2f(const BoundingBox2f& from);
  BoundingBox2f(BoundingBox2f&& from) noexcept
    : BoundingBox2f() {
    *this = ::std::move(from);
  }

  inline BoundingBox2f& operator=(const BoundingBox2f& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundingBox2f& operator=(BoundingBox2f&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoundingBox2f& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoundingBox2f* internal_default_instance() {
    return reinterpret_cast<const BoundingBox2f*>(
               &_BoundingBox2f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BoundingBox2f& a, BoundingBox2f& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundingBox2f* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoundingBox2f* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoundingBox2f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoundingBox2f>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoundingBox2f& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BoundingBox2f& from) {
    BoundingBox2f::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoundingBox2f* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.geometry.v1.BoundingBox2f";
  }
  protected:
  explicit BoundingBox2f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterFieldNumber = 1,
    kExtentsFieldNumber = 2,
  };
  // .cavnue.messages.geometry.v1.Vector2f center = 1 [json_name = "center"];
  bool has_center() const;
  void clear_center() ;
  const ::cavnue::messages::geometry::v1::Vector2f& center() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::Vector2f* release_center();
  ::cavnue::messages::geometry::v1::Vector2f* mutable_center();
  void set_allocated_center(::cavnue::messages::geometry::v1::Vector2f* center);
  private:
  const ::cavnue::messages::geometry::v1::Vector2f& _internal_center() const;
  ::cavnue::messages::geometry::v1::Vector2f* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::cavnue::messages::geometry::v1::Vector2f* center);
  ::cavnue::messages::geometry::v1::Vector2f* unsafe_arena_release_center();
  // .cavnue.messages.geometry.v1.Vector2f extents = 2 [json_name = "extents"];
  bool has_extents() const;
  void clear_extents() ;
  const ::cavnue::messages::geometry::v1::Vector2f& extents() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::Vector2f* release_extents();
  ::cavnue::messages::geometry::v1::Vector2f* mutable_extents();
  void set_allocated_extents(::cavnue::messages::geometry::v1::Vector2f* extents);
  private:
  const ::cavnue::messages::geometry::v1::Vector2f& _internal_extents() const;
  ::cavnue::messages::geometry::v1::Vector2f* _internal_mutable_extents();
  public:
  void unsafe_arena_set_allocated_extents(
      ::cavnue::messages::geometry::v1::Vector2f* extents);
  ::cavnue::messages::geometry::v1::Vector2f* unsafe_arena_release_extents();
  // @@protoc_insertion_point(class_scope:cavnue.messages.geometry.v1.BoundingBox2f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::geometry::v1::Vector2f* center_;
    ::cavnue::messages::geometry::v1::Vector2f* extents_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fbounding_5fbox_2eproto;
};// -------------------------------------------------------------------

class BoundingBox3f final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.geometry.v1.BoundingBox3f) */ {
 public:
  inline BoundingBox3f() : BoundingBox3f(nullptr) {}
  ~BoundingBox3f() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BoundingBox3f(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoundingBox3f(const BoundingBox3f& from);
  BoundingBox3f(BoundingBox3f&& from) noexcept
    : BoundingBox3f() {
    *this = ::std::move(from);
  }

  inline BoundingBox3f& operator=(const BoundingBox3f& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundingBox3f& operator=(BoundingBox3f&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoundingBox3f& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoundingBox3f* internal_default_instance() {
    return reinterpret_cast<const BoundingBox3f*>(
               &_BoundingBox3f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BoundingBox3f& a, BoundingBox3f& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundingBox3f* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoundingBox3f* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoundingBox3f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoundingBox3f>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoundingBox3f& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BoundingBox3f& from) {
    BoundingBox3f::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoundingBox3f* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.geometry.v1.BoundingBox3f";
  }
  protected:
  explicit BoundingBox3f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterFieldNumber = 1,
    kExtentsFieldNumber = 2,
  };
  // .cavnue.messages.geometry.v1.Vector3f center = 1 [json_name = "center"];
  bool has_center() const;
  void clear_center() ;
  const ::cavnue::messages::geometry::v1::Vector3f& center() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::Vector3f* release_center();
  ::cavnue::messages::geometry::v1::Vector3f* mutable_center();
  void set_allocated_center(::cavnue::messages::geometry::v1::Vector3f* center);
  private:
  const ::cavnue::messages::geometry::v1::Vector3f& _internal_center() const;
  ::cavnue::messages::geometry::v1::Vector3f* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::cavnue::messages::geometry::v1::Vector3f* center);
  ::cavnue::messages::geometry::v1::Vector3f* unsafe_arena_release_center();
  // .cavnue.messages.geometry.v1.Vector3f extents = 2 [json_name = "extents"];
  bool has_extents() const;
  void clear_extents() ;
  const ::cavnue::messages::geometry::v1::Vector3f& extents() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::Vector3f* release_extents();
  ::cavnue::messages::geometry::v1::Vector3f* mutable_extents();
  void set_allocated_extents(::cavnue::messages::geometry::v1::Vector3f* extents);
  private:
  const ::cavnue::messages::geometry::v1::Vector3f& _internal_extents() const;
  ::cavnue::messages::geometry::v1::Vector3f* _internal_mutable_extents();
  public:
  void unsafe_arena_set_allocated_extents(
      ::cavnue::messages::geometry::v1::Vector3f* extents);
  ::cavnue::messages::geometry::v1::Vector3f* unsafe_arena_release_extents();
  // @@protoc_insertion_point(class_scope:cavnue.messages.geometry.v1.BoundingBox3f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::geometry::v1::Vector3f* center_;
    ::cavnue::messages::geometry::v1::Vector3f* extents_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fbounding_5fbox_2eproto;
};// -------------------------------------------------------------------

class RotatedBoundingBox3f final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.geometry.v1.RotatedBoundingBox3f) */ {
 public:
  inline RotatedBoundingBox3f() : RotatedBoundingBox3f(nullptr) {}
  ~RotatedBoundingBox3f() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RotatedBoundingBox3f(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RotatedBoundingBox3f(const RotatedBoundingBox3f& from);
  RotatedBoundingBox3f(RotatedBoundingBox3f&& from) noexcept
    : RotatedBoundingBox3f() {
    *this = ::std::move(from);
  }

  inline RotatedBoundingBox3f& operator=(const RotatedBoundingBox3f& from) {
    CopyFrom(from);
    return *this;
  }
  inline RotatedBoundingBox3f& operator=(RotatedBoundingBox3f&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RotatedBoundingBox3f& default_instance() {
    return *internal_default_instance();
  }
  static inline const RotatedBoundingBox3f* internal_default_instance() {
    return reinterpret_cast<const RotatedBoundingBox3f*>(
               &_RotatedBoundingBox3f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RotatedBoundingBox3f& a, RotatedBoundingBox3f& b) {
    a.Swap(&b);
  }
  inline void Swap(RotatedBoundingBox3f* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RotatedBoundingBox3f* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RotatedBoundingBox3f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RotatedBoundingBox3f>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RotatedBoundingBox3f& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RotatedBoundingBox3f& from) {
    RotatedBoundingBox3f::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RotatedBoundingBox3f* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.geometry.v1.RotatedBoundingBox3f";
  }
  protected:
  explicit RotatedBoundingBox3f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterFieldNumber = 1,
    kCenterRotationFieldNumber = 2,
    kExtentsFieldNumber = 3,
  };
  // .cavnue.messages.geometry.v1.Vector3f center = 1 [json_name = "center"];
  bool has_center() const;
  void clear_center() ;
  const ::cavnue::messages::geometry::v1::Vector3f& center() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::Vector3f* release_center();
  ::cavnue::messages::geometry::v1::Vector3f* mutable_center();
  void set_allocated_center(::cavnue::messages::geometry::v1::Vector3f* center);
  private:
  const ::cavnue::messages::geometry::v1::Vector3f& _internal_center() const;
  ::cavnue::messages::geometry::v1::Vector3f* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::cavnue::messages::geometry::v1::Vector3f* center);
  ::cavnue::messages::geometry::v1::Vector3f* unsafe_arena_release_center();
  // .cavnue.messages.geometry.v1.Vector4f center_rotation = 2 [json_name = "centerRotation"];
  bool has_center_rotation() const;
  void clear_center_rotation() ;
  const ::cavnue::messages::geometry::v1::Vector4f& center_rotation() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::Vector4f* release_center_rotation();
  ::cavnue::messages::geometry::v1::Vector4f* mutable_center_rotation();
  void set_allocated_center_rotation(::cavnue::messages::geometry::v1::Vector4f* center_rotation);
  private:
  const ::cavnue::messages::geometry::v1::Vector4f& _internal_center_rotation() const;
  ::cavnue::messages::geometry::v1::Vector4f* _internal_mutable_center_rotation();
  public:
  void unsafe_arena_set_allocated_center_rotation(
      ::cavnue::messages::geometry::v1::Vector4f* center_rotation);
  ::cavnue::messages::geometry::v1::Vector4f* unsafe_arena_release_center_rotation();
  // .cavnue.messages.geometry.v1.Vector3f extents = 3 [json_name = "extents"];
  bool has_extents() const;
  void clear_extents() ;
  const ::cavnue::messages::geometry::v1::Vector3f& extents() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::Vector3f* release_extents();
  ::cavnue::messages::geometry::v1::Vector3f* mutable_extents();
  void set_allocated_extents(::cavnue::messages::geometry::v1::Vector3f* extents);
  private:
  const ::cavnue::messages::geometry::v1::Vector3f& _internal_extents() const;
  ::cavnue::messages::geometry::v1::Vector3f* _internal_mutable_extents();
  public:
  void unsafe_arena_set_allocated_extents(
      ::cavnue::messages::geometry::v1::Vector3f* extents);
  ::cavnue::messages::geometry::v1::Vector3f* unsafe_arena_release_extents();
  // @@protoc_insertion_point(class_scope:cavnue.messages.geometry.v1.RotatedBoundingBox3f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::geometry::v1::Vector3f* center_;
    ::cavnue::messages::geometry::v1::Vector4f* center_rotation_;
    ::cavnue::messages::geometry::v1::Vector3f* extents_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fbounding_5fbox_2eproto;
};// -------------------------------------------------------------------

class RotatedBoundingBox3d final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.geometry.v1.RotatedBoundingBox3d) */ {
 public:
  inline RotatedBoundingBox3d() : RotatedBoundingBox3d(nullptr) {}
  ~RotatedBoundingBox3d() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RotatedBoundingBox3d(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RotatedBoundingBox3d(const RotatedBoundingBox3d& from);
  RotatedBoundingBox3d(RotatedBoundingBox3d&& from) noexcept
    : RotatedBoundingBox3d() {
    *this = ::std::move(from);
  }

  inline RotatedBoundingBox3d& operator=(const RotatedBoundingBox3d& from) {
    CopyFrom(from);
    return *this;
  }
  inline RotatedBoundingBox3d& operator=(RotatedBoundingBox3d&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RotatedBoundingBox3d& default_instance() {
    return *internal_default_instance();
  }
  static inline const RotatedBoundingBox3d* internal_default_instance() {
    return reinterpret_cast<const RotatedBoundingBox3d*>(
               &_RotatedBoundingBox3d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RotatedBoundingBox3d& a, RotatedBoundingBox3d& b) {
    a.Swap(&b);
  }
  inline void Swap(RotatedBoundingBox3d* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RotatedBoundingBox3d* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RotatedBoundingBox3d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RotatedBoundingBox3d>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RotatedBoundingBox3d& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RotatedBoundingBox3d& from) {
    RotatedBoundingBox3d::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RotatedBoundingBox3d* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.geometry.v1.RotatedBoundingBox3d";
  }
  protected:
  explicit RotatedBoundingBox3d(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterFieldNumber = 1,
    kCenterRotationFieldNumber = 2,
    kExtentsFieldNumber = 3,
  };
  // .cavnue.messages.geometry.v1.Vector3d center = 1 [json_name = "center"];
  bool has_center() const;
  void clear_center() ;
  const ::cavnue::messages::geometry::v1::Vector3d& center() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::Vector3d* release_center();
  ::cavnue::messages::geometry::v1::Vector3d* mutable_center();
  void set_allocated_center(::cavnue::messages::geometry::v1::Vector3d* center);
  private:
  const ::cavnue::messages::geometry::v1::Vector3d& _internal_center() const;
  ::cavnue::messages::geometry::v1::Vector3d* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::cavnue::messages::geometry::v1::Vector3d* center);
  ::cavnue::messages::geometry::v1::Vector3d* unsafe_arena_release_center();
  // .cavnue.messages.geometry.v1.Vector4f center_rotation = 2 [json_name = "centerRotation"];
  bool has_center_rotation() const;
  void clear_center_rotation() ;
  const ::cavnue::messages::geometry::v1::Vector4f& center_rotation() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::Vector4f* release_center_rotation();
  ::cavnue::messages::geometry::v1::Vector4f* mutable_center_rotation();
  void set_allocated_center_rotation(::cavnue::messages::geometry::v1::Vector4f* center_rotation);
  private:
  const ::cavnue::messages::geometry::v1::Vector4f& _internal_center_rotation() const;
  ::cavnue::messages::geometry::v1::Vector4f* _internal_mutable_center_rotation();
  public:
  void unsafe_arena_set_allocated_center_rotation(
      ::cavnue::messages::geometry::v1::Vector4f* center_rotation);
  ::cavnue::messages::geometry::v1::Vector4f* unsafe_arena_release_center_rotation();
  // .cavnue.messages.geometry.v1.Vector3f extents = 3 [json_name = "extents"];
  bool has_extents() const;
  void clear_extents() ;
  const ::cavnue::messages::geometry::v1::Vector3f& extents() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::Vector3f* release_extents();
  ::cavnue::messages::geometry::v1::Vector3f* mutable_extents();
  void set_allocated_extents(::cavnue::messages::geometry::v1::Vector3f* extents);
  private:
  const ::cavnue::messages::geometry::v1::Vector3f& _internal_extents() const;
  ::cavnue::messages::geometry::v1::Vector3f* _internal_mutable_extents();
  public:
  void unsafe_arena_set_allocated_extents(
      ::cavnue::messages::geometry::v1::Vector3f* extents);
  ::cavnue::messages::geometry::v1::Vector3f* unsafe_arena_release_extents();
  // @@protoc_insertion_point(class_scope:cavnue.messages.geometry.v1.RotatedBoundingBox3d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::geometry::v1::Vector3d* center_;
    ::cavnue::messages::geometry::v1::Vector4f* center_rotation_;
    ::cavnue::messages::geometry::v1::Vector3f* extents_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fbounding_5fbox_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BoundingBox2f

// .cavnue.messages.geometry.v1.Vector2f center = 1 [json_name = "center"];
inline bool BoundingBox2f::has_center() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.center_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::Vector2f& BoundingBox2f::_internal_center() const {
  const ::cavnue::messages::geometry::v1::Vector2f* p = _impl_.center_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::Vector2f&>(
      ::cavnue::messages::geometry::v1::_Vector2f_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::Vector2f& BoundingBox2f::center() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.BoundingBox2f.center)
  return _internal_center();
}
inline void BoundingBox2f::unsafe_arena_set_allocated_center(
    ::cavnue::messages::geometry::v1::Vector2f* center) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.center_);
  }
  _impl_.center_ = center;
  if (center) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.geometry.v1.BoundingBox2f.center)
}
inline ::cavnue::messages::geometry::v1::Vector2f* BoundingBox2f::release_center() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::Vector2f* temp = _impl_.center_;
  _impl_.center_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector2f* BoundingBox2f::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:cavnue.messages.geometry.v1.BoundingBox2f.center)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::Vector2f* temp = _impl_.center_;
  _impl_.center_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector2f* BoundingBox2f::_internal_mutable_center() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.center_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::Vector2f>(GetArenaForAllocation());
    _impl_.center_ = p;
  }
  return _impl_.center_;
}
inline ::cavnue::messages::geometry::v1::Vector2f* BoundingBox2f::mutable_center() {
  ::cavnue::messages::geometry::v1::Vector2f* _msg = _internal_mutable_center();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.geometry.v1.BoundingBox2f.center)
  return _msg;
}
inline void BoundingBox2f::set_allocated_center(::cavnue::messages::geometry::v1::Vector2f* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.center_);
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center));
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.center_ = center;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.geometry.v1.BoundingBox2f.center)
}

// .cavnue.messages.geometry.v1.Vector2f extents = 2 [json_name = "extents"];
inline bool BoundingBox2f::has_extents() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.extents_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::Vector2f& BoundingBox2f::_internal_extents() const {
  const ::cavnue::messages::geometry::v1::Vector2f* p = _impl_.extents_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::Vector2f&>(
      ::cavnue::messages::geometry::v1::_Vector2f_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::Vector2f& BoundingBox2f::extents() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.BoundingBox2f.extents)
  return _internal_extents();
}
inline void BoundingBox2f::unsafe_arena_set_allocated_extents(
    ::cavnue::messages::geometry::v1::Vector2f* extents) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extents_);
  }
  _impl_.extents_ = extents;
  if (extents) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.geometry.v1.BoundingBox2f.extents)
}
inline ::cavnue::messages::geometry::v1::Vector2f* BoundingBox2f::release_extents() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::geometry::v1::Vector2f* temp = _impl_.extents_;
  _impl_.extents_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector2f* BoundingBox2f::unsafe_arena_release_extents() {
  // @@protoc_insertion_point(field_release:cavnue.messages.geometry.v1.BoundingBox2f.extents)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::geometry::v1::Vector2f* temp = _impl_.extents_;
  _impl_.extents_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector2f* BoundingBox2f::_internal_mutable_extents() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.extents_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::Vector2f>(GetArenaForAllocation());
    _impl_.extents_ = p;
  }
  return _impl_.extents_;
}
inline ::cavnue::messages::geometry::v1::Vector2f* BoundingBox2f::mutable_extents() {
  ::cavnue::messages::geometry::v1::Vector2f* _msg = _internal_mutable_extents();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.geometry.v1.BoundingBox2f.extents)
  return _msg;
}
inline void BoundingBox2f::set_allocated_extents(::cavnue::messages::geometry::v1::Vector2f* extents) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extents_);
  }
  if (extents) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extents));
    if (message_arena != submessage_arena) {
      extents = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extents, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.extents_ = extents;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.geometry.v1.BoundingBox2f.extents)
}

// -------------------------------------------------------------------

// BoundingBox3f

// .cavnue.messages.geometry.v1.Vector3f center = 1 [json_name = "center"];
inline bool BoundingBox3f::has_center() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.center_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::Vector3f& BoundingBox3f::_internal_center() const {
  const ::cavnue::messages::geometry::v1::Vector3f* p = _impl_.center_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::Vector3f&>(
      ::cavnue::messages::geometry::v1::_Vector3f_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::Vector3f& BoundingBox3f::center() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.BoundingBox3f.center)
  return _internal_center();
}
inline void BoundingBox3f::unsafe_arena_set_allocated_center(
    ::cavnue::messages::geometry::v1::Vector3f* center) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.center_);
  }
  _impl_.center_ = center;
  if (center) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.geometry.v1.BoundingBox3f.center)
}
inline ::cavnue::messages::geometry::v1::Vector3f* BoundingBox3f::release_center() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::Vector3f* temp = _impl_.center_;
  _impl_.center_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector3f* BoundingBox3f::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:cavnue.messages.geometry.v1.BoundingBox3f.center)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::Vector3f* temp = _impl_.center_;
  _impl_.center_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector3f* BoundingBox3f::_internal_mutable_center() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.center_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::Vector3f>(GetArenaForAllocation());
    _impl_.center_ = p;
  }
  return _impl_.center_;
}
inline ::cavnue::messages::geometry::v1::Vector3f* BoundingBox3f::mutable_center() {
  ::cavnue::messages::geometry::v1::Vector3f* _msg = _internal_mutable_center();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.geometry.v1.BoundingBox3f.center)
  return _msg;
}
inline void BoundingBox3f::set_allocated_center(::cavnue::messages::geometry::v1::Vector3f* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.center_);
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center));
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.center_ = center;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.geometry.v1.BoundingBox3f.center)
}

// .cavnue.messages.geometry.v1.Vector3f extents = 2 [json_name = "extents"];
inline bool BoundingBox3f::has_extents() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.extents_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::Vector3f& BoundingBox3f::_internal_extents() const {
  const ::cavnue::messages::geometry::v1::Vector3f* p = _impl_.extents_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::Vector3f&>(
      ::cavnue::messages::geometry::v1::_Vector3f_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::Vector3f& BoundingBox3f::extents() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.BoundingBox3f.extents)
  return _internal_extents();
}
inline void BoundingBox3f::unsafe_arena_set_allocated_extents(
    ::cavnue::messages::geometry::v1::Vector3f* extents) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extents_);
  }
  _impl_.extents_ = extents;
  if (extents) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.geometry.v1.BoundingBox3f.extents)
}
inline ::cavnue::messages::geometry::v1::Vector3f* BoundingBox3f::release_extents() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::geometry::v1::Vector3f* temp = _impl_.extents_;
  _impl_.extents_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector3f* BoundingBox3f::unsafe_arena_release_extents() {
  // @@protoc_insertion_point(field_release:cavnue.messages.geometry.v1.BoundingBox3f.extents)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::geometry::v1::Vector3f* temp = _impl_.extents_;
  _impl_.extents_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector3f* BoundingBox3f::_internal_mutable_extents() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.extents_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::Vector3f>(GetArenaForAllocation());
    _impl_.extents_ = p;
  }
  return _impl_.extents_;
}
inline ::cavnue::messages::geometry::v1::Vector3f* BoundingBox3f::mutable_extents() {
  ::cavnue::messages::geometry::v1::Vector3f* _msg = _internal_mutable_extents();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.geometry.v1.BoundingBox3f.extents)
  return _msg;
}
inline void BoundingBox3f::set_allocated_extents(::cavnue::messages::geometry::v1::Vector3f* extents) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extents_);
  }
  if (extents) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extents));
    if (message_arena != submessage_arena) {
      extents = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extents, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.extents_ = extents;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.geometry.v1.BoundingBox3f.extents)
}

// -------------------------------------------------------------------

// RotatedBoundingBox3f

// .cavnue.messages.geometry.v1.Vector3f center = 1 [json_name = "center"];
inline bool RotatedBoundingBox3f::has_center() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.center_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::Vector3f& RotatedBoundingBox3f::_internal_center() const {
  const ::cavnue::messages::geometry::v1::Vector3f* p = _impl_.center_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::Vector3f&>(
      ::cavnue::messages::geometry::v1::_Vector3f_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::Vector3f& RotatedBoundingBox3f::center() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.RotatedBoundingBox3f.center)
  return _internal_center();
}
inline void RotatedBoundingBox3f::unsafe_arena_set_allocated_center(
    ::cavnue::messages::geometry::v1::Vector3f* center) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.center_);
  }
  _impl_.center_ = center;
  if (center) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.geometry.v1.RotatedBoundingBox3f.center)
}
inline ::cavnue::messages::geometry::v1::Vector3f* RotatedBoundingBox3f::release_center() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::Vector3f* temp = _impl_.center_;
  _impl_.center_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector3f* RotatedBoundingBox3f::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:cavnue.messages.geometry.v1.RotatedBoundingBox3f.center)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::Vector3f* temp = _impl_.center_;
  _impl_.center_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector3f* RotatedBoundingBox3f::_internal_mutable_center() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.center_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::Vector3f>(GetArenaForAllocation());
    _impl_.center_ = p;
  }
  return _impl_.center_;
}
inline ::cavnue::messages::geometry::v1::Vector3f* RotatedBoundingBox3f::mutable_center() {
  ::cavnue::messages::geometry::v1::Vector3f* _msg = _internal_mutable_center();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.geometry.v1.RotatedBoundingBox3f.center)
  return _msg;
}
inline void RotatedBoundingBox3f::set_allocated_center(::cavnue::messages::geometry::v1::Vector3f* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.center_);
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center));
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.center_ = center;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.geometry.v1.RotatedBoundingBox3f.center)
}

// .cavnue.messages.geometry.v1.Vector4f center_rotation = 2 [json_name = "centerRotation"];
inline bool RotatedBoundingBox3f::has_center_rotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.center_rotation_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::Vector4f& RotatedBoundingBox3f::_internal_center_rotation() const {
  const ::cavnue::messages::geometry::v1::Vector4f* p = _impl_.center_rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::Vector4f&>(
      ::cavnue::messages::geometry::v1::_Vector4f_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::Vector4f& RotatedBoundingBox3f::center_rotation() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.RotatedBoundingBox3f.center_rotation)
  return _internal_center_rotation();
}
inline void RotatedBoundingBox3f::unsafe_arena_set_allocated_center_rotation(
    ::cavnue::messages::geometry::v1::Vector4f* center_rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.center_rotation_);
  }
  _impl_.center_rotation_ = center_rotation;
  if (center_rotation) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.geometry.v1.RotatedBoundingBox3f.center_rotation)
}
inline ::cavnue::messages::geometry::v1::Vector4f* RotatedBoundingBox3f::release_center_rotation() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::geometry::v1::Vector4f* temp = _impl_.center_rotation_;
  _impl_.center_rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector4f* RotatedBoundingBox3f::unsafe_arena_release_center_rotation() {
  // @@protoc_insertion_point(field_release:cavnue.messages.geometry.v1.RotatedBoundingBox3f.center_rotation)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::geometry::v1::Vector4f* temp = _impl_.center_rotation_;
  _impl_.center_rotation_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector4f* RotatedBoundingBox3f::_internal_mutable_center_rotation() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.center_rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::Vector4f>(GetArenaForAllocation());
    _impl_.center_rotation_ = p;
  }
  return _impl_.center_rotation_;
}
inline ::cavnue::messages::geometry::v1::Vector4f* RotatedBoundingBox3f::mutable_center_rotation() {
  ::cavnue::messages::geometry::v1::Vector4f* _msg = _internal_mutable_center_rotation();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.geometry.v1.RotatedBoundingBox3f.center_rotation)
  return _msg;
}
inline void RotatedBoundingBox3f::set_allocated_center_rotation(::cavnue::messages::geometry::v1::Vector4f* center_rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.center_rotation_);
  }
  if (center_rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_rotation));
    if (message_arena != submessage_arena) {
      center_rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center_rotation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.center_rotation_ = center_rotation;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.geometry.v1.RotatedBoundingBox3f.center_rotation)
}

// .cavnue.messages.geometry.v1.Vector3f extents = 3 [json_name = "extents"];
inline bool RotatedBoundingBox3f::has_extents() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.extents_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::Vector3f& RotatedBoundingBox3f::_internal_extents() const {
  const ::cavnue::messages::geometry::v1::Vector3f* p = _impl_.extents_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::Vector3f&>(
      ::cavnue::messages::geometry::v1::_Vector3f_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::Vector3f& RotatedBoundingBox3f::extents() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.RotatedBoundingBox3f.extents)
  return _internal_extents();
}
inline void RotatedBoundingBox3f::unsafe_arena_set_allocated_extents(
    ::cavnue::messages::geometry::v1::Vector3f* extents) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extents_);
  }
  _impl_.extents_ = extents;
  if (extents) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.geometry.v1.RotatedBoundingBox3f.extents)
}
inline ::cavnue::messages::geometry::v1::Vector3f* RotatedBoundingBox3f::release_extents() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::cavnue::messages::geometry::v1::Vector3f* temp = _impl_.extents_;
  _impl_.extents_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector3f* RotatedBoundingBox3f::unsafe_arena_release_extents() {
  // @@protoc_insertion_point(field_release:cavnue.messages.geometry.v1.RotatedBoundingBox3f.extents)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::cavnue::messages::geometry::v1::Vector3f* temp = _impl_.extents_;
  _impl_.extents_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector3f* RotatedBoundingBox3f::_internal_mutable_extents() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.extents_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::Vector3f>(GetArenaForAllocation());
    _impl_.extents_ = p;
  }
  return _impl_.extents_;
}
inline ::cavnue::messages::geometry::v1::Vector3f* RotatedBoundingBox3f::mutable_extents() {
  ::cavnue::messages::geometry::v1::Vector3f* _msg = _internal_mutable_extents();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.geometry.v1.RotatedBoundingBox3f.extents)
  return _msg;
}
inline void RotatedBoundingBox3f::set_allocated_extents(::cavnue::messages::geometry::v1::Vector3f* extents) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extents_);
  }
  if (extents) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extents));
    if (message_arena != submessage_arena) {
      extents = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extents, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.extents_ = extents;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.geometry.v1.RotatedBoundingBox3f.extents)
}

// -------------------------------------------------------------------

// RotatedBoundingBox3d

// .cavnue.messages.geometry.v1.Vector3d center = 1 [json_name = "center"];
inline bool RotatedBoundingBox3d::has_center() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.center_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::Vector3d& RotatedBoundingBox3d::_internal_center() const {
  const ::cavnue::messages::geometry::v1::Vector3d* p = _impl_.center_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::Vector3d&>(
      ::cavnue::messages::geometry::v1::_Vector3d_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::Vector3d& RotatedBoundingBox3d::center() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.RotatedBoundingBox3d.center)
  return _internal_center();
}
inline void RotatedBoundingBox3d::unsafe_arena_set_allocated_center(
    ::cavnue::messages::geometry::v1::Vector3d* center) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.center_);
  }
  _impl_.center_ = center;
  if (center) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.geometry.v1.RotatedBoundingBox3d.center)
}
inline ::cavnue::messages::geometry::v1::Vector3d* RotatedBoundingBox3d::release_center() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::Vector3d* temp = _impl_.center_;
  _impl_.center_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector3d* RotatedBoundingBox3d::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:cavnue.messages.geometry.v1.RotatedBoundingBox3d.center)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::Vector3d* temp = _impl_.center_;
  _impl_.center_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector3d* RotatedBoundingBox3d::_internal_mutable_center() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.center_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::Vector3d>(GetArenaForAllocation());
    _impl_.center_ = p;
  }
  return _impl_.center_;
}
inline ::cavnue::messages::geometry::v1::Vector3d* RotatedBoundingBox3d::mutable_center() {
  ::cavnue::messages::geometry::v1::Vector3d* _msg = _internal_mutable_center();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.geometry.v1.RotatedBoundingBox3d.center)
  return _msg;
}
inline void RotatedBoundingBox3d::set_allocated_center(::cavnue::messages::geometry::v1::Vector3d* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.center_);
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center));
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.center_ = center;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.geometry.v1.RotatedBoundingBox3d.center)
}

// .cavnue.messages.geometry.v1.Vector4f center_rotation = 2 [json_name = "centerRotation"];
inline bool RotatedBoundingBox3d::has_center_rotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.center_rotation_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::Vector4f& RotatedBoundingBox3d::_internal_center_rotation() const {
  const ::cavnue::messages::geometry::v1::Vector4f* p = _impl_.center_rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::Vector4f&>(
      ::cavnue::messages::geometry::v1::_Vector4f_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::Vector4f& RotatedBoundingBox3d::center_rotation() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.RotatedBoundingBox3d.center_rotation)
  return _internal_center_rotation();
}
inline void RotatedBoundingBox3d::unsafe_arena_set_allocated_center_rotation(
    ::cavnue::messages::geometry::v1::Vector4f* center_rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.center_rotation_);
  }
  _impl_.center_rotation_ = center_rotation;
  if (center_rotation) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.geometry.v1.RotatedBoundingBox3d.center_rotation)
}
inline ::cavnue::messages::geometry::v1::Vector4f* RotatedBoundingBox3d::release_center_rotation() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::geometry::v1::Vector4f* temp = _impl_.center_rotation_;
  _impl_.center_rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector4f* RotatedBoundingBox3d::unsafe_arena_release_center_rotation() {
  // @@protoc_insertion_point(field_release:cavnue.messages.geometry.v1.RotatedBoundingBox3d.center_rotation)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::geometry::v1::Vector4f* temp = _impl_.center_rotation_;
  _impl_.center_rotation_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector4f* RotatedBoundingBox3d::_internal_mutable_center_rotation() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.center_rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::Vector4f>(GetArenaForAllocation());
    _impl_.center_rotation_ = p;
  }
  return _impl_.center_rotation_;
}
inline ::cavnue::messages::geometry::v1::Vector4f* RotatedBoundingBox3d::mutable_center_rotation() {
  ::cavnue::messages::geometry::v1::Vector4f* _msg = _internal_mutable_center_rotation();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.geometry.v1.RotatedBoundingBox3d.center_rotation)
  return _msg;
}
inline void RotatedBoundingBox3d::set_allocated_center_rotation(::cavnue::messages::geometry::v1::Vector4f* center_rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.center_rotation_);
  }
  if (center_rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_rotation));
    if (message_arena != submessage_arena) {
      center_rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center_rotation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.center_rotation_ = center_rotation;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.geometry.v1.RotatedBoundingBox3d.center_rotation)
}

// .cavnue.messages.geometry.v1.Vector3f extents = 3 [json_name = "extents"];
inline bool RotatedBoundingBox3d::has_extents() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.extents_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::Vector3f& RotatedBoundingBox3d::_internal_extents() const {
  const ::cavnue::messages::geometry::v1::Vector3f* p = _impl_.extents_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::Vector3f&>(
      ::cavnue::messages::geometry::v1::_Vector3f_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::Vector3f& RotatedBoundingBox3d::extents() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.geometry.v1.RotatedBoundingBox3d.extents)
  return _internal_extents();
}
inline void RotatedBoundingBox3d::unsafe_arena_set_allocated_extents(
    ::cavnue::messages::geometry::v1::Vector3f* extents) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extents_);
  }
  _impl_.extents_ = extents;
  if (extents) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.geometry.v1.RotatedBoundingBox3d.extents)
}
inline ::cavnue::messages::geometry::v1::Vector3f* RotatedBoundingBox3d::release_extents() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::cavnue::messages::geometry::v1::Vector3f* temp = _impl_.extents_;
  _impl_.extents_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector3f* RotatedBoundingBox3d::unsafe_arena_release_extents() {
  // @@protoc_insertion_point(field_release:cavnue.messages.geometry.v1.RotatedBoundingBox3d.extents)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::cavnue::messages::geometry::v1::Vector3f* temp = _impl_.extents_;
  _impl_.extents_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector3f* RotatedBoundingBox3d::_internal_mutable_extents() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.extents_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::Vector3f>(GetArenaForAllocation());
    _impl_.extents_ = p;
  }
  return _impl_.extents_;
}
inline ::cavnue::messages::geometry::v1::Vector3f* RotatedBoundingBox3d::mutable_extents() {
  ::cavnue::messages::geometry::v1::Vector3f* _msg = _internal_mutable_extents();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.geometry.v1.RotatedBoundingBox3d.extents)
  return _msg;
}
inline void RotatedBoundingBox3d::set_allocated_extents(::cavnue::messages::geometry::v1::Vector3f* extents) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extents_);
  }
  if (extents) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extents));
    if (message_arena != submessage_arena) {
      extents = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extents, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.extents_ = extents;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.geometry.v1.RotatedBoundingBox3d.extents)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace geometry
}  // namespace messages
}  // namespace cavnue


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fgeometry_2fv1_2fbounding_5fbox_2eproto_2epb_2eh

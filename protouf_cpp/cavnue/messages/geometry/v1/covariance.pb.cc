// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/geometry/v1/covariance.proto

#include "cavnue/messages/geometry/v1/covariance.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cavnue {
namespace messages {
namespace geometry {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR CovarianceVector2f::CovarianceVector2f(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_.covariance_)*/nullptr} {}
struct CovarianceVector2fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CovarianceVector2fDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CovarianceVector2fDefaultTypeInternal() {}
  union {
    CovarianceVector2f _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CovarianceVector2fDefaultTypeInternal _CovarianceVector2f_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CovarianceVector3f::CovarianceVector3f(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_.covariance_)*/nullptr} {}
struct CovarianceVector3fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CovarianceVector3fDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CovarianceVector3fDefaultTypeInternal() {}
  union {
    CovarianceVector3f _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CovarianceVector3fDefaultTypeInternal _CovarianceVector3f_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CovarianceVector3d::CovarianceVector3d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_.covariance_)*/nullptr} {}
struct CovarianceVector3dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CovarianceVector3dDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CovarianceVector3dDefaultTypeInternal() {}
  union {
    CovarianceVector3d _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CovarianceVector3dDefaultTypeInternal _CovarianceVector3d_default_instance_;
}  // namespace v1
}  // namespace geometry
}  // namespace messages
}  // namespace cavnue
static ::_pb::Metadata file_level_metadata_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto = nullptr;
const ::uint32_t TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::CovarianceVector2f, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::CovarianceVector2f, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::CovarianceVector2f, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::CovarianceVector2f, _impl_.covariance_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::CovarianceVector3f, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::CovarianceVector3f, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::CovarianceVector3f, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::CovarianceVector3f, _impl_.covariance_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::CovarianceVector3d, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::CovarianceVector3d, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::CovarianceVector3d, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::CovarianceVector3d, _impl_.covariance_),
    0,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::cavnue::messages::geometry::v1::CovarianceVector2f)},
        { 12, 22, -1, sizeof(::cavnue::messages::geometry::v1::CovarianceVector3f)},
        { 24, 34, -1, sizeof(::cavnue::messages::geometry::v1::CovarianceVector3d)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cavnue::messages::geometry::v1::_CovarianceVector2f_default_instance_._instance,
    &::cavnue::messages::geometry::v1::_CovarianceVector3f_default_instance_._instance,
    &::cavnue::messages::geometry::v1::_CovarianceVector3d_default_instance_._instance,
};
const char descriptor_table_protodef_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n,cavnue/messages/geometry/v1/covariance"
    ".proto\022\033cavnue.messages.geometry.v1\032(cav"
    "nue/messages/geometry/v1/matrix.proto\032(c"
    "avnue/messages/geometry/v1/vector.proto\""
    "\231\001\n\022CovarianceVector2f\022;\n\005value\030\001 \001(\0132%."
    "cavnue.messages.geometry.v1.Vector2fR\005va"
    "lue\022F\n\ncovariance\030\002 \001(\0132&.cavnue.message"
    "s.geometry.v1.Matrix22fR\ncovariance\"\231\001\n\022"
    "CovarianceVector3f\022;\n\005value\030\001 \001(\0132%.cavn"
    "ue.messages.geometry.v1.Vector3fR\005value\022"
    "F\n\ncovariance\030\002 \001(\0132&.cavnue.messages.ge"
    "ometry.v1.Matrix33fR\ncovariance\"\231\001\n\022Cova"
    "rianceVector3d\022;\n\005value\030\001 \001(\0132%.cavnue.m"
    "essages.geometry.v1.Vector3dR\005value\022F\n\nc"
    "ovariance\030\002 \001(\0132&.cavnue.messages.geomet"
    "ry.v1.Matrix33fR\ncovarianceb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto_deps[2] =
    {
        &::descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fvector_2eproto,
};
static ::absl::once_flag descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto = {
    false,
    false,
    635,
    descriptor_table_protodef_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto,
    "cavnue/messages/geometry/v1/covariance.proto",
    &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto_once,
    descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto_deps,
    2,
    3,
    schemas,
    file_default_instances,
    TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto::offsets,
    file_level_metadata_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto,
    file_level_enum_descriptors_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto,
    file_level_service_descriptors_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto_getter() {
  return &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto(&descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto);
namespace cavnue {
namespace messages {
namespace geometry {
namespace v1 {
// ===================================================================

class CovarianceVector2f::_Internal {
 public:
  using HasBits = decltype(std::declval<CovarianceVector2f>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CovarianceVector2f, _impl_._has_bits_);
  static const ::cavnue::messages::geometry::v1::Vector2f& value(const CovarianceVector2f* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cavnue::messages::geometry::v1::Matrix22f& covariance(const CovarianceVector2f* msg);
  static void set_has_covariance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::cavnue::messages::geometry::v1::Vector2f&
CovarianceVector2f::_Internal::value(const CovarianceVector2f* msg) {
  return *msg->_impl_.value_;
}
const ::cavnue::messages::geometry::v1::Matrix22f&
CovarianceVector2f::_Internal::covariance(const CovarianceVector2f* msg) {
  return *msg->_impl_.covariance_;
}
void CovarianceVector2f::clear_value() {
  if (_impl_.value_ != nullptr) _impl_.value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CovarianceVector2f::clear_covariance() {
  if (_impl_.covariance_ != nullptr) _impl_.covariance_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CovarianceVector2f::CovarianceVector2f(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.geometry.v1.CovarianceVector2f)
}
CovarianceVector2f::CovarianceVector2f(const CovarianceVector2f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CovarianceVector2f* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.covariance_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.value_ = new ::cavnue::messages::geometry::v1::Vector2f(*from._impl_.value_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.covariance_ = new ::cavnue::messages::geometry::v1::Matrix22f(*from._impl_.covariance_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.geometry.v1.CovarianceVector2f)
}

inline void CovarianceVector2f::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.covariance_){nullptr}
  };
}

CovarianceVector2f::~CovarianceVector2f() {
  // @@protoc_insertion_point(destructor:cavnue.messages.geometry.v1.CovarianceVector2f)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CovarianceVector2f::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.value_;
  if (this != internal_default_instance()) delete _impl_.covariance_;
}

void CovarianceVector2f::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CovarianceVector2f::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.geometry.v1.CovarianceVector2f)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.value_ != nullptr);
      _impl_.value_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.covariance_ != nullptr);
      _impl_.covariance_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CovarianceVector2f::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.geometry.v1.Vector2f value = 1 [json_name = "value"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.geometry.v1.Matrix22f covariance = 2 [json_name = "covariance"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_covariance(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CovarianceVector2f::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.geometry.v1.CovarianceVector2f)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.geometry.v1.Vector2f value = 1 [json_name = "value"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.geometry.v1.Matrix22f covariance = 2 [json_name = "covariance"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::covariance(this),
        _Internal::covariance(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.geometry.v1.CovarianceVector2f)
  return target;
}

::size_t CovarianceVector2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.geometry.v1.CovarianceVector2f)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .cavnue.messages.geometry.v1.Vector2f value = 1 [json_name = "value"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_);
    }

    // .cavnue.messages.geometry.v1.Matrix22f covariance = 2 [json_name = "covariance"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.covariance_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CovarianceVector2f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CovarianceVector2f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CovarianceVector2f::GetClassData() const { return &_class_data_; }


void CovarianceVector2f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CovarianceVector2f*>(&to_msg);
  auto& from = static_cast<const CovarianceVector2f&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.geometry.v1.CovarianceVector2f)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_value()->::cavnue::messages::geometry::v1::Vector2f::MergeFrom(
          from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_covariance()->::cavnue::messages::geometry::v1::Matrix22f::MergeFrom(
          from._internal_covariance());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CovarianceVector2f::CopyFrom(const CovarianceVector2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.geometry.v1.CovarianceVector2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CovarianceVector2f::IsInitialized() const {
  return true;
}

void CovarianceVector2f::InternalSwap(CovarianceVector2f* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CovarianceVector2f, _impl_.covariance_)
      + sizeof(CovarianceVector2f::_impl_.covariance_)
      - PROTOBUF_FIELD_OFFSET(CovarianceVector2f, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CovarianceVector2f::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto[0]);
}
// ===================================================================

class CovarianceVector3f::_Internal {
 public:
  using HasBits = decltype(std::declval<CovarianceVector3f>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CovarianceVector3f, _impl_._has_bits_);
  static const ::cavnue::messages::geometry::v1::Vector3f& value(const CovarianceVector3f* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cavnue::messages::geometry::v1::Matrix33f& covariance(const CovarianceVector3f* msg);
  static void set_has_covariance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::cavnue::messages::geometry::v1::Vector3f&
CovarianceVector3f::_Internal::value(const CovarianceVector3f* msg) {
  return *msg->_impl_.value_;
}
const ::cavnue::messages::geometry::v1::Matrix33f&
CovarianceVector3f::_Internal::covariance(const CovarianceVector3f* msg) {
  return *msg->_impl_.covariance_;
}
void CovarianceVector3f::clear_value() {
  if (_impl_.value_ != nullptr) _impl_.value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CovarianceVector3f::clear_covariance() {
  if (_impl_.covariance_ != nullptr) _impl_.covariance_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CovarianceVector3f::CovarianceVector3f(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.geometry.v1.CovarianceVector3f)
}
CovarianceVector3f::CovarianceVector3f(const CovarianceVector3f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CovarianceVector3f* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.covariance_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.value_ = new ::cavnue::messages::geometry::v1::Vector3f(*from._impl_.value_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.covariance_ = new ::cavnue::messages::geometry::v1::Matrix33f(*from._impl_.covariance_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.geometry.v1.CovarianceVector3f)
}

inline void CovarianceVector3f::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.covariance_){nullptr}
  };
}

CovarianceVector3f::~CovarianceVector3f() {
  // @@protoc_insertion_point(destructor:cavnue.messages.geometry.v1.CovarianceVector3f)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CovarianceVector3f::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.value_;
  if (this != internal_default_instance()) delete _impl_.covariance_;
}

void CovarianceVector3f::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CovarianceVector3f::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.geometry.v1.CovarianceVector3f)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.value_ != nullptr);
      _impl_.value_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.covariance_ != nullptr);
      _impl_.covariance_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CovarianceVector3f::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.geometry.v1.Vector3f value = 1 [json_name = "value"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.geometry.v1.Matrix33f covariance = 2 [json_name = "covariance"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_covariance(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CovarianceVector3f::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.geometry.v1.CovarianceVector3f)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.geometry.v1.Vector3f value = 1 [json_name = "value"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.geometry.v1.Matrix33f covariance = 2 [json_name = "covariance"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::covariance(this),
        _Internal::covariance(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.geometry.v1.CovarianceVector3f)
  return target;
}

::size_t CovarianceVector3f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.geometry.v1.CovarianceVector3f)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .cavnue.messages.geometry.v1.Vector3f value = 1 [json_name = "value"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_);
    }

    // .cavnue.messages.geometry.v1.Matrix33f covariance = 2 [json_name = "covariance"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.covariance_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CovarianceVector3f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CovarianceVector3f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CovarianceVector3f::GetClassData() const { return &_class_data_; }


void CovarianceVector3f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CovarianceVector3f*>(&to_msg);
  auto& from = static_cast<const CovarianceVector3f&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.geometry.v1.CovarianceVector3f)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_value()->::cavnue::messages::geometry::v1::Vector3f::MergeFrom(
          from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_covariance()->::cavnue::messages::geometry::v1::Matrix33f::MergeFrom(
          from._internal_covariance());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CovarianceVector3f::CopyFrom(const CovarianceVector3f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.geometry.v1.CovarianceVector3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CovarianceVector3f::IsInitialized() const {
  return true;
}

void CovarianceVector3f::InternalSwap(CovarianceVector3f* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CovarianceVector3f, _impl_.covariance_)
      + sizeof(CovarianceVector3f::_impl_.covariance_)
      - PROTOBUF_FIELD_OFFSET(CovarianceVector3f, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CovarianceVector3f::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto[1]);
}
// ===================================================================

class CovarianceVector3d::_Internal {
 public:
  using HasBits = decltype(std::declval<CovarianceVector3d>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CovarianceVector3d, _impl_._has_bits_);
  static const ::cavnue::messages::geometry::v1::Vector3d& value(const CovarianceVector3d* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cavnue::messages::geometry::v1::Matrix33f& covariance(const CovarianceVector3d* msg);
  static void set_has_covariance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::cavnue::messages::geometry::v1::Vector3d&
CovarianceVector3d::_Internal::value(const CovarianceVector3d* msg) {
  return *msg->_impl_.value_;
}
const ::cavnue::messages::geometry::v1::Matrix33f&
CovarianceVector3d::_Internal::covariance(const CovarianceVector3d* msg) {
  return *msg->_impl_.covariance_;
}
void CovarianceVector3d::clear_value() {
  if (_impl_.value_ != nullptr) _impl_.value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CovarianceVector3d::clear_covariance() {
  if (_impl_.covariance_ != nullptr) _impl_.covariance_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CovarianceVector3d::CovarianceVector3d(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.geometry.v1.CovarianceVector3d)
}
CovarianceVector3d::CovarianceVector3d(const CovarianceVector3d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CovarianceVector3d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.covariance_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.value_ = new ::cavnue::messages::geometry::v1::Vector3d(*from._impl_.value_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.covariance_ = new ::cavnue::messages::geometry::v1::Matrix33f(*from._impl_.covariance_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.geometry.v1.CovarianceVector3d)
}

inline void CovarianceVector3d::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.covariance_){nullptr}
  };
}

CovarianceVector3d::~CovarianceVector3d() {
  // @@protoc_insertion_point(destructor:cavnue.messages.geometry.v1.CovarianceVector3d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CovarianceVector3d::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.value_;
  if (this != internal_default_instance()) delete _impl_.covariance_;
}

void CovarianceVector3d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CovarianceVector3d::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.geometry.v1.CovarianceVector3d)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.value_ != nullptr);
      _impl_.value_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.covariance_ != nullptr);
      _impl_.covariance_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CovarianceVector3d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.geometry.v1.Vector3d value = 1 [json_name = "value"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.geometry.v1.Matrix33f covariance = 2 [json_name = "covariance"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_covariance(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CovarianceVector3d::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.geometry.v1.CovarianceVector3d)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.geometry.v1.Vector3d value = 1 [json_name = "value"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.geometry.v1.Matrix33f covariance = 2 [json_name = "covariance"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::covariance(this),
        _Internal::covariance(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.geometry.v1.CovarianceVector3d)
  return target;
}

::size_t CovarianceVector3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.geometry.v1.CovarianceVector3d)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .cavnue.messages.geometry.v1.Vector3d value = 1 [json_name = "value"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_);
    }

    // .cavnue.messages.geometry.v1.Matrix33f covariance = 2 [json_name = "covariance"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.covariance_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CovarianceVector3d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CovarianceVector3d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CovarianceVector3d::GetClassData() const { return &_class_data_; }


void CovarianceVector3d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CovarianceVector3d*>(&to_msg);
  auto& from = static_cast<const CovarianceVector3d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.geometry.v1.CovarianceVector3d)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_value()->::cavnue::messages::geometry::v1::Vector3d::MergeFrom(
          from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_covariance()->::cavnue::messages::geometry::v1::Matrix33f::MergeFrom(
          from._internal_covariance());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CovarianceVector3d::CopyFrom(const CovarianceVector3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.geometry.v1.CovarianceVector3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CovarianceVector3d::IsInitialized() const {
  return true;
}

void CovarianceVector3d::InternalSwap(CovarianceVector3d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CovarianceVector3d, _impl_.covariance_)
      + sizeof(CovarianceVector3d::_impl_.covariance_)
      - PROTOBUF_FIELD_OFFSET(CovarianceVector3d, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CovarianceVector3d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fgeometry_2fv1_2fcovariance_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace geometry
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cavnue::messages::geometry::v1::CovarianceVector2f*
Arena::CreateMaybeMessage< ::cavnue::messages::geometry::v1::CovarianceVector2f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::geometry::v1::CovarianceVector2f >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::geometry::v1::CovarianceVector3f*
Arena::CreateMaybeMessage< ::cavnue::messages::geometry::v1::CovarianceVector3f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::geometry::v1::CovarianceVector3f >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::geometry::v1::CovarianceVector3d*
Arena::CreateMaybeMessage< ::cavnue::messages::geometry::v1::CovarianceVector3d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::geometry::v1::CovarianceVector3d >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

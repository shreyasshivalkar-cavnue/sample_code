// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/geometry/v1/matrix.proto

#include "cavnue/messages/geometry/v1/matrix.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cavnue {
namespace messages {
namespace geometry {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR Matrix22f::Matrix22f(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.m_)*/ {}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Matrix22fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Matrix22fDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Matrix22fDefaultTypeInternal() {}
  union {
    Matrix22f _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Matrix22fDefaultTypeInternal _Matrix22f_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Matrix22d::Matrix22d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.m_)*/ {}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Matrix22dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Matrix22dDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Matrix22dDefaultTypeInternal() {}
  union {
    Matrix22d _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Matrix22dDefaultTypeInternal _Matrix22d_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Matrix33f::Matrix33f(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.m_)*/ {}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Matrix33fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Matrix33fDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Matrix33fDefaultTypeInternal() {}
  union {
    Matrix33f _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Matrix33fDefaultTypeInternal _Matrix33f_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Matrix33d::Matrix33d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.m_)*/ {}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Matrix33dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Matrix33dDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Matrix33dDefaultTypeInternal() {}
  union {
    Matrix33d _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Matrix33dDefaultTypeInternal _Matrix33d_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Matrix34f::Matrix34f(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.m_)*/ {}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Matrix34fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Matrix34fDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Matrix34fDefaultTypeInternal() {}
  union {
    Matrix34f _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Matrix34fDefaultTypeInternal _Matrix34f_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Matrix34d::Matrix34d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.m_)*/ {}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Matrix34dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Matrix34dDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Matrix34dDefaultTypeInternal() {}
  union {
    Matrix34d _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Matrix34dDefaultTypeInternal _Matrix34d_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Matrix44f::Matrix44f(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.m_)*/ {}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Matrix44fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Matrix44fDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Matrix44fDefaultTypeInternal() {}
  union {
    Matrix44f _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Matrix44fDefaultTypeInternal _Matrix44f_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Matrix44d::Matrix44d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.m_)*/ {}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Matrix44dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Matrix44dDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Matrix44dDefaultTypeInternal() {}
  union {
    Matrix44d _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Matrix44dDefaultTypeInternal _Matrix44d_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Matrixf::Matrixf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.m_)*/ {}

  , /*decltype(_impl_.rows_)*/ 0u

  , /*decltype(_impl_.cols_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MatrixfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatrixfDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatrixfDefaultTypeInternal() {}
  union {
    Matrixf _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatrixfDefaultTypeInternal _Matrixf_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Matrixd::Matrixd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.m_)*/ {}

  , /*decltype(_impl_.rows_)*/ 0u

  , /*decltype(_impl_.cols_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MatrixdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatrixdDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatrixdDefaultTypeInternal() {}
  union {
    Matrixd _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatrixdDefaultTypeInternal _Matrixd_default_instance_;
}  // namespace v1
}  // namespace geometry
}  // namespace messages
}  // namespace cavnue
static ::_pb::Metadata file_level_metadata_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto[10];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto = nullptr;
const ::uint32_t TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::Matrix22f, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::Matrix22f, _impl_.m_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::Matrix22d, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::Matrix22d, _impl_.m_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::Matrix33f, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::Matrix33f, _impl_.m_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::Matrix33d, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::Matrix33d, _impl_.m_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::Matrix34f, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::Matrix34f, _impl_.m_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::Matrix34d, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::Matrix34d, _impl_.m_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::Matrix44f, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::Matrix44f, _impl_.m_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::Matrix44d, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::Matrix44d, _impl_.m_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::Matrixf, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::Matrixf, _impl_.rows_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::Matrixf, _impl_.cols_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::Matrixf, _impl_.m_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::Matrixd, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::Matrixd, _impl_.rows_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::Matrixd, _impl_.cols_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::geometry::v1::Matrixd, _impl_.m_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::cavnue::messages::geometry::v1::Matrix22f)},
        { 9, -1, -1, sizeof(::cavnue::messages::geometry::v1::Matrix22d)},
        { 18, -1, -1, sizeof(::cavnue::messages::geometry::v1::Matrix33f)},
        { 27, -1, -1, sizeof(::cavnue::messages::geometry::v1::Matrix33d)},
        { 36, -1, -1, sizeof(::cavnue::messages::geometry::v1::Matrix34f)},
        { 45, -1, -1, sizeof(::cavnue::messages::geometry::v1::Matrix34d)},
        { 54, -1, -1, sizeof(::cavnue::messages::geometry::v1::Matrix44f)},
        { 63, -1, -1, sizeof(::cavnue::messages::geometry::v1::Matrix44d)},
        { 72, -1, -1, sizeof(::cavnue::messages::geometry::v1::Matrixf)},
        { 83, -1, -1, sizeof(::cavnue::messages::geometry::v1::Matrixd)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cavnue::messages::geometry::v1::_Matrix22f_default_instance_._instance,
    &::cavnue::messages::geometry::v1::_Matrix22d_default_instance_._instance,
    &::cavnue::messages::geometry::v1::_Matrix33f_default_instance_._instance,
    &::cavnue::messages::geometry::v1::_Matrix33d_default_instance_._instance,
    &::cavnue::messages::geometry::v1::_Matrix34f_default_instance_._instance,
    &::cavnue::messages::geometry::v1::_Matrix34d_default_instance_._instance,
    &::cavnue::messages::geometry::v1::_Matrix44f_default_instance_._instance,
    &::cavnue::messages::geometry::v1::_Matrix44d_default_instance_._instance,
    &::cavnue::messages::geometry::v1::_Matrixf_default_instance_._instance,
    &::cavnue::messages::geometry::v1::_Matrixd_default_instance_._instance,
};
const char descriptor_table_protodef_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n(cavnue/messages/geometry/v1/matrix.pro"
    "to\022\033cavnue.messages.geometry.v1\032-cavnue/"
    "messages/common/v1/field_options.proto\"%"
    "\n\tMatrix22f\022\030\n\001m\030\001 \003(\002B\n\020\001\210\342\t\002\220\342\t\002R\001m\"%\n"
    "\tMatrix22d\022\030\n\001m\030\001 \003(\001B\n\020\001\210\342\t\002\220\342\t\002R\001m\"%\n\t"
    "Matrix33f\022\030\n\001m\030\001 \003(\002B\n\020\001\210\342\t\003\220\342\t\003R\001m\"%\n\tM"
    "atrix33d\022\030\n\001m\030\001 \003(\001B\n\020\001\210\342\t\003\220\342\t\003R\001m\"%\n\tMa"
    "trix34f\022\030\n\001m\030\001 \003(\002B\n\020\001\210\342\t\003\220\342\t\004R\001m\"%\n\tMat"
    "rix34d\022\030\n\001m\030\001 \003(\001B\n\020\001\210\342\t\003\220\342\t\004R\001m\"%\n\tMatr"
    "ix44f\022\030\n\001m\030\001 \003(\002B\n\020\001\210\342\t\004\220\342\t\004R\001m\"%\n\tMatri"
    "x44d\022\030\n\001m\030\001 \003(\001B\n\020\001\210\342\t\004\220\342\t\004R\001m\"C\n\007Matrix"
    "f\022\022\n\004rows\030\001 \001(\rR\004rows\022\022\n\004cols\030\002 \001(\rR\004col"
    "s\022\020\n\001m\030\003 \003(\002B\002\020\001R\001m\"C\n\007Matrixd\022\022\n\004rows\030\001"
    " \001(\rR\004rows\022\022\n\004cols\030\002 \001(\rR\004cols\022\020\n\001m\030\003 \003("
    "\001B\002\020\001R\001mb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto_deps[1] =
    {
        &::descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2ffield_5foptions_2eproto,
};
static ::absl::once_flag descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto = {
    false,
    false,
    576,
    descriptor_table_protodef_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto,
    "cavnue/messages/geometry/v1/matrix.proto",
    &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto_once,
    descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto_deps,
    1,
    10,
    schemas,
    file_default_instances,
    TableStruct_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto::offsets,
    file_level_metadata_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto,
    file_level_enum_descriptors_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto,
    file_level_service_descriptors_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto_getter() {
  return &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto(&descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto);
namespace cavnue {
namespace messages {
namespace geometry {
namespace v1 {
// ===================================================================

class Matrix22f::_Internal {
 public:
};

Matrix22f::Matrix22f(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.geometry.v1.Matrix22f)
}
Matrix22f::Matrix22f(const Matrix22f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Matrix22f* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.m_) { from._impl_.m_ }

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.geometry.v1.Matrix22f)
}

inline void Matrix22f::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.m_) { arena }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Matrix22f::~Matrix22f() {
  // @@protoc_insertion_point(destructor:cavnue.messages.geometry.v1.Matrix22f)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Matrix22f::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_.~RepeatedField();
}

void Matrix22f::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Matrix22f::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.geometry.v1.Matrix22f)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_m()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Matrix22f::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float m = 1 [json_name = "m", packed = true, (.cavnue.messages.common.v1.rows) = 2, (.cavnue.messages.common.v1.cols) = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_m(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 13) {
          _internal_add_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Matrix22f::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.geometry.v1.Matrix22f)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float m = 1 [json_name = "m", packed = true, (.cavnue.messages.common.v1.rows) = 2, (.cavnue.messages.common.v1.cols) = 2];
  if (this->_internal_m_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.geometry.v1.Matrix22f)
  return target;
}

::size_t Matrix22f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.geometry.v1.Matrix22f)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float m = 1 [json_name = "m", packed = true, (.cavnue.messages.common.v1.rows) = 2, (.cavnue.messages.common.v1.cols) = 2];
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_m_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Matrix22f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Matrix22f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Matrix22f::GetClassData() const { return &_class_data_; }


void Matrix22f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Matrix22f*>(&to_msg);
  auto& from = static_cast<const Matrix22f&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.geometry.v1.Matrix22f)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_.MergeFrom(from._impl_.m_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Matrix22f::CopyFrom(const Matrix22f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.geometry.v1.Matrix22f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix22f::IsInitialized() const {
  return true;
}

void Matrix22f::InternalSwap(Matrix22f* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.m_.InternalSwap(&other->_impl_.m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrix22f::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto[0]);
}
// ===================================================================

class Matrix22d::_Internal {
 public:
};

Matrix22d::Matrix22d(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.geometry.v1.Matrix22d)
}
Matrix22d::Matrix22d(const Matrix22d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Matrix22d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.m_) { from._impl_.m_ }

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.geometry.v1.Matrix22d)
}

inline void Matrix22d::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.m_) { arena }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Matrix22d::~Matrix22d() {
  // @@protoc_insertion_point(destructor:cavnue.messages.geometry.v1.Matrix22d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Matrix22d::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_.~RepeatedField();
}

void Matrix22d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Matrix22d::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.geometry.v1.Matrix22d)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_m()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Matrix22d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double m = 1 [json_name = "m", packed = true, (.cavnue.messages.common.v1.rows) = 2, (.cavnue.messages.common.v1.cols) = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_m(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 9) {
          _internal_add_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Matrix22d::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.geometry.v1.Matrix22d)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double m = 1 [json_name = "m", packed = true, (.cavnue.messages.common.v1.rows) = 2, (.cavnue.messages.common.v1.cols) = 2];
  if (this->_internal_m_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.geometry.v1.Matrix22d)
  return target;
}

::size_t Matrix22d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.geometry.v1.Matrix22d)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double m = 1 [json_name = "m", packed = true, (.cavnue.messages.common.v1.rows) = 2, (.cavnue.messages.common.v1.cols) = 2];
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_m_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Matrix22d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Matrix22d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Matrix22d::GetClassData() const { return &_class_data_; }


void Matrix22d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Matrix22d*>(&to_msg);
  auto& from = static_cast<const Matrix22d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.geometry.v1.Matrix22d)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_.MergeFrom(from._impl_.m_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Matrix22d::CopyFrom(const Matrix22d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.geometry.v1.Matrix22d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix22d::IsInitialized() const {
  return true;
}

void Matrix22d::InternalSwap(Matrix22d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.m_.InternalSwap(&other->_impl_.m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrix22d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto[1]);
}
// ===================================================================

class Matrix33f::_Internal {
 public:
};

Matrix33f::Matrix33f(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.geometry.v1.Matrix33f)
}
Matrix33f::Matrix33f(const Matrix33f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Matrix33f* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.m_) { from._impl_.m_ }

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.geometry.v1.Matrix33f)
}

inline void Matrix33f::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.m_) { arena }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Matrix33f::~Matrix33f() {
  // @@protoc_insertion_point(destructor:cavnue.messages.geometry.v1.Matrix33f)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Matrix33f::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_.~RepeatedField();
}

void Matrix33f::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Matrix33f::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.geometry.v1.Matrix33f)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_m()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Matrix33f::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float m = 1 [json_name = "m", packed = true, (.cavnue.messages.common.v1.rows) = 3, (.cavnue.messages.common.v1.cols) = 3];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_m(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 13) {
          _internal_add_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Matrix33f::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.geometry.v1.Matrix33f)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float m = 1 [json_name = "m", packed = true, (.cavnue.messages.common.v1.rows) = 3, (.cavnue.messages.common.v1.cols) = 3];
  if (this->_internal_m_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.geometry.v1.Matrix33f)
  return target;
}

::size_t Matrix33f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.geometry.v1.Matrix33f)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float m = 1 [json_name = "m", packed = true, (.cavnue.messages.common.v1.rows) = 3, (.cavnue.messages.common.v1.cols) = 3];
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_m_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Matrix33f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Matrix33f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Matrix33f::GetClassData() const { return &_class_data_; }


void Matrix33f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Matrix33f*>(&to_msg);
  auto& from = static_cast<const Matrix33f&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.geometry.v1.Matrix33f)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_.MergeFrom(from._impl_.m_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Matrix33f::CopyFrom(const Matrix33f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.geometry.v1.Matrix33f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix33f::IsInitialized() const {
  return true;
}

void Matrix33f::InternalSwap(Matrix33f* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.m_.InternalSwap(&other->_impl_.m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrix33f::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto[2]);
}
// ===================================================================

class Matrix33d::_Internal {
 public:
};

Matrix33d::Matrix33d(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.geometry.v1.Matrix33d)
}
Matrix33d::Matrix33d(const Matrix33d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Matrix33d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.m_) { from._impl_.m_ }

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.geometry.v1.Matrix33d)
}

inline void Matrix33d::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.m_) { arena }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Matrix33d::~Matrix33d() {
  // @@protoc_insertion_point(destructor:cavnue.messages.geometry.v1.Matrix33d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Matrix33d::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_.~RepeatedField();
}

void Matrix33d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Matrix33d::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.geometry.v1.Matrix33d)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_m()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Matrix33d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double m = 1 [json_name = "m", packed = true, (.cavnue.messages.common.v1.rows) = 3, (.cavnue.messages.common.v1.cols) = 3];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_m(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 9) {
          _internal_add_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Matrix33d::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.geometry.v1.Matrix33d)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double m = 1 [json_name = "m", packed = true, (.cavnue.messages.common.v1.rows) = 3, (.cavnue.messages.common.v1.cols) = 3];
  if (this->_internal_m_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.geometry.v1.Matrix33d)
  return target;
}

::size_t Matrix33d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.geometry.v1.Matrix33d)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double m = 1 [json_name = "m", packed = true, (.cavnue.messages.common.v1.rows) = 3, (.cavnue.messages.common.v1.cols) = 3];
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_m_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Matrix33d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Matrix33d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Matrix33d::GetClassData() const { return &_class_data_; }


void Matrix33d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Matrix33d*>(&to_msg);
  auto& from = static_cast<const Matrix33d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.geometry.v1.Matrix33d)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_.MergeFrom(from._impl_.m_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Matrix33d::CopyFrom(const Matrix33d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.geometry.v1.Matrix33d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix33d::IsInitialized() const {
  return true;
}

void Matrix33d::InternalSwap(Matrix33d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.m_.InternalSwap(&other->_impl_.m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrix33d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto[3]);
}
// ===================================================================

class Matrix34f::_Internal {
 public:
};

Matrix34f::Matrix34f(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.geometry.v1.Matrix34f)
}
Matrix34f::Matrix34f(const Matrix34f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Matrix34f* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.m_) { from._impl_.m_ }

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.geometry.v1.Matrix34f)
}

inline void Matrix34f::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.m_) { arena }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Matrix34f::~Matrix34f() {
  // @@protoc_insertion_point(destructor:cavnue.messages.geometry.v1.Matrix34f)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Matrix34f::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_.~RepeatedField();
}

void Matrix34f::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Matrix34f::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.geometry.v1.Matrix34f)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_m()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Matrix34f::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float m = 1 [json_name = "m", packed = true, (.cavnue.messages.common.v1.rows) = 3, (.cavnue.messages.common.v1.cols) = 4];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_m(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 13) {
          _internal_add_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Matrix34f::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.geometry.v1.Matrix34f)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float m = 1 [json_name = "m", packed = true, (.cavnue.messages.common.v1.rows) = 3, (.cavnue.messages.common.v1.cols) = 4];
  if (this->_internal_m_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.geometry.v1.Matrix34f)
  return target;
}

::size_t Matrix34f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.geometry.v1.Matrix34f)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float m = 1 [json_name = "m", packed = true, (.cavnue.messages.common.v1.rows) = 3, (.cavnue.messages.common.v1.cols) = 4];
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_m_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Matrix34f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Matrix34f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Matrix34f::GetClassData() const { return &_class_data_; }


void Matrix34f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Matrix34f*>(&to_msg);
  auto& from = static_cast<const Matrix34f&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.geometry.v1.Matrix34f)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_.MergeFrom(from._impl_.m_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Matrix34f::CopyFrom(const Matrix34f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.geometry.v1.Matrix34f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix34f::IsInitialized() const {
  return true;
}

void Matrix34f::InternalSwap(Matrix34f* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.m_.InternalSwap(&other->_impl_.m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrix34f::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto[4]);
}
// ===================================================================

class Matrix34d::_Internal {
 public:
};

Matrix34d::Matrix34d(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.geometry.v1.Matrix34d)
}
Matrix34d::Matrix34d(const Matrix34d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Matrix34d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.m_) { from._impl_.m_ }

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.geometry.v1.Matrix34d)
}

inline void Matrix34d::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.m_) { arena }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Matrix34d::~Matrix34d() {
  // @@protoc_insertion_point(destructor:cavnue.messages.geometry.v1.Matrix34d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Matrix34d::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_.~RepeatedField();
}

void Matrix34d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Matrix34d::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.geometry.v1.Matrix34d)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_m()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Matrix34d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double m = 1 [json_name = "m", packed = true, (.cavnue.messages.common.v1.rows) = 3, (.cavnue.messages.common.v1.cols) = 4];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_m(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 9) {
          _internal_add_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Matrix34d::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.geometry.v1.Matrix34d)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double m = 1 [json_name = "m", packed = true, (.cavnue.messages.common.v1.rows) = 3, (.cavnue.messages.common.v1.cols) = 4];
  if (this->_internal_m_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.geometry.v1.Matrix34d)
  return target;
}

::size_t Matrix34d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.geometry.v1.Matrix34d)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double m = 1 [json_name = "m", packed = true, (.cavnue.messages.common.v1.rows) = 3, (.cavnue.messages.common.v1.cols) = 4];
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_m_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Matrix34d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Matrix34d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Matrix34d::GetClassData() const { return &_class_data_; }


void Matrix34d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Matrix34d*>(&to_msg);
  auto& from = static_cast<const Matrix34d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.geometry.v1.Matrix34d)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_.MergeFrom(from._impl_.m_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Matrix34d::CopyFrom(const Matrix34d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.geometry.v1.Matrix34d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix34d::IsInitialized() const {
  return true;
}

void Matrix34d::InternalSwap(Matrix34d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.m_.InternalSwap(&other->_impl_.m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrix34d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto[5]);
}
// ===================================================================

class Matrix44f::_Internal {
 public:
};

Matrix44f::Matrix44f(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.geometry.v1.Matrix44f)
}
Matrix44f::Matrix44f(const Matrix44f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Matrix44f* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.m_) { from._impl_.m_ }

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.geometry.v1.Matrix44f)
}

inline void Matrix44f::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.m_) { arena }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Matrix44f::~Matrix44f() {
  // @@protoc_insertion_point(destructor:cavnue.messages.geometry.v1.Matrix44f)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Matrix44f::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_.~RepeatedField();
}

void Matrix44f::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Matrix44f::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.geometry.v1.Matrix44f)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_m()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Matrix44f::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float m = 1 [json_name = "m", packed = true, (.cavnue.messages.common.v1.rows) = 4, (.cavnue.messages.common.v1.cols) = 4];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_m(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 13) {
          _internal_add_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Matrix44f::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.geometry.v1.Matrix44f)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float m = 1 [json_name = "m", packed = true, (.cavnue.messages.common.v1.rows) = 4, (.cavnue.messages.common.v1.cols) = 4];
  if (this->_internal_m_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.geometry.v1.Matrix44f)
  return target;
}

::size_t Matrix44f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.geometry.v1.Matrix44f)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float m = 1 [json_name = "m", packed = true, (.cavnue.messages.common.v1.rows) = 4, (.cavnue.messages.common.v1.cols) = 4];
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_m_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Matrix44f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Matrix44f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Matrix44f::GetClassData() const { return &_class_data_; }


void Matrix44f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Matrix44f*>(&to_msg);
  auto& from = static_cast<const Matrix44f&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.geometry.v1.Matrix44f)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_.MergeFrom(from._impl_.m_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Matrix44f::CopyFrom(const Matrix44f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.geometry.v1.Matrix44f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix44f::IsInitialized() const {
  return true;
}

void Matrix44f::InternalSwap(Matrix44f* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.m_.InternalSwap(&other->_impl_.m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrix44f::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto[6]);
}
// ===================================================================

class Matrix44d::_Internal {
 public:
};

Matrix44d::Matrix44d(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.geometry.v1.Matrix44d)
}
Matrix44d::Matrix44d(const Matrix44d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Matrix44d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.m_) { from._impl_.m_ }

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.geometry.v1.Matrix44d)
}

inline void Matrix44d::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.m_) { arena }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Matrix44d::~Matrix44d() {
  // @@protoc_insertion_point(destructor:cavnue.messages.geometry.v1.Matrix44d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Matrix44d::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_.~RepeatedField();
}

void Matrix44d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Matrix44d::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.geometry.v1.Matrix44d)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_m()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Matrix44d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double m = 1 [json_name = "m", packed = true, (.cavnue.messages.common.v1.rows) = 4, (.cavnue.messages.common.v1.cols) = 4];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_m(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 9) {
          _internal_add_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Matrix44d::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.geometry.v1.Matrix44d)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double m = 1 [json_name = "m", packed = true, (.cavnue.messages.common.v1.rows) = 4, (.cavnue.messages.common.v1.cols) = 4];
  if (this->_internal_m_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.geometry.v1.Matrix44d)
  return target;
}

::size_t Matrix44d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.geometry.v1.Matrix44d)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double m = 1 [json_name = "m", packed = true, (.cavnue.messages.common.v1.rows) = 4, (.cavnue.messages.common.v1.cols) = 4];
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_m_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Matrix44d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Matrix44d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Matrix44d::GetClassData() const { return &_class_data_; }


void Matrix44d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Matrix44d*>(&to_msg);
  auto& from = static_cast<const Matrix44d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.geometry.v1.Matrix44d)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_.MergeFrom(from._impl_.m_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Matrix44d::CopyFrom(const Matrix44d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.geometry.v1.Matrix44d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix44d::IsInitialized() const {
  return true;
}

void Matrix44d::InternalSwap(Matrix44d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.m_.InternalSwap(&other->_impl_.m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrix44d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto[7]);
}
// ===================================================================

class Matrixf::_Internal {
 public:
};

Matrixf::Matrixf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.geometry.v1.Matrixf)
}
Matrixf::Matrixf(const Matrixf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Matrixf* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.m_) { from._impl_.m_ }

    , decltype(_impl_.rows_) {}

    , decltype(_impl_.cols_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.rows_, &from._impl_.rows_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.cols_) -
    reinterpret_cast<char*>(&_impl_.rows_)) + sizeof(_impl_.cols_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.geometry.v1.Matrixf)
}

inline void Matrixf::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.m_) { arena }

    , decltype(_impl_.rows_) { 0u }

    , decltype(_impl_.cols_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Matrixf::~Matrixf() {
  // @@protoc_insertion_point(destructor:cavnue.messages.geometry.v1.Matrixf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Matrixf::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_.~RepeatedField();
}

void Matrixf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Matrixf::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.geometry.v1.Matrixf)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_m()->Clear();
  ::memset(&_impl_.rows_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.cols_) -
      reinterpret_cast<char*>(&_impl_.rows_)) + sizeof(_impl_.cols_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Matrixf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 rows = 1 [json_name = "rows"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 cols = 2 [json_name = "cols"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.cols_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated float m = 3 [json_name = "m", packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_m(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 29) {
          _internal_add_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Matrixf::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.geometry.v1.Matrixf)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rows = 1 [json_name = "rows"];
  if (this->_internal_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_rows(), target);
  }

  // uint32 cols = 2 [json_name = "cols"];
  if (this->_internal_cols() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_cols(), target);
  }

  // repeated float m = 3 [json_name = "m", packed = true];
  if (this->_internal_m_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.geometry.v1.Matrixf)
  return target;
}

::size_t Matrixf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.geometry.v1.Matrixf)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float m = 3 [json_name = "m", packed = true];
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_m_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // uint32 rows = 1 [json_name = "rows"];
  if (this->_internal_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_rows());
  }

  // uint32 cols = 2 [json_name = "cols"];
  if (this->_internal_cols() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_cols());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Matrixf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Matrixf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Matrixf::GetClassData() const { return &_class_data_; }


void Matrixf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Matrixf*>(&to_msg);
  auto& from = static_cast<const Matrixf&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.geometry.v1.Matrixf)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_.MergeFrom(from._impl_.m_);
  if (from._internal_rows() != 0) {
    _this->_internal_set_rows(from._internal_rows());
  }
  if (from._internal_cols() != 0) {
    _this->_internal_set_cols(from._internal_cols());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Matrixf::CopyFrom(const Matrixf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.geometry.v1.Matrixf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrixf::IsInitialized() const {
  return true;
}

void Matrixf::InternalSwap(Matrixf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.m_.InternalSwap(&other->_impl_.m_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Matrixf, _impl_.cols_)
      + sizeof(Matrixf::_impl_.cols_)
      - PROTOBUF_FIELD_OFFSET(Matrixf, _impl_.rows_)>(
          reinterpret_cast<char*>(&_impl_.rows_),
          reinterpret_cast<char*>(&other->_impl_.rows_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrixf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto[8]);
}
// ===================================================================

class Matrixd::_Internal {
 public:
};

Matrixd::Matrixd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.geometry.v1.Matrixd)
}
Matrixd::Matrixd(const Matrixd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Matrixd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.m_) { from._impl_.m_ }

    , decltype(_impl_.rows_) {}

    , decltype(_impl_.cols_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.rows_, &from._impl_.rows_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.cols_) -
    reinterpret_cast<char*>(&_impl_.rows_)) + sizeof(_impl_.cols_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.geometry.v1.Matrixd)
}

inline void Matrixd::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.m_) { arena }

    , decltype(_impl_.rows_) { 0u }

    , decltype(_impl_.cols_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Matrixd::~Matrixd() {
  // @@protoc_insertion_point(destructor:cavnue.messages.geometry.v1.Matrixd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Matrixd::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_.~RepeatedField();
}

void Matrixd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Matrixd::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.geometry.v1.Matrixd)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_m()->Clear();
  ::memset(&_impl_.rows_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.cols_) -
      reinterpret_cast<char*>(&_impl_.rows_)) + sizeof(_impl_.cols_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Matrixd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 rows = 1 [json_name = "rows"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 cols = 2 [json_name = "cols"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.cols_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated double m = 3 [json_name = "m", packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_m(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 25) {
          _internal_add_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Matrixd::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.geometry.v1.Matrixd)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rows = 1 [json_name = "rows"];
  if (this->_internal_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_rows(), target);
  }

  // uint32 cols = 2 [json_name = "cols"];
  if (this->_internal_cols() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_cols(), target);
  }

  // repeated double m = 3 [json_name = "m", packed = true];
  if (this->_internal_m_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.geometry.v1.Matrixd)
  return target;
}

::size_t Matrixd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.geometry.v1.Matrixd)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double m = 3 [json_name = "m", packed = true];
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_m_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // uint32 rows = 1 [json_name = "rows"];
  if (this->_internal_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_rows());
  }

  // uint32 cols = 2 [json_name = "cols"];
  if (this->_internal_cols() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_cols());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Matrixd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Matrixd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Matrixd::GetClassData() const { return &_class_data_; }


void Matrixd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Matrixd*>(&to_msg);
  auto& from = static_cast<const Matrixd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.geometry.v1.Matrixd)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_.MergeFrom(from._impl_.m_);
  if (from._internal_rows() != 0) {
    _this->_internal_set_rows(from._internal_rows());
  }
  if (from._internal_cols() != 0) {
    _this->_internal_set_cols(from._internal_cols());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Matrixd::CopyFrom(const Matrixd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.geometry.v1.Matrixd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrixd::IsInitialized() const {
  return true;
}

void Matrixd::InternalSwap(Matrixd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.m_.InternalSwap(&other->_impl_.m_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Matrixd, _impl_.cols_)
      + sizeof(Matrixd::_impl_.cols_)
      - PROTOBUF_FIELD_OFFSET(Matrixd, _impl_.rows_)>(
          reinterpret_cast<char*>(&_impl_.rows_),
          reinterpret_cast<char*>(&other->_impl_.rows_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrixd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto[9]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace geometry
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cavnue::messages::geometry::v1::Matrix22f*
Arena::CreateMaybeMessage< ::cavnue::messages::geometry::v1::Matrix22f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::geometry::v1::Matrix22f >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::geometry::v1::Matrix22d*
Arena::CreateMaybeMessage< ::cavnue::messages::geometry::v1::Matrix22d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::geometry::v1::Matrix22d >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::geometry::v1::Matrix33f*
Arena::CreateMaybeMessage< ::cavnue::messages::geometry::v1::Matrix33f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::geometry::v1::Matrix33f >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::geometry::v1::Matrix33d*
Arena::CreateMaybeMessage< ::cavnue::messages::geometry::v1::Matrix33d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::geometry::v1::Matrix33d >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::geometry::v1::Matrix34f*
Arena::CreateMaybeMessage< ::cavnue::messages::geometry::v1::Matrix34f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::geometry::v1::Matrix34f >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::geometry::v1::Matrix34d*
Arena::CreateMaybeMessage< ::cavnue::messages::geometry::v1::Matrix34d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::geometry::v1::Matrix34d >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::geometry::v1::Matrix44f*
Arena::CreateMaybeMessage< ::cavnue::messages::geometry::v1::Matrix44f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::geometry::v1::Matrix44f >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::geometry::v1::Matrix44d*
Arena::CreateMaybeMessage< ::cavnue::messages::geometry::v1::Matrix44d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::geometry::v1::Matrix44d >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::geometry::v1::Matrixf*
Arena::CreateMaybeMessage< ::cavnue::messages::geometry::v1::Matrixf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::geometry::v1::Matrixf >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::geometry::v1::Matrixd*
Arena::CreateMaybeMessage< ::cavnue::messages::geometry::v1::Matrixd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::geometry::v1::Matrixd >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

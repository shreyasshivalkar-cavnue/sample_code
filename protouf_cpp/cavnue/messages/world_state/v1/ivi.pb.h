// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/world_state/v1/ivi.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
#include "google/protobuf/field_mask.pb.h"
#include "cavnue/messages/inference/v1/actor.pb.h"
#include "cavnue/messages/spatial/v1/wgs84.pb.h"
#include "cavnue/third_party/bq/v1/bq_field.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto;
namespace cavnue {
namespace messages {
namespace world_state {
namespace v1 {
class ActorEvent;
struct ActorEventDefaultTypeInternal;
extern ActorEventDefaultTypeInternal _ActorEvent_default_instance_;
class GetActorEventsRequest;
struct GetActorEventsRequestDefaultTypeInternal;
extern GetActorEventsRequestDefaultTypeInternal _GetActorEventsRequest_default_instance_;
class GetActorEventsResponse;
struct GetActorEventsResponseDefaultTypeInternal;
extern GetActorEventsResponseDefaultTypeInternal _GetActorEventsResponse_default_instance_;
}  // namespace v1
}  // namespace world_state
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template <>
::cavnue::messages::world_state::v1::ActorEvent* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::ActorEvent>(Arena*);
template <>
::cavnue::messages::world_state::v1::GetActorEventsRequest* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::GetActorEventsRequest>(Arena*);
template <>
::cavnue::messages::world_state::v1::GetActorEventsResponse* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::GetActorEventsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cavnue {
namespace messages {
namespace world_state {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class ActorEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.ActorEvent) */ {
 public:
  inline ActorEvent() : ActorEvent(nullptr) {}
  ~ActorEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ActorEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActorEvent(const ActorEvent& from);
  ActorEvent(ActorEvent&& from) noexcept
    : ActorEvent() {
    *this = ::std::move(from);
  }

  inline ActorEvent& operator=(const ActorEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActorEvent& operator=(ActorEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActorEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActorEvent* internal_default_instance() {
    return reinterpret_cast<const ActorEvent*>(
               &_ActorEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ActorEvent& a, ActorEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ActorEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActorEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActorEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActorEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActorEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ActorEvent& from) {
    ActorEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActorEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.ActorEvent";
  }
  protected:
  explicit ActorEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorFieldNumber = 1,
    kWgs84PositionFieldNumber = 2,
  };
  // .cavnue.messages.inference.v1.Actor actor = 1 [json_name = "actor"];
  bool has_actor() const;
  void clear_actor() ;
  const ::cavnue::messages::inference::v1::Actor& actor() const;
  PROTOBUF_NODISCARD ::cavnue::messages::inference::v1::Actor* release_actor();
  ::cavnue::messages::inference::v1::Actor* mutable_actor();
  void set_allocated_actor(::cavnue::messages::inference::v1::Actor* actor);
  private:
  const ::cavnue::messages::inference::v1::Actor& _internal_actor() const;
  ::cavnue::messages::inference::v1::Actor* _internal_mutable_actor();
  public:
  void unsafe_arena_set_allocated_actor(
      ::cavnue::messages::inference::v1::Actor* actor);
  ::cavnue::messages::inference::v1::Actor* unsafe_arena_release_actor();
  // .cavnue.messages.spatial.v1.WGS84 wgs84_position = 2 [json_name = "wgs84Position"];
  bool has_wgs84_position() const;
  void clear_wgs84_position() ;
  const ::cavnue::messages::spatial::v1::WGS84& wgs84_position() const;
  PROTOBUF_NODISCARD ::cavnue::messages::spatial::v1::WGS84* release_wgs84_position();
  ::cavnue::messages::spatial::v1::WGS84* mutable_wgs84_position();
  void set_allocated_wgs84_position(::cavnue::messages::spatial::v1::WGS84* wgs84_position);
  private:
  const ::cavnue::messages::spatial::v1::WGS84& _internal_wgs84_position() const;
  ::cavnue::messages::spatial::v1::WGS84* _internal_mutable_wgs84_position();
  public:
  void unsafe_arena_set_allocated_wgs84_position(
      ::cavnue::messages::spatial::v1::WGS84* wgs84_position);
  ::cavnue::messages::spatial::v1::WGS84* unsafe_arena_release_wgs84_position();
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.ActorEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::inference::v1::Actor* actor_;
    ::cavnue::messages::spatial::v1::WGS84* wgs84_position_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto;
};// -------------------------------------------------------------------

class GetActorEventsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.GetActorEventsRequest) */ {
 public:
  inline GetActorEventsRequest() : GetActorEventsRequest(nullptr) {}
  ~GetActorEventsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetActorEventsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetActorEventsRequest(const GetActorEventsRequest& from);
  GetActorEventsRequest(GetActorEventsRequest&& from) noexcept
    : GetActorEventsRequest() {
    *this = ::std::move(from);
  }

  inline GetActorEventsRequest& operator=(const GetActorEventsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetActorEventsRequest& operator=(GetActorEventsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetActorEventsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetActorEventsRequest* internal_default_instance() {
    return reinterpret_cast<const GetActorEventsRequest*>(
               &_GetActorEventsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetActorEventsRequest& a, GetActorEventsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetActorEventsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetActorEventsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetActorEventsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetActorEventsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetActorEventsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetActorEventsRequest& from) {
    GetActorEventsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetActorEventsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.GetActorEventsRequest";
  }
  protected:
  explicit GetActorEventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWgs84PositionFieldNumber = 1,
  };
  // .cavnue.messages.spatial.v1.WGS84 wgs84_position = 1 [json_name = "wgs84Position"];
  bool has_wgs84_position() const;
  void clear_wgs84_position() ;
  const ::cavnue::messages::spatial::v1::WGS84& wgs84_position() const;
  PROTOBUF_NODISCARD ::cavnue::messages::spatial::v1::WGS84* release_wgs84_position();
  ::cavnue::messages::spatial::v1::WGS84* mutable_wgs84_position();
  void set_allocated_wgs84_position(::cavnue::messages::spatial::v1::WGS84* wgs84_position);
  private:
  const ::cavnue::messages::spatial::v1::WGS84& _internal_wgs84_position() const;
  ::cavnue::messages::spatial::v1::WGS84* _internal_mutable_wgs84_position();
  public:
  void unsafe_arena_set_allocated_wgs84_position(
      ::cavnue::messages::spatial::v1::WGS84* wgs84_position);
  ::cavnue::messages::spatial::v1::WGS84* unsafe_arena_release_wgs84_position();
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.GetActorEventsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::spatial::v1::WGS84* wgs84_position_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto;
};// -------------------------------------------------------------------

class GetActorEventsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.GetActorEventsResponse) */ {
 public:
  inline GetActorEventsResponse() : GetActorEventsResponse(nullptr) {}
  ~GetActorEventsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetActorEventsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetActorEventsResponse(const GetActorEventsResponse& from);
  GetActorEventsResponse(GetActorEventsResponse&& from) noexcept
    : GetActorEventsResponse() {
    *this = ::std::move(from);
  }

  inline GetActorEventsResponse& operator=(const GetActorEventsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetActorEventsResponse& operator=(GetActorEventsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetActorEventsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetActorEventsResponse* internal_default_instance() {
    return reinterpret_cast<const GetActorEventsResponse*>(
               &_GetActorEventsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetActorEventsResponse& a, GetActorEventsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetActorEventsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetActorEventsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetActorEventsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetActorEventsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetActorEventsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetActorEventsResponse& from) {
    GetActorEventsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetActorEventsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.GetActorEventsResponse";
  }
  protected:
  explicit GetActorEventsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorEventsFieldNumber = 2,
    kResponseTsFieldNumber = 1,
    kFieldMaskFieldNumber = 3,
  };
  // repeated .cavnue.messages.world_state.v1.ActorEvent actor_events = 2 [json_name = "actorEvents"];
  int actor_events_size() const;
  private:
  int _internal_actor_events_size() const;

  public:
  void clear_actor_events() ;
  ::cavnue::messages::world_state::v1::ActorEvent* mutable_actor_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::world_state::v1::ActorEvent >*
      mutable_actor_events();
  private:
  const ::cavnue::messages::world_state::v1::ActorEvent& _internal_actor_events(int index) const;
  ::cavnue::messages::world_state::v1::ActorEvent* _internal_add_actor_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::world_state::v1::ActorEvent>& _internal_actor_events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::world_state::v1::ActorEvent>* _internal_mutable_actor_events();
  public:
  const ::cavnue::messages::world_state::v1::ActorEvent& actor_events(int index) const;
  ::cavnue::messages::world_state::v1::ActorEvent* add_actor_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::world_state::v1::ActorEvent >&
      actor_events() const;
  // .google.protobuf.Timestamp response_ts = 1 [json_name = "responseTs"];
  bool has_response_ts() const;
  void clear_response_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& response_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_response_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_response_ts();
  void set_allocated_response_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* response_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_response_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_response_ts();
  public:
  void unsafe_arena_set_allocated_response_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* response_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_response_ts();
  // .google.protobuf.FieldMask field_mask = 3 [json_name = "fieldMask", (.gen_bq_schema.bigquery) = {
  bool has_field_mask() const;
  void clear_field_mask() ;
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& field_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_field_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_field_mask();
  void set_allocated_field_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* field_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_field_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_field_mask();
  public:
  void unsafe_arena_set_allocated_field_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* field_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_field_mask();
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.GetActorEventsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::world_state::v1::ActorEvent > actor_events_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* response_ts_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* field_mask_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ActorEvent

// .cavnue.messages.inference.v1.Actor actor = 1 [json_name = "actor"];
inline bool ActorEvent::has_actor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.actor_ != nullptr);
  return value;
}
inline const ::cavnue::messages::inference::v1::Actor& ActorEvent::_internal_actor() const {
  const ::cavnue::messages::inference::v1::Actor* p = _impl_.actor_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::inference::v1::Actor&>(
      ::cavnue::messages::inference::v1::_Actor_default_instance_);
}
inline const ::cavnue::messages::inference::v1::Actor& ActorEvent::actor() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.ActorEvent.actor)
  return _internal_actor();
}
inline void ActorEvent::unsafe_arena_set_allocated_actor(
    ::cavnue::messages::inference::v1::Actor* actor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.actor_);
  }
  _impl_.actor_ = actor;
  if (actor) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.ActorEvent.actor)
}
inline ::cavnue::messages::inference::v1::Actor* ActorEvent::release_actor() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::inference::v1::Actor* temp = _impl_.actor_;
  _impl_.actor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::inference::v1::Actor* ActorEvent::unsafe_arena_release_actor() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.ActorEvent.actor)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::inference::v1::Actor* temp = _impl_.actor_;
  _impl_.actor_ = nullptr;
  return temp;
}
inline ::cavnue::messages::inference::v1::Actor* ActorEvent::_internal_mutable_actor() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.actor_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::inference::v1::Actor>(GetArenaForAllocation());
    _impl_.actor_ = p;
  }
  return _impl_.actor_;
}
inline ::cavnue::messages::inference::v1::Actor* ActorEvent::mutable_actor() {
  ::cavnue::messages::inference::v1::Actor* _msg = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.ActorEvent.actor)
  return _msg;
}
inline void ActorEvent::set_allocated_actor(::cavnue::messages::inference::v1::Actor* actor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.actor_);
  }
  if (actor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor));
    if (message_arena != submessage_arena) {
      actor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actor, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.actor_ = actor;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.ActorEvent.actor)
}

// .cavnue.messages.spatial.v1.WGS84 wgs84_position = 2 [json_name = "wgs84Position"];
inline bool ActorEvent::has_wgs84_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.wgs84_position_ != nullptr);
  return value;
}
inline const ::cavnue::messages::spatial::v1::WGS84& ActorEvent::_internal_wgs84_position() const {
  const ::cavnue::messages::spatial::v1::WGS84* p = _impl_.wgs84_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::spatial::v1::WGS84&>(
      ::cavnue::messages::spatial::v1::_WGS84_default_instance_);
}
inline const ::cavnue::messages::spatial::v1::WGS84& ActorEvent::wgs84_position() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.ActorEvent.wgs84_position)
  return _internal_wgs84_position();
}
inline void ActorEvent::unsafe_arena_set_allocated_wgs84_position(
    ::cavnue::messages::spatial::v1::WGS84* wgs84_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wgs84_position_);
  }
  _impl_.wgs84_position_ = wgs84_position;
  if (wgs84_position) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.ActorEvent.wgs84_position)
}
inline ::cavnue::messages::spatial::v1::WGS84* ActorEvent::release_wgs84_position() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::spatial::v1::WGS84* temp = _impl_.wgs84_position_;
  _impl_.wgs84_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::spatial::v1::WGS84* ActorEvent::unsafe_arena_release_wgs84_position() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.ActorEvent.wgs84_position)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::spatial::v1::WGS84* temp = _impl_.wgs84_position_;
  _impl_.wgs84_position_ = nullptr;
  return temp;
}
inline ::cavnue::messages::spatial::v1::WGS84* ActorEvent::_internal_mutable_wgs84_position() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.wgs84_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::spatial::v1::WGS84>(GetArenaForAllocation());
    _impl_.wgs84_position_ = p;
  }
  return _impl_.wgs84_position_;
}
inline ::cavnue::messages::spatial::v1::WGS84* ActorEvent::mutable_wgs84_position() {
  ::cavnue::messages::spatial::v1::WGS84* _msg = _internal_mutable_wgs84_position();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.ActorEvent.wgs84_position)
  return _msg;
}
inline void ActorEvent::set_allocated_wgs84_position(::cavnue::messages::spatial::v1::WGS84* wgs84_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wgs84_position_);
  }
  if (wgs84_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wgs84_position));
    if (message_arena != submessage_arena) {
      wgs84_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wgs84_position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.wgs84_position_ = wgs84_position;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.ActorEvent.wgs84_position)
}

// -------------------------------------------------------------------

// GetActorEventsRequest

// .cavnue.messages.spatial.v1.WGS84 wgs84_position = 1 [json_name = "wgs84Position"];
inline bool GetActorEventsRequest::has_wgs84_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.wgs84_position_ != nullptr);
  return value;
}
inline const ::cavnue::messages::spatial::v1::WGS84& GetActorEventsRequest::_internal_wgs84_position() const {
  const ::cavnue::messages::spatial::v1::WGS84* p = _impl_.wgs84_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::spatial::v1::WGS84&>(
      ::cavnue::messages::spatial::v1::_WGS84_default_instance_);
}
inline const ::cavnue::messages::spatial::v1::WGS84& GetActorEventsRequest::wgs84_position() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetActorEventsRequest.wgs84_position)
  return _internal_wgs84_position();
}
inline void GetActorEventsRequest::unsafe_arena_set_allocated_wgs84_position(
    ::cavnue::messages::spatial::v1::WGS84* wgs84_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wgs84_position_);
  }
  _impl_.wgs84_position_ = wgs84_position;
  if (wgs84_position) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.GetActorEventsRequest.wgs84_position)
}
inline ::cavnue::messages::spatial::v1::WGS84* GetActorEventsRequest::release_wgs84_position() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::spatial::v1::WGS84* temp = _impl_.wgs84_position_;
  _impl_.wgs84_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::spatial::v1::WGS84* GetActorEventsRequest::unsafe_arena_release_wgs84_position() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.GetActorEventsRequest.wgs84_position)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::spatial::v1::WGS84* temp = _impl_.wgs84_position_;
  _impl_.wgs84_position_ = nullptr;
  return temp;
}
inline ::cavnue::messages::spatial::v1::WGS84* GetActorEventsRequest::_internal_mutable_wgs84_position() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.wgs84_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::spatial::v1::WGS84>(GetArenaForAllocation());
    _impl_.wgs84_position_ = p;
  }
  return _impl_.wgs84_position_;
}
inline ::cavnue::messages::spatial::v1::WGS84* GetActorEventsRequest::mutable_wgs84_position() {
  ::cavnue::messages::spatial::v1::WGS84* _msg = _internal_mutable_wgs84_position();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetActorEventsRequest.wgs84_position)
  return _msg;
}
inline void GetActorEventsRequest::set_allocated_wgs84_position(::cavnue::messages::spatial::v1::WGS84* wgs84_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wgs84_position_);
  }
  if (wgs84_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wgs84_position));
    if (message_arena != submessage_arena) {
      wgs84_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wgs84_position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.wgs84_position_ = wgs84_position;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.GetActorEventsRequest.wgs84_position)
}

// -------------------------------------------------------------------

// GetActorEventsResponse

// .google.protobuf.Timestamp response_ts = 1 [json_name = "responseTs"];
inline bool GetActorEventsResponse::has_response_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetActorEventsResponse::_internal_response_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.response_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetActorEventsResponse::response_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetActorEventsResponse.response_ts)
  return _internal_response_ts();
}
inline void GetActorEventsResponse::unsafe_arena_set_allocated_response_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* response_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.response_ts_);
  }
  _impl_.response_ts_ = response_ts;
  if (response_ts) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.GetActorEventsResponse.response_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetActorEventsResponse::release_response_ts() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.response_ts_;
  _impl_.response_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetActorEventsResponse::unsafe_arena_release_response_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.GetActorEventsResponse.response_ts)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.response_ts_;
  _impl_.response_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetActorEventsResponse::_internal_mutable_response_ts() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.response_ts_ = p;
  }
  return _impl_.response_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetActorEventsResponse::mutable_response_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_response_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetActorEventsResponse.response_ts)
  return _msg;
}
inline void GetActorEventsResponse::set_allocated_response_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* response_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.response_ts_);
  }
  if (response_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_ts));
    if (message_arena != submessage_arena) {
      response_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.response_ts_ = response_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.GetActorEventsResponse.response_ts)
}

// repeated .cavnue.messages.world_state.v1.ActorEvent actor_events = 2 [json_name = "actorEvents"];
inline int GetActorEventsResponse::_internal_actor_events_size() const {
  return _impl_.actor_events_.size();
}
inline int GetActorEventsResponse::actor_events_size() const {
  return _internal_actor_events_size();
}
inline void GetActorEventsResponse::clear_actor_events() {
  _internal_mutable_actor_events()->Clear();
}
inline ::cavnue::messages::world_state::v1::ActorEvent* GetActorEventsResponse::mutable_actor_events(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetActorEventsResponse.actor_events)
  return _internal_mutable_actor_events()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::world_state::v1::ActorEvent >*
GetActorEventsResponse::mutable_actor_events() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.world_state.v1.GetActorEventsResponse.actor_events)
  return _internal_mutable_actor_events();
}
inline const ::cavnue::messages::world_state::v1::ActorEvent& GetActorEventsResponse::_internal_actor_events(int index) const {
  return _internal_actor_events().Get(index);
}
inline const ::cavnue::messages::world_state::v1::ActorEvent& GetActorEventsResponse::actor_events(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetActorEventsResponse.actor_events)
  return _internal_actor_events(index);
}
inline ::cavnue::messages::world_state::v1::ActorEvent* GetActorEventsResponse::_internal_add_actor_events() {
  return _internal_mutable_actor_events()->Add();
}
inline ::cavnue::messages::world_state::v1::ActorEvent* GetActorEventsResponse::add_actor_events() {
  ::cavnue::messages::world_state::v1::ActorEvent* _add = _internal_add_actor_events();
  // @@protoc_insertion_point(field_add:cavnue.messages.world_state.v1.GetActorEventsResponse.actor_events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::world_state::v1::ActorEvent >&
GetActorEventsResponse::actor_events() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.world_state.v1.GetActorEventsResponse.actor_events)
  return _internal_actor_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::world_state::v1::ActorEvent>&
GetActorEventsResponse::_internal_actor_events() const {
  return _impl_.actor_events_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::world_state::v1::ActorEvent>*
GetActorEventsResponse::_internal_mutable_actor_events() {
  return &_impl_.actor_events_;
}

// .google.protobuf.FieldMask field_mask = 3 [json_name = "fieldMask", (.gen_bq_schema.bigquery) = {
inline bool GetActorEventsResponse::has_field_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.field_mask_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& GetActorEventsResponse::_internal_field_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.field_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& GetActorEventsResponse::field_mask() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetActorEventsResponse.field_mask)
  return _internal_field_mask();
}
inline void GetActorEventsResponse::unsafe_arena_set_allocated_field_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* field_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.field_mask_);
  }
  _impl_.field_mask_ = field_mask;
  if (field_mask) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.GetActorEventsResponse.field_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetActorEventsResponse::release_field_mask() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.field_mask_;
  _impl_.field_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetActorEventsResponse::unsafe_arena_release_field_mask() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.GetActorEventsResponse.field_mask)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.field_mask_;
  _impl_.field_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetActorEventsResponse::_internal_mutable_field_mask() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.field_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.field_mask_ = p;
  }
  return _impl_.field_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetActorEventsResponse::mutable_field_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_field_mask();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetActorEventsResponse.field_mask)
  return _msg;
}
inline void GetActorEventsResponse::set_allocated_field_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* field_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.field_mask_);
  }
  if (field_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(field_mask));
    if (message_arena != submessage_arena) {
      field_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, field_mask, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.field_mask_ = field_mask;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.GetActorEventsResponse.field_mask)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace world_state
}  // namespace messages
}  // namespace cavnue


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto_2epb_2eh

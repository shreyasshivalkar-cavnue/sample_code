// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/world_state/v1/service.proto

#include "cavnue/messages/world_state/v1/service.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cavnue {
namespace messages {
namespace world_state {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR Query_TimeFilter_TimeInterval::Query_TimeFilter_TimeInterval(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.start_ts_)*/nullptr
  , /*decltype(_impl_.end_ts_)*/nullptr} {}
struct Query_TimeFilter_TimeIntervalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Query_TimeFilter_TimeIntervalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Query_TimeFilter_TimeIntervalDefaultTypeInternal() {}
  union {
    Query_TimeFilter_TimeInterval _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Query_TimeFilter_TimeIntervalDefaultTypeInternal _Query_TimeFilter_TimeInterval_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Query_TimeFilter_TimeLookback::Query_TimeFilter_TimeLookback(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.end_ts_)*/nullptr
  , /*decltype(_impl_.lookback_)*/nullptr} {}
struct Query_TimeFilter_TimeLookbackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Query_TimeFilter_TimeLookbackDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Query_TimeFilter_TimeLookbackDefaultTypeInternal() {}
  union {
    Query_TimeFilter_TimeLookback _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Query_TimeFilter_TimeLookbackDefaultTypeInternal _Query_TimeFilter_TimeLookback_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Query_TimeFilter::Query_TimeFilter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct Query_TimeFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Query_TimeFilterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Query_TimeFilterDefaultTypeInternal() {}
  union {
    Query_TimeFilter _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Query_TimeFilterDefaultTypeInternal _Query_TimeFilter_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Query_ActorIdFilter::Query_ActorIdFilter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.actor_ids_)*/ {}
  ,/* _impl_._actor_ids_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Query_ActorIdFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Query_ActorIdFilterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Query_ActorIdFilterDefaultTypeInternal() {}
  union {
    Query_ActorIdFilter _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Query_ActorIdFilterDefaultTypeInternal _Query_ActorIdFilter_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Query_SpatialFilter::Query_SpatialFilter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bb_region_)*/nullptr} {}
struct Query_SpatialFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Query_SpatialFilterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Query_SpatialFilterDefaultTypeInternal() {}
  union {
    Query_SpatialFilter _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Query_SpatialFilterDefaultTypeInternal _Query_SpatialFilter_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Query::Query(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.time_filter_)*/nullptr
  , /*decltype(_impl_.actors_filter_)*/nullptr
  , /*decltype(_impl_.spatial_filter_)*/nullptr} {}
struct QueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDefaultTypeInternal() {}
  union {
    Query _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDefaultTypeInternal _Query_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetServiceApiRequest::GetServiceApiRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.empty_)*/nullptr} {}
struct GetServiceApiRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetServiceApiRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetServiceApiRequestDefaultTypeInternal() {}
  union {
    GetServiceApiRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetServiceApiRequestDefaultTypeInternal _GetServiceApiRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetServiceApiResponse::GetServiceApiResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.api_)*/nullptr} {}
struct GetServiceApiResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetServiceApiResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetServiceApiResponseDefaultTypeInternal() {}
  union {
    GetServiceApiResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetServiceApiResponseDefaultTypeInternal _GetServiceApiResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetWorldStateRequest::GetWorldStateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.query_)*/nullptr} {}
struct GetWorldStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetWorldStateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetWorldStateRequestDefaultTypeInternal() {}
  union {
    GetWorldStateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetWorldStateRequestDefaultTypeInternal _GetWorldStateRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetWorldStateResponse::GetWorldStateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.actors_)*/{}
  , /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetWorldStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetWorldStateResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetWorldStateResponseDefaultTypeInternal() {}
  union {
    GetWorldStateResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetWorldStateResponseDefaultTypeInternal _GetWorldStateResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetActorsRequest::GetActorsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.query_)*/nullptr} {}
struct GetActorsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetActorsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetActorsRequestDefaultTypeInternal() {}
  union {
    GetActorsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetActorsRequestDefaultTypeInternal _GetActorsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetActorsResponse::GetActorsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.actors_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetActorsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetActorsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetActorsResponseDefaultTypeInternal() {}
  union {
    GetActorsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetActorsResponseDefaultTypeInternal _GetActorsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetEventsRequest::GetEventsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.query_)*/nullptr} {}
struct GetEventsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetEventsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetEventsRequestDefaultTypeInternal() {}
  union {
    GetEventsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetEventsRequestDefaultTypeInternal _GetEventsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetEventsResponse::GetEventsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetEventsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetEventsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetEventsResponseDefaultTypeInternal() {}
  union {
    GetEventsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetEventsResponseDefaultTypeInternal _GetEventsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetAssetsRequest::GetAssetsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.query_)*/nullptr} {}
struct GetAssetsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAssetsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAssetsRequestDefaultTypeInternal() {}
  union {
    GetAssetsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAssetsRequestDefaultTypeInternal _GetAssetsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetAssetsResponse::GetAssetsResponse(
    ::_pbi::ConstantInitialized) {}
struct GetAssetsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAssetsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAssetsResponseDefaultTypeInternal() {}
  union {
    GetAssetsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAssetsResponseDefaultTypeInternal _GetAssetsResponse_default_instance_;
}  // namespace v1
}  // namespace world_state
}  // namespace messages
}  // namespace cavnue
static ::_pb::Metadata file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto[16];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto = nullptr;
const ::uint32_t TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval, _impl_.start_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval, _impl_.end_ts_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback, _impl_.end_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback, _impl_.lookback_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query_TimeFilter, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query_TimeFilter, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query_TimeFilter, _impl_.time_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query_ActorIdFilter, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query_ActorIdFilter, _impl_.actor_ids_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query_SpatialFilter, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query_SpatialFilter, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query_SpatialFilter, _impl_.bb_region_),
    0,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query, _impl_.time_filter_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query, _impl_.actors_filter_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query, _impl_.spatial_filter_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetServiceApiRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetServiceApiRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetServiceApiRequest, _impl_.empty_),
    0,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetServiceApiResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetServiceApiResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetServiceApiResponse, _impl_.api_),
    0,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetWorldStateRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetWorldStateRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetWorldStateRequest, _impl_.query_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetWorldStateResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetWorldStateResponse, _impl_.actors_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetWorldStateResponse, _impl_.events_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetActorsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetActorsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetActorsRequest, _impl_.query_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetActorsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetActorsResponse, _impl_.actors_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetEventsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetEventsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetEventsRequest, _impl_.query_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetEventsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetEventsResponse, _impl_.events_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetAssetsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetAssetsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetAssetsRequest, _impl_.query_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetAssetsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval)},
        { 12, 22, -1, sizeof(::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback)},
        { 24, -1, -1, sizeof(::cavnue::messages::world_state::v1::Query_TimeFilter)},
        { 35, -1, -1, sizeof(::cavnue::messages::world_state::v1::Query_ActorIdFilter)},
        { 44, 53, -1, sizeof(::cavnue::messages::world_state::v1::Query_SpatialFilter)},
        { 54, 65, -1, sizeof(::cavnue::messages::world_state::v1::Query)},
        { 68, 77, -1, sizeof(::cavnue::messages::world_state::v1::GetServiceApiRequest)},
        { 78, 87, -1, sizeof(::cavnue::messages::world_state::v1::GetServiceApiResponse)},
        { 88, 97, -1, sizeof(::cavnue::messages::world_state::v1::GetWorldStateRequest)},
        { 98, -1, -1, sizeof(::cavnue::messages::world_state::v1::GetWorldStateResponse)},
        { 108, 117, -1, sizeof(::cavnue::messages::world_state::v1::GetActorsRequest)},
        { 118, -1, -1, sizeof(::cavnue::messages::world_state::v1::GetActorsResponse)},
        { 127, 136, -1, sizeof(::cavnue::messages::world_state::v1::GetEventsRequest)},
        { 137, -1, -1, sizeof(::cavnue::messages::world_state::v1::GetEventsResponse)},
        { 146, 155, -1, sizeof(::cavnue::messages::world_state::v1::GetAssetsRequest)},
        { 156, -1, -1, sizeof(::cavnue::messages::world_state::v1::GetAssetsResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cavnue::messages::world_state::v1::_Query_TimeFilter_TimeInterval_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_Query_TimeFilter_TimeLookback_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_Query_TimeFilter_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_Query_ActorIdFilter_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_Query_SpatialFilter_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_Query_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_GetServiceApiRequest_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_GetServiceApiResponse_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_GetWorldStateRequest_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_GetWorldStateResponse_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_GetActorsRequest_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_GetActorsResponse_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_GetEventsRequest_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_GetEventsResponse_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_GetAssetsRequest_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_GetAssetsResponse_default_instance_._instance,
};
const char descriptor_table_protodef_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n,cavnue/messages/world_state/v1/service"
    ".proto\022\036cavnue.messages.world_state.v1\032\037"
    "google/protobuf/timestamp.proto\032\036google/"
    "protobuf/duration.proto\032\031google/protobuf"
    "/api.proto\032\033google/protobuf/empty.proto\032"
    "(cavnue/messages/inference/v1/actor.prot"
    "o\032)cavnue/messages/inference/v1/events.p"
    "roto\032\'cavnue/messages/geometry/v1/point."
    "proto\032.cavnue/messages/geometry/v1/bound"
    "ing_box.proto\"\241\007\n\005Query\022V\n\013time_filter\030\001"
    " \001(\01320.cavnue.messages.world_state.v1.Qu"
    "ery.TimeFilterH\000R\ntimeFilter\210\001\001\022]\n\ractor"
    "s_filter\030\002 \001(\01323.cavnue.messages.world_s"
    "tate.v1.Query.ActorIdFilterH\001R\014actorsFil"
    "ter\210\001\001\022_\n\016spatial_filter\030\003 \001(\01323.cavnue."
    "messages.world_state.v1.Query.SpatialFil"
    "terH\002R\rspatialFilter\210\001\001\032\302\003\n\nTimeFilter\022["
    "\n\010interval\030\001 \001(\0132=.cavnue.messages.world"
    "_state.v1.Query.TimeFilter.TimeIntervalH"
    "\000R\010interval\022[\n\010lookback\030\002 \001(\0132=.cavnue.m"
    "essages.world_state.v1.Query.TimeFilter."
    "TimeLookbackH\000R\010lookback\032x\n\014TimeInterval"
    "\0225\n\010start_ts\030\001 \001(\0132\032.google.protobuf.Tim"
    "estampR\007startTs\0221\n\006end_ts\030\002 \001(\0132\032.google"
    ".protobuf.TimestampR\005endTs\032x\n\014TimeLookba"
    "ck\0221\n\006end_ts\030\001 \001(\0132\032.google.protobuf.Tim"
    "estampR\005endTs\0225\n\010lookback\030\002 \001(\0132\031.google"
    ".protobuf.DurationR\010lookbackB\006\n\004time\032,\n\r"
    "ActorIdFilter\022\033\n\tactor_ids\030\001 \003(\003R\010actorI"
    "ds\032X\n\rSpatialFilter\022G\n\tbb_region\030\001 \001(\0132*"
    ".cavnue.messages.geometry.v1.BoundingBox"
    "2fR\010bbRegionB\016\n\014_time_filterB\020\n\016_actors_"
    "filterB\021\n\017_spatial_filter\"D\n\024GetServiceA"
    "piRequest\022,\n\005empty\030\001 \001(\0132\026.google.protob"
    "uf.EmptyR\005empty\"\?\n\025GetServiceApiResponse"
    "\022&\n\003api\030\001 \001(\0132\024.google.protobuf.ApiR\003api"
    "\"S\n\024GetWorldStateRequest\022;\n\005query\030\001 \001(\0132"
    "%.cavnue.messages.world_state.v1.QueryR\005"
    "query\"\221\001\n\025GetWorldStateResponse\022;\n\006actor"
    "s\030\001 \003(\0132#.cavnue.messages.inference.v1.A"
    "ctorR\006actors\022;\n\006events\030\002 \003(\0132#.cavnue.me"
    "ssages.inference.v1.EventR\006events\"O\n\020Get"
    "ActorsRequest\022;\n\005query\030\001 \001(\0132%.cavnue.me"
    "ssages.world_state.v1.QueryR\005query\"P\n\021Ge"
    "tActorsResponse\022;\n\006actors\030\001 \003(\0132#.cavnue"
    ".messages.inference.v1.ActorR\006actors\"O\n\020"
    "GetEventsRequest\022;\n\005query\030\001 \001(\0132%.cavnue"
    ".messages.world_state.v1.QueryR\005query\"P\n"
    "\021GetEventsResponse\022;\n\006events\030\001 \003(\0132#.cav"
    "nue.messages.inference.v1.EventR\006events\""
    "O\n\020GetAssetsRequest\022;\n\005query\030\001 \001(\0132%.cav"
    "nue.messages.world_state.v1.QueryR\005query"
    "\"\023\n\021GetAssetsResponse2\345\004\n\021WorldStateServ"
    "ice\022|\n\rGetServiceApi\0224.cavnue.messages.w"
    "orld_state.v1.GetServiceApiRequest\0325.cav"
    "nue.messages.world_state.v1.GetServiceAp"
    "iResponse\022|\n\rGetWorldState\0224.cavnue.mess"
    "ages.world_state.v1.GetWorldStateRequest"
    "\0325.cavnue.messages.world_state.v1.GetWor"
    "ldStateResponse\022p\n\tGetActors\0220.cavnue.me"
    "ssages.world_state.v1.GetActorsRequest\0321"
    ".cavnue.messages.world_state.v1.GetActor"
    "sResponse\022p\n\tGetEvents\0220.cavnue.messages"
    ".world_state.v1.GetEventsRequest\0321.cavnu"
    "e.messages.world_state.v1.GetEventsRespo"
    "nse\022p\n\tGetAssets\0220.cavnue.messages.world"
    "_state.v1.GetAssetsRequest\0321.cavnue.mess"
    "ages.world_state.v1.GetAssetsResponseb\006p"
    "roto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_deps[8] =
    {
        &::descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fbounding_5fbox_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fpoint_2eproto,
        &::descriptor_table_cavnue_2fmessages_2finference_2fv1_2factor_2eproto,
        &::descriptor_table_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto,
        &::descriptor_table_google_2fprotobuf_2fapi_2eproto,
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
        &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto = {
    false,
    false,
    2725,
    descriptor_table_protodef_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto,
    "cavnue/messages/world_state/v1/service.proto",
    &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_once,
    descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_deps,
    8,
    16,
    schemas,
    file_default_instances,
    TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto::offsets,
    file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto,
    file_level_enum_descriptors_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto,
    file_level_service_descriptors_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_getter() {
  return &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto(&descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto);
namespace cavnue {
namespace messages {
namespace world_state {
namespace v1 {
// ===================================================================

class Query_TimeFilter_TimeInterval::_Internal {
 public:
  using HasBits = decltype(std::declval<Query_TimeFilter_TimeInterval>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Query_TimeFilter_TimeInterval, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_ts(const Query_TimeFilter_TimeInterval* msg);
  static void set_has_start_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_ts(const Query_TimeFilter_TimeInterval* msg);
  static void set_has_end_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Query_TimeFilter_TimeInterval::_Internal::start_ts(const Query_TimeFilter_TimeInterval* msg) {
  return *msg->_impl_.start_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Query_TimeFilter_TimeInterval::_Internal::end_ts(const Query_TimeFilter_TimeInterval* msg) {
  return *msg->_impl_.end_ts_;
}
void Query_TimeFilter_TimeInterval::clear_start_ts() {
  if (_impl_.start_ts_ != nullptr) _impl_.start_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Query_TimeFilter_TimeInterval::clear_end_ts() {
  if (_impl_.end_ts_ != nullptr) _impl_.end_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Query_TimeFilter_TimeInterval::Query_TimeFilter_TimeInterval(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.Query.TimeFilter.TimeInterval)
}
Query_TimeFilter_TimeInterval::Query_TimeFilter_TimeInterval(const Query_TimeFilter_TimeInterval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Query_TimeFilter_TimeInterval* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_ts_){nullptr}
    , decltype(_impl_.end_ts_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.start_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.start_ts_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.end_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.end_ts_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.Query.TimeFilter.TimeInterval)
}

inline void Query_TimeFilter_TimeInterval::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_ts_){nullptr}
    , decltype(_impl_.end_ts_){nullptr}
  };
}

Query_TimeFilter_TimeInterval::~Query_TimeFilter_TimeInterval() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.Query.TimeFilter.TimeInterval)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Query_TimeFilter_TimeInterval::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.start_ts_;
  if (this != internal_default_instance()) delete _impl_.end_ts_;
}

void Query_TimeFilter_TimeInterval::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Query_TimeFilter_TimeInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.Query.TimeFilter.TimeInterval)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.start_ts_ != nullptr);
      _impl_.start_ts_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.end_ts_ != nullptr);
      _impl_.end_ts_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Query_TimeFilter_TimeInterval::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp start_ts = 1 [json_name = "startTs"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp end_ts = 2 [json_name = "endTs"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Query_TimeFilter_TimeInterval::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.Query.TimeFilter.TimeInterval)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp start_ts = 1 [json_name = "startTs"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::start_ts(this),
        _Internal::start_ts(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp end_ts = 2 [json_name = "endTs"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::end_ts(this),
        _Internal::end_ts(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.Query.TimeFilter.TimeInterval)
  return target;
}

::size_t Query_TimeFilter_TimeInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.Query.TimeFilter.TimeInterval)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Timestamp start_ts = 1 [json_name = "startTs"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.start_ts_);
    }

    // .google.protobuf.Timestamp end_ts = 2 [json_name = "endTs"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.end_ts_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Query_TimeFilter_TimeInterval::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Query_TimeFilter_TimeInterval::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Query_TimeFilter_TimeInterval::GetClassData() const { return &_class_data_; }


void Query_TimeFilter_TimeInterval::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Query_TimeFilter_TimeInterval*>(&to_msg);
  auto& from = static_cast<const Query_TimeFilter_TimeInterval&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.Query.TimeFilter.TimeInterval)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_start_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_start_ts());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_end_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_end_ts());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Query_TimeFilter_TimeInterval::CopyFrom(const Query_TimeFilter_TimeInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.Query.TimeFilter.TimeInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query_TimeFilter_TimeInterval::IsInitialized() const {
  return true;
}

void Query_TimeFilter_TimeInterval::InternalSwap(Query_TimeFilter_TimeInterval* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Query_TimeFilter_TimeInterval, _impl_.end_ts_)
      + sizeof(Query_TimeFilter_TimeInterval::_impl_.end_ts_)
      - PROTOBUF_FIELD_OFFSET(Query_TimeFilter_TimeInterval, _impl_.start_ts_)>(
          reinterpret_cast<char*>(&_impl_.start_ts_),
          reinterpret_cast<char*>(&other->_impl_.start_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Query_TimeFilter_TimeInterval::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto[0]);
}
// ===================================================================

class Query_TimeFilter_TimeLookback::_Internal {
 public:
  using HasBits = decltype(std::declval<Query_TimeFilter_TimeLookback>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Query_TimeFilter_TimeLookback, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_ts(const Query_TimeFilter_TimeLookback* msg);
  static void set_has_end_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Duration& lookback(const Query_TimeFilter_TimeLookback* msg);
  static void set_has_lookback(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Query_TimeFilter_TimeLookback::_Internal::end_ts(const Query_TimeFilter_TimeLookback* msg) {
  return *msg->_impl_.end_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
Query_TimeFilter_TimeLookback::_Internal::lookback(const Query_TimeFilter_TimeLookback* msg) {
  return *msg->_impl_.lookback_;
}
void Query_TimeFilter_TimeLookback::clear_end_ts() {
  if (_impl_.end_ts_ != nullptr) _impl_.end_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Query_TimeFilter_TimeLookback::clear_lookback() {
  if (_impl_.lookback_ != nullptr) _impl_.lookback_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Query_TimeFilter_TimeLookback::Query_TimeFilter_TimeLookback(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.Query.TimeFilter.TimeLookback)
}
Query_TimeFilter_TimeLookback::Query_TimeFilter_TimeLookback(const Query_TimeFilter_TimeLookback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Query_TimeFilter_TimeLookback* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.end_ts_){nullptr}
    , decltype(_impl_.lookback_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.end_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.end_ts_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.lookback_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.lookback_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.Query.TimeFilter.TimeLookback)
}

inline void Query_TimeFilter_TimeLookback::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.end_ts_){nullptr}
    , decltype(_impl_.lookback_){nullptr}
  };
}

Query_TimeFilter_TimeLookback::~Query_TimeFilter_TimeLookback() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.Query.TimeFilter.TimeLookback)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Query_TimeFilter_TimeLookback::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.end_ts_;
  if (this != internal_default_instance()) delete _impl_.lookback_;
}

void Query_TimeFilter_TimeLookback::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Query_TimeFilter_TimeLookback::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.Query.TimeFilter.TimeLookback)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.end_ts_ != nullptr);
      _impl_.end_ts_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.lookback_ != nullptr);
      _impl_.lookback_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Query_TimeFilter_TimeLookback::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp end_ts = 1 [json_name = "endTs"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Duration lookback = 2 [json_name = "lookback"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lookback(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Query_TimeFilter_TimeLookback::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.Query.TimeFilter.TimeLookback)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp end_ts = 1 [json_name = "endTs"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::end_ts(this),
        _Internal::end_ts(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration lookback = 2 [json_name = "lookback"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::lookback(this),
        _Internal::lookback(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.Query.TimeFilter.TimeLookback)
  return target;
}

::size_t Query_TimeFilter_TimeLookback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.Query.TimeFilter.TimeLookback)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Timestamp end_ts = 1 [json_name = "endTs"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.end_ts_);
    }

    // .google.protobuf.Duration lookback = 2 [json_name = "lookback"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lookback_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Query_TimeFilter_TimeLookback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Query_TimeFilter_TimeLookback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Query_TimeFilter_TimeLookback::GetClassData() const { return &_class_data_; }


void Query_TimeFilter_TimeLookback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Query_TimeFilter_TimeLookback*>(&to_msg);
  auto& from = static_cast<const Query_TimeFilter_TimeLookback&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.Query.TimeFilter.TimeLookback)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_end_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_end_ts());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_lookback()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
          from._internal_lookback());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Query_TimeFilter_TimeLookback::CopyFrom(const Query_TimeFilter_TimeLookback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.Query.TimeFilter.TimeLookback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query_TimeFilter_TimeLookback::IsInitialized() const {
  return true;
}

void Query_TimeFilter_TimeLookback::InternalSwap(Query_TimeFilter_TimeLookback* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Query_TimeFilter_TimeLookback, _impl_.lookback_)
      + sizeof(Query_TimeFilter_TimeLookback::_impl_.lookback_)
      - PROTOBUF_FIELD_OFFSET(Query_TimeFilter_TimeLookback, _impl_.end_ts_)>(
          reinterpret_cast<char*>(&_impl_.end_ts_),
          reinterpret_cast<char*>(&other->_impl_.end_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Query_TimeFilter_TimeLookback::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto[1]);
}
// ===================================================================

class Query_TimeFilter::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query_TimeFilter, _impl_._oneof_case_);
  static const ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval& interval(const Query_TimeFilter* msg);
  static const ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback& lookback(const Query_TimeFilter* msg);
};

const ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval&
Query_TimeFilter::_Internal::interval(const Query_TimeFilter* msg) {
  return *msg->_impl_.time_.interval_;
}
const ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback&
Query_TimeFilter::_Internal::lookback(const Query_TimeFilter* msg) {
  return *msg->_impl_.time_.lookback_;
}
void Query_TimeFilter::set_allocated_interval(::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval* interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_time();
  if (interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(interval);
    if (message_arena != submessage_arena) {
      interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval, submessage_arena);
    }
    set_has_interval();
    _impl_.time_.interval_ = interval;
  }
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.Query.TimeFilter.interval)
}
void Query_TimeFilter::set_allocated_lookback(::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback* lookback) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_time();
  if (lookback) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lookback);
    if (message_arena != submessage_arena) {
      lookback = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lookback, submessage_arena);
    }
    set_has_lookback();
    _impl_.time_.lookback_ = lookback;
  }
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.Query.TimeFilter.lookback)
}
Query_TimeFilter::Query_TimeFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.Query.TimeFilter)
}
Query_TimeFilter::Query_TimeFilter(const Query_TimeFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Query_TimeFilter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_time();
  switch (from.time_case()) {
    case kInterval: {
      _this->_internal_mutable_interval()->::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval::MergeFrom(
          from._internal_interval());
      break;
    }
    case kLookback: {
      _this->_internal_mutable_lookback()->::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback::MergeFrom(
          from._internal_lookback());
      break;
    }
    case TIME_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.Query.TimeFilter)
}

inline void Query_TimeFilter::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_time();
}

Query_TimeFilter::~Query_TimeFilter() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.Query.TimeFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Query_TimeFilter::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_time()) {
    clear_time();
  }
}

void Query_TimeFilter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Query_TimeFilter::clear_time() {
// @@protoc_insertion_point(one_of_clear_start:cavnue.messages.world_state.v1.Query.TimeFilter)
  switch (time_case()) {
    case kInterval: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.time_.interval_;
      }
      break;
    }
    case kLookback: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.time_.lookback_;
      }
      break;
    }
    case TIME_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TIME_NOT_SET;
}


void Query_TimeFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.Query.TimeFilter)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_time();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Query_TimeFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.world_state.v1.Query.TimeFilter.TimeInterval interval = 1 [json_name = "interval"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.world_state.v1.Query.TimeFilter.TimeLookback lookback = 2 [json_name = "lookback"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lookback(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Query_TimeFilter::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.Query.TimeFilter)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (time_case()) {
    case kInterval: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::interval(this),
          _Internal::interval(this).GetCachedSize(), target, stream);
      break;
    }
    case kLookback: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::lookback(this),
          _Internal::lookback(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.Query.TimeFilter)
  return target;
}

::size_t Query_TimeFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.Query.TimeFilter)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (time_case()) {
    // .cavnue.messages.world_state.v1.Query.TimeFilter.TimeInterval interval = 1 [json_name = "interval"];
    case kInterval: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.time_.interval_);
      break;
    }
    // .cavnue.messages.world_state.v1.Query.TimeFilter.TimeLookback lookback = 2 [json_name = "lookback"];
    case kLookback: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.time_.lookback_);
      break;
    }
    case TIME_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Query_TimeFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Query_TimeFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Query_TimeFilter::GetClassData() const { return &_class_data_; }


void Query_TimeFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Query_TimeFilter*>(&to_msg);
  auto& from = static_cast<const Query_TimeFilter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.Query.TimeFilter)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.time_case()) {
    case kInterval: {
      _this->_internal_mutable_interval()->::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval::MergeFrom(
          from._internal_interval());
      break;
    }
    case kLookback: {
      _this->_internal_mutable_lookback()->::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback::MergeFrom(
          from._internal_lookback());
      break;
    }
    case TIME_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Query_TimeFilter::CopyFrom(const Query_TimeFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.Query.TimeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query_TimeFilter::IsInitialized() const {
  return true;
}

void Query_TimeFilter::InternalSwap(Query_TimeFilter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.time_, other->_impl_.time_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Query_TimeFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto[2]);
}
// ===================================================================

class Query_ActorIdFilter::_Internal {
 public:
};

Query_ActorIdFilter::Query_ActorIdFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.Query.ActorIdFilter)
}
Query_ActorIdFilter::Query_ActorIdFilter(const Query_ActorIdFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Query_ActorIdFilter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.actor_ids_) { from._impl_.actor_ids_ }
    ,/* _impl_._actor_ids_cached_byte_size_ = */ { 0 }

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.Query.ActorIdFilter)
}

inline void Query_ActorIdFilter::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.actor_ids_) { arena }
    ,/* _impl_._actor_ids_cached_byte_size_ = */ { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Query_ActorIdFilter::~Query_ActorIdFilter() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.Query.ActorIdFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Query_ActorIdFilter::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.actor_ids_.~RepeatedField();
}

void Query_ActorIdFilter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Query_ActorIdFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.Query.ActorIdFilter)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_actor_ids()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Query_ActorIdFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 actor_ids = 1 [json_name = "actorIds"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_actor_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 8) {
          _internal_add_actor_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Query_ActorIdFilter::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.Query.ActorIdFilter)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 actor_ids = 1 [json_name = "actorIds"];
  {
    int byte_size = _impl_._actor_ids_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(1, _internal_actor_ids(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.Query.ActorIdFilter)
  return target;
}

::size_t Query_ActorIdFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.Query.ActorIdFilter)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 actor_ids = 1 [json_name = "actorIds"];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_actor_ids())
    ;
    _impl_._actor_ids_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Query_ActorIdFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Query_ActorIdFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Query_ActorIdFilter::GetClassData() const { return &_class_data_; }


void Query_ActorIdFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Query_ActorIdFilter*>(&to_msg);
  auto& from = static_cast<const Query_ActorIdFilter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.Query.ActorIdFilter)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.actor_ids_.MergeFrom(from._impl_.actor_ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Query_ActorIdFilter::CopyFrom(const Query_ActorIdFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.Query.ActorIdFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query_ActorIdFilter::IsInitialized() const {
  return true;
}

void Query_ActorIdFilter::InternalSwap(Query_ActorIdFilter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.actor_ids_.InternalSwap(&other->_impl_.actor_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Query_ActorIdFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto[3]);
}
// ===================================================================

class Query_SpatialFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<Query_SpatialFilter>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Query_SpatialFilter, _impl_._has_bits_);
  static const ::cavnue::messages::geometry::v1::BoundingBox2f& bb_region(const Query_SpatialFilter* msg);
  static void set_has_bb_region(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cavnue::messages::geometry::v1::BoundingBox2f&
Query_SpatialFilter::_Internal::bb_region(const Query_SpatialFilter* msg) {
  return *msg->_impl_.bb_region_;
}
void Query_SpatialFilter::clear_bb_region() {
  if (_impl_.bb_region_ != nullptr) _impl_.bb_region_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Query_SpatialFilter::Query_SpatialFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.Query.SpatialFilter)
}
Query_SpatialFilter::Query_SpatialFilter(const Query_SpatialFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Query_SpatialFilter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bb_region_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.bb_region_ = new ::cavnue::messages::geometry::v1::BoundingBox2f(*from._impl_.bb_region_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.Query.SpatialFilter)
}

inline void Query_SpatialFilter::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bb_region_){nullptr}
  };
}

Query_SpatialFilter::~Query_SpatialFilter() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.Query.SpatialFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Query_SpatialFilter::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.bb_region_;
}

void Query_SpatialFilter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Query_SpatialFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.Query.SpatialFilter)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.bb_region_ != nullptr);
    _impl_.bb_region_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Query_SpatialFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.geometry.v1.BoundingBox2f bb_region = 1 [json_name = "bbRegion"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bb_region(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Query_SpatialFilter::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.Query.SpatialFilter)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.geometry.v1.BoundingBox2f bb_region = 1 [json_name = "bbRegion"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::bb_region(this),
        _Internal::bb_region(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.Query.SpatialFilter)
  return target;
}

::size_t Query_SpatialFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.Query.SpatialFilter)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cavnue.messages.geometry.v1.BoundingBox2f bb_region = 1 [json_name = "bbRegion"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bb_region_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Query_SpatialFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Query_SpatialFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Query_SpatialFilter::GetClassData() const { return &_class_data_; }


void Query_SpatialFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Query_SpatialFilter*>(&to_msg);
  auto& from = static_cast<const Query_SpatialFilter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.Query.SpatialFilter)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_bb_region()->::cavnue::messages::geometry::v1::BoundingBox2f::MergeFrom(
        from._internal_bb_region());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Query_SpatialFilter::CopyFrom(const Query_SpatialFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.Query.SpatialFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query_SpatialFilter::IsInitialized() const {
  return true;
}

void Query_SpatialFilter::InternalSwap(Query_SpatialFilter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.bb_region_, other->_impl_.bb_region_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Query_SpatialFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto[4]);
}
// ===================================================================

class Query::_Internal {
 public:
  using HasBits = decltype(std::declval<Query>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Query, _impl_._has_bits_);
  static const ::cavnue::messages::world_state::v1::Query_TimeFilter& time_filter(const Query* msg);
  static void set_has_time_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cavnue::messages::world_state::v1::Query_ActorIdFilter& actors_filter(const Query* msg);
  static void set_has_actors_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::cavnue::messages::world_state::v1::Query_SpatialFilter& spatial_filter(const Query* msg);
  static void set_has_spatial_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::cavnue::messages::world_state::v1::Query_TimeFilter&
Query::_Internal::time_filter(const Query* msg) {
  return *msg->_impl_.time_filter_;
}
const ::cavnue::messages::world_state::v1::Query_ActorIdFilter&
Query::_Internal::actors_filter(const Query* msg) {
  return *msg->_impl_.actors_filter_;
}
const ::cavnue::messages::world_state::v1::Query_SpatialFilter&
Query::_Internal::spatial_filter(const Query* msg) {
  return *msg->_impl_.spatial_filter_;
}
Query::Query(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.Query)
}
Query::Query(const Query& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Query* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_filter_){nullptr}
    , decltype(_impl_.actors_filter_){nullptr}
    , decltype(_impl_.spatial_filter_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.time_filter_ = new ::cavnue::messages::world_state::v1::Query_TimeFilter(*from._impl_.time_filter_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.actors_filter_ = new ::cavnue::messages::world_state::v1::Query_ActorIdFilter(*from._impl_.actors_filter_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.spatial_filter_ = new ::cavnue::messages::world_state::v1::Query_SpatialFilter(*from._impl_.spatial_filter_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.Query)
}

inline void Query::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_filter_){nullptr}
    , decltype(_impl_.actors_filter_){nullptr}
    , decltype(_impl_.spatial_filter_){nullptr}
  };
}

Query::~Query() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.Query)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Query::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.time_filter_;
  if (this != internal_default_instance()) delete _impl_.actors_filter_;
  if (this != internal_default_instance()) delete _impl_.spatial_filter_;
}

void Query::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Query::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.Query)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.time_filter_ != nullptr);
      _impl_.time_filter_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.actors_filter_ != nullptr);
      _impl_.actors_filter_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.spatial_filter_ != nullptr);
      _impl_.spatial_filter_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Query::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .cavnue.messages.world_state.v1.Query.TimeFilter time_filter = 1 [json_name = "timeFilter"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_filter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .cavnue.messages.world_state.v1.Query.ActorIdFilter actors_filter = 2 [json_name = "actorsFilter"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_actors_filter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .cavnue.messages.world_state.v1.Query.SpatialFilter spatial_filter = 3 [json_name = "spatialFilter"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_spatial_filter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Query::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.Query)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .cavnue.messages.world_state.v1.Query.TimeFilter time_filter = 1 [json_name = "timeFilter"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time_filter(this),
        _Internal::time_filter(this).GetCachedSize(), target, stream);
  }

  // optional .cavnue.messages.world_state.v1.Query.ActorIdFilter actors_filter = 2 [json_name = "actorsFilter"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::actors_filter(this),
        _Internal::actors_filter(this).GetCachedSize(), target, stream);
  }

  // optional .cavnue.messages.world_state.v1.Query.SpatialFilter spatial_filter = 3 [json_name = "spatialFilter"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::spatial_filter(this),
        _Internal::spatial_filter(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.Query)
  return target;
}

::size_t Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.Query)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .cavnue.messages.world_state.v1.Query.TimeFilter time_filter = 1 [json_name = "timeFilter"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.time_filter_);
    }

    // optional .cavnue.messages.world_state.v1.Query.ActorIdFilter actors_filter = 2 [json_name = "actorsFilter"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.actors_filter_);
    }

    // optional .cavnue.messages.world_state.v1.Query.SpatialFilter spatial_filter = 3 [json_name = "spatialFilter"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spatial_filter_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Query::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Query::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Query::GetClassData() const { return &_class_data_; }


void Query::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Query*>(&to_msg);
  auto& from = static_cast<const Query&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.Query)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_time_filter()->::cavnue::messages::world_state::v1::Query_TimeFilter::MergeFrom(
          from._internal_time_filter());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_actors_filter()->::cavnue::messages::world_state::v1::Query_ActorIdFilter::MergeFrom(
          from._internal_actors_filter());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_spatial_filter()->::cavnue::messages::world_state::v1::Query_SpatialFilter::MergeFrom(
          from._internal_spatial_filter());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Query::CopyFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query::IsInitialized() const {
  return true;
}

void Query::InternalSwap(Query* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Query, _impl_.spatial_filter_)
      + sizeof(Query::_impl_.spatial_filter_)
      - PROTOBUF_FIELD_OFFSET(Query, _impl_.time_filter_)>(
          reinterpret_cast<char*>(&_impl_.time_filter_),
          reinterpret_cast<char*>(&other->_impl_.time_filter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Query::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto[5]);
}
// ===================================================================

class GetServiceApiRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetServiceApiRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetServiceApiRequest, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Empty& empty(const GetServiceApiRequest* msg);
  static void set_has_empty(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Empty&
GetServiceApiRequest::_Internal::empty(const GetServiceApiRequest* msg) {
  return *msg->_impl_.empty_;
}
void GetServiceApiRequest::clear_empty() {
  if (_impl_.empty_ != nullptr) _impl_.empty_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetServiceApiRequest::GetServiceApiRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.GetServiceApiRequest)
}
GetServiceApiRequest::GetServiceApiRequest(const GetServiceApiRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetServiceApiRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.empty_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.empty_ = new ::PROTOBUF_NAMESPACE_ID::Empty(*from._impl_.empty_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.GetServiceApiRequest)
}

inline void GetServiceApiRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.empty_){nullptr}
  };
}

GetServiceApiRequest::~GetServiceApiRequest() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.GetServiceApiRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetServiceApiRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.empty_;
}

void GetServiceApiRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetServiceApiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.GetServiceApiRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.empty_ != nullptr);
    _impl_.empty_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceApiRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Empty empty = 1 [json_name = "empty"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetServiceApiRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.GetServiceApiRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Empty empty = 1 [json_name = "empty"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::empty(this),
        _Internal::empty(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.GetServiceApiRequest)
  return target;
}

::size_t GetServiceApiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.GetServiceApiRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Empty empty = 1 [json_name = "empty"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.empty_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServiceApiRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetServiceApiRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServiceApiRequest::GetClassData() const { return &_class_data_; }


void GetServiceApiRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetServiceApiRequest*>(&to_msg);
  auto& from = static_cast<const GetServiceApiRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.GetServiceApiRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_empty()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(
        from._internal_empty());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServiceApiRequest::CopyFrom(const GetServiceApiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.GetServiceApiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceApiRequest::IsInitialized() const {
  return true;
}

void GetServiceApiRequest::InternalSwap(GetServiceApiRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.empty_, other->_impl_.empty_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceApiRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto[6]);
}
// ===================================================================

class GetServiceApiResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetServiceApiResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetServiceApiResponse, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Api& api(const GetServiceApiResponse* msg);
  static void set_has_api(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Api&
GetServiceApiResponse::_Internal::api(const GetServiceApiResponse* msg) {
  return *msg->_impl_.api_;
}
void GetServiceApiResponse::clear_api() {
  if (_impl_.api_ != nullptr) _impl_.api_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetServiceApiResponse::GetServiceApiResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.GetServiceApiResponse)
}
GetServiceApiResponse::GetServiceApiResponse(const GetServiceApiResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetServiceApiResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.api_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.api_ = new ::PROTOBUF_NAMESPACE_ID::Api(*from._impl_.api_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.GetServiceApiResponse)
}

inline void GetServiceApiResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.api_){nullptr}
  };
}

GetServiceApiResponse::~GetServiceApiResponse() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.GetServiceApiResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetServiceApiResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.api_;
}

void GetServiceApiResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetServiceApiResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.GetServiceApiResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.api_ != nullptr);
    _impl_.api_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceApiResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Api api = 1 [json_name = "api"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_api(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetServiceApiResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.GetServiceApiResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Api api = 1 [json_name = "api"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::api(this),
        _Internal::api(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.GetServiceApiResponse)
  return target;
}

::size_t GetServiceApiResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.GetServiceApiResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Api api = 1 [json_name = "api"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.api_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServiceApiResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetServiceApiResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServiceApiResponse::GetClassData() const { return &_class_data_; }


void GetServiceApiResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetServiceApiResponse*>(&to_msg);
  auto& from = static_cast<const GetServiceApiResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.GetServiceApiResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_api()->::PROTOBUF_NAMESPACE_ID::Api::MergeFrom(
        from._internal_api());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServiceApiResponse::CopyFrom(const GetServiceApiResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.GetServiceApiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceApiResponse::IsInitialized() const {
  return true;
}

void GetServiceApiResponse::InternalSwap(GetServiceApiResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.api_, other->_impl_.api_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceApiResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto[7]);
}
// ===================================================================

class GetWorldStateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetWorldStateRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetWorldStateRequest, _impl_._has_bits_);
  static const ::cavnue::messages::world_state::v1::Query& query(const GetWorldStateRequest* msg);
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cavnue::messages::world_state::v1::Query&
GetWorldStateRequest::_Internal::query(const GetWorldStateRequest* msg) {
  return *msg->_impl_.query_;
}
GetWorldStateRequest::GetWorldStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.GetWorldStateRequest)
}
GetWorldStateRequest::GetWorldStateRequest(const GetWorldStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetWorldStateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.query_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.query_ = new ::cavnue::messages::world_state::v1::Query(*from._impl_.query_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.GetWorldStateRequest)
}

inline void GetWorldStateRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.query_){nullptr}
  };
}

GetWorldStateRequest::~GetWorldStateRequest() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.GetWorldStateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetWorldStateRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.query_;
}

void GetWorldStateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetWorldStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.GetWorldStateRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.query_ != nullptr);
    _impl_.query_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWorldStateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetWorldStateRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.GetWorldStateRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::query(this),
        _Internal::query(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.GetWorldStateRequest)
  return target;
}

::size_t GetWorldStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.GetWorldStateRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.query_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWorldStateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetWorldStateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWorldStateRequest::GetClassData() const { return &_class_data_; }


void GetWorldStateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetWorldStateRequest*>(&to_msg);
  auto& from = static_cast<const GetWorldStateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.GetWorldStateRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_query()->::cavnue::messages::world_state::v1::Query::MergeFrom(
        from._internal_query());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetWorldStateRequest::CopyFrom(const GetWorldStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.GetWorldStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWorldStateRequest::IsInitialized() const {
  return true;
}

void GetWorldStateRequest::InternalSwap(GetWorldStateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.query_, other->_impl_.query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWorldStateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto[8]);
}
// ===================================================================

class GetWorldStateResponse::_Internal {
 public:
};

void GetWorldStateResponse::clear_actors() {
  _internal_mutable_actors()->Clear();
}
void GetWorldStateResponse::clear_events() {
  _internal_mutable_events()->Clear();
}
GetWorldStateResponse::GetWorldStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.GetWorldStateResponse)
}
GetWorldStateResponse::GetWorldStateResponse(const GetWorldStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetWorldStateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.actors_){from._impl_.actors_}
    , decltype(_impl_.events_){from._impl_.events_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.GetWorldStateResponse)
}

inline void GetWorldStateResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.actors_){arena}
    , decltype(_impl_.events_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetWorldStateResponse::~GetWorldStateResponse() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.GetWorldStateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetWorldStateResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_actors()->~RepeatedPtrField();
  _internal_mutable_events()->~RepeatedPtrField();
}

void GetWorldStateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetWorldStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.GetWorldStateResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_actors()->Clear();
  _internal_mutable_events()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWorldStateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cavnue.messages.inference.v1.Actor actors = 1 [json_name = "actors"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cavnue.messages.inference.v1.Event events = 2 [json_name = "events"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetWorldStateResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.GetWorldStateResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cavnue.messages.inference.v1.Actor actors = 1 [json_name = "actors"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_actors_size()); i < n; i++) {
    const auto& repfield = this->_internal_actors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cavnue.messages.inference.v1.Event events = 2 [json_name = "events"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.GetWorldStateResponse)
  return target;
}

::size_t GetWorldStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.GetWorldStateResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cavnue.messages.inference.v1.Actor actors = 1 [json_name = "actors"];
  total_size += 1UL * this->_internal_actors_size();
  for (const auto& msg : this->_internal_actors()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cavnue.messages.inference.v1.Event events = 2 [json_name = "events"];
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_internal_events()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWorldStateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetWorldStateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWorldStateResponse::GetClassData() const { return &_class_data_; }


void GetWorldStateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetWorldStateResponse*>(&to_msg);
  auto& from = static_cast<const GetWorldStateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.GetWorldStateResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_actors()->MergeFrom(from._internal_actors());
  _this->_internal_mutable_events()->MergeFrom(from._internal_events());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetWorldStateResponse::CopyFrom(const GetWorldStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.GetWorldStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWorldStateResponse::IsInitialized() const {
  return true;
}

void GetWorldStateResponse::InternalSwap(GetWorldStateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_actors()->InternalSwap(other->_internal_mutable_actors());
  _internal_mutable_events()->InternalSwap(other->_internal_mutable_events());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWorldStateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto[9]);
}
// ===================================================================

class GetActorsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetActorsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetActorsRequest, _impl_._has_bits_);
  static const ::cavnue::messages::world_state::v1::Query& query(const GetActorsRequest* msg);
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cavnue::messages::world_state::v1::Query&
GetActorsRequest::_Internal::query(const GetActorsRequest* msg) {
  return *msg->_impl_.query_;
}
GetActorsRequest::GetActorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.GetActorsRequest)
}
GetActorsRequest::GetActorsRequest(const GetActorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetActorsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.query_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.query_ = new ::cavnue::messages::world_state::v1::Query(*from._impl_.query_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.GetActorsRequest)
}

inline void GetActorsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.query_){nullptr}
  };
}

GetActorsRequest::~GetActorsRequest() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.GetActorsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetActorsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.query_;
}

void GetActorsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetActorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.GetActorsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.query_ != nullptr);
    _impl_.query_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetActorsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetActorsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.GetActorsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::query(this),
        _Internal::query(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.GetActorsRequest)
  return target;
}

::size_t GetActorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.GetActorsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.query_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetActorsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetActorsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetActorsRequest::GetClassData() const { return &_class_data_; }


void GetActorsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetActorsRequest*>(&to_msg);
  auto& from = static_cast<const GetActorsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.GetActorsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_query()->::cavnue::messages::world_state::v1::Query::MergeFrom(
        from._internal_query());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetActorsRequest::CopyFrom(const GetActorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.GetActorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetActorsRequest::IsInitialized() const {
  return true;
}

void GetActorsRequest::InternalSwap(GetActorsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.query_, other->_impl_.query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetActorsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto[10]);
}
// ===================================================================

class GetActorsResponse::_Internal {
 public:
};

void GetActorsResponse::clear_actors() {
  _internal_mutable_actors()->Clear();
}
GetActorsResponse::GetActorsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.GetActorsResponse)
}
GetActorsResponse::GetActorsResponse(const GetActorsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetActorsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.actors_){from._impl_.actors_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.GetActorsResponse)
}

inline void GetActorsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.actors_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetActorsResponse::~GetActorsResponse() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.GetActorsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetActorsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_actors()->~RepeatedPtrField();
}

void GetActorsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetActorsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.GetActorsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_actors()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetActorsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cavnue.messages.inference.v1.Actor actors = 1 [json_name = "actors"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetActorsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.GetActorsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cavnue.messages.inference.v1.Actor actors = 1 [json_name = "actors"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_actors_size()); i < n; i++) {
    const auto& repfield = this->_internal_actors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.GetActorsResponse)
  return target;
}

::size_t GetActorsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.GetActorsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cavnue.messages.inference.v1.Actor actors = 1 [json_name = "actors"];
  total_size += 1UL * this->_internal_actors_size();
  for (const auto& msg : this->_internal_actors()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetActorsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetActorsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetActorsResponse::GetClassData() const { return &_class_data_; }


void GetActorsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetActorsResponse*>(&to_msg);
  auto& from = static_cast<const GetActorsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.GetActorsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_actors()->MergeFrom(from._internal_actors());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetActorsResponse::CopyFrom(const GetActorsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.GetActorsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetActorsResponse::IsInitialized() const {
  return true;
}

void GetActorsResponse::InternalSwap(GetActorsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_actors()->InternalSwap(other->_internal_mutable_actors());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetActorsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto[11]);
}
// ===================================================================

class GetEventsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetEventsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetEventsRequest, _impl_._has_bits_);
  static const ::cavnue::messages::world_state::v1::Query& query(const GetEventsRequest* msg);
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cavnue::messages::world_state::v1::Query&
GetEventsRequest::_Internal::query(const GetEventsRequest* msg) {
  return *msg->_impl_.query_;
}
GetEventsRequest::GetEventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.GetEventsRequest)
}
GetEventsRequest::GetEventsRequest(const GetEventsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetEventsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.query_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.query_ = new ::cavnue::messages::world_state::v1::Query(*from._impl_.query_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.GetEventsRequest)
}

inline void GetEventsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.query_){nullptr}
  };
}

GetEventsRequest::~GetEventsRequest() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.GetEventsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetEventsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.query_;
}

void GetEventsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetEventsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.GetEventsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.query_ != nullptr);
    _impl_.query_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEventsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetEventsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.GetEventsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::query(this),
        _Internal::query(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.GetEventsRequest)
  return target;
}

::size_t GetEventsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.GetEventsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.query_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetEventsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetEventsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetEventsRequest::GetClassData() const { return &_class_data_; }


void GetEventsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetEventsRequest*>(&to_msg);
  auto& from = static_cast<const GetEventsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.GetEventsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_query()->::cavnue::messages::world_state::v1::Query::MergeFrom(
        from._internal_query());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetEventsRequest::CopyFrom(const GetEventsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.GetEventsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEventsRequest::IsInitialized() const {
  return true;
}

void GetEventsRequest::InternalSwap(GetEventsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.query_, other->_impl_.query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEventsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto[12]);
}
// ===================================================================

class GetEventsResponse::_Internal {
 public:
};

void GetEventsResponse::clear_events() {
  _internal_mutable_events()->Clear();
}
GetEventsResponse::GetEventsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.GetEventsResponse)
}
GetEventsResponse::GetEventsResponse(const GetEventsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetEventsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){from._impl_.events_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.GetEventsResponse)
}

inline void GetEventsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetEventsResponse::~GetEventsResponse() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.GetEventsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetEventsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_events()->~RepeatedPtrField();
}

void GetEventsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetEventsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.GetEventsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_events()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEventsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cavnue.messages.inference.v1.Event events = 1 [json_name = "events"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetEventsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.GetEventsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cavnue.messages.inference.v1.Event events = 1 [json_name = "events"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.GetEventsResponse)
  return target;
}

::size_t GetEventsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.GetEventsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cavnue.messages.inference.v1.Event events = 1 [json_name = "events"];
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_internal_events()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetEventsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetEventsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetEventsResponse::GetClassData() const { return &_class_data_; }


void GetEventsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetEventsResponse*>(&to_msg);
  auto& from = static_cast<const GetEventsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.GetEventsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_events()->MergeFrom(from._internal_events());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetEventsResponse::CopyFrom(const GetEventsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.GetEventsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEventsResponse::IsInitialized() const {
  return true;
}

void GetEventsResponse::InternalSwap(GetEventsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_events()->InternalSwap(other->_internal_mutable_events());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEventsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto[13]);
}
// ===================================================================

class GetAssetsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAssetsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetAssetsRequest, _impl_._has_bits_);
  static const ::cavnue::messages::world_state::v1::Query& query(const GetAssetsRequest* msg);
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cavnue::messages::world_state::v1::Query&
GetAssetsRequest::_Internal::query(const GetAssetsRequest* msg) {
  return *msg->_impl_.query_;
}
GetAssetsRequest::GetAssetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.GetAssetsRequest)
}
GetAssetsRequest::GetAssetsRequest(const GetAssetsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAssetsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.query_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.query_ = new ::cavnue::messages::world_state::v1::Query(*from._impl_.query_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.GetAssetsRequest)
}

inline void GetAssetsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.query_){nullptr}
  };
}

GetAssetsRequest::~GetAssetsRequest() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.GetAssetsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAssetsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.query_;
}

void GetAssetsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAssetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.GetAssetsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.query_ != nullptr);
    _impl_.query_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAssetsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetAssetsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.GetAssetsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::query(this),
        _Internal::query(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.GetAssetsRequest)
  return target;
}

::size_t GetAssetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.GetAssetsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.query_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAssetsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAssetsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAssetsRequest::GetClassData() const { return &_class_data_; }


void GetAssetsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAssetsRequest*>(&to_msg);
  auto& from = static_cast<const GetAssetsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.GetAssetsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_query()->::cavnue::messages::world_state::v1::Query::MergeFrom(
        from._internal_query());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAssetsRequest::CopyFrom(const GetAssetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.GetAssetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAssetsRequest::IsInitialized() const {
  return true;
}

void GetAssetsRequest::InternalSwap(GetAssetsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.query_, other->_impl_.query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAssetsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto[14]);
}
// ===================================================================

class GetAssetsResponse::_Internal {
 public:
};

GetAssetsResponse::GetAssetsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.GetAssetsResponse)
}
GetAssetsResponse::GetAssetsResponse(const GetAssetsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetAssetsResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.GetAssetsResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAssetsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAssetsResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetAssetsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto[15]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace world_state
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::Query_TimeFilter*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::Query_TimeFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::Query_TimeFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::Query_ActorIdFilter*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::Query_ActorIdFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::Query_ActorIdFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::Query_SpatialFilter*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::Query_SpatialFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::Query_SpatialFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::Query*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::Query >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::Query >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::GetServiceApiRequest*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::GetServiceApiRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::GetServiceApiRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::GetServiceApiResponse*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::GetServiceApiResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::GetServiceApiResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::GetWorldStateRequest*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::GetWorldStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::GetWorldStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::GetWorldStateResponse*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::GetWorldStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::GetWorldStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::GetActorsRequest*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::GetActorsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::GetActorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::GetActorsResponse*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::GetActorsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::GetActorsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::GetEventsRequest*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::GetEventsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::GetEventsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::GetEventsResponse*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::GetEventsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::GetEventsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::GetAssetsRequest*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::GetAssetsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::GetAssetsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::GetAssetsResponse*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::GetAssetsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::GetAssetsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

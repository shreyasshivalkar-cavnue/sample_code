// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/world_state/v1/service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
#include "google/protobuf/duration.pb.h"
#include "google/protobuf/api.pb.h"
#include "google/protobuf/empty.pb.h"
#include "cavnue/messages/inference/v1/actor.pb.h"
#include "cavnue/messages/inference/v1/events.pb.h"
#include "cavnue/messages/geometry/v1/point.pb.h"
#include "cavnue/messages/geometry/v1/bounding_box.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto;
namespace cavnue {
namespace messages {
namespace world_state {
namespace v1 {
class GetActorsRequest;
struct GetActorsRequestDefaultTypeInternal;
extern GetActorsRequestDefaultTypeInternal _GetActorsRequest_default_instance_;
class GetActorsResponse;
struct GetActorsResponseDefaultTypeInternal;
extern GetActorsResponseDefaultTypeInternal _GetActorsResponse_default_instance_;
class GetAssetsRequest;
struct GetAssetsRequestDefaultTypeInternal;
extern GetAssetsRequestDefaultTypeInternal _GetAssetsRequest_default_instance_;
class GetAssetsResponse;
struct GetAssetsResponseDefaultTypeInternal;
extern GetAssetsResponseDefaultTypeInternal _GetAssetsResponse_default_instance_;
class GetEventsRequest;
struct GetEventsRequestDefaultTypeInternal;
extern GetEventsRequestDefaultTypeInternal _GetEventsRequest_default_instance_;
class GetEventsResponse;
struct GetEventsResponseDefaultTypeInternal;
extern GetEventsResponseDefaultTypeInternal _GetEventsResponse_default_instance_;
class GetServiceApiRequest;
struct GetServiceApiRequestDefaultTypeInternal;
extern GetServiceApiRequestDefaultTypeInternal _GetServiceApiRequest_default_instance_;
class GetServiceApiResponse;
struct GetServiceApiResponseDefaultTypeInternal;
extern GetServiceApiResponseDefaultTypeInternal _GetServiceApiResponse_default_instance_;
class GetWorldStateRequest;
struct GetWorldStateRequestDefaultTypeInternal;
extern GetWorldStateRequestDefaultTypeInternal _GetWorldStateRequest_default_instance_;
class GetWorldStateResponse;
struct GetWorldStateResponseDefaultTypeInternal;
extern GetWorldStateResponseDefaultTypeInternal _GetWorldStateResponse_default_instance_;
class Query;
struct QueryDefaultTypeInternal;
extern QueryDefaultTypeInternal _Query_default_instance_;
class Query_ActorIdFilter;
struct Query_ActorIdFilterDefaultTypeInternal;
extern Query_ActorIdFilterDefaultTypeInternal _Query_ActorIdFilter_default_instance_;
class Query_SpatialFilter;
struct Query_SpatialFilterDefaultTypeInternal;
extern Query_SpatialFilterDefaultTypeInternal _Query_SpatialFilter_default_instance_;
class Query_TimeFilter;
struct Query_TimeFilterDefaultTypeInternal;
extern Query_TimeFilterDefaultTypeInternal _Query_TimeFilter_default_instance_;
class Query_TimeFilter_TimeInterval;
struct Query_TimeFilter_TimeIntervalDefaultTypeInternal;
extern Query_TimeFilter_TimeIntervalDefaultTypeInternal _Query_TimeFilter_TimeInterval_default_instance_;
class Query_TimeFilter_TimeLookback;
struct Query_TimeFilter_TimeLookbackDefaultTypeInternal;
extern Query_TimeFilter_TimeLookbackDefaultTypeInternal _Query_TimeFilter_TimeLookback_default_instance_;
}  // namespace v1
}  // namespace world_state
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template <>
::cavnue::messages::world_state::v1::GetActorsRequest* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::GetActorsRequest>(Arena*);
template <>
::cavnue::messages::world_state::v1::GetActorsResponse* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::GetActorsResponse>(Arena*);
template <>
::cavnue::messages::world_state::v1::GetAssetsRequest* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::GetAssetsRequest>(Arena*);
template <>
::cavnue::messages::world_state::v1::GetAssetsResponse* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::GetAssetsResponse>(Arena*);
template <>
::cavnue::messages::world_state::v1::GetEventsRequest* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::GetEventsRequest>(Arena*);
template <>
::cavnue::messages::world_state::v1::GetEventsResponse* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::GetEventsResponse>(Arena*);
template <>
::cavnue::messages::world_state::v1::GetServiceApiRequest* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::GetServiceApiRequest>(Arena*);
template <>
::cavnue::messages::world_state::v1::GetServiceApiResponse* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::GetServiceApiResponse>(Arena*);
template <>
::cavnue::messages::world_state::v1::GetWorldStateRequest* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::GetWorldStateRequest>(Arena*);
template <>
::cavnue::messages::world_state::v1::GetWorldStateResponse* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::GetWorldStateResponse>(Arena*);
template <>
::cavnue::messages::world_state::v1::Query* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::Query>(Arena*);
template <>
::cavnue::messages::world_state::v1::Query_ActorIdFilter* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::Query_ActorIdFilter>(Arena*);
template <>
::cavnue::messages::world_state::v1::Query_SpatialFilter* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::Query_SpatialFilter>(Arena*);
template <>
::cavnue::messages::world_state::v1::Query_TimeFilter* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::Query_TimeFilter>(Arena*);
template <>
::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval>(Arena*);
template <>
::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cavnue {
namespace messages {
namespace world_state {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class Query_TimeFilter_TimeInterval final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.Query.TimeFilter.TimeInterval) */ {
 public:
  inline Query_TimeFilter_TimeInterval() : Query_TimeFilter_TimeInterval(nullptr) {}
  ~Query_TimeFilter_TimeInterval() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Query_TimeFilter_TimeInterval(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Query_TimeFilter_TimeInterval(const Query_TimeFilter_TimeInterval& from);
  Query_TimeFilter_TimeInterval(Query_TimeFilter_TimeInterval&& from) noexcept
    : Query_TimeFilter_TimeInterval() {
    *this = ::std::move(from);
  }

  inline Query_TimeFilter_TimeInterval& operator=(const Query_TimeFilter_TimeInterval& from) {
    CopyFrom(from);
    return *this;
  }
  inline Query_TimeFilter_TimeInterval& operator=(Query_TimeFilter_TimeInterval&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Query_TimeFilter_TimeInterval& default_instance() {
    return *internal_default_instance();
  }
  static inline const Query_TimeFilter_TimeInterval* internal_default_instance() {
    return reinterpret_cast<const Query_TimeFilter_TimeInterval*>(
               &_Query_TimeFilter_TimeInterval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Query_TimeFilter_TimeInterval& a, Query_TimeFilter_TimeInterval& b) {
    a.Swap(&b);
  }
  inline void Swap(Query_TimeFilter_TimeInterval* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Query_TimeFilter_TimeInterval* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Query_TimeFilter_TimeInterval* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Query_TimeFilter_TimeInterval>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Query_TimeFilter_TimeInterval& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Query_TimeFilter_TimeInterval& from) {
    Query_TimeFilter_TimeInterval::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Query_TimeFilter_TimeInterval* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.Query.TimeFilter.TimeInterval";
  }
  protected:
  explicit Query_TimeFilter_TimeInterval(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTsFieldNumber = 1,
    kEndTsFieldNumber = 2,
  };
  // .google.protobuf.Timestamp start_ts = 1 [json_name = "startTs"];
  bool has_start_ts() const;
  void clear_start_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_start_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_ts();
  void set_allocated_start_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* start_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_ts();
  public:
  void unsafe_arena_set_allocated_start_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* start_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_ts();
  // .google.protobuf.Timestamp end_ts = 2 [json_name = "endTs"];
  bool has_end_ts() const;
  void clear_end_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_end_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_ts();
  void set_allocated_end_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* end_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_ts();
  public:
  void unsafe_arena_set_allocated_end_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* end_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_ts();
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.Query.TimeFilter.TimeInterval)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_ts_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_ts_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto;
};// -------------------------------------------------------------------

class Query_TimeFilter_TimeLookback final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.Query.TimeFilter.TimeLookback) */ {
 public:
  inline Query_TimeFilter_TimeLookback() : Query_TimeFilter_TimeLookback(nullptr) {}
  ~Query_TimeFilter_TimeLookback() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Query_TimeFilter_TimeLookback(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Query_TimeFilter_TimeLookback(const Query_TimeFilter_TimeLookback& from);
  Query_TimeFilter_TimeLookback(Query_TimeFilter_TimeLookback&& from) noexcept
    : Query_TimeFilter_TimeLookback() {
    *this = ::std::move(from);
  }

  inline Query_TimeFilter_TimeLookback& operator=(const Query_TimeFilter_TimeLookback& from) {
    CopyFrom(from);
    return *this;
  }
  inline Query_TimeFilter_TimeLookback& operator=(Query_TimeFilter_TimeLookback&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Query_TimeFilter_TimeLookback& default_instance() {
    return *internal_default_instance();
  }
  static inline const Query_TimeFilter_TimeLookback* internal_default_instance() {
    return reinterpret_cast<const Query_TimeFilter_TimeLookback*>(
               &_Query_TimeFilter_TimeLookback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Query_TimeFilter_TimeLookback& a, Query_TimeFilter_TimeLookback& b) {
    a.Swap(&b);
  }
  inline void Swap(Query_TimeFilter_TimeLookback* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Query_TimeFilter_TimeLookback* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Query_TimeFilter_TimeLookback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Query_TimeFilter_TimeLookback>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Query_TimeFilter_TimeLookback& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Query_TimeFilter_TimeLookback& from) {
    Query_TimeFilter_TimeLookback::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Query_TimeFilter_TimeLookback* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.Query.TimeFilter.TimeLookback";
  }
  protected:
  explicit Query_TimeFilter_TimeLookback(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndTsFieldNumber = 1,
    kLookbackFieldNumber = 2,
  };
  // .google.protobuf.Timestamp end_ts = 1 [json_name = "endTs"];
  bool has_end_ts() const;
  void clear_end_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_end_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_ts();
  void set_allocated_end_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* end_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_ts();
  public:
  void unsafe_arena_set_allocated_end_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* end_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_ts();
  // .google.protobuf.Duration lookback = 2 [json_name = "lookback"];
  bool has_lookback() const;
  void clear_lookback() ;
  const ::PROTOBUF_NAMESPACE_ID::Duration& lookback() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_lookback();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_lookback();
  void set_allocated_lookback(::PROTOBUF_NAMESPACE_ID::Duration* lookback);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_lookback() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_lookback();
  public:
  void unsafe_arena_set_allocated_lookback(
      ::PROTOBUF_NAMESPACE_ID::Duration* lookback);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_lookback();
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.Query.TimeFilter.TimeLookback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_ts_;
    ::PROTOBUF_NAMESPACE_ID::Duration* lookback_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto;
};// -------------------------------------------------------------------

class Query_TimeFilter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.Query.TimeFilter) */ {
 public:
  inline Query_TimeFilter() : Query_TimeFilter(nullptr) {}
  ~Query_TimeFilter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Query_TimeFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Query_TimeFilter(const Query_TimeFilter& from);
  Query_TimeFilter(Query_TimeFilter&& from) noexcept
    : Query_TimeFilter() {
    *this = ::std::move(from);
  }

  inline Query_TimeFilter& operator=(const Query_TimeFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Query_TimeFilter& operator=(Query_TimeFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Query_TimeFilter& default_instance() {
    return *internal_default_instance();
  }
  enum TimeCase {
    kInterval = 1,
    kLookback = 2,
    TIME_NOT_SET = 0,
  };

  static inline const Query_TimeFilter* internal_default_instance() {
    return reinterpret_cast<const Query_TimeFilter*>(
               &_Query_TimeFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Query_TimeFilter& a, Query_TimeFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(Query_TimeFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Query_TimeFilter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Query_TimeFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Query_TimeFilter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Query_TimeFilter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Query_TimeFilter& from) {
    Query_TimeFilter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Query_TimeFilter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.Query.TimeFilter";
  }
  protected:
  explicit Query_TimeFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Query_TimeFilter_TimeInterval TimeInterval;
  typedef Query_TimeFilter_TimeLookback TimeLookback;

  // accessors -------------------------------------------------------

  enum : int {
    kIntervalFieldNumber = 1,
    kLookbackFieldNumber = 2,
  };
  // .cavnue.messages.world_state.v1.Query.TimeFilter.TimeInterval interval = 1 [json_name = "interval"];
  bool has_interval() const;
  private:
  bool _internal_has_interval() const;

  public:
  void clear_interval() ;
  const ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval& interval() const;
  PROTOBUF_NODISCARD ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval* release_interval();
  ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval* mutable_interval();
  void set_allocated_interval(::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval* interval);
  private:
  const ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval& _internal_interval() const;
  ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval* _internal_mutable_interval();
  public:
  void unsafe_arena_set_allocated_interval(
      ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval* interval);
  ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval* unsafe_arena_release_interval();
  // .cavnue.messages.world_state.v1.Query.TimeFilter.TimeLookback lookback = 2 [json_name = "lookback"];
  bool has_lookback() const;
  private:
  bool _internal_has_lookback() const;

  public:
  void clear_lookback() ;
  const ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback& lookback() const;
  PROTOBUF_NODISCARD ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback* release_lookback();
  ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback* mutable_lookback();
  void set_allocated_lookback(::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback* lookback);
  private:
  const ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback& _internal_lookback() const;
  ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback* _internal_mutable_lookback();
  public:
  void unsafe_arena_set_allocated_lookback(
      ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback* lookback);
  ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback* unsafe_arena_release_lookback();
  void clear_time();
  TimeCase time_case() const;
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.Query.TimeFilter)
 private:
  class _Internal;
  void set_has_interval();
  void set_has_lookback();

  inline bool has_time() const;
  inline void clear_has_time();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union TimeUnion {
      constexpr TimeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval* interval_;
      ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback* lookback_;
    } time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto;
};// -------------------------------------------------------------------

class Query_ActorIdFilter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.Query.ActorIdFilter) */ {
 public:
  inline Query_ActorIdFilter() : Query_ActorIdFilter(nullptr) {}
  ~Query_ActorIdFilter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Query_ActorIdFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Query_ActorIdFilter(const Query_ActorIdFilter& from);
  Query_ActorIdFilter(Query_ActorIdFilter&& from) noexcept
    : Query_ActorIdFilter() {
    *this = ::std::move(from);
  }

  inline Query_ActorIdFilter& operator=(const Query_ActorIdFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Query_ActorIdFilter& operator=(Query_ActorIdFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Query_ActorIdFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const Query_ActorIdFilter* internal_default_instance() {
    return reinterpret_cast<const Query_ActorIdFilter*>(
               &_Query_ActorIdFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Query_ActorIdFilter& a, Query_ActorIdFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(Query_ActorIdFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Query_ActorIdFilter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Query_ActorIdFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Query_ActorIdFilter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Query_ActorIdFilter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Query_ActorIdFilter& from) {
    Query_ActorIdFilter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Query_ActorIdFilter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.Query.ActorIdFilter";
  }
  protected:
  explicit Query_ActorIdFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorIdsFieldNumber = 1,
  };
  // repeated int64 actor_ids = 1 [json_name = "actorIds"];
  int actor_ids_size() const;
  private:
  int _internal_actor_ids_size() const;

  public:
  void clear_actor_ids() ;
  ::int64_t actor_ids(int index) const;
  void set_actor_ids(int index, ::int64_t value);
  void add_actor_ids(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& actor_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* mutable_actor_ids();

  private:
  ::int64_t _internal_actor_ids(int index) const;
  void _internal_add_actor_ids(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& _internal_actor_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* _internal_mutable_actor_ids();

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.Query.ActorIdFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t> actor_ids_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _actor_ids_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto;
};// -------------------------------------------------------------------

class Query_SpatialFilter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.Query.SpatialFilter) */ {
 public:
  inline Query_SpatialFilter() : Query_SpatialFilter(nullptr) {}
  ~Query_SpatialFilter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Query_SpatialFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Query_SpatialFilter(const Query_SpatialFilter& from);
  Query_SpatialFilter(Query_SpatialFilter&& from) noexcept
    : Query_SpatialFilter() {
    *this = ::std::move(from);
  }

  inline Query_SpatialFilter& operator=(const Query_SpatialFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Query_SpatialFilter& operator=(Query_SpatialFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Query_SpatialFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const Query_SpatialFilter* internal_default_instance() {
    return reinterpret_cast<const Query_SpatialFilter*>(
               &_Query_SpatialFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Query_SpatialFilter& a, Query_SpatialFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(Query_SpatialFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Query_SpatialFilter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Query_SpatialFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Query_SpatialFilter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Query_SpatialFilter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Query_SpatialFilter& from) {
    Query_SpatialFilter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Query_SpatialFilter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.Query.SpatialFilter";
  }
  protected:
  explicit Query_SpatialFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBbRegionFieldNumber = 1,
  };
  // .cavnue.messages.geometry.v1.BoundingBox2f bb_region = 1 [json_name = "bbRegion"];
  bool has_bb_region() const;
  void clear_bb_region() ;
  const ::cavnue::messages::geometry::v1::BoundingBox2f& bb_region() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::BoundingBox2f* release_bb_region();
  ::cavnue::messages::geometry::v1::BoundingBox2f* mutable_bb_region();
  void set_allocated_bb_region(::cavnue::messages::geometry::v1::BoundingBox2f* bb_region);
  private:
  const ::cavnue::messages::geometry::v1::BoundingBox2f& _internal_bb_region() const;
  ::cavnue::messages::geometry::v1::BoundingBox2f* _internal_mutable_bb_region();
  public:
  void unsafe_arena_set_allocated_bb_region(
      ::cavnue::messages::geometry::v1::BoundingBox2f* bb_region);
  ::cavnue::messages::geometry::v1::BoundingBox2f* unsafe_arena_release_bb_region();
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.Query.SpatialFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::geometry::v1::BoundingBox2f* bb_region_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto;
};// -------------------------------------------------------------------

class Query final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.Query) */ {
 public:
  inline Query() : Query(nullptr) {}
  ~Query() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Query(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Query(const Query& from);
  Query(Query&& from) noexcept
    : Query() {
    *this = ::std::move(from);
  }

  inline Query& operator=(const Query& from) {
    CopyFrom(from);
    return *this;
  }
  inline Query& operator=(Query&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Query& default_instance() {
    return *internal_default_instance();
  }
  static inline const Query* internal_default_instance() {
    return reinterpret_cast<const Query*>(
               &_Query_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Query& a, Query& b) {
    a.Swap(&b);
  }
  inline void Swap(Query* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Query* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Query* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Query>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Query& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Query& from) {
    Query::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Query* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.Query";
  }
  protected:
  explicit Query(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Query_TimeFilter TimeFilter;
  typedef Query_ActorIdFilter ActorIdFilter;
  typedef Query_SpatialFilter SpatialFilter;

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFilterFieldNumber = 1,
    kActorsFilterFieldNumber = 2,
    kSpatialFilterFieldNumber = 3,
  };
  // optional .cavnue.messages.world_state.v1.Query.TimeFilter time_filter = 1 [json_name = "timeFilter"];
  bool has_time_filter() const;
  void clear_time_filter() ;
  const ::cavnue::messages::world_state::v1::Query_TimeFilter& time_filter() const;
  PROTOBUF_NODISCARD ::cavnue::messages::world_state::v1::Query_TimeFilter* release_time_filter();
  ::cavnue::messages::world_state::v1::Query_TimeFilter* mutable_time_filter();
  void set_allocated_time_filter(::cavnue::messages::world_state::v1::Query_TimeFilter* time_filter);
  private:
  const ::cavnue::messages::world_state::v1::Query_TimeFilter& _internal_time_filter() const;
  ::cavnue::messages::world_state::v1::Query_TimeFilter* _internal_mutable_time_filter();
  public:
  void unsafe_arena_set_allocated_time_filter(
      ::cavnue::messages::world_state::v1::Query_TimeFilter* time_filter);
  ::cavnue::messages::world_state::v1::Query_TimeFilter* unsafe_arena_release_time_filter();
  // optional .cavnue.messages.world_state.v1.Query.ActorIdFilter actors_filter = 2 [json_name = "actorsFilter"];
  bool has_actors_filter() const;
  void clear_actors_filter() ;
  const ::cavnue::messages::world_state::v1::Query_ActorIdFilter& actors_filter() const;
  PROTOBUF_NODISCARD ::cavnue::messages::world_state::v1::Query_ActorIdFilter* release_actors_filter();
  ::cavnue::messages::world_state::v1::Query_ActorIdFilter* mutable_actors_filter();
  void set_allocated_actors_filter(::cavnue::messages::world_state::v1::Query_ActorIdFilter* actors_filter);
  private:
  const ::cavnue::messages::world_state::v1::Query_ActorIdFilter& _internal_actors_filter() const;
  ::cavnue::messages::world_state::v1::Query_ActorIdFilter* _internal_mutable_actors_filter();
  public:
  void unsafe_arena_set_allocated_actors_filter(
      ::cavnue::messages::world_state::v1::Query_ActorIdFilter* actors_filter);
  ::cavnue::messages::world_state::v1::Query_ActorIdFilter* unsafe_arena_release_actors_filter();
  // optional .cavnue.messages.world_state.v1.Query.SpatialFilter spatial_filter = 3 [json_name = "spatialFilter"];
  bool has_spatial_filter() const;
  void clear_spatial_filter() ;
  const ::cavnue::messages::world_state::v1::Query_SpatialFilter& spatial_filter() const;
  PROTOBUF_NODISCARD ::cavnue::messages::world_state::v1::Query_SpatialFilter* release_spatial_filter();
  ::cavnue::messages::world_state::v1::Query_SpatialFilter* mutable_spatial_filter();
  void set_allocated_spatial_filter(::cavnue::messages::world_state::v1::Query_SpatialFilter* spatial_filter);
  private:
  const ::cavnue::messages::world_state::v1::Query_SpatialFilter& _internal_spatial_filter() const;
  ::cavnue::messages::world_state::v1::Query_SpatialFilter* _internal_mutable_spatial_filter();
  public:
  void unsafe_arena_set_allocated_spatial_filter(
      ::cavnue::messages::world_state::v1::Query_SpatialFilter* spatial_filter);
  ::cavnue::messages::world_state::v1::Query_SpatialFilter* unsafe_arena_release_spatial_filter();
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.Query)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::world_state::v1::Query_TimeFilter* time_filter_;
    ::cavnue::messages::world_state::v1::Query_ActorIdFilter* actors_filter_;
    ::cavnue::messages::world_state::v1::Query_SpatialFilter* spatial_filter_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto;
};// -------------------------------------------------------------------

class GetServiceApiRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.GetServiceApiRequest) */ {
 public:
  inline GetServiceApiRequest() : GetServiceApiRequest(nullptr) {}
  ~GetServiceApiRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetServiceApiRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServiceApiRequest(const GetServiceApiRequest& from);
  GetServiceApiRequest(GetServiceApiRequest&& from) noexcept
    : GetServiceApiRequest() {
    *this = ::std::move(from);
  }

  inline GetServiceApiRequest& operator=(const GetServiceApiRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceApiRequest& operator=(GetServiceApiRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServiceApiRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServiceApiRequest* internal_default_instance() {
    return reinterpret_cast<const GetServiceApiRequest*>(
               &_GetServiceApiRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetServiceApiRequest& a, GetServiceApiRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceApiRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceApiRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetServiceApiRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetServiceApiRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetServiceApiRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetServiceApiRequest& from) {
    GetServiceApiRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceApiRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.GetServiceApiRequest";
  }
  protected:
  explicit GetServiceApiRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmptyFieldNumber = 1,
  };
  // .google.protobuf.Empty empty = 1 [json_name = "empty"];
  bool has_empty() const;
  void clear_empty() ;
  const ::PROTOBUF_NAMESPACE_ID::Empty& empty() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Empty* release_empty();
  ::PROTOBUF_NAMESPACE_ID::Empty* mutable_empty();
  void set_allocated_empty(::PROTOBUF_NAMESPACE_ID::Empty* empty);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Empty& _internal_empty() const;
  ::PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_empty();
  public:
  void unsafe_arena_set_allocated_empty(
      ::PROTOBUF_NAMESPACE_ID::Empty* empty);
  ::PROTOBUF_NAMESPACE_ID::Empty* unsafe_arena_release_empty();
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.GetServiceApiRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Empty* empty_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto;
};// -------------------------------------------------------------------

class GetServiceApiResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.GetServiceApiResponse) */ {
 public:
  inline GetServiceApiResponse() : GetServiceApiResponse(nullptr) {}
  ~GetServiceApiResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetServiceApiResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServiceApiResponse(const GetServiceApiResponse& from);
  GetServiceApiResponse(GetServiceApiResponse&& from) noexcept
    : GetServiceApiResponse() {
    *this = ::std::move(from);
  }

  inline GetServiceApiResponse& operator=(const GetServiceApiResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceApiResponse& operator=(GetServiceApiResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServiceApiResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServiceApiResponse* internal_default_instance() {
    return reinterpret_cast<const GetServiceApiResponse*>(
               &_GetServiceApiResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetServiceApiResponse& a, GetServiceApiResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceApiResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceApiResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetServiceApiResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetServiceApiResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetServiceApiResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetServiceApiResponse& from) {
    GetServiceApiResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceApiResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.GetServiceApiResponse";
  }
  protected:
  explicit GetServiceApiResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApiFieldNumber = 1,
  };
  // .google.protobuf.Api api = 1 [json_name = "api"];
  bool has_api() const;
  void clear_api() ;
  const ::PROTOBUF_NAMESPACE_ID::Api& api() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Api* release_api();
  ::PROTOBUF_NAMESPACE_ID::Api* mutable_api();
  void set_allocated_api(::PROTOBUF_NAMESPACE_ID::Api* api);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Api& _internal_api() const;
  ::PROTOBUF_NAMESPACE_ID::Api* _internal_mutable_api();
  public:
  void unsafe_arena_set_allocated_api(
      ::PROTOBUF_NAMESPACE_ID::Api* api);
  ::PROTOBUF_NAMESPACE_ID::Api* unsafe_arena_release_api();
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.GetServiceApiResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Api* api_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto;
};// -------------------------------------------------------------------

class GetWorldStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.GetWorldStateRequest) */ {
 public:
  inline GetWorldStateRequest() : GetWorldStateRequest(nullptr) {}
  ~GetWorldStateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetWorldStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetWorldStateRequest(const GetWorldStateRequest& from);
  GetWorldStateRequest(GetWorldStateRequest&& from) noexcept
    : GetWorldStateRequest() {
    *this = ::std::move(from);
  }

  inline GetWorldStateRequest& operator=(const GetWorldStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWorldStateRequest& operator=(GetWorldStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetWorldStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetWorldStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetWorldStateRequest*>(
               &_GetWorldStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetWorldStateRequest& a, GetWorldStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWorldStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWorldStateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetWorldStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetWorldStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetWorldStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetWorldStateRequest& from) {
    GetWorldStateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWorldStateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.GetWorldStateRequest";
  }
  protected:
  explicit GetWorldStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
  bool has_query() const;
  void clear_query() ;
  const ::cavnue::messages::world_state::v1::Query& query() const;
  PROTOBUF_NODISCARD ::cavnue::messages::world_state::v1::Query* release_query();
  ::cavnue::messages::world_state::v1::Query* mutable_query();
  void set_allocated_query(::cavnue::messages::world_state::v1::Query* query);
  private:
  const ::cavnue::messages::world_state::v1::Query& _internal_query() const;
  ::cavnue::messages::world_state::v1::Query* _internal_mutable_query();
  public:
  void unsafe_arena_set_allocated_query(
      ::cavnue::messages::world_state::v1::Query* query);
  ::cavnue::messages::world_state::v1::Query* unsafe_arena_release_query();
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.GetWorldStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::world_state::v1::Query* query_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto;
};// -------------------------------------------------------------------

class GetWorldStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.GetWorldStateResponse) */ {
 public:
  inline GetWorldStateResponse() : GetWorldStateResponse(nullptr) {}
  ~GetWorldStateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetWorldStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetWorldStateResponse(const GetWorldStateResponse& from);
  GetWorldStateResponse(GetWorldStateResponse&& from) noexcept
    : GetWorldStateResponse() {
    *this = ::std::move(from);
  }

  inline GetWorldStateResponse& operator=(const GetWorldStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWorldStateResponse& operator=(GetWorldStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetWorldStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetWorldStateResponse* internal_default_instance() {
    return reinterpret_cast<const GetWorldStateResponse*>(
               &_GetWorldStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetWorldStateResponse& a, GetWorldStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWorldStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWorldStateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetWorldStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetWorldStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetWorldStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetWorldStateResponse& from) {
    GetWorldStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWorldStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.GetWorldStateResponse";
  }
  protected:
  explicit GetWorldStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorsFieldNumber = 1,
    kEventsFieldNumber = 2,
  };
  // repeated .cavnue.messages.inference.v1.Actor actors = 1 [json_name = "actors"];
  int actors_size() const;
  private:
  int _internal_actors_size() const;

  public:
  void clear_actors() ;
  ::cavnue::messages::inference::v1::Actor* mutable_actors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Actor >*
      mutable_actors();
  private:
  const ::cavnue::messages::inference::v1::Actor& _internal_actors(int index) const;
  ::cavnue::messages::inference::v1::Actor* _internal_add_actors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Actor>& _internal_actors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Actor>* _internal_mutable_actors();
  public:
  const ::cavnue::messages::inference::v1::Actor& actors(int index) const;
  ::cavnue::messages::inference::v1::Actor* add_actors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Actor >&
      actors() const;
  // repeated .cavnue.messages.inference.v1.Event events = 2 [json_name = "events"];
  int events_size() const;
  private:
  int _internal_events_size() const;

  public:
  void clear_events() ;
  ::cavnue::messages::inference::v1::Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Event >*
      mutable_events();
  private:
  const ::cavnue::messages::inference::v1::Event& _internal_events(int index) const;
  ::cavnue::messages::inference::v1::Event* _internal_add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Event>& _internal_events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Event>* _internal_mutable_events();
  public:
  const ::cavnue::messages::inference::v1::Event& events(int index) const;
  ::cavnue::messages::inference::v1::Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Event >&
      events() const;
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.GetWorldStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Actor > actors_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Event > events_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto;
};// -------------------------------------------------------------------

class GetActorsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.GetActorsRequest) */ {
 public:
  inline GetActorsRequest() : GetActorsRequest(nullptr) {}
  ~GetActorsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetActorsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetActorsRequest(const GetActorsRequest& from);
  GetActorsRequest(GetActorsRequest&& from) noexcept
    : GetActorsRequest() {
    *this = ::std::move(from);
  }

  inline GetActorsRequest& operator=(const GetActorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetActorsRequest& operator=(GetActorsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetActorsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetActorsRequest* internal_default_instance() {
    return reinterpret_cast<const GetActorsRequest*>(
               &_GetActorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetActorsRequest& a, GetActorsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetActorsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetActorsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetActorsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetActorsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetActorsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetActorsRequest& from) {
    GetActorsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetActorsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.GetActorsRequest";
  }
  protected:
  explicit GetActorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
  bool has_query() const;
  void clear_query() ;
  const ::cavnue::messages::world_state::v1::Query& query() const;
  PROTOBUF_NODISCARD ::cavnue::messages::world_state::v1::Query* release_query();
  ::cavnue::messages::world_state::v1::Query* mutable_query();
  void set_allocated_query(::cavnue::messages::world_state::v1::Query* query);
  private:
  const ::cavnue::messages::world_state::v1::Query& _internal_query() const;
  ::cavnue::messages::world_state::v1::Query* _internal_mutable_query();
  public:
  void unsafe_arena_set_allocated_query(
      ::cavnue::messages::world_state::v1::Query* query);
  ::cavnue::messages::world_state::v1::Query* unsafe_arena_release_query();
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.GetActorsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::world_state::v1::Query* query_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto;
};// -------------------------------------------------------------------

class GetActorsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.GetActorsResponse) */ {
 public:
  inline GetActorsResponse() : GetActorsResponse(nullptr) {}
  ~GetActorsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetActorsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetActorsResponse(const GetActorsResponse& from);
  GetActorsResponse(GetActorsResponse&& from) noexcept
    : GetActorsResponse() {
    *this = ::std::move(from);
  }

  inline GetActorsResponse& operator=(const GetActorsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetActorsResponse& operator=(GetActorsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetActorsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetActorsResponse* internal_default_instance() {
    return reinterpret_cast<const GetActorsResponse*>(
               &_GetActorsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetActorsResponse& a, GetActorsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetActorsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetActorsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetActorsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetActorsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetActorsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetActorsResponse& from) {
    GetActorsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetActorsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.GetActorsResponse";
  }
  protected:
  explicit GetActorsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorsFieldNumber = 1,
  };
  // repeated .cavnue.messages.inference.v1.Actor actors = 1 [json_name = "actors"];
  int actors_size() const;
  private:
  int _internal_actors_size() const;

  public:
  void clear_actors() ;
  ::cavnue::messages::inference::v1::Actor* mutable_actors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Actor >*
      mutable_actors();
  private:
  const ::cavnue::messages::inference::v1::Actor& _internal_actors(int index) const;
  ::cavnue::messages::inference::v1::Actor* _internal_add_actors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Actor>& _internal_actors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Actor>* _internal_mutable_actors();
  public:
  const ::cavnue::messages::inference::v1::Actor& actors(int index) const;
  ::cavnue::messages::inference::v1::Actor* add_actors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Actor >&
      actors() const;
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.GetActorsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Actor > actors_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto;
};// -------------------------------------------------------------------

class GetEventsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.GetEventsRequest) */ {
 public:
  inline GetEventsRequest() : GetEventsRequest(nullptr) {}
  ~GetEventsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetEventsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetEventsRequest(const GetEventsRequest& from);
  GetEventsRequest(GetEventsRequest&& from) noexcept
    : GetEventsRequest() {
    *this = ::std::move(from);
  }

  inline GetEventsRequest& operator=(const GetEventsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEventsRequest& operator=(GetEventsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEventsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEventsRequest* internal_default_instance() {
    return reinterpret_cast<const GetEventsRequest*>(
               &_GetEventsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetEventsRequest& a, GetEventsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEventsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEventsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEventsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEventsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetEventsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetEventsRequest& from) {
    GetEventsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEventsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.GetEventsRequest";
  }
  protected:
  explicit GetEventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
  bool has_query() const;
  void clear_query() ;
  const ::cavnue::messages::world_state::v1::Query& query() const;
  PROTOBUF_NODISCARD ::cavnue::messages::world_state::v1::Query* release_query();
  ::cavnue::messages::world_state::v1::Query* mutable_query();
  void set_allocated_query(::cavnue::messages::world_state::v1::Query* query);
  private:
  const ::cavnue::messages::world_state::v1::Query& _internal_query() const;
  ::cavnue::messages::world_state::v1::Query* _internal_mutable_query();
  public:
  void unsafe_arena_set_allocated_query(
      ::cavnue::messages::world_state::v1::Query* query);
  ::cavnue::messages::world_state::v1::Query* unsafe_arena_release_query();
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.GetEventsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::world_state::v1::Query* query_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto;
};// -------------------------------------------------------------------

class GetEventsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.GetEventsResponse) */ {
 public:
  inline GetEventsResponse() : GetEventsResponse(nullptr) {}
  ~GetEventsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetEventsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetEventsResponse(const GetEventsResponse& from);
  GetEventsResponse(GetEventsResponse&& from) noexcept
    : GetEventsResponse() {
    *this = ::std::move(from);
  }

  inline GetEventsResponse& operator=(const GetEventsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEventsResponse& operator=(GetEventsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEventsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEventsResponse* internal_default_instance() {
    return reinterpret_cast<const GetEventsResponse*>(
               &_GetEventsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetEventsResponse& a, GetEventsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEventsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEventsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEventsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEventsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetEventsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetEventsResponse& from) {
    GetEventsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEventsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.GetEventsResponse";
  }
  protected:
  explicit GetEventsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
  };
  // repeated .cavnue.messages.inference.v1.Event events = 1 [json_name = "events"];
  int events_size() const;
  private:
  int _internal_events_size() const;

  public:
  void clear_events() ;
  ::cavnue::messages::inference::v1::Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Event >*
      mutable_events();
  private:
  const ::cavnue::messages::inference::v1::Event& _internal_events(int index) const;
  ::cavnue::messages::inference::v1::Event* _internal_add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Event>& _internal_events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Event>* _internal_mutable_events();
  public:
  const ::cavnue::messages::inference::v1::Event& events(int index) const;
  ::cavnue::messages::inference::v1::Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Event >&
      events() const;
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.GetEventsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Event > events_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto;
};// -------------------------------------------------------------------

class GetAssetsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.GetAssetsRequest) */ {
 public:
  inline GetAssetsRequest() : GetAssetsRequest(nullptr) {}
  ~GetAssetsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetAssetsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAssetsRequest(const GetAssetsRequest& from);
  GetAssetsRequest(GetAssetsRequest&& from) noexcept
    : GetAssetsRequest() {
    *this = ::std::move(from);
  }

  inline GetAssetsRequest& operator=(const GetAssetsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAssetsRequest& operator=(GetAssetsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAssetsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAssetsRequest* internal_default_instance() {
    return reinterpret_cast<const GetAssetsRequest*>(
               &_GetAssetsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetAssetsRequest& a, GetAssetsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAssetsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAssetsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAssetsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAssetsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAssetsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAssetsRequest& from) {
    GetAssetsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAssetsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.GetAssetsRequest";
  }
  protected:
  explicit GetAssetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
  bool has_query() const;
  void clear_query() ;
  const ::cavnue::messages::world_state::v1::Query& query() const;
  PROTOBUF_NODISCARD ::cavnue::messages::world_state::v1::Query* release_query();
  ::cavnue::messages::world_state::v1::Query* mutable_query();
  void set_allocated_query(::cavnue::messages::world_state::v1::Query* query);
  private:
  const ::cavnue::messages::world_state::v1::Query& _internal_query() const;
  ::cavnue::messages::world_state::v1::Query* _internal_mutable_query();
  public:
  void unsafe_arena_set_allocated_query(
      ::cavnue::messages::world_state::v1::Query* query);
  ::cavnue::messages::world_state::v1::Query* unsafe_arena_release_query();
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.GetAssetsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::world_state::v1::Query* query_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto;
};// -------------------------------------------------------------------

class GetAssetsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.GetAssetsResponse) */ {
 public:
  inline GetAssetsResponse() : GetAssetsResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetAssetsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAssetsResponse(const GetAssetsResponse& from);
  GetAssetsResponse(GetAssetsResponse&& from) noexcept
    : GetAssetsResponse() {
    *this = ::std::move(from);
  }

  inline GetAssetsResponse& operator=(const GetAssetsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAssetsResponse& operator=(GetAssetsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAssetsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAssetsResponse* internal_default_instance() {
    return reinterpret_cast<const GetAssetsResponse*>(
               &_GetAssetsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetAssetsResponse& a, GetAssetsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAssetsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAssetsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAssetsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAssetsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetAssetsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetAssetsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.GetAssetsResponse";
  }
  protected:
  explicit GetAssetsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.GetAssetsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Query_TimeFilter_TimeInterval

// .google.protobuf.Timestamp start_ts = 1 [json_name = "startTs"];
inline bool Query_TimeFilter_TimeInterval::has_start_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.start_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Query_TimeFilter_TimeInterval::_internal_start_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.start_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Query_TimeFilter_TimeInterval::start_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Query.TimeFilter.TimeInterval.start_ts)
  return _internal_start_ts();
}
inline void Query_TimeFilter_TimeInterval::unsafe_arena_set_allocated_start_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_ts_);
  }
  _impl_.start_ts_ = start_ts;
  if (start_ts) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.Query.TimeFilter.TimeInterval.start_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Query_TimeFilter_TimeInterval::release_start_ts() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_ts_;
  _impl_.start_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Query_TimeFilter_TimeInterval::unsafe_arena_release_start_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.Query.TimeFilter.TimeInterval.start_ts)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_ts_;
  _impl_.start_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Query_TimeFilter_TimeInterval::_internal_mutable_start_ts() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.start_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.start_ts_ = p;
  }
  return _impl_.start_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Query_TimeFilter_TimeInterval::mutable_start_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_start_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.Query.TimeFilter.TimeInterval.start_ts)
  return _msg;
}
inline void Query_TimeFilter_TimeInterval::set_allocated_start_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* start_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_ts_);
  }
  if (start_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_ts));
    if (message_arena != submessage_arena) {
      start_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.start_ts_ = start_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.Query.TimeFilter.TimeInterval.start_ts)
}

// .google.protobuf.Timestamp end_ts = 2 [json_name = "endTs"];
inline bool Query_TimeFilter_TimeInterval::has_end_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.end_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Query_TimeFilter_TimeInterval::_internal_end_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.end_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Query_TimeFilter_TimeInterval::end_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Query.TimeFilter.TimeInterval.end_ts)
  return _internal_end_ts();
}
inline void Query_TimeFilter_TimeInterval::unsafe_arena_set_allocated_end_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_ts_);
  }
  _impl_.end_ts_ = end_ts;
  if (end_ts) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.Query.TimeFilter.TimeInterval.end_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Query_TimeFilter_TimeInterval::release_end_ts() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_ts_;
  _impl_.end_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Query_TimeFilter_TimeInterval::unsafe_arena_release_end_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.Query.TimeFilter.TimeInterval.end_ts)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_ts_;
  _impl_.end_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Query_TimeFilter_TimeInterval::_internal_mutable_end_ts() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.end_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.end_ts_ = p;
  }
  return _impl_.end_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Query_TimeFilter_TimeInterval::mutable_end_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_end_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.Query.TimeFilter.TimeInterval.end_ts)
  return _msg;
}
inline void Query_TimeFilter_TimeInterval::set_allocated_end_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* end_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_ts_);
  }
  if (end_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_ts));
    if (message_arena != submessage_arena) {
      end_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.end_ts_ = end_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.Query.TimeFilter.TimeInterval.end_ts)
}

// -------------------------------------------------------------------

// Query_TimeFilter_TimeLookback

// .google.protobuf.Timestamp end_ts = 1 [json_name = "endTs"];
inline bool Query_TimeFilter_TimeLookback::has_end_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.end_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Query_TimeFilter_TimeLookback::_internal_end_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.end_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Query_TimeFilter_TimeLookback::end_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Query.TimeFilter.TimeLookback.end_ts)
  return _internal_end_ts();
}
inline void Query_TimeFilter_TimeLookback::unsafe_arena_set_allocated_end_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_ts_);
  }
  _impl_.end_ts_ = end_ts;
  if (end_ts) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.Query.TimeFilter.TimeLookback.end_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Query_TimeFilter_TimeLookback::release_end_ts() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_ts_;
  _impl_.end_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Query_TimeFilter_TimeLookback::unsafe_arena_release_end_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.Query.TimeFilter.TimeLookback.end_ts)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_ts_;
  _impl_.end_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Query_TimeFilter_TimeLookback::_internal_mutable_end_ts() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.end_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.end_ts_ = p;
  }
  return _impl_.end_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Query_TimeFilter_TimeLookback::mutable_end_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_end_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.Query.TimeFilter.TimeLookback.end_ts)
  return _msg;
}
inline void Query_TimeFilter_TimeLookback::set_allocated_end_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* end_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_ts_);
  }
  if (end_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_ts));
    if (message_arena != submessage_arena) {
      end_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.end_ts_ = end_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.Query.TimeFilter.TimeLookback.end_ts)
}

// .google.protobuf.Duration lookback = 2 [json_name = "lookback"];
inline bool Query_TimeFilter_TimeLookback::has_lookback() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lookback_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Query_TimeFilter_TimeLookback::_internal_lookback() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.lookback_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Query_TimeFilter_TimeLookback::lookback() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Query.TimeFilter.TimeLookback.lookback)
  return _internal_lookback();
}
inline void Query_TimeFilter_TimeLookback::unsafe_arena_set_allocated_lookback(
    ::PROTOBUF_NAMESPACE_ID::Duration* lookback) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lookback_);
  }
  _impl_.lookback_ = lookback;
  if (lookback) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.Query.TimeFilter.TimeLookback.lookback)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Query_TimeFilter_TimeLookback::release_lookback() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.lookback_;
  _impl_.lookback_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Query_TimeFilter_TimeLookback::unsafe_arena_release_lookback() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.Query.TimeFilter.TimeLookback.lookback)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.lookback_;
  _impl_.lookback_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Query_TimeFilter_TimeLookback::_internal_mutable_lookback() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.lookback_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.lookback_ = p;
  }
  return _impl_.lookback_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Query_TimeFilter_TimeLookback::mutable_lookback() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_lookback();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.Query.TimeFilter.TimeLookback.lookback)
  return _msg;
}
inline void Query_TimeFilter_TimeLookback::set_allocated_lookback(::PROTOBUF_NAMESPACE_ID::Duration* lookback) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lookback_);
  }
  if (lookback) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lookback));
    if (message_arena != submessage_arena) {
      lookback = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lookback, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.lookback_ = lookback;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.Query.TimeFilter.TimeLookback.lookback)
}

// -------------------------------------------------------------------

// Query_TimeFilter

// .cavnue.messages.world_state.v1.Query.TimeFilter.TimeInterval interval = 1 [json_name = "interval"];
inline bool Query_TimeFilter::has_interval() const {
  return time_case() == kInterval;
}
inline bool Query_TimeFilter::_internal_has_interval() const {
  return time_case() == kInterval;
}
inline void Query_TimeFilter::set_has_interval() {
  _impl_._oneof_case_[0] = kInterval;
}
inline void Query_TimeFilter::clear_interval() {
  if (time_case() == kInterval) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.time_.interval_;
    }
    clear_has_time();
  }
}
inline ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval* Query_TimeFilter::release_interval() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.Query.TimeFilter.interval)
  if (time_case() == kInterval) {
    clear_has_time();
    ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval* temp = _impl_.time_.interval_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.time_.interval_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval& Query_TimeFilter::_internal_interval() const {
  return time_case() == kInterval
      ? *_impl_.time_.interval_
      : reinterpret_cast<::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval&>(::cavnue::messages::world_state::v1::_Query_TimeFilter_TimeInterval_default_instance_);
}
inline const ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval& Query_TimeFilter::interval() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Query.TimeFilter.interval)
  return _internal_interval();
}
inline ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval* Query_TimeFilter::unsafe_arena_release_interval() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cavnue.messages.world_state.v1.Query.TimeFilter.interval)
  if (time_case() == kInterval) {
    clear_has_time();
    ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval* temp = _impl_.time_.interval_;
    _impl_.time_.interval_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Query_TimeFilter::unsafe_arena_set_allocated_interval(::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval* interval) {
  clear_time();
  if (interval) {
    set_has_interval();
    _impl_.time_.interval_ = interval;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.Query.TimeFilter.interval)
}
inline ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval* Query_TimeFilter::_internal_mutable_interval() {
  if (time_case() != kInterval) {
    clear_time();
    set_has_interval();
    _impl_.time_.interval_ = CreateMaybeMessage< ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval >(GetArenaForAllocation());
  }
  return _impl_.time_.interval_;
}
inline ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval* Query_TimeFilter::mutable_interval() {
  ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeInterval* _msg = _internal_mutable_interval();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.Query.TimeFilter.interval)
  return _msg;
}

// .cavnue.messages.world_state.v1.Query.TimeFilter.TimeLookback lookback = 2 [json_name = "lookback"];
inline bool Query_TimeFilter::has_lookback() const {
  return time_case() == kLookback;
}
inline bool Query_TimeFilter::_internal_has_lookback() const {
  return time_case() == kLookback;
}
inline void Query_TimeFilter::set_has_lookback() {
  _impl_._oneof_case_[0] = kLookback;
}
inline void Query_TimeFilter::clear_lookback() {
  if (time_case() == kLookback) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.time_.lookback_;
    }
    clear_has_time();
  }
}
inline ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback* Query_TimeFilter::release_lookback() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.Query.TimeFilter.lookback)
  if (time_case() == kLookback) {
    clear_has_time();
    ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback* temp = _impl_.time_.lookback_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.time_.lookback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback& Query_TimeFilter::_internal_lookback() const {
  return time_case() == kLookback
      ? *_impl_.time_.lookback_
      : reinterpret_cast<::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback&>(::cavnue::messages::world_state::v1::_Query_TimeFilter_TimeLookback_default_instance_);
}
inline const ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback& Query_TimeFilter::lookback() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Query.TimeFilter.lookback)
  return _internal_lookback();
}
inline ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback* Query_TimeFilter::unsafe_arena_release_lookback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cavnue.messages.world_state.v1.Query.TimeFilter.lookback)
  if (time_case() == kLookback) {
    clear_has_time();
    ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback* temp = _impl_.time_.lookback_;
    _impl_.time_.lookback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Query_TimeFilter::unsafe_arena_set_allocated_lookback(::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback* lookback) {
  clear_time();
  if (lookback) {
    set_has_lookback();
    _impl_.time_.lookback_ = lookback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.Query.TimeFilter.lookback)
}
inline ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback* Query_TimeFilter::_internal_mutable_lookback() {
  if (time_case() != kLookback) {
    clear_time();
    set_has_lookback();
    _impl_.time_.lookback_ = CreateMaybeMessage< ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback >(GetArenaForAllocation());
  }
  return _impl_.time_.lookback_;
}
inline ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback* Query_TimeFilter::mutable_lookback() {
  ::cavnue::messages::world_state::v1::Query_TimeFilter_TimeLookback* _msg = _internal_mutable_lookback();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.Query.TimeFilter.lookback)
  return _msg;
}

inline bool Query_TimeFilter::has_time() const {
  return time_case() != TIME_NOT_SET;
}
inline void Query_TimeFilter::clear_has_time() {
  _impl_._oneof_case_[0] = TIME_NOT_SET;
}
inline Query_TimeFilter::TimeCase Query_TimeFilter::time_case() const {
  return Query_TimeFilter::TimeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Query_ActorIdFilter

// repeated int64 actor_ids = 1 [json_name = "actorIds"];
inline int Query_ActorIdFilter::_internal_actor_ids_size() const {
  return _impl_.actor_ids_.size();
}
inline int Query_ActorIdFilter::actor_ids_size() const {
  return _internal_actor_ids_size();
}
inline void Query_ActorIdFilter::clear_actor_ids() {
  _internal_mutable_actor_ids()->Clear();
}
inline ::int64_t Query_ActorIdFilter::actor_ids(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Query.ActorIdFilter.actor_ids)
  return _internal_actor_ids(index);
}
inline void Query_ActorIdFilter::set_actor_ids(int index, ::int64_t value) {
  _internal_mutable_actor_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:cavnue.messages.world_state.v1.Query.ActorIdFilter.actor_ids)
}
inline void Query_ActorIdFilter::add_actor_ids(::int64_t value) {
  _internal_add_actor_ids(value);
  // @@protoc_insertion_point(field_add:cavnue.messages.world_state.v1.Query.ActorIdFilter.actor_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& Query_ActorIdFilter::actor_ids() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.world_state.v1.Query.ActorIdFilter.actor_ids)
  return _internal_actor_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* Query_ActorIdFilter::mutable_actor_ids() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.world_state.v1.Query.ActorIdFilter.actor_ids)
  return _internal_mutable_actor_ids();
}

inline ::int64_t Query_ActorIdFilter::_internal_actor_ids(int index) const {
  return _internal_actor_ids().Get(index);
}
inline void Query_ActorIdFilter::_internal_add_actor_ids(::int64_t value) {
  _internal_mutable_actor_ids()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& Query_ActorIdFilter::_internal_actor_ids() const {
  return _impl_.actor_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* Query_ActorIdFilter::_internal_mutable_actor_ids() {
  return &_impl_.actor_ids_;
}

// -------------------------------------------------------------------

// Query_SpatialFilter

// .cavnue.messages.geometry.v1.BoundingBox2f bb_region = 1 [json_name = "bbRegion"];
inline bool Query_SpatialFilter::has_bb_region() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bb_region_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::BoundingBox2f& Query_SpatialFilter::_internal_bb_region() const {
  const ::cavnue::messages::geometry::v1::BoundingBox2f* p = _impl_.bb_region_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::BoundingBox2f&>(
      ::cavnue::messages::geometry::v1::_BoundingBox2f_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::BoundingBox2f& Query_SpatialFilter::bb_region() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Query.SpatialFilter.bb_region)
  return _internal_bb_region();
}
inline void Query_SpatialFilter::unsafe_arena_set_allocated_bb_region(
    ::cavnue::messages::geometry::v1::BoundingBox2f* bb_region) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bb_region_);
  }
  _impl_.bb_region_ = bb_region;
  if (bb_region) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.Query.SpatialFilter.bb_region)
}
inline ::cavnue::messages::geometry::v1::BoundingBox2f* Query_SpatialFilter::release_bb_region() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::BoundingBox2f* temp = _impl_.bb_region_;
  _impl_.bb_region_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::BoundingBox2f* Query_SpatialFilter::unsafe_arena_release_bb_region() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.Query.SpatialFilter.bb_region)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::BoundingBox2f* temp = _impl_.bb_region_;
  _impl_.bb_region_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::BoundingBox2f* Query_SpatialFilter::_internal_mutable_bb_region() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.bb_region_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::BoundingBox2f>(GetArenaForAllocation());
    _impl_.bb_region_ = p;
  }
  return _impl_.bb_region_;
}
inline ::cavnue::messages::geometry::v1::BoundingBox2f* Query_SpatialFilter::mutable_bb_region() {
  ::cavnue::messages::geometry::v1::BoundingBox2f* _msg = _internal_mutable_bb_region();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.Query.SpatialFilter.bb_region)
  return _msg;
}
inline void Query_SpatialFilter::set_allocated_bb_region(::cavnue::messages::geometry::v1::BoundingBox2f* bb_region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bb_region_);
  }
  if (bb_region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bb_region));
    if (message_arena != submessage_arena) {
      bb_region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bb_region, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.bb_region_ = bb_region;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.Query.SpatialFilter.bb_region)
}

// -------------------------------------------------------------------

// Query

// optional .cavnue.messages.world_state.v1.Query.TimeFilter time_filter = 1 [json_name = "timeFilter"];
inline bool Query::has_time_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_filter_ != nullptr);
  return value;
}
inline void Query::clear_time_filter() {
  if (_impl_.time_filter_ != nullptr) _impl_.time_filter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cavnue::messages::world_state::v1::Query_TimeFilter& Query::_internal_time_filter() const {
  const ::cavnue::messages::world_state::v1::Query_TimeFilter* p = _impl_.time_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::world_state::v1::Query_TimeFilter&>(
      ::cavnue::messages::world_state::v1::_Query_TimeFilter_default_instance_);
}
inline const ::cavnue::messages::world_state::v1::Query_TimeFilter& Query::time_filter() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Query.time_filter)
  return _internal_time_filter();
}
inline void Query::unsafe_arena_set_allocated_time_filter(
    ::cavnue::messages::world_state::v1::Query_TimeFilter* time_filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_filter_);
  }
  _impl_.time_filter_ = time_filter;
  if (time_filter) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.Query.time_filter)
}
inline ::cavnue::messages::world_state::v1::Query_TimeFilter* Query::release_time_filter() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::world_state::v1::Query_TimeFilter* temp = _impl_.time_filter_;
  _impl_.time_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::world_state::v1::Query_TimeFilter* Query::unsafe_arena_release_time_filter() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.Query.time_filter)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::world_state::v1::Query_TimeFilter* temp = _impl_.time_filter_;
  _impl_.time_filter_ = nullptr;
  return temp;
}
inline ::cavnue::messages::world_state::v1::Query_TimeFilter* Query::_internal_mutable_time_filter() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.time_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::world_state::v1::Query_TimeFilter>(GetArenaForAllocation());
    _impl_.time_filter_ = p;
  }
  return _impl_.time_filter_;
}
inline ::cavnue::messages::world_state::v1::Query_TimeFilter* Query::mutable_time_filter() {
  ::cavnue::messages::world_state::v1::Query_TimeFilter* _msg = _internal_mutable_time_filter();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.Query.time_filter)
  return _msg;
}
inline void Query::set_allocated_time_filter(::cavnue::messages::world_state::v1::Query_TimeFilter* time_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.time_filter_;
  }
  if (time_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(time_filter);
    if (message_arena != submessage_arena) {
      time_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_filter, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.time_filter_ = time_filter;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.Query.time_filter)
}

// optional .cavnue.messages.world_state.v1.Query.ActorIdFilter actors_filter = 2 [json_name = "actorsFilter"];
inline bool Query::has_actors_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.actors_filter_ != nullptr);
  return value;
}
inline void Query::clear_actors_filter() {
  if (_impl_.actors_filter_ != nullptr) _impl_.actors_filter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::cavnue::messages::world_state::v1::Query_ActorIdFilter& Query::_internal_actors_filter() const {
  const ::cavnue::messages::world_state::v1::Query_ActorIdFilter* p = _impl_.actors_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::world_state::v1::Query_ActorIdFilter&>(
      ::cavnue::messages::world_state::v1::_Query_ActorIdFilter_default_instance_);
}
inline const ::cavnue::messages::world_state::v1::Query_ActorIdFilter& Query::actors_filter() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Query.actors_filter)
  return _internal_actors_filter();
}
inline void Query::unsafe_arena_set_allocated_actors_filter(
    ::cavnue::messages::world_state::v1::Query_ActorIdFilter* actors_filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.actors_filter_);
  }
  _impl_.actors_filter_ = actors_filter;
  if (actors_filter) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.Query.actors_filter)
}
inline ::cavnue::messages::world_state::v1::Query_ActorIdFilter* Query::release_actors_filter() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::world_state::v1::Query_ActorIdFilter* temp = _impl_.actors_filter_;
  _impl_.actors_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::world_state::v1::Query_ActorIdFilter* Query::unsafe_arena_release_actors_filter() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.Query.actors_filter)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::world_state::v1::Query_ActorIdFilter* temp = _impl_.actors_filter_;
  _impl_.actors_filter_ = nullptr;
  return temp;
}
inline ::cavnue::messages::world_state::v1::Query_ActorIdFilter* Query::_internal_mutable_actors_filter() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.actors_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::world_state::v1::Query_ActorIdFilter>(GetArenaForAllocation());
    _impl_.actors_filter_ = p;
  }
  return _impl_.actors_filter_;
}
inline ::cavnue::messages::world_state::v1::Query_ActorIdFilter* Query::mutable_actors_filter() {
  ::cavnue::messages::world_state::v1::Query_ActorIdFilter* _msg = _internal_mutable_actors_filter();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.Query.actors_filter)
  return _msg;
}
inline void Query::set_allocated_actors_filter(::cavnue::messages::world_state::v1::Query_ActorIdFilter* actors_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.actors_filter_;
  }
  if (actors_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(actors_filter);
    if (message_arena != submessage_arena) {
      actors_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actors_filter, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.actors_filter_ = actors_filter;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.Query.actors_filter)
}

// optional .cavnue.messages.world_state.v1.Query.SpatialFilter spatial_filter = 3 [json_name = "spatialFilter"];
inline bool Query::has_spatial_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.spatial_filter_ != nullptr);
  return value;
}
inline void Query::clear_spatial_filter() {
  if (_impl_.spatial_filter_ != nullptr) _impl_.spatial_filter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::cavnue::messages::world_state::v1::Query_SpatialFilter& Query::_internal_spatial_filter() const {
  const ::cavnue::messages::world_state::v1::Query_SpatialFilter* p = _impl_.spatial_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::world_state::v1::Query_SpatialFilter&>(
      ::cavnue::messages::world_state::v1::_Query_SpatialFilter_default_instance_);
}
inline const ::cavnue::messages::world_state::v1::Query_SpatialFilter& Query::spatial_filter() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Query.spatial_filter)
  return _internal_spatial_filter();
}
inline void Query::unsafe_arena_set_allocated_spatial_filter(
    ::cavnue::messages::world_state::v1::Query_SpatialFilter* spatial_filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spatial_filter_);
  }
  _impl_.spatial_filter_ = spatial_filter;
  if (spatial_filter) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.Query.spatial_filter)
}
inline ::cavnue::messages::world_state::v1::Query_SpatialFilter* Query::release_spatial_filter() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::cavnue::messages::world_state::v1::Query_SpatialFilter* temp = _impl_.spatial_filter_;
  _impl_.spatial_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::world_state::v1::Query_SpatialFilter* Query::unsafe_arena_release_spatial_filter() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.Query.spatial_filter)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::cavnue::messages::world_state::v1::Query_SpatialFilter* temp = _impl_.spatial_filter_;
  _impl_.spatial_filter_ = nullptr;
  return temp;
}
inline ::cavnue::messages::world_state::v1::Query_SpatialFilter* Query::_internal_mutable_spatial_filter() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.spatial_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::world_state::v1::Query_SpatialFilter>(GetArenaForAllocation());
    _impl_.spatial_filter_ = p;
  }
  return _impl_.spatial_filter_;
}
inline ::cavnue::messages::world_state::v1::Query_SpatialFilter* Query::mutable_spatial_filter() {
  ::cavnue::messages::world_state::v1::Query_SpatialFilter* _msg = _internal_mutable_spatial_filter();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.Query.spatial_filter)
  return _msg;
}
inline void Query::set_allocated_spatial_filter(::cavnue::messages::world_state::v1::Query_SpatialFilter* spatial_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.spatial_filter_;
  }
  if (spatial_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(spatial_filter);
    if (message_arena != submessage_arena) {
      spatial_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spatial_filter, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.spatial_filter_ = spatial_filter;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.Query.spatial_filter)
}

// -------------------------------------------------------------------

// GetServiceApiRequest

// .google.protobuf.Empty empty = 1 [json_name = "empty"];
inline bool GetServiceApiRequest::has_empty() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.empty_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Empty& GetServiceApiRequest::_internal_empty() const {
  const ::PROTOBUF_NAMESPACE_ID::Empty* p = _impl_.empty_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Empty&>(
      ::PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Empty& GetServiceApiRequest::empty() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetServiceApiRequest.empty)
  return _internal_empty();
}
inline void GetServiceApiRequest::unsafe_arena_set_allocated_empty(
    ::PROTOBUF_NAMESPACE_ID::Empty* empty) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.empty_);
  }
  _impl_.empty_ = empty;
  if (empty) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.GetServiceApiRequest.empty)
}
inline ::PROTOBUF_NAMESPACE_ID::Empty* GetServiceApiRequest::release_empty() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Empty* temp = _impl_.empty_;
  _impl_.empty_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Empty* GetServiceApiRequest::unsafe_arena_release_empty() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.GetServiceApiRequest.empty)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Empty* temp = _impl_.empty_;
  _impl_.empty_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Empty* GetServiceApiRequest::_internal_mutable_empty() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.empty_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Empty>(GetArenaForAllocation());
    _impl_.empty_ = p;
  }
  return _impl_.empty_;
}
inline ::PROTOBUF_NAMESPACE_ID::Empty* GetServiceApiRequest::mutable_empty() {
  ::PROTOBUF_NAMESPACE_ID::Empty* _msg = _internal_mutable_empty();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetServiceApiRequest.empty)
  return _msg;
}
inline void GetServiceApiRequest::set_allocated_empty(::PROTOBUF_NAMESPACE_ID::Empty* empty) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.empty_);
  }
  if (empty) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(empty));
    if (message_arena != submessage_arena) {
      empty = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, empty, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.empty_ = empty;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.GetServiceApiRequest.empty)
}

// -------------------------------------------------------------------

// GetServiceApiResponse

// .google.protobuf.Api api = 1 [json_name = "api"];
inline bool GetServiceApiResponse::has_api() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.api_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Api& GetServiceApiResponse::_internal_api() const {
  const ::PROTOBUF_NAMESPACE_ID::Api* p = _impl_.api_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Api&>(
      ::PROTOBUF_NAMESPACE_ID::_Api_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Api& GetServiceApiResponse::api() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetServiceApiResponse.api)
  return _internal_api();
}
inline void GetServiceApiResponse::unsafe_arena_set_allocated_api(
    ::PROTOBUF_NAMESPACE_ID::Api* api) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.api_);
  }
  _impl_.api_ = api;
  if (api) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.GetServiceApiResponse.api)
}
inline ::PROTOBUF_NAMESPACE_ID::Api* GetServiceApiResponse::release_api() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Api* temp = _impl_.api_;
  _impl_.api_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Api* GetServiceApiResponse::unsafe_arena_release_api() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.GetServiceApiResponse.api)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Api* temp = _impl_.api_;
  _impl_.api_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Api* GetServiceApiResponse::_internal_mutable_api() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.api_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Api>(GetArenaForAllocation());
    _impl_.api_ = p;
  }
  return _impl_.api_;
}
inline ::PROTOBUF_NAMESPACE_ID::Api* GetServiceApiResponse::mutable_api() {
  ::PROTOBUF_NAMESPACE_ID::Api* _msg = _internal_mutable_api();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetServiceApiResponse.api)
  return _msg;
}
inline void GetServiceApiResponse::set_allocated_api(::PROTOBUF_NAMESPACE_ID::Api* api) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.api_);
  }
  if (api) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(api));
    if (message_arena != submessage_arena) {
      api = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, api, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.api_ = api;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.GetServiceApiResponse.api)
}

// -------------------------------------------------------------------

// GetWorldStateRequest

// .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
inline bool GetWorldStateRequest::has_query() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.query_ != nullptr);
  return value;
}
inline void GetWorldStateRequest::clear_query() {
  if (_impl_.query_ != nullptr) _impl_.query_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cavnue::messages::world_state::v1::Query& GetWorldStateRequest::_internal_query() const {
  const ::cavnue::messages::world_state::v1::Query* p = _impl_.query_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::world_state::v1::Query&>(
      ::cavnue::messages::world_state::v1::_Query_default_instance_);
}
inline const ::cavnue::messages::world_state::v1::Query& GetWorldStateRequest::query() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetWorldStateRequest.query)
  return _internal_query();
}
inline void GetWorldStateRequest::unsafe_arena_set_allocated_query(
    ::cavnue::messages::world_state::v1::Query* query) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.query_);
  }
  _impl_.query_ = query;
  if (query) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.GetWorldStateRequest.query)
}
inline ::cavnue::messages::world_state::v1::Query* GetWorldStateRequest::release_query() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::world_state::v1::Query* temp = _impl_.query_;
  _impl_.query_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::world_state::v1::Query* GetWorldStateRequest::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.GetWorldStateRequest.query)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::world_state::v1::Query* temp = _impl_.query_;
  _impl_.query_ = nullptr;
  return temp;
}
inline ::cavnue::messages::world_state::v1::Query* GetWorldStateRequest::_internal_mutable_query() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.query_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::world_state::v1::Query>(GetArenaForAllocation());
    _impl_.query_ = p;
  }
  return _impl_.query_;
}
inline ::cavnue::messages::world_state::v1::Query* GetWorldStateRequest::mutable_query() {
  ::cavnue::messages::world_state::v1::Query* _msg = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetWorldStateRequest.query)
  return _msg;
}
inline void GetWorldStateRequest::set_allocated_query(::cavnue::messages::world_state::v1::Query* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.query_;
  }
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(query);
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.query_ = query;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.GetWorldStateRequest.query)
}

// -------------------------------------------------------------------

// GetWorldStateResponse

// repeated .cavnue.messages.inference.v1.Actor actors = 1 [json_name = "actors"];
inline int GetWorldStateResponse::_internal_actors_size() const {
  return _impl_.actors_.size();
}
inline int GetWorldStateResponse::actors_size() const {
  return _internal_actors_size();
}
inline ::cavnue::messages::inference::v1::Actor* GetWorldStateResponse::mutable_actors(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetWorldStateResponse.actors)
  return _internal_mutable_actors()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Actor >*
GetWorldStateResponse::mutable_actors() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.world_state.v1.GetWorldStateResponse.actors)
  return _internal_mutable_actors();
}
inline const ::cavnue::messages::inference::v1::Actor& GetWorldStateResponse::_internal_actors(int index) const {
  return _internal_actors().Get(index);
}
inline const ::cavnue::messages::inference::v1::Actor& GetWorldStateResponse::actors(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetWorldStateResponse.actors)
  return _internal_actors(index);
}
inline ::cavnue::messages::inference::v1::Actor* GetWorldStateResponse::_internal_add_actors() {
  return _internal_mutable_actors()->Add();
}
inline ::cavnue::messages::inference::v1::Actor* GetWorldStateResponse::add_actors() {
  ::cavnue::messages::inference::v1::Actor* _add = _internal_add_actors();
  // @@protoc_insertion_point(field_add:cavnue.messages.world_state.v1.GetWorldStateResponse.actors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Actor >&
GetWorldStateResponse::actors() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.world_state.v1.GetWorldStateResponse.actors)
  return _internal_actors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Actor>&
GetWorldStateResponse::_internal_actors() const {
  return _impl_.actors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Actor>*
GetWorldStateResponse::_internal_mutable_actors() {
  return &_impl_.actors_;
}

// repeated .cavnue.messages.inference.v1.Event events = 2 [json_name = "events"];
inline int GetWorldStateResponse::_internal_events_size() const {
  return _impl_.events_.size();
}
inline int GetWorldStateResponse::events_size() const {
  return _internal_events_size();
}
inline ::cavnue::messages::inference::v1::Event* GetWorldStateResponse::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetWorldStateResponse.events)
  return _internal_mutable_events()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Event >*
GetWorldStateResponse::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.world_state.v1.GetWorldStateResponse.events)
  return _internal_mutable_events();
}
inline const ::cavnue::messages::inference::v1::Event& GetWorldStateResponse::_internal_events(int index) const {
  return _internal_events().Get(index);
}
inline const ::cavnue::messages::inference::v1::Event& GetWorldStateResponse::events(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetWorldStateResponse.events)
  return _internal_events(index);
}
inline ::cavnue::messages::inference::v1::Event* GetWorldStateResponse::_internal_add_events() {
  return _internal_mutable_events()->Add();
}
inline ::cavnue::messages::inference::v1::Event* GetWorldStateResponse::add_events() {
  ::cavnue::messages::inference::v1::Event* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:cavnue.messages.world_state.v1.GetWorldStateResponse.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Event >&
GetWorldStateResponse::events() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.world_state.v1.GetWorldStateResponse.events)
  return _internal_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Event>&
GetWorldStateResponse::_internal_events() const {
  return _impl_.events_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Event>*
GetWorldStateResponse::_internal_mutable_events() {
  return &_impl_.events_;
}

// -------------------------------------------------------------------

// GetActorsRequest

// .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
inline bool GetActorsRequest::has_query() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.query_ != nullptr);
  return value;
}
inline void GetActorsRequest::clear_query() {
  if (_impl_.query_ != nullptr) _impl_.query_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cavnue::messages::world_state::v1::Query& GetActorsRequest::_internal_query() const {
  const ::cavnue::messages::world_state::v1::Query* p = _impl_.query_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::world_state::v1::Query&>(
      ::cavnue::messages::world_state::v1::_Query_default_instance_);
}
inline const ::cavnue::messages::world_state::v1::Query& GetActorsRequest::query() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetActorsRequest.query)
  return _internal_query();
}
inline void GetActorsRequest::unsafe_arena_set_allocated_query(
    ::cavnue::messages::world_state::v1::Query* query) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.query_);
  }
  _impl_.query_ = query;
  if (query) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.GetActorsRequest.query)
}
inline ::cavnue::messages::world_state::v1::Query* GetActorsRequest::release_query() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::world_state::v1::Query* temp = _impl_.query_;
  _impl_.query_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::world_state::v1::Query* GetActorsRequest::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.GetActorsRequest.query)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::world_state::v1::Query* temp = _impl_.query_;
  _impl_.query_ = nullptr;
  return temp;
}
inline ::cavnue::messages::world_state::v1::Query* GetActorsRequest::_internal_mutable_query() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.query_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::world_state::v1::Query>(GetArenaForAllocation());
    _impl_.query_ = p;
  }
  return _impl_.query_;
}
inline ::cavnue::messages::world_state::v1::Query* GetActorsRequest::mutable_query() {
  ::cavnue::messages::world_state::v1::Query* _msg = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetActorsRequest.query)
  return _msg;
}
inline void GetActorsRequest::set_allocated_query(::cavnue::messages::world_state::v1::Query* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.query_;
  }
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(query);
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.query_ = query;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.GetActorsRequest.query)
}

// -------------------------------------------------------------------

// GetActorsResponse

// repeated .cavnue.messages.inference.v1.Actor actors = 1 [json_name = "actors"];
inline int GetActorsResponse::_internal_actors_size() const {
  return _impl_.actors_.size();
}
inline int GetActorsResponse::actors_size() const {
  return _internal_actors_size();
}
inline ::cavnue::messages::inference::v1::Actor* GetActorsResponse::mutable_actors(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetActorsResponse.actors)
  return _internal_mutable_actors()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Actor >*
GetActorsResponse::mutable_actors() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.world_state.v1.GetActorsResponse.actors)
  return _internal_mutable_actors();
}
inline const ::cavnue::messages::inference::v1::Actor& GetActorsResponse::_internal_actors(int index) const {
  return _internal_actors().Get(index);
}
inline const ::cavnue::messages::inference::v1::Actor& GetActorsResponse::actors(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetActorsResponse.actors)
  return _internal_actors(index);
}
inline ::cavnue::messages::inference::v1::Actor* GetActorsResponse::_internal_add_actors() {
  return _internal_mutable_actors()->Add();
}
inline ::cavnue::messages::inference::v1::Actor* GetActorsResponse::add_actors() {
  ::cavnue::messages::inference::v1::Actor* _add = _internal_add_actors();
  // @@protoc_insertion_point(field_add:cavnue.messages.world_state.v1.GetActorsResponse.actors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Actor >&
GetActorsResponse::actors() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.world_state.v1.GetActorsResponse.actors)
  return _internal_actors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Actor>&
GetActorsResponse::_internal_actors() const {
  return _impl_.actors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Actor>*
GetActorsResponse::_internal_mutable_actors() {
  return &_impl_.actors_;
}

// -------------------------------------------------------------------

// GetEventsRequest

// .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
inline bool GetEventsRequest::has_query() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.query_ != nullptr);
  return value;
}
inline void GetEventsRequest::clear_query() {
  if (_impl_.query_ != nullptr) _impl_.query_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cavnue::messages::world_state::v1::Query& GetEventsRequest::_internal_query() const {
  const ::cavnue::messages::world_state::v1::Query* p = _impl_.query_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::world_state::v1::Query&>(
      ::cavnue::messages::world_state::v1::_Query_default_instance_);
}
inline const ::cavnue::messages::world_state::v1::Query& GetEventsRequest::query() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetEventsRequest.query)
  return _internal_query();
}
inline void GetEventsRequest::unsafe_arena_set_allocated_query(
    ::cavnue::messages::world_state::v1::Query* query) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.query_);
  }
  _impl_.query_ = query;
  if (query) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.GetEventsRequest.query)
}
inline ::cavnue::messages::world_state::v1::Query* GetEventsRequest::release_query() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::world_state::v1::Query* temp = _impl_.query_;
  _impl_.query_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::world_state::v1::Query* GetEventsRequest::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.GetEventsRequest.query)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::world_state::v1::Query* temp = _impl_.query_;
  _impl_.query_ = nullptr;
  return temp;
}
inline ::cavnue::messages::world_state::v1::Query* GetEventsRequest::_internal_mutable_query() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.query_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::world_state::v1::Query>(GetArenaForAllocation());
    _impl_.query_ = p;
  }
  return _impl_.query_;
}
inline ::cavnue::messages::world_state::v1::Query* GetEventsRequest::mutable_query() {
  ::cavnue::messages::world_state::v1::Query* _msg = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetEventsRequest.query)
  return _msg;
}
inline void GetEventsRequest::set_allocated_query(::cavnue::messages::world_state::v1::Query* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.query_;
  }
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(query);
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.query_ = query;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.GetEventsRequest.query)
}

// -------------------------------------------------------------------

// GetEventsResponse

// repeated .cavnue.messages.inference.v1.Event events = 1 [json_name = "events"];
inline int GetEventsResponse::_internal_events_size() const {
  return _impl_.events_.size();
}
inline int GetEventsResponse::events_size() const {
  return _internal_events_size();
}
inline ::cavnue::messages::inference::v1::Event* GetEventsResponse::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetEventsResponse.events)
  return _internal_mutable_events()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Event >*
GetEventsResponse::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.world_state.v1.GetEventsResponse.events)
  return _internal_mutable_events();
}
inline const ::cavnue::messages::inference::v1::Event& GetEventsResponse::_internal_events(int index) const {
  return _internal_events().Get(index);
}
inline const ::cavnue::messages::inference::v1::Event& GetEventsResponse::events(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetEventsResponse.events)
  return _internal_events(index);
}
inline ::cavnue::messages::inference::v1::Event* GetEventsResponse::_internal_add_events() {
  return _internal_mutable_events()->Add();
}
inline ::cavnue::messages::inference::v1::Event* GetEventsResponse::add_events() {
  ::cavnue::messages::inference::v1::Event* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:cavnue.messages.world_state.v1.GetEventsResponse.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Event >&
GetEventsResponse::events() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.world_state.v1.GetEventsResponse.events)
  return _internal_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Event>&
GetEventsResponse::_internal_events() const {
  return _impl_.events_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Event>*
GetEventsResponse::_internal_mutable_events() {
  return &_impl_.events_;
}

// -------------------------------------------------------------------

// GetAssetsRequest

// .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
inline bool GetAssetsRequest::has_query() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.query_ != nullptr);
  return value;
}
inline void GetAssetsRequest::clear_query() {
  if (_impl_.query_ != nullptr) _impl_.query_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cavnue::messages::world_state::v1::Query& GetAssetsRequest::_internal_query() const {
  const ::cavnue::messages::world_state::v1::Query* p = _impl_.query_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::world_state::v1::Query&>(
      ::cavnue::messages::world_state::v1::_Query_default_instance_);
}
inline const ::cavnue::messages::world_state::v1::Query& GetAssetsRequest::query() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetAssetsRequest.query)
  return _internal_query();
}
inline void GetAssetsRequest::unsafe_arena_set_allocated_query(
    ::cavnue::messages::world_state::v1::Query* query) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.query_);
  }
  _impl_.query_ = query;
  if (query) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.GetAssetsRequest.query)
}
inline ::cavnue::messages::world_state::v1::Query* GetAssetsRequest::release_query() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::world_state::v1::Query* temp = _impl_.query_;
  _impl_.query_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::world_state::v1::Query* GetAssetsRequest::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.GetAssetsRequest.query)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::world_state::v1::Query* temp = _impl_.query_;
  _impl_.query_ = nullptr;
  return temp;
}
inline ::cavnue::messages::world_state::v1::Query* GetAssetsRequest::_internal_mutable_query() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.query_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::world_state::v1::Query>(GetArenaForAllocation());
    _impl_.query_ = p;
  }
  return _impl_.query_;
}
inline ::cavnue::messages::world_state::v1::Query* GetAssetsRequest::mutable_query() {
  ::cavnue::messages::world_state::v1::Query* _msg = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetAssetsRequest.query)
  return _msg;
}
inline void GetAssetsRequest::set_allocated_query(::cavnue::messages::world_state::v1::Query* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.query_;
  }
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(query);
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.query_ = query;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.GetAssetsRequest.query)
}

// -------------------------------------------------------------------

// GetAssetsResponse

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace world_state
}  // namespace messages
}  // namespace cavnue


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fworld_5fstate_2fv1_2fservice_2eproto_2epb_2eh

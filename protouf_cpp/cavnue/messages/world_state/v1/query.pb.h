// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/world_state/v1/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
#include "google/protobuf/api.pb.h"
#include "google/protobuf/empty.pb.h"
#include "google/protobuf/field_mask.pb.h"
#include "cavnue/messages/common/v1/common.pb.h"
#include "cavnue/messages/inference/v1/actor.pb.h"
#include "cavnue/messages/inference/v1/events.pb.h"
#include "cavnue/messages/inference/v1/traffic.pb.h"
#include "cavnue/messages/geometry/v1/point.pb.h"
#include "cavnue/messages/geometry/v1/bounding_box.pb.h"
#include "cavnue/messages/spatial/v1/wgs84.pb.h"
#include "cavnue/messages/data_warehouse/management/v1/datasets.pb.h"
#include "cavnue/messages/world_state/v1/ivi.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto;
namespace cavnue {
namespace messages {
namespace world_state {
namespace v1 {
class Asset;
struct AssetDefaultTypeInternal;
extern AssetDefaultTypeInternal _Asset_default_instance_;
class Dataset;
struct DatasetDefaultTypeInternal;
extern DatasetDefaultTypeInternal _Dataset_default_instance_;
class DatasetRun;
struct DatasetRunDefaultTypeInternal;
extern DatasetRunDefaultTypeInternal _DatasetRun_default_instance_;
class GetActorsRequest;
struct GetActorsRequestDefaultTypeInternal;
extern GetActorsRequestDefaultTypeInternal _GetActorsRequest_default_instance_;
class GetActorsResponse;
struct GetActorsResponseDefaultTypeInternal;
extern GetActorsResponseDefaultTypeInternal _GetActorsResponse_default_instance_;
class GetAssetsRequest;
struct GetAssetsRequestDefaultTypeInternal;
extern GetAssetsRequestDefaultTypeInternal _GetAssetsRequest_default_instance_;
class GetAssetsResponse;
struct GetAssetsResponseDefaultTypeInternal;
extern GetAssetsResponseDefaultTypeInternal _GetAssetsResponse_default_instance_;
class GetAverageDailyTrafficRequest;
struct GetAverageDailyTrafficRequestDefaultTypeInternal;
extern GetAverageDailyTrafficRequestDefaultTypeInternal _GetAverageDailyTrafficRequest_default_instance_;
class GetAverageDailyTrafficResponse;
struct GetAverageDailyTrafficResponseDefaultTypeInternal;
extern GetAverageDailyTrafficResponseDefaultTypeInternal _GetAverageDailyTrafficResponse_default_instance_;
class GetDatasetRunsRequest;
struct GetDatasetRunsRequestDefaultTypeInternal;
extern GetDatasetRunsRequestDefaultTypeInternal _GetDatasetRunsRequest_default_instance_;
class GetDatasetRunsResponse;
struct GetDatasetRunsResponseDefaultTypeInternal;
extern GetDatasetRunsResponseDefaultTypeInternal _GetDatasetRunsResponse_default_instance_;
class GetDatasetsRequest;
struct GetDatasetsRequestDefaultTypeInternal;
extern GetDatasetsRequestDefaultTypeInternal _GetDatasetsRequest_default_instance_;
class GetDatasetsResponse;
struct GetDatasetsResponseDefaultTypeInternal;
extern GetDatasetsResponseDefaultTypeInternal _GetDatasetsResponse_default_instance_;
class GetEventsRequest;
struct GetEventsRequestDefaultTypeInternal;
extern GetEventsRequestDefaultTypeInternal _GetEventsRequest_default_instance_;
class GetEventsResponse;
struct GetEventsResponseDefaultTypeInternal;
extern GetEventsResponseDefaultTypeInternal _GetEventsResponse_default_instance_;
class GetServiceApiRequest;
struct GetServiceApiRequestDefaultTypeInternal;
extern GetServiceApiRequestDefaultTypeInternal _GetServiceApiRequest_default_instance_;
class GetServiceApiResponse;
struct GetServiceApiResponseDefaultTypeInternal;
extern GetServiceApiResponseDefaultTypeInternal _GetServiceApiResponse_default_instance_;
class GetTrafficAggregationRequest;
struct GetTrafficAggregationRequestDefaultTypeInternal;
extern GetTrafficAggregationRequestDefaultTypeInternal _GetTrafficAggregationRequest_default_instance_;
class GetTrafficAggregationResponse;
struct GetTrafficAggregationResponseDefaultTypeInternal;
extern GetTrafficAggregationResponseDefaultTypeInternal _GetTrafficAggregationResponse_default_instance_;
class GetWorldStateNearRealTimeRequest;
struct GetWorldStateNearRealTimeRequestDefaultTypeInternal;
extern GetWorldStateNearRealTimeRequestDefaultTypeInternal _GetWorldStateNearRealTimeRequest_default_instance_;
class GetWorldStateNearRealTimeResponse;
struct GetWorldStateNearRealTimeResponseDefaultTypeInternal;
extern GetWorldStateNearRealTimeResponseDefaultTypeInternal _GetWorldStateNearRealTimeResponse_default_instance_;
class GetWorldStateRequest;
struct GetWorldStateRequestDefaultTypeInternal;
extern GetWorldStateRequestDefaultTypeInternal _GetWorldStateRequest_default_instance_;
class GetWorldStateResponse;
struct GetWorldStateResponseDefaultTypeInternal;
extern GetWorldStateResponseDefaultTypeInternal _GetWorldStateResponse_default_instance_;
class Query;
struct QueryDefaultTypeInternal;
extern QueryDefaultTypeInternal _Query_default_instance_;
class Query_ActorIdFilter;
struct Query_ActorIdFilterDefaultTypeInternal;
extern Query_ActorIdFilterDefaultTypeInternal _Query_ActorIdFilter_default_instance_;
class Query_SpatialFilter;
struct Query_SpatialFilterDefaultTypeInternal;
extern Query_SpatialFilterDefaultTypeInternal _Query_SpatialFilter_default_instance_;
class TimeFilter;
struct TimeFilterDefaultTypeInternal;
extern TimeFilterDefaultTypeInternal _TimeFilter_default_instance_;
}  // namespace v1
}  // namespace world_state
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template <>
::cavnue::messages::world_state::v1::Asset* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::Asset>(Arena*);
template <>
::cavnue::messages::world_state::v1::Dataset* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::Dataset>(Arena*);
template <>
::cavnue::messages::world_state::v1::DatasetRun* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::DatasetRun>(Arena*);
template <>
::cavnue::messages::world_state::v1::GetActorsRequest* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::GetActorsRequest>(Arena*);
template <>
::cavnue::messages::world_state::v1::GetActorsResponse* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::GetActorsResponse>(Arena*);
template <>
::cavnue::messages::world_state::v1::GetAssetsRequest* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::GetAssetsRequest>(Arena*);
template <>
::cavnue::messages::world_state::v1::GetAssetsResponse* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::GetAssetsResponse>(Arena*);
template <>
::cavnue::messages::world_state::v1::GetAverageDailyTrafficRequest* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::GetAverageDailyTrafficRequest>(Arena*);
template <>
::cavnue::messages::world_state::v1::GetAverageDailyTrafficResponse* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::GetAverageDailyTrafficResponse>(Arena*);
template <>
::cavnue::messages::world_state::v1::GetDatasetRunsRequest* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::GetDatasetRunsRequest>(Arena*);
template <>
::cavnue::messages::world_state::v1::GetDatasetRunsResponse* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::GetDatasetRunsResponse>(Arena*);
template <>
::cavnue::messages::world_state::v1::GetDatasetsRequest* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::GetDatasetsRequest>(Arena*);
template <>
::cavnue::messages::world_state::v1::GetDatasetsResponse* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::GetDatasetsResponse>(Arena*);
template <>
::cavnue::messages::world_state::v1::GetEventsRequest* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::GetEventsRequest>(Arena*);
template <>
::cavnue::messages::world_state::v1::GetEventsResponse* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::GetEventsResponse>(Arena*);
template <>
::cavnue::messages::world_state::v1::GetServiceApiRequest* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::GetServiceApiRequest>(Arena*);
template <>
::cavnue::messages::world_state::v1::GetServiceApiResponse* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::GetServiceApiResponse>(Arena*);
template <>
::cavnue::messages::world_state::v1::GetTrafficAggregationRequest* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::GetTrafficAggregationRequest>(Arena*);
template <>
::cavnue::messages::world_state::v1::GetTrafficAggregationResponse* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::GetTrafficAggregationResponse>(Arena*);
template <>
::cavnue::messages::world_state::v1::GetWorldStateNearRealTimeRequest* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::GetWorldStateNearRealTimeRequest>(Arena*);
template <>
::cavnue::messages::world_state::v1::GetWorldStateNearRealTimeResponse* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::GetWorldStateNearRealTimeResponse>(Arena*);
template <>
::cavnue::messages::world_state::v1::GetWorldStateRequest* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::GetWorldStateRequest>(Arena*);
template <>
::cavnue::messages::world_state::v1::GetWorldStateResponse* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::GetWorldStateResponse>(Arena*);
template <>
::cavnue::messages::world_state::v1::Query* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::Query>(Arena*);
template <>
::cavnue::messages::world_state::v1::Query_ActorIdFilter* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::Query_ActorIdFilter>(Arena*);
template <>
::cavnue::messages::world_state::v1::Query_SpatialFilter* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::Query_SpatialFilter>(Arena*);
template <>
::cavnue::messages::world_state::v1::TimeFilter* Arena::CreateMaybeMessage<::cavnue::messages::world_state::v1::TimeFilter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cavnue {
namespace messages {
namespace world_state {
namespace v1 {
enum GetTrafficAggregationRequest_Frequency : int {
  GetTrafficAggregationRequest_Frequency_FREQUENCY_UNSPECIFIED = 0,
  GetTrafficAggregationRequest_Frequency_FREQUENCY_300_SECONDS = 1,
  GetTrafficAggregationRequest_Frequency_FREQUENCY_3600_SECONDS = 2,
  GetTrafficAggregationRequest_Frequency_GetTrafficAggregationRequest_Frequency_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GetTrafficAggregationRequest_Frequency_GetTrafficAggregationRequest_Frequency_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GetTrafficAggregationRequest_Frequency_IsValid(int value);
constexpr GetTrafficAggregationRequest_Frequency GetTrafficAggregationRequest_Frequency_Frequency_MIN = static_cast<GetTrafficAggregationRequest_Frequency>(0);
constexpr GetTrafficAggregationRequest_Frequency GetTrafficAggregationRequest_Frequency_Frequency_MAX = static_cast<GetTrafficAggregationRequest_Frequency>(2);
constexpr int GetTrafficAggregationRequest_Frequency_Frequency_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
GetTrafficAggregationRequest_Frequency_descriptor();
template <typename T>
const std::string& GetTrafficAggregationRequest_Frequency_Name(T value) {
  static_assert(std::is_same<T, GetTrafficAggregationRequest_Frequency>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Frequency_Name().");
  return GetTrafficAggregationRequest_Frequency_Name(static_cast<GetTrafficAggregationRequest_Frequency>(value));
}
template <>
inline const std::string& GetTrafficAggregationRequest_Frequency_Name(GetTrafficAggregationRequest_Frequency value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<GetTrafficAggregationRequest_Frequency_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool GetTrafficAggregationRequest_Frequency_Parse(absl::string_view name, GetTrafficAggregationRequest_Frequency* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetTrafficAggregationRequest_Frequency>(
      GetTrafficAggregationRequest_Frequency_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TimeFilter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.TimeFilter) */ {
 public:
  inline TimeFilter() : TimeFilter(nullptr) {}
  ~TimeFilter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TimeFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeFilter(const TimeFilter& from);
  TimeFilter(TimeFilter&& from) noexcept
    : TimeFilter() {
    *this = ::std::move(from);
  }

  inline TimeFilter& operator=(const TimeFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeFilter& operator=(TimeFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeFilter* internal_default_instance() {
    return reinterpret_cast<const TimeFilter*>(
               &_TimeFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TimeFilter& a, TimeFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeFilter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimeFilter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimeFilter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TimeFilter& from) {
    TimeFilter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeFilter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.TimeFilter";
  }
  protected:
  explicit TimeFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTsFieldNumber = 1,
    kEndTsFieldNumber = 2,
  };
  // .google.protobuf.Timestamp start_ts = 1 [json_name = "startTs"];
  bool has_start_ts() const;
  void clear_start_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_start_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_ts();
  void set_allocated_start_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* start_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_ts();
  public:
  void unsafe_arena_set_allocated_start_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* start_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_ts();
  // .google.protobuf.Timestamp end_ts = 2 [json_name = "endTs"];
  bool has_end_ts() const;
  void clear_end_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_end_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_ts();
  void set_allocated_end_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* end_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_ts();
  public:
  void unsafe_arena_set_allocated_end_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* end_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_ts();
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.TimeFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_ts_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_ts_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class Query_ActorIdFilter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.Query.ActorIdFilter) */ {
 public:
  inline Query_ActorIdFilter() : Query_ActorIdFilter(nullptr) {}
  ~Query_ActorIdFilter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Query_ActorIdFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Query_ActorIdFilter(const Query_ActorIdFilter& from);
  Query_ActorIdFilter(Query_ActorIdFilter&& from) noexcept
    : Query_ActorIdFilter() {
    *this = ::std::move(from);
  }

  inline Query_ActorIdFilter& operator=(const Query_ActorIdFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Query_ActorIdFilter& operator=(Query_ActorIdFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Query_ActorIdFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const Query_ActorIdFilter* internal_default_instance() {
    return reinterpret_cast<const Query_ActorIdFilter*>(
               &_Query_ActorIdFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Query_ActorIdFilter& a, Query_ActorIdFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(Query_ActorIdFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Query_ActorIdFilter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Query_ActorIdFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Query_ActorIdFilter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Query_ActorIdFilter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Query_ActorIdFilter& from) {
    Query_ActorIdFilter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Query_ActorIdFilter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.Query.ActorIdFilter";
  }
  protected:
  explicit Query_ActorIdFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorIdsFieldNumber = 1,
  };
  // repeated int64 actor_ids = 1 [json_name = "actorIds"];
  int actor_ids_size() const;
  private:
  int _internal_actor_ids_size() const;

  public:
  void clear_actor_ids() ;
  ::int64_t actor_ids(int index) const;
  void set_actor_ids(int index, ::int64_t value);
  void add_actor_ids(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& actor_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* mutable_actor_ids();

  private:
  ::int64_t _internal_actor_ids(int index) const;
  void _internal_add_actor_ids(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& _internal_actor_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* _internal_mutable_actor_ids();

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.Query.ActorIdFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t> actor_ids_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _actor_ids_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class Query_SpatialFilter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.Query.SpatialFilter) */ {
 public:
  inline Query_SpatialFilter() : Query_SpatialFilter(nullptr) {}
  ~Query_SpatialFilter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Query_SpatialFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Query_SpatialFilter(const Query_SpatialFilter& from);
  Query_SpatialFilter(Query_SpatialFilter&& from) noexcept
    : Query_SpatialFilter() {
    *this = ::std::move(from);
  }

  inline Query_SpatialFilter& operator=(const Query_SpatialFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Query_SpatialFilter& operator=(Query_SpatialFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Query_SpatialFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const Query_SpatialFilter* internal_default_instance() {
    return reinterpret_cast<const Query_SpatialFilter*>(
               &_Query_SpatialFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Query_SpatialFilter& a, Query_SpatialFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(Query_SpatialFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Query_SpatialFilter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Query_SpatialFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Query_SpatialFilter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Query_SpatialFilter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Query_SpatialFilter& from) {
    Query_SpatialFilter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Query_SpatialFilter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.Query.SpatialFilter";
  }
  protected:
  explicit Query_SpatialFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBbRegionFieldNumber = 1,
  };
  // .cavnue.messages.geometry.v1.BoundingBox2f bb_region = 1 [json_name = "bbRegion"];
  bool has_bb_region() const;
  void clear_bb_region() ;
  const ::cavnue::messages::geometry::v1::BoundingBox2f& bb_region() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::BoundingBox2f* release_bb_region();
  ::cavnue::messages::geometry::v1::BoundingBox2f* mutable_bb_region();
  void set_allocated_bb_region(::cavnue::messages::geometry::v1::BoundingBox2f* bb_region);
  private:
  const ::cavnue::messages::geometry::v1::BoundingBox2f& _internal_bb_region() const;
  ::cavnue::messages::geometry::v1::BoundingBox2f* _internal_mutable_bb_region();
  public:
  void unsafe_arena_set_allocated_bb_region(
      ::cavnue::messages::geometry::v1::BoundingBox2f* bb_region);
  ::cavnue::messages::geometry::v1::BoundingBox2f* unsafe_arena_release_bb_region();
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.Query.SpatialFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::geometry::v1::BoundingBox2f* bb_region_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class Query final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.Query) */ {
 public:
  inline Query() : Query(nullptr) {}
  ~Query() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Query(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Query(const Query& from);
  Query(Query&& from) noexcept
    : Query() {
    *this = ::std::move(from);
  }

  inline Query& operator=(const Query& from) {
    CopyFrom(from);
    return *this;
  }
  inline Query& operator=(Query&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Query& default_instance() {
    return *internal_default_instance();
  }
  static inline const Query* internal_default_instance() {
    return reinterpret_cast<const Query*>(
               &_Query_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Query& a, Query& b) {
    a.Swap(&b);
  }
  inline void Swap(Query* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Query* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Query* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Query>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Query& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Query& from) {
    Query::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Query* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.Query";
  }
  protected:
  explicit Query(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Query_ActorIdFilter ActorIdFilter;
  typedef Query_SpatialFilter SpatialFilter;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetIdentifierFieldNumber = 5,
    kTraceContextFieldNumber = 8,
    kTimeFilterFieldNumber = 2,
    kActorsFilterFieldNumber = 3,
    kSpatialFilterFieldNumber = 4,
    kDatasetRunIdFieldNumber = 1,
    kDatasetIdFieldNumber = 6,
    kNumMessagesFieldNumber = 7,
  };
  // optional string dataset_identifier = 5 [json_name = "datasetIdentifier"];
  bool has_dataset_identifier() const;
  void clear_dataset_identifier() ;
  const std::string& dataset_identifier() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dataset_identifier(Arg_&& arg, Args_... args);
  std::string* mutable_dataset_identifier();
  PROTOBUF_NODISCARD std::string* release_dataset_identifier();
  void set_allocated_dataset_identifier(std::string* ptr);

  private:
  const std::string& _internal_dataset_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataset_identifier(
      const std::string& value);
  std::string* _internal_mutable_dataset_identifier();

  public:
  // optional string trace_context = 8 [json_name = "traceContext"];
  bool has_trace_context() const;
  void clear_trace_context() ;
  const std::string& trace_context() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_trace_context(Arg_&& arg, Args_... args);
  std::string* mutable_trace_context();
  PROTOBUF_NODISCARD std::string* release_trace_context();
  void set_allocated_trace_context(std::string* ptr);

  private:
  const std::string& _internal_trace_context() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trace_context(
      const std::string& value);
  std::string* _internal_mutable_trace_context();

  public:
  // optional .cavnue.messages.world_state.v1.TimeFilter time_filter = 2 [json_name = "timeFilter"];
  bool has_time_filter() const;
  void clear_time_filter() ;
  const ::cavnue::messages::world_state::v1::TimeFilter& time_filter() const;
  PROTOBUF_NODISCARD ::cavnue::messages::world_state::v1::TimeFilter* release_time_filter();
  ::cavnue::messages::world_state::v1::TimeFilter* mutable_time_filter();
  void set_allocated_time_filter(::cavnue::messages::world_state::v1::TimeFilter* time_filter);
  private:
  const ::cavnue::messages::world_state::v1::TimeFilter& _internal_time_filter() const;
  ::cavnue::messages::world_state::v1::TimeFilter* _internal_mutable_time_filter();
  public:
  void unsafe_arena_set_allocated_time_filter(
      ::cavnue::messages::world_state::v1::TimeFilter* time_filter);
  ::cavnue::messages::world_state::v1::TimeFilter* unsafe_arena_release_time_filter();
  // optional .cavnue.messages.world_state.v1.Query.ActorIdFilter actors_filter = 3 [json_name = "actorsFilter"];
  bool has_actors_filter() const;
  void clear_actors_filter() ;
  const ::cavnue::messages::world_state::v1::Query_ActorIdFilter& actors_filter() const;
  PROTOBUF_NODISCARD ::cavnue::messages::world_state::v1::Query_ActorIdFilter* release_actors_filter();
  ::cavnue::messages::world_state::v1::Query_ActorIdFilter* mutable_actors_filter();
  void set_allocated_actors_filter(::cavnue::messages::world_state::v1::Query_ActorIdFilter* actors_filter);
  private:
  const ::cavnue::messages::world_state::v1::Query_ActorIdFilter& _internal_actors_filter() const;
  ::cavnue::messages::world_state::v1::Query_ActorIdFilter* _internal_mutable_actors_filter();
  public:
  void unsafe_arena_set_allocated_actors_filter(
      ::cavnue::messages::world_state::v1::Query_ActorIdFilter* actors_filter);
  ::cavnue::messages::world_state::v1::Query_ActorIdFilter* unsafe_arena_release_actors_filter();
  // optional .cavnue.messages.world_state.v1.Query.SpatialFilter spatial_filter = 4 [json_name = "spatialFilter"];
  bool has_spatial_filter() const;
  void clear_spatial_filter() ;
  const ::cavnue::messages::world_state::v1::Query_SpatialFilter& spatial_filter() const;
  PROTOBUF_NODISCARD ::cavnue::messages::world_state::v1::Query_SpatialFilter* release_spatial_filter();
  ::cavnue::messages::world_state::v1::Query_SpatialFilter* mutable_spatial_filter();
  void set_allocated_spatial_filter(::cavnue::messages::world_state::v1::Query_SpatialFilter* spatial_filter);
  private:
  const ::cavnue::messages::world_state::v1::Query_SpatialFilter& _internal_spatial_filter() const;
  ::cavnue::messages::world_state::v1::Query_SpatialFilter* _internal_mutable_spatial_filter();
  public:
  void unsafe_arena_set_allocated_spatial_filter(
      ::cavnue::messages::world_state::v1::Query_SpatialFilter* spatial_filter);
  ::cavnue::messages::world_state::v1::Query_SpatialFilter* unsafe_arena_release_spatial_filter();
  // optional int64 dataset_run_id = 1 [json_name = "datasetRunId"];
  bool has_dataset_run_id() const;
  void clear_dataset_run_id() ;
  ::int64_t dataset_run_id() const;
  void set_dataset_run_id(::int64_t value);

  private:
  ::int64_t _internal_dataset_run_id() const;
  void _internal_set_dataset_run_id(::int64_t value);

  public:
  // optional int64 dataset_id = 6 [json_name = "datasetId"];
  bool has_dataset_id() const;
  void clear_dataset_id() ;
  ::int64_t dataset_id() const;
  void set_dataset_id(::int64_t value);

  private:
  ::int64_t _internal_dataset_id() const;
  void _internal_set_dataset_id(::int64_t value);

  public:
  // optional uint32 num_messages = 7 [json_name = "numMessages"];
  bool has_num_messages() const;
  void clear_num_messages() ;
  ::uint32_t num_messages() const;
  void set_num_messages(::uint32_t value);

  private:
  ::uint32_t _internal_num_messages() const;
  void _internal_set_num_messages(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.Query)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_identifier_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_context_;
    ::cavnue::messages::world_state::v1::TimeFilter* time_filter_;
    ::cavnue::messages::world_state::v1::Query_ActorIdFilter* actors_filter_;
    ::cavnue::messages::world_state::v1::Query_SpatialFilter* spatial_filter_;
    ::int64_t dataset_run_id_;
    ::int64_t dataset_id_;
    ::uint32_t num_messages_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class Asset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.Asset) */ {
 public:
  inline Asset() : Asset(nullptr) {}
  ~Asset() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Asset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Asset(const Asset& from);
  Asset(Asset&& from) noexcept
    : Asset() {
    *this = ::std::move(from);
  }

  inline Asset& operator=(const Asset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Asset& operator=(Asset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Asset& default_instance() {
    return *internal_default_instance();
  }
  static inline const Asset* internal_default_instance() {
    return reinterpret_cast<const Asset*>(
               &_Asset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Asset& a, Asset& b) {
    a.Swap(&b);
  }
  inline void Swap(Asset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Asset* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Asset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Asset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Asset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Asset& from) {
    Asset::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Asset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.Asset";
  }
  protected:
  explicit Asset(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 2,
    kWgs84PositionFieldNumber = 3,
    kSensorIdFieldNumber = 1,
  };
  // string identifier = 2 [json_name = "identifier"];
  void clear_identifier() ;
  const std::string& identifier() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_identifier(Arg_&& arg, Args_... args);
  std::string* mutable_identifier();
  PROTOBUF_NODISCARD std::string* release_identifier();
  void set_allocated_identifier(std::string* ptr);

  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(
      const std::string& value);
  std::string* _internal_mutable_identifier();

  public:
  // .cavnue.messages.spatial.v1.WGS84 wgs84_position = 3 [json_name = "wgs84Position"];
  bool has_wgs84_position() const;
  void clear_wgs84_position() ;
  const ::cavnue::messages::spatial::v1::WGS84& wgs84_position() const;
  PROTOBUF_NODISCARD ::cavnue::messages::spatial::v1::WGS84* release_wgs84_position();
  ::cavnue::messages::spatial::v1::WGS84* mutable_wgs84_position();
  void set_allocated_wgs84_position(::cavnue::messages::spatial::v1::WGS84* wgs84_position);
  private:
  const ::cavnue::messages::spatial::v1::WGS84& _internal_wgs84_position() const;
  ::cavnue::messages::spatial::v1::WGS84* _internal_mutable_wgs84_position();
  public:
  void unsafe_arena_set_allocated_wgs84_position(
      ::cavnue::messages::spatial::v1::WGS84* wgs84_position);
  ::cavnue::messages::spatial::v1::WGS84* unsafe_arena_release_wgs84_position();
  // int64 sensor_id = 1 [json_name = "sensorId"];
  void clear_sensor_id() ;
  ::int64_t sensor_id() const;
  void set_sensor_id(::int64_t value);

  private:
  ::int64_t _internal_sensor_id() const;
  void _internal_set_sensor_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.Asset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
    ::cavnue::messages::spatial::v1::WGS84* wgs84_position_;
    ::int64_t sensor_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class Dataset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.Dataset) */ {
 public:
  inline Dataset() : Dataset(nullptr) {}
  ~Dataset() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Dataset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Dataset(const Dataset& from);
  Dataset(Dataset&& from) noexcept
    : Dataset() {
    *this = ::std::move(from);
  }

  inline Dataset& operator=(const Dataset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dataset& operator=(Dataset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Dataset& default_instance() {
    return *internal_default_instance();
  }
  static inline const Dataset* internal_default_instance() {
    return reinterpret_cast<const Dataset*>(
               &_Dataset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Dataset& a, Dataset& b) {
    a.Swap(&b);
  }
  inline void Swap(Dataset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dataset* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Dataset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Dataset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Dataset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Dataset& from) {
    Dataset::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dataset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.Dataset";
  }
  protected:
  explicit Dataset(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 2,
    kProjectIdFieldNumber = 4,
    kSimIdFieldNumber = 8,
    kStartTsFieldNumber = 5,
    kEndTsFieldNumber = 6,
    kRunStartTsFieldNumber = 10,
    kRunEndTsFieldNumber = 11,
    kDatasetIdFieldNumber = 1,
    kProjectNumberFieldNumber = 3,
    kCohortIdFieldNumber = 9,
    kDatasetTypeFieldNumber = 7,
  };
  // string identifier = 2 [json_name = "identifier"];
  void clear_identifier() ;
  const std::string& identifier() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_identifier(Arg_&& arg, Args_... args);
  std::string* mutable_identifier();
  PROTOBUF_NODISCARD std::string* release_identifier();
  void set_allocated_identifier(std::string* ptr);

  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(
      const std::string& value);
  std::string* _internal_mutable_identifier();

  public:
  // string project_id = 4 [json_name = "projectId"];
  void clear_project_id() ;
  const std::string& project_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_project_id(Arg_&& arg, Args_... args);
  std::string* mutable_project_id();
  PROTOBUF_NODISCARD std::string* release_project_id();
  void set_allocated_project_id(std::string* ptr);

  private:
  const std::string& _internal_project_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project_id(
      const std::string& value);
  std::string* _internal_mutable_project_id();

  public:
  // string sim_id = 8 [json_name = "simId"];
  void clear_sim_id() ;
  const std::string& sim_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sim_id(Arg_&& arg, Args_... args);
  std::string* mutable_sim_id();
  PROTOBUF_NODISCARD std::string* release_sim_id();
  void set_allocated_sim_id(std::string* ptr);

  private:
  const std::string& _internal_sim_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sim_id(
      const std::string& value);
  std::string* _internal_mutable_sim_id();

  public:
  // .google.protobuf.Timestamp start_ts = 5 [json_name = "startTs"];
  bool has_start_ts() const;
  void clear_start_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_start_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_ts();
  void set_allocated_start_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* start_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_ts();
  public:
  void unsafe_arena_set_allocated_start_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* start_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_ts();
  // .google.protobuf.Timestamp end_ts = 6 [json_name = "endTs"];
  bool has_end_ts() const;
  void clear_end_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_end_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_ts();
  void set_allocated_end_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* end_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_ts();
  public:
  void unsafe_arena_set_allocated_end_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* end_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_ts();
  // .google.protobuf.Timestamp run_start_ts = 10 [json_name = "runStartTs"];
  bool has_run_start_ts() const;
  void clear_run_start_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& run_start_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_run_start_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_run_start_ts();
  void set_allocated_run_start_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* run_start_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_run_start_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_run_start_ts();
  public:
  void unsafe_arena_set_allocated_run_start_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* run_start_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_run_start_ts();
  // .google.protobuf.Timestamp run_end_ts = 11 [json_name = "runEndTs"];
  bool has_run_end_ts() const;
  void clear_run_end_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& run_end_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_run_end_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_run_end_ts();
  void set_allocated_run_end_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* run_end_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_run_end_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_run_end_ts();
  public:
  void unsafe_arena_set_allocated_run_end_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* run_end_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_run_end_ts();
  // int64 dataset_id = 1 [json_name = "datasetId"];
  void clear_dataset_id() ;
  ::int64_t dataset_id() const;
  void set_dataset_id(::int64_t value);

  private:
  ::int64_t _internal_dataset_id() const;
  void _internal_set_dataset_id(::int64_t value);

  public:
  // int64 project_number = 3 [json_name = "projectNumber"];
  void clear_project_number() ;
  ::int64_t project_number() const;
  void set_project_number(::int64_t value);

  private:
  ::int64_t _internal_project_number() const;
  void _internal_set_project_number(::int64_t value);

  public:
  // int64 cohort_id = 9 [json_name = "cohortId"];
  void clear_cohort_id() ;
  ::int64_t cohort_id() const;
  void set_cohort_id(::int64_t value);

  private:
  ::int64_t _internal_cohort_id() const;
  void _internal_set_cohort_id(::int64_t value);

  public:
  // .cavnue.messages.data_warehouse.management.v1.Dataset.Type dataset_type = 7 [json_name = "datasetType"];
  void clear_dataset_type() ;
  ::cavnue::messages::data_warehouse::management::v1::Dataset_Type dataset_type() const;
  void set_dataset_type(::cavnue::messages::data_warehouse::management::v1::Dataset_Type value);

  private:
  ::cavnue::messages::data_warehouse::management::v1::Dataset_Type _internal_dataset_type() const;
  void _internal_set_dataset_type(::cavnue::messages::data_warehouse::management::v1::Dataset_Type value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.Dataset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sim_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_ts_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_ts_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* run_start_ts_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* run_end_ts_;
    ::int64_t dataset_id_;
    ::int64_t project_number_;
    ::int64_t cohort_id_;
    int dataset_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class DatasetRun final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.DatasetRun) */ {
 public:
  inline DatasetRun() : DatasetRun(nullptr) {}
  ~DatasetRun() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DatasetRun(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DatasetRun(const DatasetRun& from);
  DatasetRun(DatasetRun&& from) noexcept
    : DatasetRun() {
    *this = ::std::move(from);
  }

  inline DatasetRun& operator=(const DatasetRun& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatasetRun& operator=(DatasetRun&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DatasetRun& default_instance() {
    return *internal_default_instance();
  }
  static inline const DatasetRun* internal_default_instance() {
    return reinterpret_cast<const DatasetRun*>(
               &_DatasetRun_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DatasetRun& a, DatasetRun& b) {
    a.Swap(&b);
  }
  inline void Swap(DatasetRun* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DatasetRun* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DatasetRun* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DatasetRun>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DatasetRun& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DatasetRun& from) {
    DatasetRun::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DatasetRun* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.DatasetRun";
  }
  protected:
  explicit DatasetRun(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 4,
    kProjectIdFieldNumber = 6,
    kSimIdFieldNumber = 10,
    kRunTsFieldNumber = 2,
    kStartTsFieldNumber = 7,
    kEndTsFieldNumber = 8,
    kRunIdFieldNumber = 1,
    kDatasetIdFieldNumber = 3,
    kProjectNumberFieldNumber = 5,
    kDatasetTypeFieldNumber = 9,
  };
  // string identifier = 4 [json_name = "identifier"];
  void clear_identifier() ;
  const std::string& identifier() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_identifier(Arg_&& arg, Args_... args);
  std::string* mutable_identifier();
  PROTOBUF_NODISCARD std::string* release_identifier();
  void set_allocated_identifier(std::string* ptr);

  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(
      const std::string& value);
  std::string* _internal_mutable_identifier();

  public:
  // string project_id = 6 [json_name = "projectId"];
  void clear_project_id() ;
  const std::string& project_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_project_id(Arg_&& arg, Args_... args);
  std::string* mutable_project_id();
  PROTOBUF_NODISCARD std::string* release_project_id();
  void set_allocated_project_id(std::string* ptr);

  private:
  const std::string& _internal_project_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project_id(
      const std::string& value);
  std::string* _internal_mutable_project_id();

  public:
  // string sim_id = 10 [json_name = "simId"];
  void clear_sim_id() ;
  const std::string& sim_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sim_id(Arg_&& arg, Args_... args);
  std::string* mutable_sim_id();
  PROTOBUF_NODISCARD std::string* release_sim_id();
  void set_allocated_sim_id(std::string* ptr);

  private:
  const std::string& _internal_sim_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sim_id(
      const std::string& value);
  std::string* _internal_mutable_sim_id();

  public:
  // .google.protobuf.Timestamp run_ts = 2 [json_name = "runTs"];
  bool has_run_ts() const;
  void clear_run_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& run_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_run_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_run_ts();
  void set_allocated_run_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* run_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_run_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_run_ts();
  public:
  void unsafe_arena_set_allocated_run_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* run_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_run_ts();
  // .google.protobuf.Timestamp start_ts = 7 [json_name = "startTs"];
  bool has_start_ts() const;
  void clear_start_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_start_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_ts();
  void set_allocated_start_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* start_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_ts();
  public:
  void unsafe_arena_set_allocated_start_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* start_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_ts();
  // .google.protobuf.Timestamp end_ts = 8 [json_name = "endTs"];
  bool has_end_ts() const;
  void clear_end_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_end_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_ts();
  void set_allocated_end_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* end_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_ts();
  public:
  void unsafe_arena_set_allocated_end_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* end_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_ts();
  // int64 run_id = 1 [json_name = "runId"];
  void clear_run_id() ;
  ::int64_t run_id() const;
  void set_run_id(::int64_t value);

  private:
  ::int64_t _internal_run_id() const;
  void _internal_set_run_id(::int64_t value);

  public:
  // int64 dataset_id = 3 [json_name = "datasetId"];
  void clear_dataset_id() ;
  ::int64_t dataset_id() const;
  void set_dataset_id(::int64_t value);

  private:
  ::int64_t _internal_dataset_id() const;
  void _internal_set_dataset_id(::int64_t value);

  public:
  // int64 project_number = 5 [json_name = "projectNumber"];
  void clear_project_number() ;
  ::int64_t project_number() const;
  void set_project_number(::int64_t value);

  private:
  ::int64_t _internal_project_number() const;
  void _internal_set_project_number(::int64_t value);

  public:
  // .cavnue.messages.data_warehouse.management.v1.Dataset.Type dataset_type = 9 [json_name = "datasetType"];
  void clear_dataset_type() ;
  ::cavnue::messages::data_warehouse::management::v1::Dataset_Type dataset_type() const;
  void set_dataset_type(::cavnue::messages::data_warehouse::management::v1::Dataset_Type value);

  private:
  ::cavnue::messages::data_warehouse::management::v1::Dataset_Type _internal_dataset_type() const;
  void _internal_set_dataset_type(::cavnue::messages::data_warehouse::management::v1::Dataset_Type value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.DatasetRun)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sim_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* run_ts_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_ts_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_ts_;
    ::int64_t run_id_;
    ::int64_t dataset_id_;
    ::int64_t project_number_;
    int dataset_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class GetServiceApiRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.GetServiceApiRequest) */ {
 public:
  inline GetServiceApiRequest() : GetServiceApiRequest(nullptr) {}
  ~GetServiceApiRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetServiceApiRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServiceApiRequest(const GetServiceApiRequest& from);
  GetServiceApiRequest(GetServiceApiRequest&& from) noexcept
    : GetServiceApiRequest() {
    *this = ::std::move(from);
  }

  inline GetServiceApiRequest& operator=(const GetServiceApiRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceApiRequest& operator=(GetServiceApiRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServiceApiRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServiceApiRequest* internal_default_instance() {
    return reinterpret_cast<const GetServiceApiRequest*>(
               &_GetServiceApiRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetServiceApiRequest& a, GetServiceApiRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceApiRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceApiRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetServiceApiRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetServiceApiRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetServiceApiRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetServiceApiRequest& from) {
    GetServiceApiRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceApiRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.GetServiceApiRequest";
  }
  protected:
  explicit GetServiceApiRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmptyFieldNumber = 1,
  };
  // .google.protobuf.Empty empty = 1 [json_name = "empty"];
  bool has_empty() const;
  void clear_empty() ;
  const ::PROTOBUF_NAMESPACE_ID::Empty& empty() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Empty* release_empty();
  ::PROTOBUF_NAMESPACE_ID::Empty* mutable_empty();
  void set_allocated_empty(::PROTOBUF_NAMESPACE_ID::Empty* empty);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Empty& _internal_empty() const;
  ::PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_empty();
  public:
  void unsafe_arena_set_allocated_empty(
      ::PROTOBUF_NAMESPACE_ID::Empty* empty);
  ::PROTOBUF_NAMESPACE_ID::Empty* unsafe_arena_release_empty();
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.GetServiceApiRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Empty* empty_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class GetServiceApiResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.GetServiceApiResponse) */ {
 public:
  inline GetServiceApiResponse() : GetServiceApiResponse(nullptr) {}
  ~GetServiceApiResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetServiceApiResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServiceApiResponse(const GetServiceApiResponse& from);
  GetServiceApiResponse(GetServiceApiResponse&& from) noexcept
    : GetServiceApiResponse() {
    *this = ::std::move(from);
  }

  inline GetServiceApiResponse& operator=(const GetServiceApiResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceApiResponse& operator=(GetServiceApiResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServiceApiResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServiceApiResponse* internal_default_instance() {
    return reinterpret_cast<const GetServiceApiResponse*>(
               &_GetServiceApiResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetServiceApiResponse& a, GetServiceApiResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceApiResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceApiResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetServiceApiResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetServiceApiResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetServiceApiResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetServiceApiResponse& from) {
    GetServiceApiResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceApiResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.GetServiceApiResponse";
  }
  protected:
  explicit GetServiceApiResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApiFieldNumber = 1,
  };
  // .google.protobuf.Api api = 1 [json_name = "api"];
  bool has_api() const;
  void clear_api() ;
  const ::PROTOBUF_NAMESPACE_ID::Api& api() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Api* release_api();
  ::PROTOBUF_NAMESPACE_ID::Api* mutable_api();
  void set_allocated_api(::PROTOBUF_NAMESPACE_ID::Api* api);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Api& _internal_api() const;
  ::PROTOBUF_NAMESPACE_ID::Api* _internal_mutable_api();
  public:
  void unsafe_arena_set_allocated_api(
      ::PROTOBUF_NAMESPACE_ID::Api* api);
  ::PROTOBUF_NAMESPACE_ID::Api* unsafe_arena_release_api();
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.GetServiceApiResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Api* api_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class GetDatasetRunsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.GetDatasetRunsRequest) */ {
 public:
  inline GetDatasetRunsRequest() : GetDatasetRunsRequest(nullptr) {}
  ~GetDatasetRunsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetDatasetRunsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDatasetRunsRequest(const GetDatasetRunsRequest& from);
  GetDatasetRunsRequest(GetDatasetRunsRequest&& from) noexcept
    : GetDatasetRunsRequest() {
    *this = ::std::move(from);
  }

  inline GetDatasetRunsRequest& operator=(const GetDatasetRunsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDatasetRunsRequest& operator=(GetDatasetRunsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDatasetRunsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDatasetRunsRequest* internal_default_instance() {
    return reinterpret_cast<const GetDatasetRunsRequest*>(
               &_GetDatasetRunsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetDatasetRunsRequest& a, GetDatasetRunsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDatasetRunsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDatasetRunsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDatasetRunsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDatasetRunsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDatasetRunsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDatasetRunsRequest& from) {
    GetDatasetRunsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDatasetRunsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.GetDatasetRunsRequest";
  }
  protected:
  explicit GetDatasetRunsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetIdentifierFieldNumber = 5,
    kDatasetIdFieldNumber = 1,
    kDatasetRunIdFieldNumber = 2,
    kSimOnlyFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // optional string dataset_identifier = 5 [json_name = "datasetIdentifier"];
  bool has_dataset_identifier() const;
  void clear_dataset_identifier() ;
  const std::string& dataset_identifier() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dataset_identifier(Arg_&& arg, Args_... args);
  std::string* mutable_dataset_identifier();
  PROTOBUF_NODISCARD std::string* release_dataset_identifier();
  void set_allocated_dataset_identifier(std::string* ptr);

  private:
  const std::string& _internal_dataset_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataset_identifier(
      const std::string& value);
  std::string* _internal_mutable_dataset_identifier();

  public:
  // optional int64 dataset_id = 1 [json_name = "datasetId"];
  bool has_dataset_id() const;
  void clear_dataset_id() ;
  ::int64_t dataset_id() const;
  void set_dataset_id(::int64_t value);

  private:
  ::int64_t _internal_dataset_id() const;
  void _internal_set_dataset_id(::int64_t value);

  public:
  // optional int64 dataset_run_id = 2 [json_name = "datasetRunId"];
  bool has_dataset_run_id() const;
  void clear_dataset_run_id() ;
  ::int64_t dataset_run_id() const;
  void set_dataset_run_id(::int64_t value);

  private:
  ::int64_t _internal_dataset_run_id() const;
  void _internal_set_dataset_run_id(::int64_t value);

  public:
  // optional bool sim_only = 3 [json_name = "simOnly"];
  bool has_sim_only() const;
  void clear_sim_only() ;
  bool sim_only() const;
  void set_sim_only(bool value);

  private:
  bool _internal_sim_only() const;
  void _internal_set_sim_only(bool value);

  public:
  // optional .cavnue.messages.data_warehouse.management.v1.Dataset.Type type = 4 [json_name = "type"];
  bool has_type() const;
  void clear_type() ;
  ::cavnue::messages::data_warehouse::management::v1::Dataset_Type type() const;
  void set_type(::cavnue::messages::data_warehouse::management::v1::Dataset_Type value);

  private:
  ::cavnue::messages::data_warehouse::management::v1::Dataset_Type _internal_type() const;
  void _internal_set_type(::cavnue::messages::data_warehouse::management::v1::Dataset_Type value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.GetDatasetRunsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_identifier_;
    ::int64_t dataset_id_;
    ::int64_t dataset_run_id_;
    bool sim_only_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class GetDatasetRunsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.GetDatasetRunsResponse) */ {
 public:
  inline GetDatasetRunsResponse() : GetDatasetRunsResponse(nullptr) {}
  ~GetDatasetRunsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetDatasetRunsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDatasetRunsResponse(const GetDatasetRunsResponse& from);
  GetDatasetRunsResponse(GetDatasetRunsResponse&& from) noexcept
    : GetDatasetRunsResponse() {
    *this = ::std::move(from);
  }

  inline GetDatasetRunsResponse& operator=(const GetDatasetRunsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDatasetRunsResponse& operator=(GetDatasetRunsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDatasetRunsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDatasetRunsResponse* internal_default_instance() {
    return reinterpret_cast<const GetDatasetRunsResponse*>(
               &_GetDatasetRunsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetDatasetRunsResponse& a, GetDatasetRunsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDatasetRunsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDatasetRunsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDatasetRunsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDatasetRunsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDatasetRunsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDatasetRunsResponse& from) {
    GetDatasetRunsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDatasetRunsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.GetDatasetRunsResponse";
  }
  protected:
  explicit GetDatasetRunsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunsFieldNumber = 1,
  };
  // repeated .cavnue.messages.world_state.v1.DatasetRun runs = 1 [json_name = "runs"];
  int runs_size() const;
  private:
  int _internal_runs_size() const;

  public:
  void clear_runs() ;
  ::cavnue::messages::world_state::v1::DatasetRun* mutable_runs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::world_state::v1::DatasetRun >*
      mutable_runs();
  private:
  const ::cavnue::messages::world_state::v1::DatasetRun& _internal_runs(int index) const;
  ::cavnue::messages::world_state::v1::DatasetRun* _internal_add_runs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::world_state::v1::DatasetRun>& _internal_runs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::world_state::v1::DatasetRun>* _internal_mutable_runs();
  public:
  const ::cavnue::messages::world_state::v1::DatasetRun& runs(int index) const;
  ::cavnue::messages::world_state::v1::DatasetRun* add_runs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::world_state::v1::DatasetRun >&
      runs() const;
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.GetDatasetRunsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::world_state::v1::DatasetRun > runs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class GetDatasetsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.GetDatasetsRequest) */ {
 public:
  inline GetDatasetsRequest() : GetDatasetsRequest(nullptr) {}
  ~GetDatasetsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetDatasetsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDatasetsRequest(const GetDatasetsRequest& from);
  GetDatasetsRequest(GetDatasetsRequest&& from) noexcept
    : GetDatasetsRequest() {
    *this = ::std::move(from);
  }

  inline GetDatasetsRequest& operator=(const GetDatasetsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDatasetsRequest& operator=(GetDatasetsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDatasetsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDatasetsRequest* internal_default_instance() {
    return reinterpret_cast<const GetDatasetsRequest*>(
               &_GetDatasetsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetDatasetsRequest& a, GetDatasetsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDatasetsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDatasetsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDatasetsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDatasetsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDatasetsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDatasetsRequest& from) {
    GetDatasetsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDatasetsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.GetDatasetsRequest";
  }
  protected:
  explicit GetDatasetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSimOnlyFieldNumber = 1,
  };
  // optional bool sim_only = 1 [json_name = "simOnly"];
  bool has_sim_only() const;
  void clear_sim_only() ;
  bool sim_only() const;
  void set_sim_only(bool value);

  private:
  bool _internal_sim_only() const;
  void _internal_set_sim_only(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.GetDatasetsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool sim_only_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class GetDatasetsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.GetDatasetsResponse) */ {
 public:
  inline GetDatasetsResponse() : GetDatasetsResponse(nullptr) {}
  ~GetDatasetsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetDatasetsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDatasetsResponse(const GetDatasetsResponse& from);
  GetDatasetsResponse(GetDatasetsResponse&& from) noexcept
    : GetDatasetsResponse() {
    *this = ::std::move(from);
  }

  inline GetDatasetsResponse& operator=(const GetDatasetsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDatasetsResponse& operator=(GetDatasetsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDatasetsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDatasetsResponse* internal_default_instance() {
    return reinterpret_cast<const GetDatasetsResponse*>(
               &_GetDatasetsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetDatasetsResponse& a, GetDatasetsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDatasetsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDatasetsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDatasetsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDatasetsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDatasetsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDatasetsResponse& from) {
    GetDatasetsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDatasetsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.GetDatasetsResponse";
  }
  protected:
  explicit GetDatasetsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetsFieldNumber = 1,
  };
  // repeated .cavnue.messages.world_state.v1.Dataset datasets = 1 [json_name = "datasets"];
  int datasets_size() const;
  private:
  int _internal_datasets_size() const;

  public:
  void clear_datasets() ;
  ::cavnue::messages::world_state::v1::Dataset* mutable_datasets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::world_state::v1::Dataset >*
      mutable_datasets();
  private:
  const ::cavnue::messages::world_state::v1::Dataset& _internal_datasets(int index) const;
  ::cavnue::messages::world_state::v1::Dataset* _internal_add_datasets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::world_state::v1::Dataset>& _internal_datasets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::world_state::v1::Dataset>* _internal_mutable_datasets();
  public:
  const ::cavnue::messages::world_state::v1::Dataset& datasets(int index) const;
  ::cavnue::messages::world_state::v1::Dataset* add_datasets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::world_state::v1::Dataset >&
      datasets() const;
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.GetDatasetsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::world_state::v1::Dataset > datasets_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class GetWorldStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.GetWorldStateRequest) */ {
 public:
  inline GetWorldStateRequest() : GetWorldStateRequest(nullptr) {}
  ~GetWorldStateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetWorldStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetWorldStateRequest(const GetWorldStateRequest& from);
  GetWorldStateRequest(GetWorldStateRequest&& from) noexcept
    : GetWorldStateRequest() {
    *this = ::std::move(from);
  }

  inline GetWorldStateRequest& operator=(const GetWorldStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWorldStateRequest& operator=(GetWorldStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetWorldStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetWorldStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetWorldStateRequest*>(
               &_GetWorldStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetWorldStateRequest& a, GetWorldStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWorldStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWorldStateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetWorldStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetWorldStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetWorldStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetWorldStateRequest& from) {
    GetWorldStateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWorldStateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.GetWorldStateRequest";
  }
  protected:
  explicit GetWorldStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
  bool has_query() const;
  void clear_query() ;
  const ::cavnue::messages::world_state::v1::Query& query() const;
  PROTOBUF_NODISCARD ::cavnue::messages::world_state::v1::Query* release_query();
  ::cavnue::messages::world_state::v1::Query* mutable_query();
  void set_allocated_query(::cavnue::messages::world_state::v1::Query* query);
  private:
  const ::cavnue::messages::world_state::v1::Query& _internal_query() const;
  ::cavnue::messages::world_state::v1::Query* _internal_mutable_query();
  public:
  void unsafe_arena_set_allocated_query(
      ::cavnue::messages::world_state::v1::Query* query);
  ::cavnue::messages::world_state::v1::Query* unsafe_arena_release_query();
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.GetWorldStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::world_state::v1::Query* query_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class GetWorldStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.GetWorldStateResponse) */ {
 public:
  inline GetWorldStateResponse() : GetWorldStateResponse(nullptr) {}
  ~GetWorldStateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetWorldStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetWorldStateResponse(const GetWorldStateResponse& from);
  GetWorldStateResponse(GetWorldStateResponse&& from) noexcept
    : GetWorldStateResponse() {
    *this = ::std::move(from);
  }

  inline GetWorldStateResponse& operator=(const GetWorldStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWorldStateResponse& operator=(GetWorldStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetWorldStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetWorldStateResponse* internal_default_instance() {
    return reinterpret_cast<const GetWorldStateResponse*>(
               &_GetWorldStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetWorldStateResponse& a, GetWorldStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWorldStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWorldStateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetWorldStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetWorldStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetWorldStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetWorldStateResponse& from) {
    GetWorldStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWorldStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.GetWorldStateResponse";
  }
  protected:
  explicit GetWorldStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorsFieldNumber = 1,
    kEventsFieldNumber = 2,
    kAssetsFieldNumber = 3,
    kTrafficEventsFieldNumber = 4,
  };
  // repeated .cavnue.messages.inference.v1.Actor actors = 1 [json_name = "actors"];
  int actors_size() const;
  private:
  int _internal_actors_size() const;

  public:
  void clear_actors() ;
  ::cavnue::messages::inference::v1::Actor* mutable_actors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Actor >*
      mutable_actors();
  private:
  const ::cavnue::messages::inference::v1::Actor& _internal_actors(int index) const;
  ::cavnue::messages::inference::v1::Actor* _internal_add_actors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Actor>& _internal_actors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Actor>* _internal_mutable_actors();
  public:
  const ::cavnue::messages::inference::v1::Actor& actors(int index) const;
  ::cavnue::messages::inference::v1::Actor* add_actors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Actor >&
      actors() const;
  // repeated .cavnue.messages.inference.v1.Event events = 2 [json_name = "events"];
  int events_size() const;
  private:
  int _internal_events_size() const;

  public:
  void clear_events() ;
  ::cavnue::messages::inference::v1::Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Event >*
      mutable_events();
  private:
  const ::cavnue::messages::inference::v1::Event& _internal_events(int index) const;
  ::cavnue::messages::inference::v1::Event* _internal_add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Event>& _internal_events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Event>* _internal_mutable_events();
  public:
  const ::cavnue::messages::inference::v1::Event& events(int index) const;
  ::cavnue::messages::inference::v1::Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Event >&
      events() const;
  // repeated .cavnue.messages.world_state.v1.Asset assets = 3 [json_name = "assets"];
  int assets_size() const;
  private:
  int _internal_assets_size() const;

  public:
  void clear_assets() ;
  ::cavnue::messages::world_state::v1::Asset* mutable_assets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::world_state::v1::Asset >*
      mutable_assets();
  private:
  const ::cavnue::messages::world_state::v1::Asset& _internal_assets(int index) const;
  ::cavnue::messages::world_state::v1::Asset* _internal_add_assets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::world_state::v1::Asset>& _internal_assets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::world_state::v1::Asset>* _internal_mutable_assets();
  public:
  const ::cavnue::messages::world_state::v1::Asset& assets(int index) const;
  ::cavnue::messages::world_state::v1::Asset* add_assets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::world_state::v1::Asset >&
      assets() const;
  // repeated .cavnue.messages.inference.v1.TrafficEvent traffic_events = 4 [json_name = "trafficEvents"];
  int traffic_events_size() const;
  private:
  int _internal_traffic_events_size() const;

  public:
  void clear_traffic_events() ;
  ::cavnue::messages::inference::v1::TrafficEvent* mutable_traffic_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::TrafficEvent >*
      mutable_traffic_events();
  private:
  const ::cavnue::messages::inference::v1::TrafficEvent& _internal_traffic_events(int index) const;
  ::cavnue::messages::inference::v1::TrafficEvent* _internal_add_traffic_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::TrafficEvent>& _internal_traffic_events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::TrafficEvent>* _internal_mutable_traffic_events();
  public:
  const ::cavnue::messages::inference::v1::TrafficEvent& traffic_events(int index) const;
  ::cavnue::messages::inference::v1::TrafficEvent* add_traffic_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::TrafficEvent >&
      traffic_events() const;
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.GetWorldStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Actor > actors_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Event > events_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::world_state::v1::Asset > assets_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::TrafficEvent > traffic_events_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class GetWorldStateNearRealTimeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest) */ {
 public:
  inline GetWorldStateNearRealTimeRequest() : GetWorldStateNearRealTimeRequest(nullptr) {}
  ~GetWorldStateNearRealTimeRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetWorldStateNearRealTimeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetWorldStateNearRealTimeRequest(const GetWorldStateNearRealTimeRequest& from);
  GetWorldStateNearRealTimeRequest(GetWorldStateNearRealTimeRequest&& from) noexcept
    : GetWorldStateNearRealTimeRequest() {
    *this = ::std::move(from);
  }

  inline GetWorldStateNearRealTimeRequest& operator=(const GetWorldStateNearRealTimeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWorldStateNearRealTimeRequest& operator=(GetWorldStateNearRealTimeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetWorldStateNearRealTimeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetWorldStateNearRealTimeRequest* internal_default_instance() {
    return reinterpret_cast<const GetWorldStateNearRealTimeRequest*>(
               &_GetWorldStateNearRealTimeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetWorldStateNearRealTimeRequest& a, GetWorldStateNearRealTimeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWorldStateNearRealTimeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWorldStateNearRealTimeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetWorldStateNearRealTimeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetWorldStateNearRealTimeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetWorldStateNearRealTimeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetWorldStateNearRealTimeRequest& from) {
    GetWorldStateNearRealTimeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWorldStateNearRealTimeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest";
  }
  protected:
  explicit GetWorldStateNearRealTimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kTimeFilterFieldNumber = 2,
    kActorFieldRequestFieldNumber = 3,
    kEventFieldRequestFieldNumber = 4,
    kTrafficEventFieldRequestFieldNumber = 5,
  };
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  bool has_header() const;
  void clear_header() ;
  const ::cavnue::messages::common::v1::Header& header() const;
  PROTOBUF_NODISCARD ::cavnue::messages::common::v1::Header* release_header();
  ::cavnue::messages::common::v1::Header* mutable_header();
  void set_allocated_header(::cavnue::messages::common::v1::Header* header);
  private:
  const ::cavnue::messages::common::v1::Header& _internal_header() const;
  ::cavnue::messages::common::v1::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::cavnue::messages::common::v1::Header* header);
  ::cavnue::messages::common::v1::Header* unsafe_arena_release_header();
  // optional .cavnue.messages.world_state.v1.TimeFilter time_filter = 2 [json_name = "timeFilter"];
  bool has_time_filter() const;
  void clear_time_filter() ;
  const ::cavnue::messages::world_state::v1::TimeFilter& time_filter() const;
  PROTOBUF_NODISCARD ::cavnue::messages::world_state::v1::TimeFilter* release_time_filter();
  ::cavnue::messages::world_state::v1::TimeFilter* mutable_time_filter();
  void set_allocated_time_filter(::cavnue::messages::world_state::v1::TimeFilter* time_filter);
  private:
  const ::cavnue::messages::world_state::v1::TimeFilter& _internal_time_filter() const;
  ::cavnue::messages::world_state::v1::TimeFilter* _internal_mutable_time_filter();
  public:
  void unsafe_arena_set_allocated_time_filter(
      ::cavnue::messages::world_state::v1::TimeFilter* time_filter);
  ::cavnue::messages::world_state::v1::TimeFilter* unsafe_arena_release_time_filter();
  // .google.protobuf.FieldMask actor_field_request = 3 [json_name = "actorFieldRequest"];
  bool has_actor_field_request() const;
  void clear_actor_field_request() ;
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& actor_field_request() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_actor_field_request();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_actor_field_request();
  void set_allocated_actor_field_request(::PROTOBUF_NAMESPACE_ID::FieldMask* actor_field_request);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_actor_field_request() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_actor_field_request();
  public:
  void unsafe_arena_set_allocated_actor_field_request(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* actor_field_request);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_actor_field_request();
  // .google.protobuf.FieldMask event_field_request = 4 [json_name = "eventFieldRequest"];
  bool has_event_field_request() const;
  void clear_event_field_request() ;
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& event_field_request() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_event_field_request();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_event_field_request();
  void set_allocated_event_field_request(::PROTOBUF_NAMESPACE_ID::FieldMask* event_field_request);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_event_field_request() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_event_field_request();
  public:
  void unsafe_arena_set_allocated_event_field_request(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* event_field_request);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_event_field_request();
  // .google.protobuf.FieldMask traffic_event_field_request = 5 [json_name = "trafficEventFieldRequest"];
  bool has_traffic_event_field_request() const;
  void clear_traffic_event_field_request() ;
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& traffic_event_field_request() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_traffic_event_field_request();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_traffic_event_field_request();
  void set_allocated_traffic_event_field_request(::PROTOBUF_NAMESPACE_ID::FieldMask* traffic_event_field_request);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_traffic_event_field_request() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_traffic_event_field_request();
  public:
  void unsafe_arena_set_allocated_traffic_event_field_request(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* traffic_event_field_request);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_traffic_event_field_request();
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::common::v1::Header* header_;
    ::cavnue::messages::world_state::v1::TimeFilter* time_filter_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* actor_field_request_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* event_field_request_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* traffic_event_field_request_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class GetWorldStateNearRealTimeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse) */ {
 public:
  inline GetWorldStateNearRealTimeResponse() : GetWorldStateNearRealTimeResponse(nullptr) {}
  ~GetWorldStateNearRealTimeResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetWorldStateNearRealTimeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetWorldStateNearRealTimeResponse(const GetWorldStateNearRealTimeResponse& from);
  GetWorldStateNearRealTimeResponse(GetWorldStateNearRealTimeResponse&& from) noexcept
    : GetWorldStateNearRealTimeResponse() {
    *this = ::std::move(from);
  }

  inline GetWorldStateNearRealTimeResponse& operator=(const GetWorldStateNearRealTimeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWorldStateNearRealTimeResponse& operator=(GetWorldStateNearRealTimeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetWorldStateNearRealTimeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetWorldStateNearRealTimeResponse* internal_default_instance() {
    return reinterpret_cast<const GetWorldStateNearRealTimeResponse*>(
               &_GetWorldStateNearRealTimeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetWorldStateNearRealTimeResponse& a, GetWorldStateNearRealTimeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWorldStateNearRealTimeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWorldStateNearRealTimeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetWorldStateNearRealTimeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetWorldStateNearRealTimeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetWorldStateNearRealTimeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetWorldStateNearRealTimeResponse& from) {
    GetWorldStateNearRealTimeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWorldStateNearRealTimeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse";
  }
  protected:
  explicit GetWorldStateNearRealTimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorsFieldNumber = 5,
    kEventsFieldNumber = 6,
    kTrafficEventsFieldNumber = 7,
    kHeaderFieldNumber = 1,
    kActorFieldMaskFieldNumber = 2,
    kEventFieldMaskFieldNumber = 3,
    kTrafficEventFieldMaskFieldNumber = 4,
  };
  // repeated .cavnue.messages.inference.v1.Actor actors = 5 [json_name = "actors"];
  int actors_size() const;
  private:
  int _internal_actors_size() const;

  public:
  void clear_actors() ;
  ::cavnue::messages::inference::v1::Actor* mutable_actors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Actor >*
      mutable_actors();
  private:
  const ::cavnue::messages::inference::v1::Actor& _internal_actors(int index) const;
  ::cavnue::messages::inference::v1::Actor* _internal_add_actors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Actor>& _internal_actors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Actor>* _internal_mutable_actors();
  public:
  const ::cavnue::messages::inference::v1::Actor& actors(int index) const;
  ::cavnue::messages::inference::v1::Actor* add_actors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Actor >&
      actors() const;
  // repeated .cavnue.messages.inference.v1.Event events = 6 [json_name = "events"];
  int events_size() const;
  private:
  int _internal_events_size() const;

  public:
  void clear_events() ;
  ::cavnue::messages::inference::v1::Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Event >*
      mutable_events();
  private:
  const ::cavnue::messages::inference::v1::Event& _internal_events(int index) const;
  ::cavnue::messages::inference::v1::Event* _internal_add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Event>& _internal_events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Event>* _internal_mutable_events();
  public:
  const ::cavnue::messages::inference::v1::Event& events(int index) const;
  ::cavnue::messages::inference::v1::Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Event >&
      events() const;
  // repeated .cavnue.messages.inference.v1.TrafficEvent traffic_events = 7 [json_name = "trafficEvents"];
  int traffic_events_size() const;
  private:
  int _internal_traffic_events_size() const;

  public:
  void clear_traffic_events() ;
  ::cavnue::messages::inference::v1::TrafficEvent* mutable_traffic_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::TrafficEvent >*
      mutable_traffic_events();
  private:
  const ::cavnue::messages::inference::v1::TrafficEvent& _internal_traffic_events(int index) const;
  ::cavnue::messages::inference::v1::TrafficEvent* _internal_add_traffic_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::TrafficEvent>& _internal_traffic_events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::TrafficEvent>* _internal_mutable_traffic_events();
  public:
  const ::cavnue::messages::inference::v1::TrafficEvent& traffic_events(int index) const;
  ::cavnue::messages::inference::v1::TrafficEvent* add_traffic_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::TrafficEvent >&
      traffic_events() const;
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  bool has_header() const;
  void clear_header() ;
  const ::cavnue::messages::common::v1::Header& header() const;
  PROTOBUF_NODISCARD ::cavnue::messages::common::v1::Header* release_header();
  ::cavnue::messages::common::v1::Header* mutable_header();
  void set_allocated_header(::cavnue::messages::common::v1::Header* header);
  private:
  const ::cavnue::messages::common::v1::Header& _internal_header() const;
  ::cavnue::messages::common::v1::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::cavnue::messages::common::v1::Header* header);
  ::cavnue::messages::common::v1::Header* unsafe_arena_release_header();
  // .google.protobuf.FieldMask actor_field_mask = 2 [json_name = "actorFieldMask"];
  bool has_actor_field_mask() const;
  void clear_actor_field_mask() ;
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& actor_field_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_actor_field_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_actor_field_mask();
  void set_allocated_actor_field_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* actor_field_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_actor_field_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_actor_field_mask();
  public:
  void unsafe_arena_set_allocated_actor_field_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* actor_field_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_actor_field_mask();
  // .google.protobuf.FieldMask event_field_mask = 3 [json_name = "eventFieldMask"];
  bool has_event_field_mask() const;
  void clear_event_field_mask() ;
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& event_field_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_event_field_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_event_field_mask();
  void set_allocated_event_field_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* event_field_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_event_field_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_event_field_mask();
  public:
  void unsafe_arena_set_allocated_event_field_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* event_field_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_event_field_mask();
  // .google.protobuf.FieldMask traffic_event_field_mask = 4 [json_name = "trafficEventFieldMask"];
  bool has_traffic_event_field_mask() const;
  void clear_traffic_event_field_mask() ;
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& traffic_event_field_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_traffic_event_field_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_traffic_event_field_mask();
  void set_allocated_traffic_event_field_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* traffic_event_field_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_traffic_event_field_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_traffic_event_field_mask();
  public:
  void unsafe_arena_set_allocated_traffic_event_field_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* traffic_event_field_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_traffic_event_field_mask();
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Actor > actors_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Event > events_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::TrafficEvent > traffic_events_;
    ::cavnue::messages::common::v1::Header* header_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* actor_field_mask_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* event_field_mask_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* traffic_event_field_mask_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class GetActorsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.GetActorsRequest) */ {
 public:
  inline GetActorsRequest() : GetActorsRequest(nullptr) {}
  ~GetActorsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetActorsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetActorsRequest(const GetActorsRequest& from);
  GetActorsRequest(GetActorsRequest&& from) noexcept
    : GetActorsRequest() {
    *this = ::std::move(from);
  }

  inline GetActorsRequest& operator=(const GetActorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetActorsRequest& operator=(GetActorsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetActorsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetActorsRequest* internal_default_instance() {
    return reinterpret_cast<const GetActorsRequest*>(
               &_GetActorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetActorsRequest& a, GetActorsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetActorsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetActorsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetActorsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetActorsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetActorsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetActorsRequest& from) {
    GetActorsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetActorsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.GetActorsRequest";
  }
  protected:
  explicit GetActorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
  bool has_query() const;
  void clear_query() ;
  const ::cavnue::messages::world_state::v1::Query& query() const;
  PROTOBUF_NODISCARD ::cavnue::messages::world_state::v1::Query* release_query();
  ::cavnue::messages::world_state::v1::Query* mutable_query();
  void set_allocated_query(::cavnue::messages::world_state::v1::Query* query);
  private:
  const ::cavnue::messages::world_state::v1::Query& _internal_query() const;
  ::cavnue::messages::world_state::v1::Query* _internal_mutable_query();
  public:
  void unsafe_arena_set_allocated_query(
      ::cavnue::messages::world_state::v1::Query* query);
  ::cavnue::messages::world_state::v1::Query* unsafe_arena_release_query();
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.GetActorsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::world_state::v1::Query* query_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class GetActorsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.GetActorsResponse) */ {
 public:
  inline GetActorsResponse() : GetActorsResponse(nullptr) {}
  ~GetActorsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetActorsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetActorsResponse(const GetActorsResponse& from);
  GetActorsResponse(GetActorsResponse&& from) noexcept
    : GetActorsResponse() {
    *this = ::std::move(from);
  }

  inline GetActorsResponse& operator=(const GetActorsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetActorsResponse& operator=(GetActorsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetActorsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetActorsResponse* internal_default_instance() {
    return reinterpret_cast<const GetActorsResponse*>(
               &_GetActorsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetActorsResponse& a, GetActorsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetActorsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetActorsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetActorsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetActorsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetActorsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetActorsResponse& from) {
    GetActorsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetActorsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.GetActorsResponse";
  }
  protected:
  explicit GetActorsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorsFieldNumber = 1,
  };
  // repeated .cavnue.messages.inference.v1.Actor actors = 1 [json_name = "actors"];
  int actors_size() const;
  private:
  int _internal_actors_size() const;

  public:
  void clear_actors() ;
  ::cavnue::messages::inference::v1::Actor* mutable_actors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Actor >*
      mutable_actors();
  private:
  const ::cavnue::messages::inference::v1::Actor& _internal_actors(int index) const;
  ::cavnue::messages::inference::v1::Actor* _internal_add_actors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Actor>& _internal_actors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Actor>* _internal_mutable_actors();
  public:
  const ::cavnue::messages::inference::v1::Actor& actors(int index) const;
  ::cavnue::messages::inference::v1::Actor* add_actors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Actor >&
      actors() const;
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.GetActorsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Actor > actors_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class GetEventsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.GetEventsRequest) */ {
 public:
  inline GetEventsRequest() : GetEventsRequest(nullptr) {}
  ~GetEventsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetEventsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetEventsRequest(const GetEventsRequest& from);
  GetEventsRequest(GetEventsRequest&& from) noexcept
    : GetEventsRequest() {
    *this = ::std::move(from);
  }

  inline GetEventsRequest& operator=(const GetEventsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEventsRequest& operator=(GetEventsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEventsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEventsRequest* internal_default_instance() {
    return reinterpret_cast<const GetEventsRequest*>(
               &_GetEventsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetEventsRequest& a, GetEventsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEventsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEventsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEventsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEventsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetEventsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetEventsRequest& from) {
    GetEventsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEventsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.GetEventsRequest";
  }
  protected:
  explicit GetEventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
  bool has_query() const;
  void clear_query() ;
  const ::cavnue::messages::world_state::v1::Query& query() const;
  PROTOBUF_NODISCARD ::cavnue::messages::world_state::v1::Query* release_query();
  ::cavnue::messages::world_state::v1::Query* mutable_query();
  void set_allocated_query(::cavnue::messages::world_state::v1::Query* query);
  private:
  const ::cavnue::messages::world_state::v1::Query& _internal_query() const;
  ::cavnue::messages::world_state::v1::Query* _internal_mutable_query();
  public:
  void unsafe_arena_set_allocated_query(
      ::cavnue::messages::world_state::v1::Query* query);
  ::cavnue::messages::world_state::v1::Query* unsafe_arena_release_query();
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.GetEventsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::world_state::v1::Query* query_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class GetEventsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.GetEventsResponse) */ {
 public:
  inline GetEventsResponse() : GetEventsResponse(nullptr) {}
  ~GetEventsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetEventsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetEventsResponse(const GetEventsResponse& from);
  GetEventsResponse(GetEventsResponse&& from) noexcept
    : GetEventsResponse() {
    *this = ::std::move(from);
  }

  inline GetEventsResponse& operator=(const GetEventsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEventsResponse& operator=(GetEventsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEventsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEventsResponse* internal_default_instance() {
    return reinterpret_cast<const GetEventsResponse*>(
               &_GetEventsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetEventsResponse& a, GetEventsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEventsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEventsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEventsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEventsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetEventsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetEventsResponse& from) {
    GetEventsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEventsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.GetEventsResponse";
  }
  protected:
  explicit GetEventsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
  };
  // repeated .cavnue.messages.inference.v1.Event events = 1 [json_name = "events"];
  int events_size() const;
  private:
  int _internal_events_size() const;

  public:
  void clear_events() ;
  ::cavnue::messages::inference::v1::Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Event >*
      mutable_events();
  private:
  const ::cavnue::messages::inference::v1::Event& _internal_events(int index) const;
  ::cavnue::messages::inference::v1::Event* _internal_add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Event>& _internal_events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Event>* _internal_mutable_events();
  public:
  const ::cavnue::messages::inference::v1::Event& events(int index) const;
  ::cavnue::messages::inference::v1::Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Event >&
      events() const;
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.GetEventsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Event > events_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class GetAssetsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.GetAssetsRequest) */ {
 public:
  inline GetAssetsRequest() : GetAssetsRequest(nullptr) {}
  ~GetAssetsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetAssetsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAssetsRequest(const GetAssetsRequest& from);
  GetAssetsRequest(GetAssetsRequest&& from) noexcept
    : GetAssetsRequest() {
    *this = ::std::move(from);
  }

  inline GetAssetsRequest& operator=(const GetAssetsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAssetsRequest& operator=(GetAssetsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAssetsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAssetsRequest* internal_default_instance() {
    return reinterpret_cast<const GetAssetsRequest*>(
               &_GetAssetsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetAssetsRequest& a, GetAssetsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAssetsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAssetsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAssetsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAssetsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAssetsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAssetsRequest& from) {
    GetAssetsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAssetsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.GetAssetsRequest";
  }
  protected:
  explicit GetAssetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
  bool has_query() const;
  void clear_query() ;
  const ::cavnue::messages::world_state::v1::Query& query() const;
  PROTOBUF_NODISCARD ::cavnue::messages::world_state::v1::Query* release_query();
  ::cavnue::messages::world_state::v1::Query* mutable_query();
  void set_allocated_query(::cavnue::messages::world_state::v1::Query* query);
  private:
  const ::cavnue::messages::world_state::v1::Query& _internal_query() const;
  ::cavnue::messages::world_state::v1::Query* _internal_mutable_query();
  public:
  void unsafe_arena_set_allocated_query(
      ::cavnue::messages::world_state::v1::Query* query);
  ::cavnue::messages::world_state::v1::Query* unsafe_arena_release_query();
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.GetAssetsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::world_state::v1::Query* query_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class GetAssetsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.GetAssetsResponse) */ {
 public:
  inline GetAssetsResponse() : GetAssetsResponse(nullptr) {}
  ~GetAssetsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetAssetsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAssetsResponse(const GetAssetsResponse& from);
  GetAssetsResponse(GetAssetsResponse&& from) noexcept
    : GetAssetsResponse() {
    *this = ::std::move(from);
  }

  inline GetAssetsResponse& operator=(const GetAssetsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAssetsResponse& operator=(GetAssetsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAssetsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAssetsResponse* internal_default_instance() {
    return reinterpret_cast<const GetAssetsResponse*>(
               &_GetAssetsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GetAssetsResponse& a, GetAssetsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAssetsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAssetsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAssetsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAssetsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAssetsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAssetsResponse& from) {
    GetAssetsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAssetsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.GetAssetsResponse";
  }
  protected:
  explicit GetAssetsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetsFieldNumber = 1,
  };
  // repeated .cavnue.messages.world_state.v1.Asset assets = 1 [json_name = "assets"];
  int assets_size() const;
  private:
  int _internal_assets_size() const;

  public:
  void clear_assets() ;
  ::cavnue::messages::world_state::v1::Asset* mutable_assets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::world_state::v1::Asset >*
      mutable_assets();
  private:
  const ::cavnue::messages::world_state::v1::Asset& _internal_assets(int index) const;
  ::cavnue::messages::world_state::v1::Asset* _internal_add_assets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::world_state::v1::Asset>& _internal_assets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::world_state::v1::Asset>* _internal_mutable_assets();
  public:
  const ::cavnue::messages::world_state::v1::Asset& assets(int index) const;
  ::cavnue::messages::world_state::v1::Asset* add_assets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::world_state::v1::Asset >&
      assets() const;
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.GetAssetsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::world_state::v1::Asset > assets_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class GetTrafficAggregationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.GetTrafficAggregationRequest) */ {
 public:
  inline GetTrafficAggregationRequest() : GetTrafficAggregationRequest(nullptr) {}
  ~GetTrafficAggregationRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetTrafficAggregationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTrafficAggregationRequest(const GetTrafficAggregationRequest& from);
  GetTrafficAggregationRequest(GetTrafficAggregationRequest&& from) noexcept
    : GetTrafficAggregationRequest() {
    *this = ::std::move(from);
  }

  inline GetTrafficAggregationRequest& operator=(const GetTrafficAggregationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTrafficAggregationRequest& operator=(GetTrafficAggregationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTrafficAggregationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTrafficAggregationRequest* internal_default_instance() {
    return reinterpret_cast<const GetTrafficAggregationRequest*>(
               &_GetTrafficAggregationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GetTrafficAggregationRequest& a, GetTrafficAggregationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTrafficAggregationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTrafficAggregationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTrafficAggregationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTrafficAggregationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTrafficAggregationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetTrafficAggregationRequest& from) {
    GetTrafficAggregationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTrafficAggregationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.GetTrafficAggregationRequest";
  }
  protected:
  explicit GetTrafficAggregationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Frequency = GetTrafficAggregationRequest_Frequency;
  static constexpr Frequency FREQUENCY_UNSPECIFIED = GetTrafficAggregationRequest_Frequency_FREQUENCY_UNSPECIFIED;
  static constexpr Frequency FREQUENCY_300_SECONDS = GetTrafficAggregationRequest_Frequency_FREQUENCY_300_SECONDS;
  static constexpr Frequency FREQUENCY_3600_SECONDS = GetTrafficAggregationRequest_Frequency_FREQUENCY_3600_SECONDS;
  static inline bool Frequency_IsValid(int value) {
    return GetTrafficAggregationRequest_Frequency_IsValid(value);
  }
  static constexpr Frequency Frequency_MIN = GetTrafficAggregationRequest_Frequency_Frequency_MIN;
  static constexpr Frequency Frequency_MAX = GetTrafficAggregationRequest_Frequency_Frequency_MAX;
  static constexpr int Frequency_ARRAYSIZE = GetTrafficAggregationRequest_Frequency_Frequency_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Frequency_descriptor() {
    return GetTrafficAggregationRequest_Frequency_descriptor();
  }
  template <typename T>
  static inline const std::string& Frequency_Name(T value) {
    return GetTrafficAggregationRequest_Frequency_Name(value);
  }
  static inline bool Frequency_Parse(absl::string_view name, Frequency* value) {
    return GetTrafficAggregationRequest_Frequency_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFilterFieldNumber = 1,
    kFrequencyFieldNumber = 2,
  };
  // .cavnue.messages.world_state.v1.TimeFilter time_filter = 1 [json_name = "timeFilter"];
  bool has_time_filter() const;
  void clear_time_filter() ;
  const ::cavnue::messages::world_state::v1::TimeFilter& time_filter() const;
  PROTOBUF_NODISCARD ::cavnue::messages::world_state::v1::TimeFilter* release_time_filter();
  ::cavnue::messages::world_state::v1::TimeFilter* mutable_time_filter();
  void set_allocated_time_filter(::cavnue::messages::world_state::v1::TimeFilter* time_filter);
  private:
  const ::cavnue::messages::world_state::v1::TimeFilter& _internal_time_filter() const;
  ::cavnue::messages::world_state::v1::TimeFilter* _internal_mutable_time_filter();
  public:
  void unsafe_arena_set_allocated_time_filter(
      ::cavnue::messages::world_state::v1::TimeFilter* time_filter);
  ::cavnue::messages::world_state::v1::TimeFilter* unsafe_arena_release_time_filter();
  // .cavnue.messages.world_state.v1.GetTrafficAggregationRequest.Frequency frequency = 2 [json_name = "frequency"];
  void clear_frequency() ;
  ::cavnue::messages::world_state::v1::GetTrafficAggregationRequest_Frequency frequency() const;
  void set_frequency(::cavnue::messages::world_state::v1::GetTrafficAggregationRequest_Frequency value);

  private:
  ::cavnue::messages::world_state::v1::GetTrafficAggregationRequest_Frequency _internal_frequency() const;
  void _internal_set_frequency(::cavnue::messages::world_state::v1::GetTrafficAggregationRequest_Frequency value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.GetTrafficAggregationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::world_state::v1::TimeFilter* time_filter_;
    int frequency_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class GetTrafficAggregationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.GetTrafficAggregationResponse) */ {
 public:
  inline GetTrafficAggregationResponse() : GetTrafficAggregationResponse(nullptr) {}
  ~GetTrafficAggregationResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetTrafficAggregationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTrafficAggregationResponse(const GetTrafficAggregationResponse& from);
  GetTrafficAggregationResponse(GetTrafficAggregationResponse&& from) noexcept
    : GetTrafficAggregationResponse() {
    *this = ::std::move(from);
  }

  inline GetTrafficAggregationResponse& operator=(const GetTrafficAggregationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTrafficAggregationResponse& operator=(GetTrafficAggregationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTrafficAggregationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTrafficAggregationResponse* internal_default_instance() {
    return reinterpret_cast<const GetTrafficAggregationResponse*>(
               &_GetTrafficAggregationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GetTrafficAggregationResponse& a, GetTrafficAggregationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTrafficAggregationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTrafficAggregationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTrafficAggregationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTrafficAggregationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTrafficAggregationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetTrafficAggregationResponse& from) {
    GetTrafficAggregationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTrafficAggregationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.GetTrafficAggregationResponse";
  }
  protected:
  explicit GetTrafficAggregationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneAggregationsFieldNumber = 1,
    kRoadAggregationsFieldNumber = 2,
  };
  // repeated .cavnue.messages.inference.v1.LaneSegmentAggregation lane_aggregations = 1 [json_name = "laneAggregations"];
  int lane_aggregations_size() const;
  private:
  int _internal_lane_aggregations_size() const;

  public:
  void clear_lane_aggregations() ;
  ::cavnue::messages::inference::v1::LaneSegmentAggregation* mutable_lane_aggregations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::LaneSegmentAggregation >*
      mutable_lane_aggregations();
  private:
  const ::cavnue::messages::inference::v1::LaneSegmentAggregation& _internal_lane_aggregations(int index) const;
  ::cavnue::messages::inference::v1::LaneSegmentAggregation* _internal_add_lane_aggregations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::LaneSegmentAggregation>& _internal_lane_aggregations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::LaneSegmentAggregation>* _internal_mutable_lane_aggregations();
  public:
  const ::cavnue::messages::inference::v1::LaneSegmentAggregation& lane_aggregations(int index) const;
  ::cavnue::messages::inference::v1::LaneSegmentAggregation* add_lane_aggregations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::LaneSegmentAggregation >&
      lane_aggregations() const;
  // repeated .cavnue.messages.inference.v1.RoadSegmentAggregation road_aggregations = 2 [json_name = "roadAggregations"];
  int road_aggregations_size() const;
  private:
  int _internal_road_aggregations_size() const;

  public:
  void clear_road_aggregations() ;
  ::cavnue::messages::inference::v1::RoadSegmentAggregation* mutable_road_aggregations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::RoadSegmentAggregation >*
      mutable_road_aggregations();
  private:
  const ::cavnue::messages::inference::v1::RoadSegmentAggregation& _internal_road_aggregations(int index) const;
  ::cavnue::messages::inference::v1::RoadSegmentAggregation* _internal_add_road_aggregations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::RoadSegmentAggregation>& _internal_road_aggregations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::RoadSegmentAggregation>* _internal_mutable_road_aggregations();
  public:
  const ::cavnue::messages::inference::v1::RoadSegmentAggregation& road_aggregations(int index) const;
  ::cavnue::messages::inference::v1::RoadSegmentAggregation* add_road_aggregations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::RoadSegmentAggregation >&
      road_aggregations() const;
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.GetTrafficAggregationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::LaneSegmentAggregation > lane_aggregations_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::RoadSegmentAggregation > road_aggregations_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class GetAverageDailyTrafficRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.GetAverageDailyTrafficRequest) */ {
 public:
  inline GetAverageDailyTrafficRequest() : GetAverageDailyTrafficRequest(nullptr) {}
  ~GetAverageDailyTrafficRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetAverageDailyTrafficRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAverageDailyTrafficRequest(const GetAverageDailyTrafficRequest& from);
  GetAverageDailyTrafficRequest(GetAverageDailyTrafficRequest&& from) noexcept
    : GetAverageDailyTrafficRequest() {
    *this = ::std::move(from);
  }

  inline GetAverageDailyTrafficRequest& operator=(const GetAverageDailyTrafficRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAverageDailyTrafficRequest& operator=(GetAverageDailyTrafficRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAverageDailyTrafficRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAverageDailyTrafficRequest* internal_default_instance() {
    return reinterpret_cast<const GetAverageDailyTrafficRequest*>(
               &_GetAverageDailyTrafficRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GetAverageDailyTrafficRequest& a, GetAverageDailyTrafficRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAverageDailyTrafficRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAverageDailyTrafficRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAverageDailyTrafficRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAverageDailyTrafficRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAverageDailyTrafficRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAverageDailyTrafficRequest& from) {
    GetAverageDailyTrafficRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAverageDailyTrafficRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.GetAverageDailyTrafficRequest";
  }
  protected:
  explicit GetAverageDailyTrafficRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFilterFieldNumber = 1,
  };
  // .cavnue.messages.world_state.v1.TimeFilter time_filter = 1 [json_name = "timeFilter"];
  bool has_time_filter() const;
  void clear_time_filter() ;
  const ::cavnue::messages::world_state::v1::TimeFilter& time_filter() const;
  PROTOBUF_NODISCARD ::cavnue::messages::world_state::v1::TimeFilter* release_time_filter();
  ::cavnue::messages::world_state::v1::TimeFilter* mutable_time_filter();
  void set_allocated_time_filter(::cavnue::messages::world_state::v1::TimeFilter* time_filter);
  private:
  const ::cavnue::messages::world_state::v1::TimeFilter& _internal_time_filter() const;
  ::cavnue::messages::world_state::v1::TimeFilter* _internal_mutable_time_filter();
  public:
  void unsafe_arena_set_allocated_time_filter(
      ::cavnue::messages::world_state::v1::TimeFilter* time_filter);
  ::cavnue::messages::world_state::v1::TimeFilter* unsafe_arena_release_time_filter();
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.GetAverageDailyTrafficRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::world_state::v1::TimeFilter* time_filter_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class GetAverageDailyTrafficResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.world_state.v1.GetAverageDailyTrafficResponse) */ {
 public:
  inline GetAverageDailyTrafficResponse() : GetAverageDailyTrafficResponse(nullptr) {}
  ~GetAverageDailyTrafficResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetAverageDailyTrafficResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAverageDailyTrafficResponse(const GetAverageDailyTrafficResponse& from);
  GetAverageDailyTrafficResponse(GetAverageDailyTrafficResponse&& from) noexcept
    : GetAverageDailyTrafficResponse() {
    *this = ::std::move(from);
  }

  inline GetAverageDailyTrafficResponse& operator=(const GetAverageDailyTrafficResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAverageDailyTrafficResponse& operator=(GetAverageDailyTrafficResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAverageDailyTrafficResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAverageDailyTrafficResponse* internal_default_instance() {
    return reinterpret_cast<const GetAverageDailyTrafficResponse*>(
               &_GetAverageDailyTrafficResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GetAverageDailyTrafficResponse& a, GetAverageDailyTrafficResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAverageDailyTrafficResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAverageDailyTrafficResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAverageDailyTrafficResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAverageDailyTrafficResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAverageDailyTrafficResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAverageDailyTrafficResponse& from) {
    GetAverageDailyTrafficResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAverageDailyTrafficResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.world_state.v1.GetAverageDailyTrafficResponse";
  }
  protected:
  explicit GetAverageDailyTrafficResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMadtFieldNumber = 1,
    kAadtFieldNumber = 2,
  };
  // repeated .cavnue.messages.inference.v1.MonthlyAverageDailyTrafficCalculation madt = 1 [json_name = "madt"];
  int madt_size() const;
  private:
  int _internal_madt_size() const;

  public:
  void clear_madt() ;
  ::cavnue::messages::inference::v1::MonthlyAverageDailyTrafficCalculation* mutable_madt(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::MonthlyAverageDailyTrafficCalculation >*
      mutable_madt();
  private:
  const ::cavnue::messages::inference::v1::MonthlyAverageDailyTrafficCalculation& _internal_madt(int index) const;
  ::cavnue::messages::inference::v1::MonthlyAverageDailyTrafficCalculation* _internal_add_madt();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::MonthlyAverageDailyTrafficCalculation>& _internal_madt() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::MonthlyAverageDailyTrafficCalculation>* _internal_mutable_madt();
  public:
  const ::cavnue::messages::inference::v1::MonthlyAverageDailyTrafficCalculation& madt(int index) const;
  ::cavnue::messages::inference::v1::MonthlyAverageDailyTrafficCalculation* add_madt();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::MonthlyAverageDailyTrafficCalculation >&
      madt() const;
  // .cavnue.messages.inference.v1.AnnualAverageDailyTrafficCalculation aadt = 2 [json_name = "aadt"];
  bool has_aadt() const;
  void clear_aadt() ;
  const ::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation& aadt() const;
  PROTOBUF_NODISCARD ::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation* release_aadt();
  ::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation* mutable_aadt();
  void set_allocated_aadt(::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation* aadt);
  private:
  const ::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation& _internal_aadt() const;
  ::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation* _internal_mutable_aadt();
  public:
  void unsafe_arena_set_allocated_aadt(
      ::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation* aadt);
  ::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation* unsafe_arena_release_aadt();
  // @@protoc_insertion_point(class_scope:cavnue.messages.world_state.v1.GetAverageDailyTrafficResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::MonthlyAverageDailyTrafficCalculation > madt_;
    ::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation* aadt_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TimeFilter

// .google.protobuf.Timestamp start_ts = 1 [json_name = "startTs"];
inline bool TimeFilter::has_start_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.start_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TimeFilter::_internal_start_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.start_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TimeFilter::start_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.TimeFilter.start_ts)
  return _internal_start_ts();
}
inline void TimeFilter::unsafe_arena_set_allocated_start_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_ts_);
  }
  _impl_.start_ts_ = start_ts;
  if (start_ts) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.TimeFilter.start_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimeFilter::release_start_ts() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_ts_;
  _impl_.start_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimeFilter::unsafe_arena_release_start_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.TimeFilter.start_ts)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_ts_;
  _impl_.start_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimeFilter::_internal_mutable_start_ts() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.start_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.start_ts_ = p;
  }
  return _impl_.start_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimeFilter::mutable_start_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_start_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.TimeFilter.start_ts)
  return _msg;
}
inline void TimeFilter::set_allocated_start_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* start_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_ts_);
  }
  if (start_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_ts));
    if (message_arena != submessage_arena) {
      start_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.start_ts_ = start_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.TimeFilter.start_ts)
}

// .google.protobuf.Timestamp end_ts = 2 [json_name = "endTs"];
inline bool TimeFilter::has_end_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.end_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TimeFilter::_internal_end_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.end_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TimeFilter::end_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.TimeFilter.end_ts)
  return _internal_end_ts();
}
inline void TimeFilter::unsafe_arena_set_allocated_end_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_ts_);
  }
  _impl_.end_ts_ = end_ts;
  if (end_ts) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.TimeFilter.end_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimeFilter::release_end_ts() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_ts_;
  _impl_.end_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimeFilter::unsafe_arena_release_end_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.TimeFilter.end_ts)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_ts_;
  _impl_.end_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimeFilter::_internal_mutable_end_ts() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.end_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.end_ts_ = p;
  }
  return _impl_.end_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimeFilter::mutable_end_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_end_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.TimeFilter.end_ts)
  return _msg;
}
inline void TimeFilter::set_allocated_end_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* end_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_ts_);
  }
  if (end_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_ts));
    if (message_arena != submessage_arena) {
      end_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.end_ts_ = end_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.TimeFilter.end_ts)
}

// -------------------------------------------------------------------

// Query_ActorIdFilter

// repeated int64 actor_ids = 1 [json_name = "actorIds"];
inline int Query_ActorIdFilter::_internal_actor_ids_size() const {
  return _impl_.actor_ids_.size();
}
inline int Query_ActorIdFilter::actor_ids_size() const {
  return _internal_actor_ids_size();
}
inline void Query_ActorIdFilter::clear_actor_ids() {
  _internal_mutable_actor_ids()->Clear();
}
inline ::int64_t Query_ActorIdFilter::actor_ids(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Query.ActorIdFilter.actor_ids)
  return _internal_actor_ids(index);
}
inline void Query_ActorIdFilter::set_actor_ids(int index, ::int64_t value) {
  _internal_mutable_actor_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:cavnue.messages.world_state.v1.Query.ActorIdFilter.actor_ids)
}
inline void Query_ActorIdFilter::add_actor_ids(::int64_t value) {
  _internal_add_actor_ids(value);
  // @@protoc_insertion_point(field_add:cavnue.messages.world_state.v1.Query.ActorIdFilter.actor_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& Query_ActorIdFilter::actor_ids() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.world_state.v1.Query.ActorIdFilter.actor_ids)
  return _internal_actor_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* Query_ActorIdFilter::mutable_actor_ids() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.world_state.v1.Query.ActorIdFilter.actor_ids)
  return _internal_mutable_actor_ids();
}

inline ::int64_t Query_ActorIdFilter::_internal_actor_ids(int index) const {
  return _internal_actor_ids().Get(index);
}
inline void Query_ActorIdFilter::_internal_add_actor_ids(::int64_t value) {
  _internal_mutable_actor_ids()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& Query_ActorIdFilter::_internal_actor_ids() const {
  return _impl_.actor_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* Query_ActorIdFilter::_internal_mutable_actor_ids() {
  return &_impl_.actor_ids_;
}

// -------------------------------------------------------------------

// Query_SpatialFilter

// .cavnue.messages.geometry.v1.BoundingBox2f bb_region = 1 [json_name = "bbRegion"];
inline bool Query_SpatialFilter::has_bb_region() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bb_region_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::BoundingBox2f& Query_SpatialFilter::_internal_bb_region() const {
  const ::cavnue::messages::geometry::v1::BoundingBox2f* p = _impl_.bb_region_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::BoundingBox2f&>(
      ::cavnue::messages::geometry::v1::_BoundingBox2f_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::BoundingBox2f& Query_SpatialFilter::bb_region() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Query.SpatialFilter.bb_region)
  return _internal_bb_region();
}
inline void Query_SpatialFilter::unsafe_arena_set_allocated_bb_region(
    ::cavnue::messages::geometry::v1::BoundingBox2f* bb_region) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bb_region_);
  }
  _impl_.bb_region_ = bb_region;
  if (bb_region) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.Query.SpatialFilter.bb_region)
}
inline ::cavnue::messages::geometry::v1::BoundingBox2f* Query_SpatialFilter::release_bb_region() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::BoundingBox2f* temp = _impl_.bb_region_;
  _impl_.bb_region_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::BoundingBox2f* Query_SpatialFilter::unsafe_arena_release_bb_region() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.Query.SpatialFilter.bb_region)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::BoundingBox2f* temp = _impl_.bb_region_;
  _impl_.bb_region_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::BoundingBox2f* Query_SpatialFilter::_internal_mutable_bb_region() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.bb_region_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::BoundingBox2f>(GetArenaForAllocation());
    _impl_.bb_region_ = p;
  }
  return _impl_.bb_region_;
}
inline ::cavnue::messages::geometry::v1::BoundingBox2f* Query_SpatialFilter::mutable_bb_region() {
  ::cavnue::messages::geometry::v1::BoundingBox2f* _msg = _internal_mutable_bb_region();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.Query.SpatialFilter.bb_region)
  return _msg;
}
inline void Query_SpatialFilter::set_allocated_bb_region(::cavnue::messages::geometry::v1::BoundingBox2f* bb_region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bb_region_);
  }
  if (bb_region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bb_region));
    if (message_arena != submessage_arena) {
      bb_region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bb_region, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.bb_region_ = bb_region;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.Query.SpatialFilter.bb_region)
}

// -------------------------------------------------------------------

// Query

// optional int64 dataset_run_id = 1 [json_name = "datasetRunId"];
inline bool Query::has_dataset_run_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Query::clear_dataset_run_id() {
  _impl_.dataset_run_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t Query::dataset_run_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Query.dataset_run_id)
  return _internal_dataset_run_id();
}
inline void Query::set_dataset_run_id(::int64_t value) {
  _internal_set_dataset_run_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.world_state.v1.Query.dataset_run_id)
}
inline ::int64_t Query::_internal_dataset_run_id() const {
  return _impl_.dataset_run_id_;
}
inline void Query::_internal_set_dataset_run_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.dataset_run_id_ = value;
}

// optional .cavnue.messages.world_state.v1.TimeFilter time_filter = 2 [json_name = "timeFilter"];
inline bool Query::has_time_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_filter_ != nullptr);
  return value;
}
inline void Query::clear_time_filter() {
  if (_impl_.time_filter_ != nullptr) _impl_.time_filter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::cavnue::messages::world_state::v1::TimeFilter& Query::_internal_time_filter() const {
  const ::cavnue::messages::world_state::v1::TimeFilter* p = _impl_.time_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::world_state::v1::TimeFilter&>(
      ::cavnue::messages::world_state::v1::_TimeFilter_default_instance_);
}
inline const ::cavnue::messages::world_state::v1::TimeFilter& Query::time_filter() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Query.time_filter)
  return _internal_time_filter();
}
inline void Query::unsafe_arena_set_allocated_time_filter(
    ::cavnue::messages::world_state::v1::TimeFilter* time_filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_filter_);
  }
  _impl_.time_filter_ = time_filter;
  if (time_filter) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.Query.time_filter)
}
inline ::cavnue::messages::world_state::v1::TimeFilter* Query::release_time_filter() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::cavnue::messages::world_state::v1::TimeFilter* temp = _impl_.time_filter_;
  _impl_.time_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::world_state::v1::TimeFilter* Query::unsafe_arena_release_time_filter() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.Query.time_filter)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::cavnue::messages::world_state::v1::TimeFilter* temp = _impl_.time_filter_;
  _impl_.time_filter_ = nullptr;
  return temp;
}
inline ::cavnue::messages::world_state::v1::TimeFilter* Query::_internal_mutable_time_filter() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.time_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::world_state::v1::TimeFilter>(GetArenaForAllocation());
    _impl_.time_filter_ = p;
  }
  return _impl_.time_filter_;
}
inline ::cavnue::messages::world_state::v1::TimeFilter* Query::mutable_time_filter() {
  ::cavnue::messages::world_state::v1::TimeFilter* _msg = _internal_mutable_time_filter();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.Query.time_filter)
  return _msg;
}
inline void Query::set_allocated_time_filter(::cavnue::messages::world_state::v1::TimeFilter* time_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.time_filter_;
  }
  if (time_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(time_filter);
    if (message_arena != submessage_arena) {
      time_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_filter, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.time_filter_ = time_filter;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.Query.time_filter)
}

// optional .cavnue.messages.world_state.v1.Query.ActorIdFilter actors_filter = 3 [json_name = "actorsFilter"];
inline bool Query::has_actors_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.actors_filter_ != nullptr);
  return value;
}
inline void Query::clear_actors_filter() {
  if (_impl_.actors_filter_ != nullptr) _impl_.actors_filter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::cavnue::messages::world_state::v1::Query_ActorIdFilter& Query::_internal_actors_filter() const {
  const ::cavnue::messages::world_state::v1::Query_ActorIdFilter* p = _impl_.actors_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::world_state::v1::Query_ActorIdFilter&>(
      ::cavnue::messages::world_state::v1::_Query_ActorIdFilter_default_instance_);
}
inline const ::cavnue::messages::world_state::v1::Query_ActorIdFilter& Query::actors_filter() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Query.actors_filter)
  return _internal_actors_filter();
}
inline void Query::unsafe_arena_set_allocated_actors_filter(
    ::cavnue::messages::world_state::v1::Query_ActorIdFilter* actors_filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.actors_filter_);
  }
  _impl_.actors_filter_ = actors_filter;
  if (actors_filter) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.Query.actors_filter)
}
inline ::cavnue::messages::world_state::v1::Query_ActorIdFilter* Query::release_actors_filter() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::cavnue::messages::world_state::v1::Query_ActorIdFilter* temp = _impl_.actors_filter_;
  _impl_.actors_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::world_state::v1::Query_ActorIdFilter* Query::unsafe_arena_release_actors_filter() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.Query.actors_filter)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::cavnue::messages::world_state::v1::Query_ActorIdFilter* temp = _impl_.actors_filter_;
  _impl_.actors_filter_ = nullptr;
  return temp;
}
inline ::cavnue::messages::world_state::v1::Query_ActorIdFilter* Query::_internal_mutable_actors_filter() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.actors_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::world_state::v1::Query_ActorIdFilter>(GetArenaForAllocation());
    _impl_.actors_filter_ = p;
  }
  return _impl_.actors_filter_;
}
inline ::cavnue::messages::world_state::v1::Query_ActorIdFilter* Query::mutable_actors_filter() {
  ::cavnue::messages::world_state::v1::Query_ActorIdFilter* _msg = _internal_mutable_actors_filter();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.Query.actors_filter)
  return _msg;
}
inline void Query::set_allocated_actors_filter(::cavnue::messages::world_state::v1::Query_ActorIdFilter* actors_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.actors_filter_;
  }
  if (actors_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(actors_filter);
    if (message_arena != submessage_arena) {
      actors_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actors_filter, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.actors_filter_ = actors_filter;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.Query.actors_filter)
}

// optional .cavnue.messages.world_state.v1.Query.SpatialFilter spatial_filter = 4 [json_name = "spatialFilter"];
inline bool Query::has_spatial_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.spatial_filter_ != nullptr);
  return value;
}
inline void Query::clear_spatial_filter() {
  if (_impl_.spatial_filter_ != nullptr) _impl_.spatial_filter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::cavnue::messages::world_state::v1::Query_SpatialFilter& Query::_internal_spatial_filter() const {
  const ::cavnue::messages::world_state::v1::Query_SpatialFilter* p = _impl_.spatial_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::world_state::v1::Query_SpatialFilter&>(
      ::cavnue::messages::world_state::v1::_Query_SpatialFilter_default_instance_);
}
inline const ::cavnue::messages::world_state::v1::Query_SpatialFilter& Query::spatial_filter() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Query.spatial_filter)
  return _internal_spatial_filter();
}
inline void Query::unsafe_arena_set_allocated_spatial_filter(
    ::cavnue::messages::world_state::v1::Query_SpatialFilter* spatial_filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spatial_filter_);
  }
  _impl_.spatial_filter_ = spatial_filter;
  if (spatial_filter) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.Query.spatial_filter)
}
inline ::cavnue::messages::world_state::v1::Query_SpatialFilter* Query::release_spatial_filter() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::cavnue::messages::world_state::v1::Query_SpatialFilter* temp = _impl_.spatial_filter_;
  _impl_.spatial_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::world_state::v1::Query_SpatialFilter* Query::unsafe_arena_release_spatial_filter() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.Query.spatial_filter)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::cavnue::messages::world_state::v1::Query_SpatialFilter* temp = _impl_.spatial_filter_;
  _impl_.spatial_filter_ = nullptr;
  return temp;
}
inline ::cavnue::messages::world_state::v1::Query_SpatialFilter* Query::_internal_mutable_spatial_filter() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.spatial_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::world_state::v1::Query_SpatialFilter>(GetArenaForAllocation());
    _impl_.spatial_filter_ = p;
  }
  return _impl_.spatial_filter_;
}
inline ::cavnue::messages::world_state::v1::Query_SpatialFilter* Query::mutable_spatial_filter() {
  ::cavnue::messages::world_state::v1::Query_SpatialFilter* _msg = _internal_mutable_spatial_filter();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.Query.spatial_filter)
  return _msg;
}
inline void Query::set_allocated_spatial_filter(::cavnue::messages::world_state::v1::Query_SpatialFilter* spatial_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.spatial_filter_;
  }
  if (spatial_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(spatial_filter);
    if (message_arena != submessage_arena) {
      spatial_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spatial_filter, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.spatial_filter_ = spatial_filter;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.Query.spatial_filter)
}

// optional string dataset_identifier = 5 [json_name = "datasetIdentifier"];
inline bool Query::has_dataset_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Query::clear_dataset_identifier() {
  _impl_.dataset_identifier_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Query::dataset_identifier() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Query.dataset_identifier)
  return _internal_dataset_identifier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Query::set_dataset_identifier(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dataset_identifier_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.world_state.v1.Query.dataset_identifier)
}
inline std::string* Query::mutable_dataset_identifier() {
  std::string* _s = _internal_mutable_dataset_identifier();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.Query.dataset_identifier)
  return _s;
}
inline const std::string& Query::_internal_dataset_identifier() const {
  return _impl_.dataset_identifier_.Get();
}
inline void Query::_internal_set_dataset_identifier(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.dataset_identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* Query::_internal_mutable_dataset_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.dataset_identifier_.Mutable( GetArenaForAllocation());
}
inline std::string* Query::release_dataset_identifier() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.Query.dataset_identifier)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.dataset_identifier_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dataset_identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Query::set_allocated_dataset_identifier(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.dataset_identifier_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.dataset_identifier_.IsDefault()) {
          _impl_.dataset_identifier_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.Query.dataset_identifier)
}

// optional int64 dataset_id = 6 [json_name = "datasetId"];
inline bool Query::has_dataset_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Query::clear_dataset_id() {
  _impl_.dataset_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t Query::dataset_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Query.dataset_id)
  return _internal_dataset_id();
}
inline void Query::set_dataset_id(::int64_t value) {
  _internal_set_dataset_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.world_state.v1.Query.dataset_id)
}
inline ::int64_t Query::_internal_dataset_id() const {
  return _impl_.dataset_id_;
}
inline void Query::_internal_set_dataset_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.dataset_id_ = value;
}

// optional uint32 num_messages = 7 [json_name = "numMessages"];
inline bool Query::has_num_messages() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Query::clear_num_messages() {
  _impl_.num_messages_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t Query::num_messages() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Query.num_messages)
  return _internal_num_messages();
}
inline void Query::set_num_messages(::uint32_t value) {
  _internal_set_num_messages(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.world_state.v1.Query.num_messages)
}
inline ::uint32_t Query::_internal_num_messages() const {
  return _impl_.num_messages_;
}
inline void Query::_internal_set_num_messages(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.num_messages_ = value;
}

// optional string trace_context = 8 [json_name = "traceContext"];
inline bool Query::has_trace_context() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Query::clear_trace_context() {
  _impl_.trace_context_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Query::trace_context() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Query.trace_context)
  return _internal_trace_context();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Query::set_trace_context(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.trace_context_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.world_state.v1.Query.trace_context)
}
inline std::string* Query::mutable_trace_context() {
  std::string* _s = _internal_mutable_trace_context();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.Query.trace_context)
  return _s;
}
inline const std::string& Query::_internal_trace_context() const {
  return _impl_.trace_context_.Get();
}
inline void Query::_internal_set_trace_context(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.trace_context_.Set(value, GetArenaForAllocation());
}
inline std::string* Query::_internal_mutable_trace_context() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.trace_context_.Mutable( GetArenaForAllocation());
}
inline std::string* Query::release_trace_context() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.Query.trace_context)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.trace_context_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.trace_context_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Query::set_allocated_trace_context(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.trace_context_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.trace_context_.IsDefault()) {
          _impl_.trace_context_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.Query.trace_context)
}

// -------------------------------------------------------------------

// Asset

// int64 sensor_id = 1 [json_name = "sensorId"];
inline void Asset::clear_sensor_id() {
  _impl_.sensor_id_ = ::int64_t{0};
}
inline ::int64_t Asset::sensor_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Asset.sensor_id)
  return _internal_sensor_id();
}
inline void Asset::set_sensor_id(::int64_t value) {
  _internal_set_sensor_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.world_state.v1.Asset.sensor_id)
}
inline ::int64_t Asset::_internal_sensor_id() const {
  return _impl_.sensor_id_;
}
inline void Asset::_internal_set_sensor_id(::int64_t value) {
  ;
  _impl_.sensor_id_ = value;
}

// string identifier = 2 [json_name = "identifier"];
inline void Asset::clear_identifier() {
  _impl_.identifier_.ClearToEmpty();
}
inline const std::string& Asset::identifier() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Asset.identifier)
  return _internal_identifier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Asset::set_identifier(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.identifier_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.world_state.v1.Asset.identifier)
}
inline std::string* Asset::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.Asset.identifier)
  return _s;
}
inline const std::string& Asset::_internal_identifier() const {
  return _impl_.identifier_.Get();
}
inline void Asset::_internal_set_identifier(const std::string& value) {
  ;


  _impl_.identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* Asset::_internal_mutable_identifier() {
  ;
  return _impl_.identifier_.Mutable( GetArenaForAllocation());
}
inline std::string* Asset::release_identifier() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.Asset.identifier)
  return _impl_.identifier_.Release();
}
inline void Asset::set_allocated_identifier(std::string* value) {
  _impl_.identifier_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.identifier_.IsDefault()) {
          _impl_.identifier_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.Asset.identifier)
}

// .cavnue.messages.spatial.v1.WGS84 wgs84_position = 3 [json_name = "wgs84Position"];
inline bool Asset::has_wgs84_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.wgs84_position_ != nullptr);
  return value;
}
inline const ::cavnue::messages::spatial::v1::WGS84& Asset::_internal_wgs84_position() const {
  const ::cavnue::messages::spatial::v1::WGS84* p = _impl_.wgs84_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::spatial::v1::WGS84&>(
      ::cavnue::messages::spatial::v1::_WGS84_default_instance_);
}
inline const ::cavnue::messages::spatial::v1::WGS84& Asset::wgs84_position() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Asset.wgs84_position)
  return _internal_wgs84_position();
}
inline void Asset::unsafe_arena_set_allocated_wgs84_position(
    ::cavnue::messages::spatial::v1::WGS84* wgs84_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wgs84_position_);
  }
  _impl_.wgs84_position_ = wgs84_position;
  if (wgs84_position) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.Asset.wgs84_position)
}
inline ::cavnue::messages::spatial::v1::WGS84* Asset::release_wgs84_position() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::spatial::v1::WGS84* temp = _impl_.wgs84_position_;
  _impl_.wgs84_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::spatial::v1::WGS84* Asset::unsafe_arena_release_wgs84_position() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.Asset.wgs84_position)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::spatial::v1::WGS84* temp = _impl_.wgs84_position_;
  _impl_.wgs84_position_ = nullptr;
  return temp;
}
inline ::cavnue::messages::spatial::v1::WGS84* Asset::_internal_mutable_wgs84_position() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.wgs84_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::spatial::v1::WGS84>(GetArenaForAllocation());
    _impl_.wgs84_position_ = p;
  }
  return _impl_.wgs84_position_;
}
inline ::cavnue::messages::spatial::v1::WGS84* Asset::mutable_wgs84_position() {
  ::cavnue::messages::spatial::v1::WGS84* _msg = _internal_mutable_wgs84_position();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.Asset.wgs84_position)
  return _msg;
}
inline void Asset::set_allocated_wgs84_position(::cavnue::messages::spatial::v1::WGS84* wgs84_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wgs84_position_);
  }
  if (wgs84_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wgs84_position));
    if (message_arena != submessage_arena) {
      wgs84_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wgs84_position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.wgs84_position_ = wgs84_position;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.Asset.wgs84_position)
}

// -------------------------------------------------------------------

// Dataset

// int64 dataset_id = 1 [json_name = "datasetId"];
inline void Dataset::clear_dataset_id() {
  _impl_.dataset_id_ = ::int64_t{0};
}
inline ::int64_t Dataset::dataset_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Dataset.dataset_id)
  return _internal_dataset_id();
}
inline void Dataset::set_dataset_id(::int64_t value) {
  _internal_set_dataset_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.world_state.v1.Dataset.dataset_id)
}
inline ::int64_t Dataset::_internal_dataset_id() const {
  return _impl_.dataset_id_;
}
inline void Dataset::_internal_set_dataset_id(::int64_t value) {
  ;
  _impl_.dataset_id_ = value;
}

// string identifier = 2 [json_name = "identifier"];
inline void Dataset::clear_identifier() {
  _impl_.identifier_.ClearToEmpty();
}
inline const std::string& Dataset::identifier() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Dataset.identifier)
  return _internal_identifier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Dataset::set_identifier(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.identifier_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.world_state.v1.Dataset.identifier)
}
inline std::string* Dataset::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.Dataset.identifier)
  return _s;
}
inline const std::string& Dataset::_internal_identifier() const {
  return _impl_.identifier_.Get();
}
inline void Dataset::_internal_set_identifier(const std::string& value) {
  ;


  _impl_.identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* Dataset::_internal_mutable_identifier() {
  ;
  return _impl_.identifier_.Mutable( GetArenaForAllocation());
}
inline std::string* Dataset::release_identifier() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.Dataset.identifier)
  return _impl_.identifier_.Release();
}
inline void Dataset::set_allocated_identifier(std::string* value) {
  _impl_.identifier_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.identifier_.IsDefault()) {
          _impl_.identifier_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.Dataset.identifier)
}

// int64 project_number = 3 [json_name = "projectNumber"];
inline void Dataset::clear_project_number() {
  _impl_.project_number_ = ::int64_t{0};
}
inline ::int64_t Dataset::project_number() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Dataset.project_number)
  return _internal_project_number();
}
inline void Dataset::set_project_number(::int64_t value) {
  _internal_set_project_number(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.world_state.v1.Dataset.project_number)
}
inline ::int64_t Dataset::_internal_project_number() const {
  return _impl_.project_number_;
}
inline void Dataset::_internal_set_project_number(::int64_t value) {
  ;
  _impl_.project_number_ = value;
}

// string project_id = 4 [json_name = "projectId"];
inline void Dataset::clear_project_id() {
  _impl_.project_id_.ClearToEmpty();
}
inline const std::string& Dataset::project_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Dataset.project_id)
  return _internal_project_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Dataset::set_project_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.project_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.world_state.v1.Dataset.project_id)
}
inline std::string* Dataset::mutable_project_id() {
  std::string* _s = _internal_mutable_project_id();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.Dataset.project_id)
  return _s;
}
inline const std::string& Dataset::_internal_project_id() const {
  return _impl_.project_id_.Get();
}
inline void Dataset::_internal_set_project_id(const std::string& value) {
  ;


  _impl_.project_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Dataset::_internal_mutable_project_id() {
  ;
  return _impl_.project_id_.Mutable( GetArenaForAllocation());
}
inline std::string* Dataset::release_project_id() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.Dataset.project_id)
  return _impl_.project_id_.Release();
}
inline void Dataset::set_allocated_project_id(std::string* value) {
  _impl_.project_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.project_id_.IsDefault()) {
          _impl_.project_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.Dataset.project_id)
}

// .google.protobuf.Timestamp start_ts = 5 [json_name = "startTs"];
inline bool Dataset::has_start_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.start_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Dataset::_internal_start_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.start_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Dataset::start_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Dataset.start_ts)
  return _internal_start_ts();
}
inline void Dataset::unsafe_arena_set_allocated_start_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_ts_);
  }
  _impl_.start_ts_ = start_ts;
  if (start_ts) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.Dataset.start_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Dataset::release_start_ts() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_ts_;
  _impl_.start_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Dataset::unsafe_arena_release_start_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.Dataset.start_ts)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_ts_;
  _impl_.start_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Dataset::_internal_mutable_start_ts() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.start_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.start_ts_ = p;
  }
  return _impl_.start_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Dataset::mutable_start_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_start_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.Dataset.start_ts)
  return _msg;
}
inline void Dataset::set_allocated_start_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* start_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_ts_);
  }
  if (start_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_ts));
    if (message_arena != submessage_arena) {
      start_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.start_ts_ = start_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.Dataset.start_ts)
}

// .google.protobuf.Timestamp end_ts = 6 [json_name = "endTs"];
inline bool Dataset::has_end_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.end_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Dataset::_internal_end_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.end_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Dataset::end_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Dataset.end_ts)
  return _internal_end_ts();
}
inline void Dataset::unsafe_arena_set_allocated_end_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_ts_);
  }
  _impl_.end_ts_ = end_ts;
  if (end_ts) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.Dataset.end_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Dataset::release_end_ts() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_ts_;
  _impl_.end_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Dataset::unsafe_arena_release_end_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.Dataset.end_ts)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_ts_;
  _impl_.end_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Dataset::_internal_mutable_end_ts() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.end_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.end_ts_ = p;
  }
  return _impl_.end_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Dataset::mutable_end_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_end_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.Dataset.end_ts)
  return _msg;
}
inline void Dataset::set_allocated_end_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* end_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_ts_);
  }
  if (end_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_ts));
    if (message_arena != submessage_arena) {
      end_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.end_ts_ = end_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.Dataset.end_ts)
}

// .cavnue.messages.data_warehouse.management.v1.Dataset.Type dataset_type = 7 [json_name = "datasetType"];
inline void Dataset::clear_dataset_type() {
  _impl_.dataset_type_ = 0;
}
inline ::cavnue::messages::data_warehouse::management::v1::Dataset_Type Dataset::dataset_type() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Dataset.dataset_type)
  return _internal_dataset_type();
}
inline void Dataset::set_dataset_type(::cavnue::messages::data_warehouse::management::v1::Dataset_Type value) {
   _internal_set_dataset_type(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.world_state.v1.Dataset.dataset_type)
}
inline ::cavnue::messages::data_warehouse::management::v1::Dataset_Type Dataset::_internal_dataset_type() const {
  return static_cast<::cavnue::messages::data_warehouse::management::v1::Dataset_Type>(_impl_.dataset_type_);
}
inline void Dataset::_internal_set_dataset_type(::cavnue::messages::data_warehouse::management::v1::Dataset_Type value) {
  ;
  _impl_.dataset_type_ = value;
}

// string sim_id = 8 [json_name = "simId"];
inline void Dataset::clear_sim_id() {
  _impl_.sim_id_.ClearToEmpty();
}
inline const std::string& Dataset::sim_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Dataset.sim_id)
  return _internal_sim_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Dataset::set_sim_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.sim_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.world_state.v1.Dataset.sim_id)
}
inline std::string* Dataset::mutable_sim_id() {
  std::string* _s = _internal_mutable_sim_id();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.Dataset.sim_id)
  return _s;
}
inline const std::string& Dataset::_internal_sim_id() const {
  return _impl_.sim_id_.Get();
}
inline void Dataset::_internal_set_sim_id(const std::string& value) {
  ;


  _impl_.sim_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Dataset::_internal_mutable_sim_id() {
  ;
  return _impl_.sim_id_.Mutable( GetArenaForAllocation());
}
inline std::string* Dataset::release_sim_id() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.Dataset.sim_id)
  return _impl_.sim_id_.Release();
}
inline void Dataset::set_allocated_sim_id(std::string* value) {
  _impl_.sim_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sim_id_.IsDefault()) {
          _impl_.sim_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.Dataset.sim_id)
}

// int64 cohort_id = 9 [json_name = "cohortId"];
inline void Dataset::clear_cohort_id() {
  _impl_.cohort_id_ = ::int64_t{0};
}
inline ::int64_t Dataset::cohort_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Dataset.cohort_id)
  return _internal_cohort_id();
}
inline void Dataset::set_cohort_id(::int64_t value) {
  _internal_set_cohort_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.world_state.v1.Dataset.cohort_id)
}
inline ::int64_t Dataset::_internal_cohort_id() const {
  return _impl_.cohort_id_;
}
inline void Dataset::_internal_set_cohort_id(::int64_t value) {
  ;
  _impl_.cohort_id_ = value;
}

// .google.protobuf.Timestamp run_start_ts = 10 [json_name = "runStartTs"];
inline bool Dataset::has_run_start_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.run_start_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Dataset::_internal_run_start_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.run_start_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Dataset::run_start_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Dataset.run_start_ts)
  return _internal_run_start_ts();
}
inline void Dataset::unsafe_arena_set_allocated_run_start_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* run_start_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.run_start_ts_);
  }
  _impl_.run_start_ts_ = run_start_ts;
  if (run_start_ts) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.Dataset.run_start_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Dataset::release_run_start_ts() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.run_start_ts_;
  _impl_.run_start_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Dataset::unsafe_arena_release_run_start_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.Dataset.run_start_ts)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.run_start_ts_;
  _impl_.run_start_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Dataset::_internal_mutable_run_start_ts() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.run_start_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.run_start_ts_ = p;
  }
  return _impl_.run_start_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Dataset::mutable_run_start_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_run_start_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.Dataset.run_start_ts)
  return _msg;
}
inline void Dataset::set_allocated_run_start_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* run_start_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.run_start_ts_);
  }
  if (run_start_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_start_ts));
    if (message_arena != submessage_arena) {
      run_start_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_start_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.run_start_ts_ = run_start_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.Dataset.run_start_ts)
}

// .google.protobuf.Timestamp run_end_ts = 11 [json_name = "runEndTs"];
inline bool Dataset::has_run_end_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.run_end_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Dataset::_internal_run_end_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.run_end_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Dataset::run_end_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.Dataset.run_end_ts)
  return _internal_run_end_ts();
}
inline void Dataset::unsafe_arena_set_allocated_run_end_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* run_end_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.run_end_ts_);
  }
  _impl_.run_end_ts_ = run_end_ts;
  if (run_end_ts) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.Dataset.run_end_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Dataset::release_run_end_ts() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.run_end_ts_;
  _impl_.run_end_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Dataset::unsafe_arena_release_run_end_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.Dataset.run_end_ts)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.run_end_ts_;
  _impl_.run_end_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Dataset::_internal_mutable_run_end_ts() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.run_end_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.run_end_ts_ = p;
  }
  return _impl_.run_end_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Dataset::mutable_run_end_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_run_end_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.Dataset.run_end_ts)
  return _msg;
}
inline void Dataset::set_allocated_run_end_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* run_end_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.run_end_ts_);
  }
  if (run_end_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_end_ts));
    if (message_arena != submessage_arena) {
      run_end_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_end_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.run_end_ts_ = run_end_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.Dataset.run_end_ts)
}

// -------------------------------------------------------------------

// DatasetRun

// int64 run_id = 1 [json_name = "runId"];
inline void DatasetRun::clear_run_id() {
  _impl_.run_id_ = ::int64_t{0};
}
inline ::int64_t DatasetRun::run_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.DatasetRun.run_id)
  return _internal_run_id();
}
inline void DatasetRun::set_run_id(::int64_t value) {
  _internal_set_run_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.world_state.v1.DatasetRun.run_id)
}
inline ::int64_t DatasetRun::_internal_run_id() const {
  return _impl_.run_id_;
}
inline void DatasetRun::_internal_set_run_id(::int64_t value) {
  ;
  _impl_.run_id_ = value;
}

// .google.protobuf.Timestamp run_ts = 2 [json_name = "runTs"];
inline bool DatasetRun::has_run_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.run_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& DatasetRun::_internal_run_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.run_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& DatasetRun::run_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.DatasetRun.run_ts)
  return _internal_run_ts();
}
inline void DatasetRun::unsafe_arena_set_allocated_run_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* run_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.run_ts_);
  }
  _impl_.run_ts_ = run_ts;
  if (run_ts) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.DatasetRun.run_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DatasetRun::release_run_ts() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.run_ts_;
  _impl_.run_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DatasetRun::unsafe_arena_release_run_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.DatasetRun.run_ts)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.run_ts_;
  _impl_.run_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DatasetRun::_internal_mutable_run_ts() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.run_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.run_ts_ = p;
  }
  return _impl_.run_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DatasetRun::mutable_run_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_run_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.DatasetRun.run_ts)
  return _msg;
}
inline void DatasetRun::set_allocated_run_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* run_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.run_ts_);
  }
  if (run_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_ts));
    if (message_arena != submessage_arena) {
      run_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.run_ts_ = run_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.DatasetRun.run_ts)
}

// int64 dataset_id = 3 [json_name = "datasetId"];
inline void DatasetRun::clear_dataset_id() {
  _impl_.dataset_id_ = ::int64_t{0};
}
inline ::int64_t DatasetRun::dataset_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.DatasetRun.dataset_id)
  return _internal_dataset_id();
}
inline void DatasetRun::set_dataset_id(::int64_t value) {
  _internal_set_dataset_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.world_state.v1.DatasetRun.dataset_id)
}
inline ::int64_t DatasetRun::_internal_dataset_id() const {
  return _impl_.dataset_id_;
}
inline void DatasetRun::_internal_set_dataset_id(::int64_t value) {
  ;
  _impl_.dataset_id_ = value;
}

// string identifier = 4 [json_name = "identifier"];
inline void DatasetRun::clear_identifier() {
  _impl_.identifier_.ClearToEmpty();
}
inline const std::string& DatasetRun::identifier() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.DatasetRun.identifier)
  return _internal_identifier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DatasetRun::set_identifier(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.identifier_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.world_state.v1.DatasetRun.identifier)
}
inline std::string* DatasetRun::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.DatasetRun.identifier)
  return _s;
}
inline const std::string& DatasetRun::_internal_identifier() const {
  return _impl_.identifier_.Get();
}
inline void DatasetRun::_internal_set_identifier(const std::string& value) {
  ;


  _impl_.identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* DatasetRun::_internal_mutable_identifier() {
  ;
  return _impl_.identifier_.Mutable( GetArenaForAllocation());
}
inline std::string* DatasetRun::release_identifier() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.DatasetRun.identifier)
  return _impl_.identifier_.Release();
}
inline void DatasetRun::set_allocated_identifier(std::string* value) {
  _impl_.identifier_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.identifier_.IsDefault()) {
          _impl_.identifier_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.DatasetRun.identifier)
}

// int64 project_number = 5 [json_name = "projectNumber"];
inline void DatasetRun::clear_project_number() {
  _impl_.project_number_ = ::int64_t{0};
}
inline ::int64_t DatasetRun::project_number() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.DatasetRun.project_number)
  return _internal_project_number();
}
inline void DatasetRun::set_project_number(::int64_t value) {
  _internal_set_project_number(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.world_state.v1.DatasetRun.project_number)
}
inline ::int64_t DatasetRun::_internal_project_number() const {
  return _impl_.project_number_;
}
inline void DatasetRun::_internal_set_project_number(::int64_t value) {
  ;
  _impl_.project_number_ = value;
}

// string project_id = 6 [json_name = "projectId"];
inline void DatasetRun::clear_project_id() {
  _impl_.project_id_.ClearToEmpty();
}
inline const std::string& DatasetRun::project_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.DatasetRun.project_id)
  return _internal_project_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DatasetRun::set_project_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.project_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.world_state.v1.DatasetRun.project_id)
}
inline std::string* DatasetRun::mutable_project_id() {
  std::string* _s = _internal_mutable_project_id();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.DatasetRun.project_id)
  return _s;
}
inline const std::string& DatasetRun::_internal_project_id() const {
  return _impl_.project_id_.Get();
}
inline void DatasetRun::_internal_set_project_id(const std::string& value) {
  ;


  _impl_.project_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DatasetRun::_internal_mutable_project_id() {
  ;
  return _impl_.project_id_.Mutable( GetArenaForAllocation());
}
inline std::string* DatasetRun::release_project_id() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.DatasetRun.project_id)
  return _impl_.project_id_.Release();
}
inline void DatasetRun::set_allocated_project_id(std::string* value) {
  _impl_.project_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.project_id_.IsDefault()) {
          _impl_.project_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.DatasetRun.project_id)
}

// .google.protobuf.Timestamp start_ts = 7 [json_name = "startTs"];
inline bool DatasetRun::has_start_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.start_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& DatasetRun::_internal_start_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.start_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& DatasetRun::start_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.DatasetRun.start_ts)
  return _internal_start_ts();
}
inline void DatasetRun::unsafe_arena_set_allocated_start_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_ts_);
  }
  _impl_.start_ts_ = start_ts;
  if (start_ts) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.DatasetRun.start_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DatasetRun::release_start_ts() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_ts_;
  _impl_.start_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DatasetRun::unsafe_arena_release_start_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.DatasetRun.start_ts)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_ts_;
  _impl_.start_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DatasetRun::_internal_mutable_start_ts() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.start_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.start_ts_ = p;
  }
  return _impl_.start_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DatasetRun::mutable_start_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_start_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.DatasetRun.start_ts)
  return _msg;
}
inline void DatasetRun::set_allocated_start_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* start_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_ts_);
  }
  if (start_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_ts));
    if (message_arena != submessage_arena) {
      start_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.start_ts_ = start_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.DatasetRun.start_ts)
}

// .google.protobuf.Timestamp end_ts = 8 [json_name = "endTs"];
inline bool DatasetRun::has_end_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.end_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& DatasetRun::_internal_end_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.end_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& DatasetRun::end_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.DatasetRun.end_ts)
  return _internal_end_ts();
}
inline void DatasetRun::unsafe_arena_set_allocated_end_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_ts_);
  }
  _impl_.end_ts_ = end_ts;
  if (end_ts) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.DatasetRun.end_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DatasetRun::release_end_ts() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_ts_;
  _impl_.end_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DatasetRun::unsafe_arena_release_end_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.DatasetRun.end_ts)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_ts_;
  _impl_.end_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DatasetRun::_internal_mutable_end_ts() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.end_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.end_ts_ = p;
  }
  return _impl_.end_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* DatasetRun::mutable_end_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_end_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.DatasetRun.end_ts)
  return _msg;
}
inline void DatasetRun::set_allocated_end_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* end_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_ts_);
  }
  if (end_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_ts));
    if (message_arena != submessage_arena) {
      end_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.end_ts_ = end_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.DatasetRun.end_ts)
}

// .cavnue.messages.data_warehouse.management.v1.Dataset.Type dataset_type = 9 [json_name = "datasetType"];
inline void DatasetRun::clear_dataset_type() {
  _impl_.dataset_type_ = 0;
}
inline ::cavnue::messages::data_warehouse::management::v1::Dataset_Type DatasetRun::dataset_type() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.DatasetRun.dataset_type)
  return _internal_dataset_type();
}
inline void DatasetRun::set_dataset_type(::cavnue::messages::data_warehouse::management::v1::Dataset_Type value) {
   _internal_set_dataset_type(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.world_state.v1.DatasetRun.dataset_type)
}
inline ::cavnue::messages::data_warehouse::management::v1::Dataset_Type DatasetRun::_internal_dataset_type() const {
  return static_cast<::cavnue::messages::data_warehouse::management::v1::Dataset_Type>(_impl_.dataset_type_);
}
inline void DatasetRun::_internal_set_dataset_type(::cavnue::messages::data_warehouse::management::v1::Dataset_Type value) {
  ;
  _impl_.dataset_type_ = value;
}

// string sim_id = 10 [json_name = "simId"];
inline void DatasetRun::clear_sim_id() {
  _impl_.sim_id_.ClearToEmpty();
}
inline const std::string& DatasetRun::sim_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.DatasetRun.sim_id)
  return _internal_sim_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DatasetRun::set_sim_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.sim_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.world_state.v1.DatasetRun.sim_id)
}
inline std::string* DatasetRun::mutable_sim_id() {
  std::string* _s = _internal_mutable_sim_id();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.DatasetRun.sim_id)
  return _s;
}
inline const std::string& DatasetRun::_internal_sim_id() const {
  return _impl_.sim_id_.Get();
}
inline void DatasetRun::_internal_set_sim_id(const std::string& value) {
  ;


  _impl_.sim_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DatasetRun::_internal_mutable_sim_id() {
  ;
  return _impl_.sim_id_.Mutable( GetArenaForAllocation());
}
inline std::string* DatasetRun::release_sim_id() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.DatasetRun.sim_id)
  return _impl_.sim_id_.Release();
}
inline void DatasetRun::set_allocated_sim_id(std::string* value) {
  _impl_.sim_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sim_id_.IsDefault()) {
          _impl_.sim_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.DatasetRun.sim_id)
}

// -------------------------------------------------------------------

// GetServiceApiRequest

// .google.protobuf.Empty empty = 1 [json_name = "empty"];
inline bool GetServiceApiRequest::has_empty() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.empty_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Empty& GetServiceApiRequest::_internal_empty() const {
  const ::PROTOBUF_NAMESPACE_ID::Empty* p = _impl_.empty_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Empty&>(
      ::PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Empty& GetServiceApiRequest::empty() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetServiceApiRequest.empty)
  return _internal_empty();
}
inline void GetServiceApiRequest::unsafe_arena_set_allocated_empty(
    ::PROTOBUF_NAMESPACE_ID::Empty* empty) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.empty_);
  }
  _impl_.empty_ = empty;
  if (empty) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.GetServiceApiRequest.empty)
}
inline ::PROTOBUF_NAMESPACE_ID::Empty* GetServiceApiRequest::release_empty() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Empty* temp = _impl_.empty_;
  _impl_.empty_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Empty* GetServiceApiRequest::unsafe_arena_release_empty() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.GetServiceApiRequest.empty)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Empty* temp = _impl_.empty_;
  _impl_.empty_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Empty* GetServiceApiRequest::_internal_mutable_empty() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.empty_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Empty>(GetArenaForAllocation());
    _impl_.empty_ = p;
  }
  return _impl_.empty_;
}
inline ::PROTOBUF_NAMESPACE_ID::Empty* GetServiceApiRequest::mutable_empty() {
  ::PROTOBUF_NAMESPACE_ID::Empty* _msg = _internal_mutable_empty();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetServiceApiRequest.empty)
  return _msg;
}
inline void GetServiceApiRequest::set_allocated_empty(::PROTOBUF_NAMESPACE_ID::Empty* empty) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.empty_);
  }
  if (empty) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(empty));
    if (message_arena != submessage_arena) {
      empty = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, empty, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.empty_ = empty;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.GetServiceApiRequest.empty)
}

// -------------------------------------------------------------------

// GetServiceApiResponse

// .google.protobuf.Api api = 1 [json_name = "api"];
inline bool GetServiceApiResponse::has_api() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.api_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Api& GetServiceApiResponse::_internal_api() const {
  const ::PROTOBUF_NAMESPACE_ID::Api* p = _impl_.api_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Api&>(
      ::PROTOBUF_NAMESPACE_ID::_Api_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Api& GetServiceApiResponse::api() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetServiceApiResponse.api)
  return _internal_api();
}
inline void GetServiceApiResponse::unsafe_arena_set_allocated_api(
    ::PROTOBUF_NAMESPACE_ID::Api* api) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.api_);
  }
  _impl_.api_ = api;
  if (api) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.GetServiceApiResponse.api)
}
inline ::PROTOBUF_NAMESPACE_ID::Api* GetServiceApiResponse::release_api() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Api* temp = _impl_.api_;
  _impl_.api_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Api* GetServiceApiResponse::unsafe_arena_release_api() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.GetServiceApiResponse.api)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Api* temp = _impl_.api_;
  _impl_.api_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Api* GetServiceApiResponse::_internal_mutable_api() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.api_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Api>(GetArenaForAllocation());
    _impl_.api_ = p;
  }
  return _impl_.api_;
}
inline ::PROTOBUF_NAMESPACE_ID::Api* GetServiceApiResponse::mutable_api() {
  ::PROTOBUF_NAMESPACE_ID::Api* _msg = _internal_mutable_api();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetServiceApiResponse.api)
  return _msg;
}
inline void GetServiceApiResponse::set_allocated_api(::PROTOBUF_NAMESPACE_ID::Api* api) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.api_);
  }
  if (api) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(api));
    if (message_arena != submessage_arena) {
      api = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, api, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.api_ = api;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.GetServiceApiResponse.api)
}

// -------------------------------------------------------------------

// GetDatasetRunsRequest

// optional int64 dataset_id = 1 [json_name = "datasetId"];
inline bool GetDatasetRunsRequest::has_dataset_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GetDatasetRunsRequest::clear_dataset_id() {
  _impl_.dataset_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t GetDatasetRunsRequest::dataset_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetDatasetRunsRequest.dataset_id)
  return _internal_dataset_id();
}
inline void GetDatasetRunsRequest::set_dataset_id(::int64_t value) {
  _internal_set_dataset_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.world_state.v1.GetDatasetRunsRequest.dataset_id)
}
inline ::int64_t GetDatasetRunsRequest::_internal_dataset_id() const {
  return _impl_.dataset_id_;
}
inline void GetDatasetRunsRequest::_internal_set_dataset_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.dataset_id_ = value;
}

// optional int64 dataset_run_id = 2 [json_name = "datasetRunId"];
inline bool GetDatasetRunsRequest::has_dataset_run_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GetDatasetRunsRequest::clear_dataset_run_id() {
  _impl_.dataset_run_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t GetDatasetRunsRequest::dataset_run_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetDatasetRunsRequest.dataset_run_id)
  return _internal_dataset_run_id();
}
inline void GetDatasetRunsRequest::set_dataset_run_id(::int64_t value) {
  _internal_set_dataset_run_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.world_state.v1.GetDatasetRunsRequest.dataset_run_id)
}
inline ::int64_t GetDatasetRunsRequest::_internal_dataset_run_id() const {
  return _impl_.dataset_run_id_;
}
inline void GetDatasetRunsRequest::_internal_set_dataset_run_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.dataset_run_id_ = value;
}

// optional bool sim_only = 3 [json_name = "simOnly"];
inline bool GetDatasetRunsRequest::has_sim_only() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void GetDatasetRunsRequest::clear_sim_only() {
  _impl_.sim_only_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool GetDatasetRunsRequest::sim_only() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetDatasetRunsRequest.sim_only)
  return _internal_sim_only();
}
inline void GetDatasetRunsRequest::set_sim_only(bool value) {
  _internal_set_sim_only(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.world_state.v1.GetDatasetRunsRequest.sim_only)
}
inline bool GetDatasetRunsRequest::_internal_sim_only() const {
  return _impl_.sim_only_;
}
inline void GetDatasetRunsRequest::_internal_set_sim_only(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.sim_only_ = value;
}

// optional .cavnue.messages.data_warehouse.management.v1.Dataset.Type type = 4 [json_name = "type"];
inline bool GetDatasetRunsRequest::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void GetDatasetRunsRequest::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::cavnue::messages::data_warehouse::management::v1::Dataset_Type GetDatasetRunsRequest::type() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetDatasetRunsRequest.type)
  return _internal_type();
}
inline void GetDatasetRunsRequest::set_type(::cavnue::messages::data_warehouse::management::v1::Dataset_Type value) {
   _internal_set_type(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.world_state.v1.GetDatasetRunsRequest.type)
}
inline ::cavnue::messages::data_warehouse::management::v1::Dataset_Type GetDatasetRunsRequest::_internal_type() const {
  return static_cast<::cavnue::messages::data_warehouse::management::v1::Dataset_Type>(_impl_.type_);
}
inline void GetDatasetRunsRequest::_internal_set_type(::cavnue::messages::data_warehouse::management::v1::Dataset_Type value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.type_ = value;
}

// optional string dataset_identifier = 5 [json_name = "datasetIdentifier"];
inline bool GetDatasetRunsRequest::has_dataset_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GetDatasetRunsRequest::clear_dataset_identifier() {
  _impl_.dataset_identifier_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetDatasetRunsRequest::dataset_identifier() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetDatasetRunsRequest.dataset_identifier)
  return _internal_dataset_identifier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetDatasetRunsRequest::set_dataset_identifier(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dataset_identifier_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.world_state.v1.GetDatasetRunsRequest.dataset_identifier)
}
inline std::string* GetDatasetRunsRequest::mutable_dataset_identifier() {
  std::string* _s = _internal_mutable_dataset_identifier();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetDatasetRunsRequest.dataset_identifier)
  return _s;
}
inline const std::string& GetDatasetRunsRequest::_internal_dataset_identifier() const {
  return _impl_.dataset_identifier_.Get();
}
inline void GetDatasetRunsRequest::_internal_set_dataset_identifier(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.dataset_identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* GetDatasetRunsRequest::_internal_mutable_dataset_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.dataset_identifier_.Mutable( GetArenaForAllocation());
}
inline std::string* GetDatasetRunsRequest::release_dataset_identifier() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.GetDatasetRunsRequest.dataset_identifier)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.dataset_identifier_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dataset_identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GetDatasetRunsRequest::set_allocated_dataset_identifier(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.dataset_identifier_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.dataset_identifier_.IsDefault()) {
          _impl_.dataset_identifier_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.GetDatasetRunsRequest.dataset_identifier)
}

// -------------------------------------------------------------------

// GetDatasetRunsResponse

// repeated .cavnue.messages.world_state.v1.DatasetRun runs = 1 [json_name = "runs"];
inline int GetDatasetRunsResponse::_internal_runs_size() const {
  return _impl_.runs_.size();
}
inline int GetDatasetRunsResponse::runs_size() const {
  return _internal_runs_size();
}
inline void GetDatasetRunsResponse::clear_runs() {
  _internal_mutable_runs()->Clear();
}
inline ::cavnue::messages::world_state::v1::DatasetRun* GetDatasetRunsResponse::mutable_runs(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetDatasetRunsResponse.runs)
  return _internal_mutable_runs()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::world_state::v1::DatasetRun >*
GetDatasetRunsResponse::mutable_runs() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.world_state.v1.GetDatasetRunsResponse.runs)
  return _internal_mutable_runs();
}
inline const ::cavnue::messages::world_state::v1::DatasetRun& GetDatasetRunsResponse::_internal_runs(int index) const {
  return _internal_runs().Get(index);
}
inline const ::cavnue::messages::world_state::v1::DatasetRun& GetDatasetRunsResponse::runs(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetDatasetRunsResponse.runs)
  return _internal_runs(index);
}
inline ::cavnue::messages::world_state::v1::DatasetRun* GetDatasetRunsResponse::_internal_add_runs() {
  return _internal_mutable_runs()->Add();
}
inline ::cavnue::messages::world_state::v1::DatasetRun* GetDatasetRunsResponse::add_runs() {
  ::cavnue::messages::world_state::v1::DatasetRun* _add = _internal_add_runs();
  // @@protoc_insertion_point(field_add:cavnue.messages.world_state.v1.GetDatasetRunsResponse.runs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::world_state::v1::DatasetRun >&
GetDatasetRunsResponse::runs() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.world_state.v1.GetDatasetRunsResponse.runs)
  return _internal_runs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::world_state::v1::DatasetRun>&
GetDatasetRunsResponse::_internal_runs() const {
  return _impl_.runs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::world_state::v1::DatasetRun>*
GetDatasetRunsResponse::_internal_mutable_runs() {
  return &_impl_.runs_;
}

// -------------------------------------------------------------------

// GetDatasetsRequest

// optional bool sim_only = 1 [json_name = "simOnly"];
inline bool GetDatasetsRequest::has_sim_only() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GetDatasetsRequest::clear_sim_only() {
  _impl_.sim_only_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool GetDatasetsRequest::sim_only() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetDatasetsRequest.sim_only)
  return _internal_sim_only();
}
inline void GetDatasetsRequest::set_sim_only(bool value) {
  _internal_set_sim_only(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.world_state.v1.GetDatasetsRequest.sim_only)
}
inline bool GetDatasetsRequest::_internal_sim_only() const {
  return _impl_.sim_only_;
}
inline void GetDatasetsRequest::_internal_set_sim_only(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sim_only_ = value;
}

// -------------------------------------------------------------------

// GetDatasetsResponse

// repeated .cavnue.messages.world_state.v1.Dataset datasets = 1 [json_name = "datasets"];
inline int GetDatasetsResponse::_internal_datasets_size() const {
  return _impl_.datasets_.size();
}
inline int GetDatasetsResponse::datasets_size() const {
  return _internal_datasets_size();
}
inline void GetDatasetsResponse::clear_datasets() {
  _internal_mutable_datasets()->Clear();
}
inline ::cavnue::messages::world_state::v1::Dataset* GetDatasetsResponse::mutable_datasets(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetDatasetsResponse.datasets)
  return _internal_mutable_datasets()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::world_state::v1::Dataset >*
GetDatasetsResponse::mutable_datasets() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.world_state.v1.GetDatasetsResponse.datasets)
  return _internal_mutable_datasets();
}
inline const ::cavnue::messages::world_state::v1::Dataset& GetDatasetsResponse::_internal_datasets(int index) const {
  return _internal_datasets().Get(index);
}
inline const ::cavnue::messages::world_state::v1::Dataset& GetDatasetsResponse::datasets(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetDatasetsResponse.datasets)
  return _internal_datasets(index);
}
inline ::cavnue::messages::world_state::v1::Dataset* GetDatasetsResponse::_internal_add_datasets() {
  return _internal_mutable_datasets()->Add();
}
inline ::cavnue::messages::world_state::v1::Dataset* GetDatasetsResponse::add_datasets() {
  ::cavnue::messages::world_state::v1::Dataset* _add = _internal_add_datasets();
  // @@protoc_insertion_point(field_add:cavnue.messages.world_state.v1.GetDatasetsResponse.datasets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::world_state::v1::Dataset >&
GetDatasetsResponse::datasets() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.world_state.v1.GetDatasetsResponse.datasets)
  return _internal_datasets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::world_state::v1::Dataset>&
GetDatasetsResponse::_internal_datasets() const {
  return _impl_.datasets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::world_state::v1::Dataset>*
GetDatasetsResponse::_internal_mutable_datasets() {
  return &_impl_.datasets_;
}

// -------------------------------------------------------------------

// GetWorldStateRequest

// .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
inline bool GetWorldStateRequest::has_query() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.query_ != nullptr);
  return value;
}
inline void GetWorldStateRequest::clear_query() {
  if (_impl_.query_ != nullptr) _impl_.query_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cavnue::messages::world_state::v1::Query& GetWorldStateRequest::_internal_query() const {
  const ::cavnue::messages::world_state::v1::Query* p = _impl_.query_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::world_state::v1::Query&>(
      ::cavnue::messages::world_state::v1::_Query_default_instance_);
}
inline const ::cavnue::messages::world_state::v1::Query& GetWorldStateRequest::query() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetWorldStateRequest.query)
  return _internal_query();
}
inline void GetWorldStateRequest::unsafe_arena_set_allocated_query(
    ::cavnue::messages::world_state::v1::Query* query) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.query_);
  }
  _impl_.query_ = query;
  if (query) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.GetWorldStateRequest.query)
}
inline ::cavnue::messages::world_state::v1::Query* GetWorldStateRequest::release_query() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::world_state::v1::Query* temp = _impl_.query_;
  _impl_.query_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::world_state::v1::Query* GetWorldStateRequest::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.GetWorldStateRequest.query)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::world_state::v1::Query* temp = _impl_.query_;
  _impl_.query_ = nullptr;
  return temp;
}
inline ::cavnue::messages::world_state::v1::Query* GetWorldStateRequest::_internal_mutable_query() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.query_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::world_state::v1::Query>(GetArenaForAllocation());
    _impl_.query_ = p;
  }
  return _impl_.query_;
}
inline ::cavnue::messages::world_state::v1::Query* GetWorldStateRequest::mutable_query() {
  ::cavnue::messages::world_state::v1::Query* _msg = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetWorldStateRequest.query)
  return _msg;
}
inline void GetWorldStateRequest::set_allocated_query(::cavnue::messages::world_state::v1::Query* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.query_;
  }
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(query);
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.query_ = query;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.GetWorldStateRequest.query)
}

// -------------------------------------------------------------------

// GetWorldStateResponse

// repeated .cavnue.messages.inference.v1.Actor actors = 1 [json_name = "actors"];
inline int GetWorldStateResponse::_internal_actors_size() const {
  return _impl_.actors_.size();
}
inline int GetWorldStateResponse::actors_size() const {
  return _internal_actors_size();
}
inline ::cavnue::messages::inference::v1::Actor* GetWorldStateResponse::mutable_actors(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetWorldStateResponse.actors)
  return _internal_mutable_actors()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Actor >*
GetWorldStateResponse::mutable_actors() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.world_state.v1.GetWorldStateResponse.actors)
  return _internal_mutable_actors();
}
inline const ::cavnue::messages::inference::v1::Actor& GetWorldStateResponse::_internal_actors(int index) const {
  return _internal_actors().Get(index);
}
inline const ::cavnue::messages::inference::v1::Actor& GetWorldStateResponse::actors(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetWorldStateResponse.actors)
  return _internal_actors(index);
}
inline ::cavnue::messages::inference::v1::Actor* GetWorldStateResponse::_internal_add_actors() {
  return _internal_mutable_actors()->Add();
}
inline ::cavnue::messages::inference::v1::Actor* GetWorldStateResponse::add_actors() {
  ::cavnue::messages::inference::v1::Actor* _add = _internal_add_actors();
  // @@protoc_insertion_point(field_add:cavnue.messages.world_state.v1.GetWorldStateResponse.actors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Actor >&
GetWorldStateResponse::actors() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.world_state.v1.GetWorldStateResponse.actors)
  return _internal_actors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Actor>&
GetWorldStateResponse::_internal_actors() const {
  return _impl_.actors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Actor>*
GetWorldStateResponse::_internal_mutable_actors() {
  return &_impl_.actors_;
}

// repeated .cavnue.messages.inference.v1.Event events = 2 [json_name = "events"];
inline int GetWorldStateResponse::_internal_events_size() const {
  return _impl_.events_.size();
}
inline int GetWorldStateResponse::events_size() const {
  return _internal_events_size();
}
inline ::cavnue::messages::inference::v1::Event* GetWorldStateResponse::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetWorldStateResponse.events)
  return _internal_mutable_events()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Event >*
GetWorldStateResponse::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.world_state.v1.GetWorldStateResponse.events)
  return _internal_mutable_events();
}
inline const ::cavnue::messages::inference::v1::Event& GetWorldStateResponse::_internal_events(int index) const {
  return _internal_events().Get(index);
}
inline const ::cavnue::messages::inference::v1::Event& GetWorldStateResponse::events(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetWorldStateResponse.events)
  return _internal_events(index);
}
inline ::cavnue::messages::inference::v1::Event* GetWorldStateResponse::_internal_add_events() {
  return _internal_mutable_events()->Add();
}
inline ::cavnue::messages::inference::v1::Event* GetWorldStateResponse::add_events() {
  ::cavnue::messages::inference::v1::Event* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:cavnue.messages.world_state.v1.GetWorldStateResponse.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Event >&
GetWorldStateResponse::events() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.world_state.v1.GetWorldStateResponse.events)
  return _internal_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Event>&
GetWorldStateResponse::_internal_events() const {
  return _impl_.events_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Event>*
GetWorldStateResponse::_internal_mutable_events() {
  return &_impl_.events_;
}

// repeated .cavnue.messages.world_state.v1.Asset assets = 3 [json_name = "assets"];
inline int GetWorldStateResponse::_internal_assets_size() const {
  return _impl_.assets_.size();
}
inline int GetWorldStateResponse::assets_size() const {
  return _internal_assets_size();
}
inline void GetWorldStateResponse::clear_assets() {
  _internal_mutable_assets()->Clear();
}
inline ::cavnue::messages::world_state::v1::Asset* GetWorldStateResponse::mutable_assets(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetWorldStateResponse.assets)
  return _internal_mutable_assets()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::world_state::v1::Asset >*
GetWorldStateResponse::mutable_assets() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.world_state.v1.GetWorldStateResponse.assets)
  return _internal_mutable_assets();
}
inline const ::cavnue::messages::world_state::v1::Asset& GetWorldStateResponse::_internal_assets(int index) const {
  return _internal_assets().Get(index);
}
inline const ::cavnue::messages::world_state::v1::Asset& GetWorldStateResponse::assets(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetWorldStateResponse.assets)
  return _internal_assets(index);
}
inline ::cavnue::messages::world_state::v1::Asset* GetWorldStateResponse::_internal_add_assets() {
  return _internal_mutable_assets()->Add();
}
inline ::cavnue::messages::world_state::v1::Asset* GetWorldStateResponse::add_assets() {
  ::cavnue::messages::world_state::v1::Asset* _add = _internal_add_assets();
  // @@protoc_insertion_point(field_add:cavnue.messages.world_state.v1.GetWorldStateResponse.assets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::world_state::v1::Asset >&
GetWorldStateResponse::assets() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.world_state.v1.GetWorldStateResponse.assets)
  return _internal_assets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::world_state::v1::Asset>&
GetWorldStateResponse::_internal_assets() const {
  return _impl_.assets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::world_state::v1::Asset>*
GetWorldStateResponse::_internal_mutable_assets() {
  return &_impl_.assets_;
}

// repeated .cavnue.messages.inference.v1.TrafficEvent traffic_events = 4 [json_name = "trafficEvents"];
inline int GetWorldStateResponse::_internal_traffic_events_size() const {
  return _impl_.traffic_events_.size();
}
inline int GetWorldStateResponse::traffic_events_size() const {
  return _internal_traffic_events_size();
}
inline ::cavnue::messages::inference::v1::TrafficEvent* GetWorldStateResponse::mutable_traffic_events(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetWorldStateResponse.traffic_events)
  return _internal_mutable_traffic_events()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::TrafficEvent >*
GetWorldStateResponse::mutable_traffic_events() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.world_state.v1.GetWorldStateResponse.traffic_events)
  return _internal_mutable_traffic_events();
}
inline const ::cavnue::messages::inference::v1::TrafficEvent& GetWorldStateResponse::_internal_traffic_events(int index) const {
  return _internal_traffic_events().Get(index);
}
inline const ::cavnue::messages::inference::v1::TrafficEvent& GetWorldStateResponse::traffic_events(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetWorldStateResponse.traffic_events)
  return _internal_traffic_events(index);
}
inline ::cavnue::messages::inference::v1::TrafficEvent* GetWorldStateResponse::_internal_add_traffic_events() {
  return _internal_mutable_traffic_events()->Add();
}
inline ::cavnue::messages::inference::v1::TrafficEvent* GetWorldStateResponse::add_traffic_events() {
  ::cavnue::messages::inference::v1::TrafficEvent* _add = _internal_add_traffic_events();
  // @@protoc_insertion_point(field_add:cavnue.messages.world_state.v1.GetWorldStateResponse.traffic_events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::TrafficEvent >&
GetWorldStateResponse::traffic_events() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.world_state.v1.GetWorldStateResponse.traffic_events)
  return _internal_traffic_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::TrafficEvent>&
GetWorldStateResponse::_internal_traffic_events() const {
  return _impl_.traffic_events_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::TrafficEvent>*
GetWorldStateResponse::_internal_mutable_traffic_events() {
  return &_impl_.traffic_events_;
}

// -------------------------------------------------------------------

// GetWorldStateNearRealTimeRequest

// .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
inline bool GetWorldStateNearRealTimeRequest::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::cavnue::messages::common::v1::Header& GetWorldStateNearRealTimeRequest::_internal_header() const {
  const ::cavnue::messages::common::v1::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::common::v1::Header&>(
      ::cavnue::messages::common::v1::_Header_default_instance_);
}
inline const ::cavnue::messages::common::v1::Header& GetWorldStateNearRealTimeRequest::header() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest.header)
  return _internal_header();
}
inline void GetWorldStateNearRealTimeRequest::unsafe_arena_set_allocated_header(
    ::cavnue::messages::common::v1::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest.header)
}
inline ::cavnue::messages::common::v1::Header* GetWorldStateNearRealTimeRequest::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::common::v1::Header* GetWorldStateNearRealTimeRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::cavnue::messages::common::v1::Header* GetWorldStateNearRealTimeRequest::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::common::v1::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::cavnue::messages::common::v1::Header* GetWorldStateNearRealTimeRequest::mutable_header() {
  ::cavnue::messages::common::v1::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest.header)
  return _msg;
}
inline void GetWorldStateNearRealTimeRequest::set_allocated_header(::cavnue::messages::common::v1::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest.header)
}

// optional .cavnue.messages.world_state.v1.TimeFilter time_filter = 2 [json_name = "timeFilter"];
inline bool GetWorldStateNearRealTimeRequest::has_time_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_filter_ != nullptr);
  return value;
}
inline void GetWorldStateNearRealTimeRequest::clear_time_filter() {
  if (_impl_.time_filter_ != nullptr) _impl_.time_filter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::cavnue::messages::world_state::v1::TimeFilter& GetWorldStateNearRealTimeRequest::_internal_time_filter() const {
  const ::cavnue::messages::world_state::v1::TimeFilter* p = _impl_.time_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::world_state::v1::TimeFilter&>(
      ::cavnue::messages::world_state::v1::_TimeFilter_default_instance_);
}
inline const ::cavnue::messages::world_state::v1::TimeFilter& GetWorldStateNearRealTimeRequest::time_filter() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest.time_filter)
  return _internal_time_filter();
}
inline void GetWorldStateNearRealTimeRequest::unsafe_arena_set_allocated_time_filter(
    ::cavnue::messages::world_state::v1::TimeFilter* time_filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_filter_);
  }
  _impl_.time_filter_ = time_filter;
  if (time_filter) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest.time_filter)
}
inline ::cavnue::messages::world_state::v1::TimeFilter* GetWorldStateNearRealTimeRequest::release_time_filter() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::world_state::v1::TimeFilter* temp = _impl_.time_filter_;
  _impl_.time_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::world_state::v1::TimeFilter* GetWorldStateNearRealTimeRequest::unsafe_arena_release_time_filter() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest.time_filter)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::world_state::v1::TimeFilter* temp = _impl_.time_filter_;
  _impl_.time_filter_ = nullptr;
  return temp;
}
inline ::cavnue::messages::world_state::v1::TimeFilter* GetWorldStateNearRealTimeRequest::_internal_mutable_time_filter() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.time_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::world_state::v1::TimeFilter>(GetArenaForAllocation());
    _impl_.time_filter_ = p;
  }
  return _impl_.time_filter_;
}
inline ::cavnue::messages::world_state::v1::TimeFilter* GetWorldStateNearRealTimeRequest::mutable_time_filter() {
  ::cavnue::messages::world_state::v1::TimeFilter* _msg = _internal_mutable_time_filter();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest.time_filter)
  return _msg;
}
inline void GetWorldStateNearRealTimeRequest::set_allocated_time_filter(::cavnue::messages::world_state::v1::TimeFilter* time_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.time_filter_;
  }
  if (time_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(time_filter);
    if (message_arena != submessage_arena) {
      time_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_filter, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.time_filter_ = time_filter;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest.time_filter)
}

// .google.protobuf.FieldMask actor_field_request = 3 [json_name = "actorFieldRequest"];
inline bool GetWorldStateNearRealTimeRequest::has_actor_field_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.actor_field_request_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& GetWorldStateNearRealTimeRequest::_internal_actor_field_request() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.actor_field_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& GetWorldStateNearRealTimeRequest::actor_field_request() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest.actor_field_request)
  return _internal_actor_field_request();
}
inline void GetWorldStateNearRealTimeRequest::unsafe_arena_set_allocated_actor_field_request(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* actor_field_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.actor_field_request_);
  }
  _impl_.actor_field_request_ = actor_field_request;
  if (actor_field_request) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest.actor_field_request)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetWorldStateNearRealTimeRequest::release_actor_field_request() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.actor_field_request_;
  _impl_.actor_field_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetWorldStateNearRealTimeRequest::unsafe_arena_release_actor_field_request() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest.actor_field_request)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.actor_field_request_;
  _impl_.actor_field_request_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetWorldStateNearRealTimeRequest::_internal_mutable_actor_field_request() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.actor_field_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.actor_field_request_ = p;
  }
  return _impl_.actor_field_request_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetWorldStateNearRealTimeRequest::mutable_actor_field_request() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_actor_field_request();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest.actor_field_request)
  return _msg;
}
inline void GetWorldStateNearRealTimeRequest::set_allocated_actor_field_request(::PROTOBUF_NAMESPACE_ID::FieldMask* actor_field_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.actor_field_request_);
  }
  if (actor_field_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor_field_request));
    if (message_arena != submessage_arena) {
      actor_field_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actor_field_request, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.actor_field_request_ = actor_field_request;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest.actor_field_request)
}

// .google.protobuf.FieldMask event_field_request = 4 [json_name = "eventFieldRequest"];
inline bool GetWorldStateNearRealTimeRequest::has_event_field_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.event_field_request_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& GetWorldStateNearRealTimeRequest::_internal_event_field_request() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.event_field_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& GetWorldStateNearRealTimeRequest::event_field_request() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest.event_field_request)
  return _internal_event_field_request();
}
inline void GetWorldStateNearRealTimeRequest::unsafe_arena_set_allocated_event_field_request(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* event_field_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.event_field_request_);
  }
  _impl_.event_field_request_ = event_field_request;
  if (event_field_request) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest.event_field_request)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetWorldStateNearRealTimeRequest::release_event_field_request() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.event_field_request_;
  _impl_.event_field_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetWorldStateNearRealTimeRequest::unsafe_arena_release_event_field_request() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest.event_field_request)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.event_field_request_;
  _impl_.event_field_request_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetWorldStateNearRealTimeRequest::_internal_mutable_event_field_request() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.event_field_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.event_field_request_ = p;
  }
  return _impl_.event_field_request_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetWorldStateNearRealTimeRequest::mutable_event_field_request() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_event_field_request();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest.event_field_request)
  return _msg;
}
inline void GetWorldStateNearRealTimeRequest::set_allocated_event_field_request(::PROTOBUF_NAMESPACE_ID::FieldMask* event_field_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.event_field_request_);
  }
  if (event_field_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_field_request));
    if (message_arena != submessage_arena) {
      event_field_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event_field_request, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.event_field_request_ = event_field_request;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest.event_field_request)
}

// .google.protobuf.FieldMask traffic_event_field_request = 5 [json_name = "trafficEventFieldRequest"];
inline bool GetWorldStateNearRealTimeRequest::has_traffic_event_field_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.traffic_event_field_request_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& GetWorldStateNearRealTimeRequest::_internal_traffic_event_field_request() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.traffic_event_field_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& GetWorldStateNearRealTimeRequest::traffic_event_field_request() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest.traffic_event_field_request)
  return _internal_traffic_event_field_request();
}
inline void GetWorldStateNearRealTimeRequest::unsafe_arena_set_allocated_traffic_event_field_request(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* traffic_event_field_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.traffic_event_field_request_);
  }
  _impl_.traffic_event_field_request_ = traffic_event_field_request;
  if (traffic_event_field_request) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest.traffic_event_field_request)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetWorldStateNearRealTimeRequest::release_traffic_event_field_request() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.traffic_event_field_request_;
  _impl_.traffic_event_field_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetWorldStateNearRealTimeRequest::unsafe_arena_release_traffic_event_field_request() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest.traffic_event_field_request)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.traffic_event_field_request_;
  _impl_.traffic_event_field_request_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetWorldStateNearRealTimeRequest::_internal_mutable_traffic_event_field_request() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.traffic_event_field_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.traffic_event_field_request_ = p;
  }
  return _impl_.traffic_event_field_request_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetWorldStateNearRealTimeRequest::mutable_traffic_event_field_request() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_traffic_event_field_request();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest.traffic_event_field_request)
  return _msg;
}
inline void GetWorldStateNearRealTimeRequest::set_allocated_traffic_event_field_request(::PROTOBUF_NAMESPACE_ID::FieldMask* traffic_event_field_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.traffic_event_field_request_);
  }
  if (traffic_event_field_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(traffic_event_field_request));
    if (message_arena != submessage_arena) {
      traffic_event_field_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, traffic_event_field_request, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.traffic_event_field_request_ = traffic_event_field_request;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest.traffic_event_field_request)
}

// -------------------------------------------------------------------

// GetWorldStateNearRealTimeResponse

// .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
inline bool GetWorldStateNearRealTimeResponse::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::cavnue::messages::common::v1::Header& GetWorldStateNearRealTimeResponse::_internal_header() const {
  const ::cavnue::messages::common::v1::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::common::v1::Header&>(
      ::cavnue::messages::common::v1::_Header_default_instance_);
}
inline const ::cavnue::messages::common::v1::Header& GetWorldStateNearRealTimeResponse::header() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.header)
  return _internal_header();
}
inline void GetWorldStateNearRealTimeResponse::unsafe_arena_set_allocated_header(
    ::cavnue::messages::common::v1::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.header)
}
inline ::cavnue::messages::common::v1::Header* GetWorldStateNearRealTimeResponse::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::common::v1::Header* GetWorldStateNearRealTimeResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::cavnue::messages::common::v1::Header* GetWorldStateNearRealTimeResponse::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::common::v1::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::cavnue::messages::common::v1::Header* GetWorldStateNearRealTimeResponse::mutable_header() {
  ::cavnue::messages::common::v1::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.header)
  return _msg;
}
inline void GetWorldStateNearRealTimeResponse::set_allocated_header(::cavnue::messages::common::v1::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.header)
}

// .google.protobuf.FieldMask actor_field_mask = 2 [json_name = "actorFieldMask"];
inline bool GetWorldStateNearRealTimeResponse::has_actor_field_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.actor_field_mask_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& GetWorldStateNearRealTimeResponse::_internal_actor_field_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.actor_field_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& GetWorldStateNearRealTimeResponse::actor_field_mask() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.actor_field_mask)
  return _internal_actor_field_mask();
}
inline void GetWorldStateNearRealTimeResponse::unsafe_arena_set_allocated_actor_field_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* actor_field_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.actor_field_mask_);
  }
  _impl_.actor_field_mask_ = actor_field_mask;
  if (actor_field_mask) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.actor_field_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetWorldStateNearRealTimeResponse::release_actor_field_mask() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.actor_field_mask_;
  _impl_.actor_field_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetWorldStateNearRealTimeResponse::unsafe_arena_release_actor_field_mask() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.actor_field_mask)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.actor_field_mask_;
  _impl_.actor_field_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetWorldStateNearRealTimeResponse::_internal_mutable_actor_field_mask() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.actor_field_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.actor_field_mask_ = p;
  }
  return _impl_.actor_field_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetWorldStateNearRealTimeResponse::mutable_actor_field_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_actor_field_mask();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.actor_field_mask)
  return _msg;
}
inline void GetWorldStateNearRealTimeResponse::set_allocated_actor_field_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* actor_field_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.actor_field_mask_);
  }
  if (actor_field_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor_field_mask));
    if (message_arena != submessage_arena) {
      actor_field_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actor_field_mask, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.actor_field_mask_ = actor_field_mask;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.actor_field_mask)
}

// .google.protobuf.FieldMask event_field_mask = 3 [json_name = "eventFieldMask"];
inline bool GetWorldStateNearRealTimeResponse::has_event_field_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.event_field_mask_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& GetWorldStateNearRealTimeResponse::_internal_event_field_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.event_field_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& GetWorldStateNearRealTimeResponse::event_field_mask() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.event_field_mask)
  return _internal_event_field_mask();
}
inline void GetWorldStateNearRealTimeResponse::unsafe_arena_set_allocated_event_field_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* event_field_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.event_field_mask_);
  }
  _impl_.event_field_mask_ = event_field_mask;
  if (event_field_mask) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.event_field_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetWorldStateNearRealTimeResponse::release_event_field_mask() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.event_field_mask_;
  _impl_.event_field_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetWorldStateNearRealTimeResponse::unsafe_arena_release_event_field_mask() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.event_field_mask)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.event_field_mask_;
  _impl_.event_field_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetWorldStateNearRealTimeResponse::_internal_mutable_event_field_mask() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.event_field_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.event_field_mask_ = p;
  }
  return _impl_.event_field_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetWorldStateNearRealTimeResponse::mutable_event_field_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_event_field_mask();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.event_field_mask)
  return _msg;
}
inline void GetWorldStateNearRealTimeResponse::set_allocated_event_field_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* event_field_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.event_field_mask_);
  }
  if (event_field_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_field_mask));
    if (message_arena != submessage_arena) {
      event_field_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event_field_mask, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.event_field_mask_ = event_field_mask;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.event_field_mask)
}

// .google.protobuf.FieldMask traffic_event_field_mask = 4 [json_name = "trafficEventFieldMask"];
inline bool GetWorldStateNearRealTimeResponse::has_traffic_event_field_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.traffic_event_field_mask_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& GetWorldStateNearRealTimeResponse::_internal_traffic_event_field_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.traffic_event_field_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& GetWorldStateNearRealTimeResponse::traffic_event_field_mask() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.traffic_event_field_mask)
  return _internal_traffic_event_field_mask();
}
inline void GetWorldStateNearRealTimeResponse::unsafe_arena_set_allocated_traffic_event_field_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* traffic_event_field_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.traffic_event_field_mask_);
  }
  _impl_.traffic_event_field_mask_ = traffic_event_field_mask;
  if (traffic_event_field_mask) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.traffic_event_field_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetWorldStateNearRealTimeResponse::release_traffic_event_field_mask() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.traffic_event_field_mask_;
  _impl_.traffic_event_field_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetWorldStateNearRealTimeResponse::unsafe_arena_release_traffic_event_field_mask() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.traffic_event_field_mask)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.traffic_event_field_mask_;
  _impl_.traffic_event_field_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetWorldStateNearRealTimeResponse::_internal_mutable_traffic_event_field_mask() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.traffic_event_field_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.traffic_event_field_mask_ = p;
  }
  return _impl_.traffic_event_field_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetWorldStateNearRealTimeResponse::mutable_traffic_event_field_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_traffic_event_field_mask();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.traffic_event_field_mask)
  return _msg;
}
inline void GetWorldStateNearRealTimeResponse::set_allocated_traffic_event_field_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* traffic_event_field_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.traffic_event_field_mask_);
  }
  if (traffic_event_field_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(traffic_event_field_mask));
    if (message_arena != submessage_arena) {
      traffic_event_field_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, traffic_event_field_mask, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.traffic_event_field_mask_ = traffic_event_field_mask;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.traffic_event_field_mask)
}

// repeated .cavnue.messages.inference.v1.Actor actors = 5 [json_name = "actors"];
inline int GetWorldStateNearRealTimeResponse::_internal_actors_size() const {
  return _impl_.actors_.size();
}
inline int GetWorldStateNearRealTimeResponse::actors_size() const {
  return _internal_actors_size();
}
inline ::cavnue::messages::inference::v1::Actor* GetWorldStateNearRealTimeResponse::mutable_actors(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.actors)
  return _internal_mutable_actors()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Actor >*
GetWorldStateNearRealTimeResponse::mutable_actors() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.actors)
  return _internal_mutable_actors();
}
inline const ::cavnue::messages::inference::v1::Actor& GetWorldStateNearRealTimeResponse::_internal_actors(int index) const {
  return _internal_actors().Get(index);
}
inline const ::cavnue::messages::inference::v1::Actor& GetWorldStateNearRealTimeResponse::actors(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.actors)
  return _internal_actors(index);
}
inline ::cavnue::messages::inference::v1::Actor* GetWorldStateNearRealTimeResponse::_internal_add_actors() {
  return _internal_mutable_actors()->Add();
}
inline ::cavnue::messages::inference::v1::Actor* GetWorldStateNearRealTimeResponse::add_actors() {
  ::cavnue::messages::inference::v1::Actor* _add = _internal_add_actors();
  // @@protoc_insertion_point(field_add:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.actors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Actor >&
GetWorldStateNearRealTimeResponse::actors() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.actors)
  return _internal_actors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Actor>&
GetWorldStateNearRealTimeResponse::_internal_actors() const {
  return _impl_.actors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Actor>*
GetWorldStateNearRealTimeResponse::_internal_mutable_actors() {
  return &_impl_.actors_;
}

// repeated .cavnue.messages.inference.v1.Event events = 6 [json_name = "events"];
inline int GetWorldStateNearRealTimeResponse::_internal_events_size() const {
  return _impl_.events_.size();
}
inline int GetWorldStateNearRealTimeResponse::events_size() const {
  return _internal_events_size();
}
inline ::cavnue::messages::inference::v1::Event* GetWorldStateNearRealTimeResponse::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.events)
  return _internal_mutable_events()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Event >*
GetWorldStateNearRealTimeResponse::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.events)
  return _internal_mutable_events();
}
inline const ::cavnue::messages::inference::v1::Event& GetWorldStateNearRealTimeResponse::_internal_events(int index) const {
  return _internal_events().Get(index);
}
inline const ::cavnue::messages::inference::v1::Event& GetWorldStateNearRealTimeResponse::events(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.events)
  return _internal_events(index);
}
inline ::cavnue::messages::inference::v1::Event* GetWorldStateNearRealTimeResponse::_internal_add_events() {
  return _internal_mutable_events()->Add();
}
inline ::cavnue::messages::inference::v1::Event* GetWorldStateNearRealTimeResponse::add_events() {
  ::cavnue::messages::inference::v1::Event* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Event >&
GetWorldStateNearRealTimeResponse::events() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.events)
  return _internal_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Event>&
GetWorldStateNearRealTimeResponse::_internal_events() const {
  return _impl_.events_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Event>*
GetWorldStateNearRealTimeResponse::_internal_mutable_events() {
  return &_impl_.events_;
}

// repeated .cavnue.messages.inference.v1.TrafficEvent traffic_events = 7 [json_name = "trafficEvents"];
inline int GetWorldStateNearRealTimeResponse::_internal_traffic_events_size() const {
  return _impl_.traffic_events_.size();
}
inline int GetWorldStateNearRealTimeResponse::traffic_events_size() const {
  return _internal_traffic_events_size();
}
inline ::cavnue::messages::inference::v1::TrafficEvent* GetWorldStateNearRealTimeResponse::mutable_traffic_events(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.traffic_events)
  return _internal_mutable_traffic_events()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::TrafficEvent >*
GetWorldStateNearRealTimeResponse::mutable_traffic_events() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.traffic_events)
  return _internal_mutable_traffic_events();
}
inline const ::cavnue::messages::inference::v1::TrafficEvent& GetWorldStateNearRealTimeResponse::_internal_traffic_events(int index) const {
  return _internal_traffic_events().Get(index);
}
inline const ::cavnue::messages::inference::v1::TrafficEvent& GetWorldStateNearRealTimeResponse::traffic_events(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.traffic_events)
  return _internal_traffic_events(index);
}
inline ::cavnue::messages::inference::v1::TrafficEvent* GetWorldStateNearRealTimeResponse::_internal_add_traffic_events() {
  return _internal_mutable_traffic_events()->Add();
}
inline ::cavnue::messages::inference::v1::TrafficEvent* GetWorldStateNearRealTimeResponse::add_traffic_events() {
  ::cavnue::messages::inference::v1::TrafficEvent* _add = _internal_add_traffic_events();
  // @@protoc_insertion_point(field_add:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.traffic_events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::TrafficEvent >&
GetWorldStateNearRealTimeResponse::traffic_events() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse.traffic_events)
  return _internal_traffic_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::TrafficEvent>&
GetWorldStateNearRealTimeResponse::_internal_traffic_events() const {
  return _impl_.traffic_events_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::TrafficEvent>*
GetWorldStateNearRealTimeResponse::_internal_mutable_traffic_events() {
  return &_impl_.traffic_events_;
}

// -------------------------------------------------------------------

// GetActorsRequest

// .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
inline bool GetActorsRequest::has_query() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.query_ != nullptr);
  return value;
}
inline void GetActorsRequest::clear_query() {
  if (_impl_.query_ != nullptr) _impl_.query_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cavnue::messages::world_state::v1::Query& GetActorsRequest::_internal_query() const {
  const ::cavnue::messages::world_state::v1::Query* p = _impl_.query_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::world_state::v1::Query&>(
      ::cavnue::messages::world_state::v1::_Query_default_instance_);
}
inline const ::cavnue::messages::world_state::v1::Query& GetActorsRequest::query() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetActorsRequest.query)
  return _internal_query();
}
inline void GetActorsRequest::unsafe_arena_set_allocated_query(
    ::cavnue::messages::world_state::v1::Query* query) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.query_);
  }
  _impl_.query_ = query;
  if (query) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.GetActorsRequest.query)
}
inline ::cavnue::messages::world_state::v1::Query* GetActorsRequest::release_query() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::world_state::v1::Query* temp = _impl_.query_;
  _impl_.query_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::world_state::v1::Query* GetActorsRequest::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.GetActorsRequest.query)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::world_state::v1::Query* temp = _impl_.query_;
  _impl_.query_ = nullptr;
  return temp;
}
inline ::cavnue::messages::world_state::v1::Query* GetActorsRequest::_internal_mutable_query() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.query_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::world_state::v1::Query>(GetArenaForAllocation());
    _impl_.query_ = p;
  }
  return _impl_.query_;
}
inline ::cavnue::messages::world_state::v1::Query* GetActorsRequest::mutable_query() {
  ::cavnue::messages::world_state::v1::Query* _msg = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetActorsRequest.query)
  return _msg;
}
inline void GetActorsRequest::set_allocated_query(::cavnue::messages::world_state::v1::Query* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.query_;
  }
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(query);
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.query_ = query;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.GetActorsRequest.query)
}

// -------------------------------------------------------------------

// GetActorsResponse

// repeated .cavnue.messages.inference.v1.Actor actors = 1 [json_name = "actors"];
inline int GetActorsResponse::_internal_actors_size() const {
  return _impl_.actors_.size();
}
inline int GetActorsResponse::actors_size() const {
  return _internal_actors_size();
}
inline ::cavnue::messages::inference::v1::Actor* GetActorsResponse::mutable_actors(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetActorsResponse.actors)
  return _internal_mutable_actors()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Actor >*
GetActorsResponse::mutable_actors() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.world_state.v1.GetActorsResponse.actors)
  return _internal_mutable_actors();
}
inline const ::cavnue::messages::inference::v1::Actor& GetActorsResponse::_internal_actors(int index) const {
  return _internal_actors().Get(index);
}
inline const ::cavnue::messages::inference::v1::Actor& GetActorsResponse::actors(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetActorsResponse.actors)
  return _internal_actors(index);
}
inline ::cavnue::messages::inference::v1::Actor* GetActorsResponse::_internal_add_actors() {
  return _internal_mutable_actors()->Add();
}
inline ::cavnue::messages::inference::v1::Actor* GetActorsResponse::add_actors() {
  ::cavnue::messages::inference::v1::Actor* _add = _internal_add_actors();
  // @@protoc_insertion_point(field_add:cavnue.messages.world_state.v1.GetActorsResponse.actors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Actor >&
GetActorsResponse::actors() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.world_state.v1.GetActorsResponse.actors)
  return _internal_actors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Actor>&
GetActorsResponse::_internal_actors() const {
  return _impl_.actors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Actor>*
GetActorsResponse::_internal_mutable_actors() {
  return &_impl_.actors_;
}

// -------------------------------------------------------------------

// GetEventsRequest

// .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
inline bool GetEventsRequest::has_query() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.query_ != nullptr);
  return value;
}
inline void GetEventsRequest::clear_query() {
  if (_impl_.query_ != nullptr) _impl_.query_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cavnue::messages::world_state::v1::Query& GetEventsRequest::_internal_query() const {
  const ::cavnue::messages::world_state::v1::Query* p = _impl_.query_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::world_state::v1::Query&>(
      ::cavnue::messages::world_state::v1::_Query_default_instance_);
}
inline const ::cavnue::messages::world_state::v1::Query& GetEventsRequest::query() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetEventsRequest.query)
  return _internal_query();
}
inline void GetEventsRequest::unsafe_arena_set_allocated_query(
    ::cavnue::messages::world_state::v1::Query* query) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.query_);
  }
  _impl_.query_ = query;
  if (query) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.GetEventsRequest.query)
}
inline ::cavnue::messages::world_state::v1::Query* GetEventsRequest::release_query() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::world_state::v1::Query* temp = _impl_.query_;
  _impl_.query_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::world_state::v1::Query* GetEventsRequest::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.GetEventsRequest.query)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::world_state::v1::Query* temp = _impl_.query_;
  _impl_.query_ = nullptr;
  return temp;
}
inline ::cavnue::messages::world_state::v1::Query* GetEventsRequest::_internal_mutable_query() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.query_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::world_state::v1::Query>(GetArenaForAllocation());
    _impl_.query_ = p;
  }
  return _impl_.query_;
}
inline ::cavnue::messages::world_state::v1::Query* GetEventsRequest::mutable_query() {
  ::cavnue::messages::world_state::v1::Query* _msg = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetEventsRequest.query)
  return _msg;
}
inline void GetEventsRequest::set_allocated_query(::cavnue::messages::world_state::v1::Query* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.query_;
  }
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(query);
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.query_ = query;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.GetEventsRequest.query)
}

// -------------------------------------------------------------------

// GetEventsResponse

// repeated .cavnue.messages.inference.v1.Event events = 1 [json_name = "events"];
inline int GetEventsResponse::_internal_events_size() const {
  return _impl_.events_.size();
}
inline int GetEventsResponse::events_size() const {
  return _internal_events_size();
}
inline ::cavnue::messages::inference::v1::Event* GetEventsResponse::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetEventsResponse.events)
  return _internal_mutable_events()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Event >*
GetEventsResponse::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.world_state.v1.GetEventsResponse.events)
  return _internal_mutable_events();
}
inline const ::cavnue::messages::inference::v1::Event& GetEventsResponse::_internal_events(int index) const {
  return _internal_events().Get(index);
}
inline const ::cavnue::messages::inference::v1::Event& GetEventsResponse::events(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetEventsResponse.events)
  return _internal_events(index);
}
inline ::cavnue::messages::inference::v1::Event* GetEventsResponse::_internal_add_events() {
  return _internal_mutable_events()->Add();
}
inline ::cavnue::messages::inference::v1::Event* GetEventsResponse::add_events() {
  ::cavnue::messages::inference::v1::Event* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:cavnue.messages.world_state.v1.GetEventsResponse.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::Event >&
GetEventsResponse::events() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.world_state.v1.GetEventsResponse.events)
  return _internal_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Event>&
GetEventsResponse::_internal_events() const {
  return _impl_.events_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::Event>*
GetEventsResponse::_internal_mutable_events() {
  return &_impl_.events_;
}

// -------------------------------------------------------------------

// GetAssetsRequest

// .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
inline bool GetAssetsRequest::has_query() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.query_ != nullptr);
  return value;
}
inline void GetAssetsRequest::clear_query() {
  if (_impl_.query_ != nullptr) _impl_.query_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cavnue::messages::world_state::v1::Query& GetAssetsRequest::_internal_query() const {
  const ::cavnue::messages::world_state::v1::Query* p = _impl_.query_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::world_state::v1::Query&>(
      ::cavnue::messages::world_state::v1::_Query_default_instance_);
}
inline const ::cavnue::messages::world_state::v1::Query& GetAssetsRequest::query() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetAssetsRequest.query)
  return _internal_query();
}
inline void GetAssetsRequest::unsafe_arena_set_allocated_query(
    ::cavnue::messages::world_state::v1::Query* query) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.query_);
  }
  _impl_.query_ = query;
  if (query) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.GetAssetsRequest.query)
}
inline ::cavnue::messages::world_state::v1::Query* GetAssetsRequest::release_query() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::world_state::v1::Query* temp = _impl_.query_;
  _impl_.query_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::world_state::v1::Query* GetAssetsRequest::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.GetAssetsRequest.query)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::world_state::v1::Query* temp = _impl_.query_;
  _impl_.query_ = nullptr;
  return temp;
}
inline ::cavnue::messages::world_state::v1::Query* GetAssetsRequest::_internal_mutable_query() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.query_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::world_state::v1::Query>(GetArenaForAllocation());
    _impl_.query_ = p;
  }
  return _impl_.query_;
}
inline ::cavnue::messages::world_state::v1::Query* GetAssetsRequest::mutable_query() {
  ::cavnue::messages::world_state::v1::Query* _msg = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetAssetsRequest.query)
  return _msg;
}
inline void GetAssetsRequest::set_allocated_query(::cavnue::messages::world_state::v1::Query* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.query_;
  }
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(query);
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.query_ = query;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.GetAssetsRequest.query)
}

// -------------------------------------------------------------------

// GetAssetsResponse

// repeated .cavnue.messages.world_state.v1.Asset assets = 1 [json_name = "assets"];
inline int GetAssetsResponse::_internal_assets_size() const {
  return _impl_.assets_.size();
}
inline int GetAssetsResponse::assets_size() const {
  return _internal_assets_size();
}
inline void GetAssetsResponse::clear_assets() {
  _internal_mutable_assets()->Clear();
}
inline ::cavnue::messages::world_state::v1::Asset* GetAssetsResponse::mutable_assets(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetAssetsResponse.assets)
  return _internal_mutable_assets()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::world_state::v1::Asset >*
GetAssetsResponse::mutable_assets() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.world_state.v1.GetAssetsResponse.assets)
  return _internal_mutable_assets();
}
inline const ::cavnue::messages::world_state::v1::Asset& GetAssetsResponse::_internal_assets(int index) const {
  return _internal_assets().Get(index);
}
inline const ::cavnue::messages::world_state::v1::Asset& GetAssetsResponse::assets(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetAssetsResponse.assets)
  return _internal_assets(index);
}
inline ::cavnue::messages::world_state::v1::Asset* GetAssetsResponse::_internal_add_assets() {
  return _internal_mutable_assets()->Add();
}
inline ::cavnue::messages::world_state::v1::Asset* GetAssetsResponse::add_assets() {
  ::cavnue::messages::world_state::v1::Asset* _add = _internal_add_assets();
  // @@protoc_insertion_point(field_add:cavnue.messages.world_state.v1.GetAssetsResponse.assets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::world_state::v1::Asset >&
GetAssetsResponse::assets() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.world_state.v1.GetAssetsResponse.assets)
  return _internal_assets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::world_state::v1::Asset>&
GetAssetsResponse::_internal_assets() const {
  return _impl_.assets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::world_state::v1::Asset>*
GetAssetsResponse::_internal_mutable_assets() {
  return &_impl_.assets_;
}

// -------------------------------------------------------------------

// GetTrafficAggregationRequest

// .cavnue.messages.world_state.v1.TimeFilter time_filter = 1 [json_name = "timeFilter"];
inline bool GetTrafficAggregationRequest::has_time_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_filter_ != nullptr);
  return value;
}
inline void GetTrafficAggregationRequest::clear_time_filter() {
  if (_impl_.time_filter_ != nullptr) _impl_.time_filter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cavnue::messages::world_state::v1::TimeFilter& GetTrafficAggregationRequest::_internal_time_filter() const {
  const ::cavnue::messages::world_state::v1::TimeFilter* p = _impl_.time_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::world_state::v1::TimeFilter&>(
      ::cavnue::messages::world_state::v1::_TimeFilter_default_instance_);
}
inline const ::cavnue::messages::world_state::v1::TimeFilter& GetTrafficAggregationRequest::time_filter() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetTrafficAggregationRequest.time_filter)
  return _internal_time_filter();
}
inline void GetTrafficAggregationRequest::unsafe_arena_set_allocated_time_filter(
    ::cavnue::messages::world_state::v1::TimeFilter* time_filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_filter_);
  }
  _impl_.time_filter_ = time_filter;
  if (time_filter) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.GetTrafficAggregationRequest.time_filter)
}
inline ::cavnue::messages::world_state::v1::TimeFilter* GetTrafficAggregationRequest::release_time_filter() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::world_state::v1::TimeFilter* temp = _impl_.time_filter_;
  _impl_.time_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::world_state::v1::TimeFilter* GetTrafficAggregationRequest::unsafe_arena_release_time_filter() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.GetTrafficAggregationRequest.time_filter)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::world_state::v1::TimeFilter* temp = _impl_.time_filter_;
  _impl_.time_filter_ = nullptr;
  return temp;
}
inline ::cavnue::messages::world_state::v1::TimeFilter* GetTrafficAggregationRequest::_internal_mutable_time_filter() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.time_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::world_state::v1::TimeFilter>(GetArenaForAllocation());
    _impl_.time_filter_ = p;
  }
  return _impl_.time_filter_;
}
inline ::cavnue::messages::world_state::v1::TimeFilter* GetTrafficAggregationRequest::mutable_time_filter() {
  ::cavnue::messages::world_state::v1::TimeFilter* _msg = _internal_mutable_time_filter();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetTrafficAggregationRequest.time_filter)
  return _msg;
}
inline void GetTrafficAggregationRequest::set_allocated_time_filter(::cavnue::messages::world_state::v1::TimeFilter* time_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.time_filter_;
  }
  if (time_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(time_filter);
    if (message_arena != submessage_arena) {
      time_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_filter, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.time_filter_ = time_filter;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.GetTrafficAggregationRequest.time_filter)
}

// .cavnue.messages.world_state.v1.GetTrafficAggregationRequest.Frequency frequency = 2 [json_name = "frequency"];
inline void GetTrafficAggregationRequest::clear_frequency() {
  _impl_.frequency_ = 0;
}
inline ::cavnue::messages::world_state::v1::GetTrafficAggregationRequest_Frequency GetTrafficAggregationRequest::frequency() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetTrafficAggregationRequest.frequency)
  return _internal_frequency();
}
inline void GetTrafficAggregationRequest::set_frequency(::cavnue::messages::world_state::v1::GetTrafficAggregationRequest_Frequency value) {
   _internal_set_frequency(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.world_state.v1.GetTrafficAggregationRequest.frequency)
}
inline ::cavnue::messages::world_state::v1::GetTrafficAggregationRequest_Frequency GetTrafficAggregationRequest::_internal_frequency() const {
  return static_cast<::cavnue::messages::world_state::v1::GetTrafficAggregationRequest_Frequency>(_impl_.frequency_);
}
inline void GetTrafficAggregationRequest::_internal_set_frequency(::cavnue::messages::world_state::v1::GetTrafficAggregationRequest_Frequency value) {
  ;
  _impl_.frequency_ = value;
}

// -------------------------------------------------------------------

// GetTrafficAggregationResponse

// repeated .cavnue.messages.inference.v1.LaneSegmentAggregation lane_aggregations = 1 [json_name = "laneAggregations"];
inline int GetTrafficAggregationResponse::_internal_lane_aggregations_size() const {
  return _impl_.lane_aggregations_.size();
}
inline int GetTrafficAggregationResponse::lane_aggregations_size() const {
  return _internal_lane_aggregations_size();
}
inline ::cavnue::messages::inference::v1::LaneSegmentAggregation* GetTrafficAggregationResponse::mutable_lane_aggregations(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetTrafficAggregationResponse.lane_aggregations)
  return _internal_mutable_lane_aggregations()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::LaneSegmentAggregation >*
GetTrafficAggregationResponse::mutable_lane_aggregations() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.world_state.v1.GetTrafficAggregationResponse.lane_aggregations)
  return _internal_mutable_lane_aggregations();
}
inline const ::cavnue::messages::inference::v1::LaneSegmentAggregation& GetTrafficAggregationResponse::_internal_lane_aggregations(int index) const {
  return _internal_lane_aggregations().Get(index);
}
inline const ::cavnue::messages::inference::v1::LaneSegmentAggregation& GetTrafficAggregationResponse::lane_aggregations(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetTrafficAggregationResponse.lane_aggregations)
  return _internal_lane_aggregations(index);
}
inline ::cavnue::messages::inference::v1::LaneSegmentAggregation* GetTrafficAggregationResponse::_internal_add_lane_aggregations() {
  return _internal_mutable_lane_aggregations()->Add();
}
inline ::cavnue::messages::inference::v1::LaneSegmentAggregation* GetTrafficAggregationResponse::add_lane_aggregations() {
  ::cavnue::messages::inference::v1::LaneSegmentAggregation* _add = _internal_add_lane_aggregations();
  // @@protoc_insertion_point(field_add:cavnue.messages.world_state.v1.GetTrafficAggregationResponse.lane_aggregations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::LaneSegmentAggregation >&
GetTrafficAggregationResponse::lane_aggregations() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.world_state.v1.GetTrafficAggregationResponse.lane_aggregations)
  return _internal_lane_aggregations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::LaneSegmentAggregation>&
GetTrafficAggregationResponse::_internal_lane_aggregations() const {
  return _impl_.lane_aggregations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::LaneSegmentAggregation>*
GetTrafficAggregationResponse::_internal_mutable_lane_aggregations() {
  return &_impl_.lane_aggregations_;
}

// repeated .cavnue.messages.inference.v1.RoadSegmentAggregation road_aggregations = 2 [json_name = "roadAggregations"];
inline int GetTrafficAggregationResponse::_internal_road_aggregations_size() const {
  return _impl_.road_aggregations_.size();
}
inline int GetTrafficAggregationResponse::road_aggregations_size() const {
  return _internal_road_aggregations_size();
}
inline ::cavnue::messages::inference::v1::RoadSegmentAggregation* GetTrafficAggregationResponse::mutable_road_aggregations(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetTrafficAggregationResponse.road_aggregations)
  return _internal_mutable_road_aggregations()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::RoadSegmentAggregation >*
GetTrafficAggregationResponse::mutable_road_aggregations() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.world_state.v1.GetTrafficAggregationResponse.road_aggregations)
  return _internal_mutable_road_aggregations();
}
inline const ::cavnue::messages::inference::v1::RoadSegmentAggregation& GetTrafficAggregationResponse::_internal_road_aggregations(int index) const {
  return _internal_road_aggregations().Get(index);
}
inline const ::cavnue::messages::inference::v1::RoadSegmentAggregation& GetTrafficAggregationResponse::road_aggregations(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetTrafficAggregationResponse.road_aggregations)
  return _internal_road_aggregations(index);
}
inline ::cavnue::messages::inference::v1::RoadSegmentAggregation* GetTrafficAggregationResponse::_internal_add_road_aggregations() {
  return _internal_mutable_road_aggregations()->Add();
}
inline ::cavnue::messages::inference::v1::RoadSegmentAggregation* GetTrafficAggregationResponse::add_road_aggregations() {
  ::cavnue::messages::inference::v1::RoadSegmentAggregation* _add = _internal_add_road_aggregations();
  // @@protoc_insertion_point(field_add:cavnue.messages.world_state.v1.GetTrafficAggregationResponse.road_aggregations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::RoadSegmentAggregation >&
GetTrafficAggregationResponse::road_aggregations() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.world_state.v1.GetTrafficAggregationResponse.road_aggregations)
  return _internal_road_aggregations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::RoadSegmentAggregation>&
GetTrafficAggregationResponse::_internal_road_aggregations() const {
  return _impl_.road_aggregations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::RoadSegmentAggregation>*
GetTrafficAggregationResponse::_internal_mutable_road_aggregations() {
  return &_impl_.road_aggregations_;
}

// -------------------------------------------------------------------

// GetAverageDailyTrafficRequest

// .cavnue.messages.world_state.v1.TimeFilter time_filter = 1 [json_name = "timeFilter"];
inline bool GetAverageDailyTrafficRequest::has_time_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_filter_ != nullptr);
  return value;
}
inline void GetAverageDailyTrafficRequest::clear_time_filter() {
  if (_impl_.time_filter_ != nullptr) _impl_.time_filter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cavnue::messages::world_state::v1::TimeFilter& GetAverageDailyTrafficRequest::_internal_time_filter() const {
  const ::cavnue::messages::world_state::v1::TimeFilter* p = _impl_.time_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::world_state::v1::TimeFilter&>(
      ::cavnue::messages::world_state::v1::_TimeFilter_default_instance_);
}
inline const ::cavnue::messages::world_state::v1::TimeFilter& GetAverageDailyTrafficRequest::time_filter() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetAverageDailyTrafficRequest.time_filter)
  return _internal_time_filter();
}
inline void GetAverageDailyTrafficRequest::unsafe_arena_set_allocated_time_filter(
    ::cavnue::messages::world_state::v1::TimeFilter* time_filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_filter_);
  }
  _impl_.time_filter_ = time_filter;
  if (time_filter) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.GetAverageDailyTrafficRequest.time_filter)
}
inline ::cavnue::messages::world_state::v1::TimeFilter* GetAverageDailyTrafficRequest::release_time_filter() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::world_state::v1::TimeFilter* temp = _impl_.time_filter_;
  _impl_.time_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::world_state::v1::TimeFilter* GetAverageDailyTrafficRequest::unsafe_arena_release_time_filter() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.GetAverageDailyTrafficRequest.time_filter)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::world_state::v1::TimeFilter* temp = _impl_.time_filter_;
  _impl_.time_filter_ = nullptr;
  return temp;
}
inline ::cavnue::messages::world_state::v1::TimeFilter* GetAverageDailyTrafficRequest::_internal_mutable_time_filter() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.time_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::world_state::v1::TimeFilter>(GetArenaForAllocation());
    _impl_.time_filter_ = p;
  }
  return _impl_.time_filter_;
}
inline ::cavnue::messages::world_state::v1::TimeFilter* GetAverageDailyTrafficRequest::mutable_time_filter() {
  ::cavnue::messages::world_state::v1::TimeFilter* _msg = _internal_mutable_time_filter();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetAverageDailyTrafficRequest.time_filter)
  return _msg;
}
inline void GetAverageDailyTrafficRequest::set_allocated_time_filter(::cavnue::messages::world_state::v1::TimeFilter* time_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.time_filter_;
  }
  if (time_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(time_filter);
    if (message_arena != submessage_arena) {
      time_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_filter, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.time_filter_ = time_filter;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.GetAverageDailyTrafficRequest.time_filter)
}

// -------------------------------------------------------------------

// GetAverageDailyTrafficResponse

// repeated .cavnue.messages.inference.v1.MonthlyAverageDailyTrafficCalculation madt = 1 [json_name = "madt"];
inline int GetAverageDailyTrafficResponse::_internal_madt_size() const {
  return _impl_.madt_.size();
}
inline int GetAverageDailyTrafficResponse::madt_size() const {
  return _internal_madt_size();
}
inline ::cavnue::messages::inference::v1::MonthlyAverageDailyTrafficCalculation* GetAverageDailyTrafficResponse::mutable_madt(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetAverageDailyTrafficResponse.madt)
  return _internal_mutable_madt()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::MonthlyAverageDailyTrafficCalculation >*
GetAverageDailyTrafficResponse::mutable_madt() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.world_state.v1.GetAverageDailyTrafficResponse.madt)
  return _internal_mutable_madt();
}
inline const ::cavnue::messages::inference::v1::MonthlyAverageDailyTrafficCalculation& GetAverageDailyTrafficResponse::_internal_madt(int index) const {
  return _internal_madt().Get(index);
}
inline const ::cavnue::messages::inference::v1::MonthlyAverageDailyTrafficCalculation& GetAverageDailyTrafficResponse::madt(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetAverageDailyTrafficResponse.madt)
  return _internal_madt(index);
}
inline ::cavnue::messages::inference::v1::MonthlyAverageDailyTrafficCalculation* GetAverageDailyTrafficResponse::_internal_add_madt() {
  return _internal_mutable_madt()->Add();
}
inline ::cavnue::messages::inference::v1::MonthlyAverageDailyTrafficCalculation* GetAverageDailyTrafficResponse::add_madt() {
  ::cavnue::messages::inference::v1::MonthlyAverageDailyTrafficCalculation* _add = _internal_add_madt();
  // @@protoc_insertion_point(field_add:cavnue.messages.world_state.v1.GetAverageDailyTrafficResponse.madt)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::inference::v1::MonthlyAverageDailyTrafficCalculation >&
GetAverageDailyTrafficResponse::madt() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.world_state.v1.GetAverageDailyTrafficResponse.madt)
  return _internal_madt();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::MonthlyAverageDailyTrafficCalculation>&
GetAverageDailyTrafficResponse::_internal_madt() const {
  return _impl_.madt_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::inference::v1::MonthlyAverageDailyTrafficCalculation>*
GetAverageDailyTrafficResponse::_internal_mutable_madt() {
  return &_impl_.madt_;
}

// .cavnue.messages.inference.v1.AnnualAverageDailyTrafficCalculation aadt = 2 [json_name = "aadt"];
inline bool GetAverageDailyTrafficResponse::has_aadt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.aadt_ != nullptr);
  return value;
}
inline const ::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation& GetAverageDailyTrafficResponse::_internal_aadt() const {
  const ::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation* p = _impl_.aadt_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation&>(
      ::cavnue::messages::inference::v1::_AnnualAverageDailyTrafficCalculation_default_instance_);
}
inline const ::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation& GetAverageDailyTrafficResponse::aadt() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.world_state.v1.GetAverageDailyTrafficResponse.aadt)
  return _internal_aadt();
}
inline void GetAverageDailyTrafficResponse::unsafe_arena_set_allocated_aadt(
    ::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation* aadt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aadt_);
  }
  _impl_.aadt_ = aadt;
  if (aadt) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.world_state.v1.GetAverageDailyTrafficResponse.aadt)
}
inline ::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation* GetAverageDailyTrafficResponse::release_aadt() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation* temp = _impl_.aadt_;
  _impl_.aadt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation* GetAverageDailyTrafficResponse::unsafe_arena_release_aadt() {
  // @@protoc_insertion_point(field_release:cavnue.messages.world_state.v1.GetAverageDailyTrafficResponse.aadt)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation* temp = _impl_.aadt_;
  _impl_.aadt_ = nullptr;
  return temp;
}
inline ::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation* GetAverageDailyTrafficResponse::_internal_mutable_aadt() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.aadt_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation>(GetArenaForAllocation());
    _impl_.aadt_ = p;
  }
  return _impl_.aadt_;
}
inline ::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation* GetAverageDailyTrafficResponse::mutable_aadt() {
  ::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation* _msg = _internal_mutable_aadt();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.world_state.v1.GetAverageDailyTrafficResponse.aadt)
  return _msg;
}
inline void GetAverageDailyTrafficResponse::set_allocated_aadt(::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation* aadt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aadt_);
  }
  if (aadt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aadt));
    if (message_arena != submessage_arena) {
      aadt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aadt, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.aadt_ = aadt;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.world_state.v1.GetAverageDailyTrafficResponse.aadt)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace world_state
}  // namespace messages
}  // namespace cavnue


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::cavnue::messages::world_state::v1::GetTrafficAggregationRequest_Frequency> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::cavnue::messages::world_state::v1::GetTrafficAggregationRequest_Frequency>() {
  return ::cavnue::messages::world_state::v1::GetTrafficAggregationRequest_Frequency_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/world_state/v1/actor.proto

#include "cavnue/messages/world_state/v1/actor.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cavnue {
namespace messages {
namespace world_state {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR Actor::Actor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr} {}
struct ActorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActorDefaultTypeInternal() {}
  union {
    Actor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActorDefaultTypeInternal _Actor_default_instance_;
}  // namespace v1
}  // namespace world_state
}  // namespace messages
}  // namespace cavnue
static ::_pb::Metadata file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2factor_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cavnue_2fmessages_2fworld_5fstate_2fv1_2factor_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cavnue_2fmessages_2fworld_5fstate_2fv1_2factor_2eproto = nullptr;
const ::uint32_t TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2factor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Actor, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Actor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Actor, _impl_.header_),
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 9, -1, sizeof(::cavnue::messages::world_state::v1::Actor)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cavnue::messages::world_state::v1::_Actor_default_instance_._instance,
};
const char descriptor_table_protodef_cavnue_2fmessages_2fworld_5fstate_2fv1_2factor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n*cavnue/messages/world_state/v1/actor.p"
    "roto\022\036cavnue.messages.world_state.v1\032&ca"
    "vnue/messages/common/v1/common.proto\"B\n\005"
    "Actor\0229\n\006header\030\001 \001(\0132!.cavnue.messages."
    "common.v1.HeaderR\006headerb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2factor_2eproto_deps[1] =
    {
        &::descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto,
};
static ::absl::once_flag descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2factor_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2factor_2eproto = {
    false,
    false,
    192,
    descriptor_table_protodef_cavnue_2fmessages_2fworld_5fstate_2fv1_2factor_2eproto,
    "cavnue/messages/world_state/v1/actor.proto",
    &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2factor_2eproto_once,
    descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2factor_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2factor_2eproto::offsets,
    file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2factor_2eproto,
    file_level_enum_descriptors_cavnue_2fmessages_2fworld_5fstate_2fv1_2factor_2eproto,
    file_level_service_descriptors_cavnue_2fmessages_2fworld_5fstate_2fv1_2factor_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2factor_2eproto_getter() {
  return &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2factor_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cavnue_2fmessages_2fworld_5fstate_2fv1_2factor_2eproto(&descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2factor_2eproto);
namespace cavnue {
namespace messages {
namespace world_state {
namespace v1 {
// ===================================================================

class Actor::_Internal {
 public:
  using HasBits = decltype(std::declval<Actor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Actor, _impl_._has_bits_);
  static const ::cavnue::messages::common::v1::Header& header(const Actor* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cavnue::messages::common::v1::Header&
Actor::_Internal::header(const Actor* msg) {
  return *msg->_impl_.header_;
}
void Actor::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Actor::Actor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.Actor)
}
Actor::Actor(const Actor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Actor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_ = new ::cavnue::messages::common::v1::Header(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.Actor)
}

inline void Actor::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
  };
}

Actor::~Actor() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.Actor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Actor::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
}

void Actor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Actor::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.Actor)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Actor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Actor::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.Actor)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.Actor)
  return target;
}

::size_t Actor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.Actor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Actor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Actor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Actor::GetClassData() const { return &_class_data_; }


void Actor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Actor*>(&to_msg);
  auto& from = static_cast<const Actor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.Actor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_header()->::cavnue::messages::common::v1::Header::MergeFrom(
        from._internal_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Actor::CopyFrom(const Actor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.Actor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Actor::IsInitialized() const {
  return true;
}

void Actor::InternalSwap(Actor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Actor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2factor_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2factor_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2factor_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace world_state
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::Actor*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::Actor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::Actor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/world_state/v1/query.proto

#include "cavnue/messages/world_state/v1/query.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cavnue {
namespace messages {
namespace world_state {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR TimeFilter::TimeFilter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.start_ts_)*/nullptr
  , /*decltype(_impl_.end_ts_)*/nullptr} {}
struct TimeFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimeFilterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimeFilterDefaultTypeInternal() {}
  union {
    TimeFilter _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimeFilterDefaultTypeInternal _TimeFilter_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Query_ActorIdFilter::Query_ActorIdFilter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.actor_ids_)*/ {}
  ,/* _impl_._actor_ids_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Query_ActorIdFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Query_ActorIdFilterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Query_ActorIdFilterDefaultTypeInternal() {}
  union {
    Query_ActorIdFilter _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Query_ActorIdFilterDefaultTypeInternal _Query_ActorIdFilter_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Query_SpatialFilter::Query_SpatialFilter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bb_region_)*/nullptr} {}
struct Query_SpatialFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Query_SpatialFilterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Query_SpatialFilterDefaultTypeInternal() {}
  union {
    Query_SpatialFilter _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Query_SpatialFilterDefaultTypeInternal _Query_SpatialFilter_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Query::Query(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dataset_identifier_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.trace_context_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.time_filter_)*/nullptr
  , /*decltype(_impl_.actors_filter_)*/nullptr
  , /*decltype(_impl_.spatial_filter_)*/nullptr
  , /*decltype(_impl_.dataset_run_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.dataset_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.num_messages_)*/ 0u
} {}
struct QueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDefaultTypeInternal() {}
  union {
    Query _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDefaultTypeInternal _Query_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Asset::Asset(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.identifier_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.wgs84_position_)*/nullptr
  , /*decltype(_impl_.sensor_id_)*/ ::int64_t{0}
} {}
struct AssetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetDefaultTypeInternal() {}
  union {
    Asset _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetDefaultTypeInternal _Asset_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Dataset::Dataset(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.identifier_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.project_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sim_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.start_ts_)*/nullptr
  , /*decltype(_impl_.end_ts_)*/nullptr
  , /*decltype(_impl_.run_start_ts_)*/nullptr
  , /*decltype(_impl_.run_end_ts_)*/nullptr
  , /*decltype(_impl_.dataset_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.project_number_)*/ ::int64_t{0}

  , /*decltype(_impl_.cohort_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.dataset_type_)*/ 0
} {}
struct DatasetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DatasetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DatasetDefaultTypeInternal() {}
  union {
    Dataset _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DatasetDefaultTypeInternal _Dataset_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DatasetRun::DatasetRun(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.identifier_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.project_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sim_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.run_ts_)*/nullptr
  , /*decltype(_impl_.start_ts_)*/nullptr
  , /*decltype(_impl_.end_ts_)*/nullptr
  , /*decltype(_impl_.run_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.dataset_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.project_number_)*/ ::int64_t{0}

  , /*decltype(_impl_.dataset_type_)*/ 0
} {}
struct DatasetRunDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DatasetRunDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DatasetRunDefaultTypeInternal() {}
  union {
    DatasetRun _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DatasetRunDefaultTypeInternal _DatasetRun_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetServiceApiRequest::GetServiceApiRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.empty_)*/nullptr} {}
struct GetServiceApiRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetServiceApiRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetServiceApiRequestDefaultTypeInternal() {}
  union {
    GetServiceApiRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetServiceApiRequestDefaultTypeInternal _GetServiceApiRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetServiceApiResponse::GetServiceApiResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.api_)*/nullptr} {}
struct GetServiceApiResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetServiceApiResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetServiceApiResponseDefaultTypeInternal() {}
  union {
    GetServiceApiResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetServiceApiResponseDefaultTypeInternal _GetServiceApiResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetDatasetRunsRequest::GetDatasetRunsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dataset_identifier_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dataset_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.dataset_run_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.sim_only_)*/ false

  , /*decltype(_impl_.type_)*/ 0
} {}
struct GetDatasetRunsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDatasetRunsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDatasetRunsRequestDefaultTypeInternal() {}
  union {
    GetDatasetRunsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDatasetRunsRequestDefaultTypeInternal _GetDatasetRunsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetDatasetRunsResponse::GetDatasetRunsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.runs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetDatasetRunsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDatasetRunsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDatasetRunsResponseDefaultTypeInternal() {}
  union {
    GetDatasetRunsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDatasetRunsResponseDefaultTypeInternal _GetDatasetRunsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetDatasetsRequest::GetDatasetsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sim_only_)*/ false
} {}
struct GetDatasetsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDatasetsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDatasetsRequestDefaultTypeInternal() {}
  union {
    GetDatasetsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDatasetsRequestDefaultTypeInternal _GetDatasetsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetDatasetsResponse::GetDatasetsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.datasets_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetDatasetsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDatasetsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDatasetsResponseDefaultTypeInternal() {}
  union {
    GetDatasetsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDatasetsResponseDefaultTypeInternal _GetDatasetsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetWorldStateRequest::GetWorldStateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.query_)*/nullptr} {}
struct GetWorldStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetWorldStateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetWorldStateRequestDefaultTypeInternal() {}
  union {
    GetWorldStateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetWorldStateRequestDefaultTypeInternal _GetWorldStateRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetWorldStateResponse::GetWorldStateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.actors_)*/{}
  , /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_.assets_)*/{}
  , /*decltype(_impl_.traffic_events_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetWorldStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetWorldStateResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetWorldStateResponseDefaultTypeInternal() {}
  union {
    GetWorldStateResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetWorldStateResponseDefaultTypeInternal _GetWorldStateResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetWorldStateNearRealTimeRequest::GetWorldStateNearRealTimeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.time_filter_)*/nullptr
  , /*decltype(_impl_.actor_field_request_)*/nullptr
  , /*decltype(_impl_.event_field_request_)*/nullptr
  , /*decltype(_impl_.traffic_event_field_request_)*/nullptr} {}
struct GetWorldStateNearRealTimeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetWorldStateNearRealTimeRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetWorldStateNearRealTimeRequestDefaultTypeInternal() {}
  union {
    GetWorldStateNearRealTimeRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetWorldStateNearRealTimeRequestDefaultTypeInternal _GetWorldStateNearRealTimeRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetWorldStateNearRealTimeResponse::GetWorldStateNearRealTimeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.actors_)*/{}
  , /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_.traffic_events_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.actor_field_mask_)*/nullptr
  , /*decltype(_impl_.event_field_mask_)*/nullptr
  , /*decltype(_impl_.traffic_event_field_mask_)*/nullptr} {}
struct GetWorldStateNearRealTimeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetWorldStateNearRealTimeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetWorldStateNearRealTimeResponseDefaultTypeInternal() {}
  union {
    GetWorldStateNearRealTimeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetWorldStateNearRealTimeResponseDefaultTypeInternal _GetWorldStateNearRealTimeResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetActorsRequest::GetActorsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.query_)*/nullptr} {}
struct GetActorsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetActorsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetActorsRequestDefaultTypeInternal() {}
  union {
    GetActorsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetActorsRequestDefaultTypeInternal _GetActorsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetActorsResponse::GetActorsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.actors_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetActorsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetActorsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetActorsResponseDefaultTypeInternal() {}
  union {
    GetActorsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetActorsResponseDefaultTypeInternal _GetActorsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetEventsRequest::GetEventsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.query_)*/nullptr} {}
struct GetEventsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetEventsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetEventsRequestDefaultTypeInternal() {}
  union {
    GetEventsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetEventsRequestDefaultTypeInternal _GetEventsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetEventsResponse::GetEventsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetEventsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetEventsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetEventsResponseDefaultTypeInternal() {}
  union {
    GetEventsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetEventsResponseDefaultTypeInternal _GetEventsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetAssetsRequest::GetAssetsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.query_)*/nullptr} {}
struct GetAssetsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAssetsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAssetsRequestDefaultTypeInternal() {}
  union {
    GetAssetsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAssetsRequestDefaultTypeInternal _GetAssetsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetAssetsResponse::GetAssetsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.assets_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetAssetsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAssetsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAssetsResponseDefaultTypeInternal() {}
  union {
    GetAssetsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAssetsResponseDefaultTypeInternal _GetAssetsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetTrafficAggregationRequest::GetTrafficAggregationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.time_filter_)*/nullptr
  , /*decltype(_impl_.frequency_)*/ 0
} {}
struct GetTrafficAggregationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTrafficAggregationRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTrafficAggregationRequestDefaultTypeInternal() {}
  union {
    GetTrafficAggregationRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTrafficAggregationRequestDefaultTypeInternal _GetTrafficAggregationRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetTrafficAggregationResponse::GetTrafficAggregationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lane_aggregations_)*/{}
  , /*decltype(_impl_.road_aggregations_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTrafficAggregationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTrafficAggregationResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTrafficAggregationResponseDefaultTypeInternal() {}
  union {
    GetTrafficAggregationResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTrafficAggregationResponseDefaultTypeInternal _GetTrafficAggregationResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetAverageDailyTrafficRequest::GetAverageDailyTrafficRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.time_filter_)*/nullptr} {}
struct GetAverageDailyTrafficRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAverageDailyTrafficRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAverageDailyTrafficRequestDefaultTypeInternal() {}
  union {
    GetAverageDailyTrafficRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAverageDailyTrafficRequestDefaultTypeInternal _GetAverageDailyTrafficRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetAverageDailyTrafficResponse::GetAverageDailyTrafficResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.madt_)*/{}
  , /*decltype(_impl_.aadt_)*/nullptr} {}
struct GetAverageDailyTrafficResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAverageDailyTrafficResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAverageDailyTrafficResponseDefaultTypeInternal() {}
  union {
    GetAverageDailyTrafficResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAverageDailyTrafficResponseDefaultTypeInternal _GetAverageDailyTrafficResponse_default_instance_;
}  // namespace v1
}  // namespace world_state
}  // namespace messages
}  // namespace cavnue
static ::_pb::Metadata file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto[27];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto = nullptr;
const ::uint32_t TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::TimeFilter, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::TimeFilter, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::TimeFilter, _impl_.start_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::TimeFilter, _impl_.end_ts_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query_ActorIdFilter, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query_ActorIdFilter, _impl_.actor_ids_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query_SpatialFilter, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query_SpatialFilter, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query_SpatialFilter, _impl_.bb_region_),
    0,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query, _impl_.dataset_run_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query, _impl_.time_filter_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query, _impl_.actors_filter_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query, _impl_.spatial_filter_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query, _impl_.dataset_identifier_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query, _impl_.dataset_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query, _impl_.num_messages_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Query, _impl_.trace_context_),
    5,
    2,
    3,
    4,
    0,
    6,
    7,
    1,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Asset, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Asset, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Asset, _impl_.sensor_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Asset, _impl_.identifier_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Asset, _impl_.wgs84_position_),
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Dataset, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Dataset, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Dataset, _impl_.dataset_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Dataset, _impl_.identifier_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Dataset, _impl_.project_number_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Dataset, _impl_.project_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Dataset, _impl_.start_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Dataset, _impl_.end_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Dataset, _impl_.dataset_type_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Dataset, _impl_.sim_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Dataset, _impl_.cohort_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Dataset, _impl_.run_start_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::Dataset, _impl_.run_end_ts_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    ~0u,
    ~0u,
    ~0u,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::DatasetRun, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::DatasetRun, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::DatasetRun, _impl_.run_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::DatasetRun, _impl_.run_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::DatasetRun, _impl_.dataset_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::DatasetRun, _impl_.identifier_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::DatasetRun, _impl_.project_number_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::DatasetRun, _impl_.project_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::DatasetRun, _impl_.start_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::DatasetRun, _impl_.end_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::DatasetRun, _impl_.dataset_type_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::DatasetRun, _impl_.sim_id_),
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    1,
    2,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetServiceApiRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetServiceApiRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetServiceApiRequest, _impl_.empty_),
    0,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetServiceApiResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetServiceApiResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetServiceApiResponse, _impl_.api_),
    0,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetDatasetRunsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetDatasetRunsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetDatasetRunsRequest, _impl_.dataset_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetDatasetRunsRequest, _impl_.dataset_run_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetDatasetRunsRequest, _impl_.sim_only_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetDatasetRunsRequest, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetDatasetRunsRequest, _impl_.dataset_identifier_),
    1,
    2,
    3,
    4,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetDatasetRunsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetDatasetRunsResponse, _impl_.runs_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetDatasetsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetDatasetsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetDatasetsRequest, _impl_.sim_only_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetDatasetsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetDatasetsResponse, _impl_.datasets_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetWorldStateRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetWorldStateRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetWorldStateRequest, _impl_.query_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetWorldStateResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetWorldStateResponse, _impl_.actors_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetWorldStateResponse, _impl_.events_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetWorldStateResponse, _impl_.assets_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetWorldStateResponse, _impl_.traffic_events_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetWorldStateNearRealTimeRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetWorldStateNearRealTimeRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetWorldStateNearRealTimeRequest, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetWorldStateNearRealTimeRequest, _impl_.time_filter_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetWorldStateNearRealTimeRequest, _impl_.actor_field_request_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetWorldStateNearRealTimeRequest, _impl_.event_field_request_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetWorldStateNearRealTimeRequest, _impl_.traffic_event_field_request_),
    0,
    1,
    2,
    3,
    4,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetWorldStateNearRealTimeResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetWorldStateNearRealTimeResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetWorldStateNearRealTimeResponse, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetWorldStateNearRealTimeResponse, _impl_.actor_field_mask_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetWorldStateNearRealTimeResponse, _impl_.event_field_mask_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetWorldStateNearRealTimeResponse, _impl_.traffic_event_field_mask_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetWorldStateNearRealTimeResponse, _impl_.actors_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetWorldStateNearRealTimeResponse, _impl_.events_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetWorldStateNearRealTimeResponse, _impl_.traffic_events_),
    0,
    1,
    2,
    3,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetActorsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetActorsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetActorsRequest, _impl_.query_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetActorsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetActorsResponse, _impl_.actors_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetEventsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetEventsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetEventsRequest, _impl_.query_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetEventsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetEventsResponse, _impl_.events_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetAssetsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetAssetsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetAssetsRequest, _impl_.query_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetAssetsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetAssetsResponse, _impl_.assets_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetTrafficAggregationRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetTrafficAggregationRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetTrafficAggregationRequest, _impl_.time_filter_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetTrafficAggregationRequest, _impl_.frequency_),
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetTrafficAggregationResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetTrafficAggregationResponse, _impl_.lane_aggregations_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetTrafficAggregationResponse, _impl_.road_aggregations_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetAverageDailyTrafficRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetAverageDailyTrafficRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetAverageDailyTrafficRequest, _impl_.time_filter_),
    0,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetAverageDailyTrafficResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetAverageDailyTrafficResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetAverageDailyTrafficResponse, _impl_.madt_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetAverageDailyTrafficResponse, _impl_.aadt_),
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::cavnue::messages::world_state::v1::TimeFilter)},
        { 12, -1, -1, sizeof(::cavnue::messages::world_state::v1::Query_ActorIdFilter)},
        { 21, 30, -1, sizeof(::cavnue::messages::world_state::v1::Query_SpatialFilter)},
        { 31, 47, -1, sizeof(::cavnue::messages::world_state::v1::Query)},
        { 55, 66, -1, sizeof(::cavnue::messages::world_state::v1::Asset)},
        { 69, 88, -1, sizeof(::cavnue::messages::world_state::v1::Dataset)},
        { 99, 117, -1, sizeof(::cavnue::messages::world_state::v1::DatasetRun)},
        { 127, 136, -1, sizeof(::cavnue::messages::world_state::v1::GetServiceApiRequest)},
        { 137, 146, -1, sizeof(::cavnue::messages::world_state::v1::GetServiceApiResponse)},
        { 147, 160, -1, sizeof(::cavnue::messages::world_state::v1::GetDatasetRunsRequest)},
        { 165, -1, -1, sizeof(::cavnue::messages::world_state::v1::GetDatasetRunsResponse)},
        { 174, 183, -1, sizeof(::cavnue::messages::world_state::v1::GetDatasetsRequest)},
        { 184, -1, -1, sizeof(::cavnue::messages::world_state::v1::GetDatasetsResponse)},
        { 193, 202, -1, sizeof(::cavnue::messages::world_state::v1::GetWorldStateRequest)},
        { 203, -1, -1, sizeof(::cavnue::messages::world_state::v1::GetWorldStateResponse)},
        { 215, 228, -1, sizeof(::cavnue::messages::world_state::v1::GetWorldStateNearRealTimeRequest)},
        { 233, 248, -1, sizeof(::cavnue::messages::world_state::v1::GetWorldStateNearRealTimeResponse)},
        { 255, 264, -1, sizeof(::cavnue::messages::world_state::v1::GetActorsRequest)},
        { 265, -1, -1, sizeof(::cavnue::messages::world_state::v1::GetActorsResponse)},
        { 274, 283, -1, sizeof(::cavnue::messages::world_state::v1::GetEventsRequest)},
        { 284, -1, -1, sizeof(::cavnue::messages::world_state::v1::GetEventsResponse)},
        { 293, 302, -1, sizeof(::cavnue::messages::world_state::v1::GetAssetsRequest)},
        { 303, -1, -1, sizeof(::cavnue::messages::world_state::v1::GetAssetsResponse)},
        { 312, 322, -1, sizeof(::cavnue::messages::world_state::v1::GetTrafficAggregationRequest)},
        { 324, -1, -1, sizeof(::cavnue::messages::world_state::v1::GetTrafficAggregationResponse)},
        { 334, 343, -1, sizeof(::cavnue::messages::world_state::v1::GetAverageDailyTrafficRequest)},
        { 344, 354, -1, sizeof(::cavnue::messages::world_state::v1::GetAverageDailyTrafficResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cavnue::messages::world_state::v1::_TimeFilter_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_Query_ActorIdFilter_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_Query_SpatialFilter_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_Query_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_Asset_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_Dataset_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_DatasetRun_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_GetServiceApiRequest_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_GetServiceApiResponse_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_GetDatasetRunsRequest_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_GetDatasetRunsResponse_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_GetDatasetsRequest_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_GetDatasetsResponse_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_GetWorldStateRequest_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_GetWorldStateResponse_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_GetWorldStateNearRealTimeRequest_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_GetWorldStateNearRealTimeResponse_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_GetActorsRequest_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_GetActorsResponse_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_GetEventsRequest_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_GetEventsResponse_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_GetAssetsRequest_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_GetAssetsResponse_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_GetTrafficAggregationRequest_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_GetTrafficAggregationResponse_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_GetAverageDailyTrafficRequest_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_GetAverageDailyTrafficResponse_default_instance_._instance,
};
const char descriptor_table_protodef_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n*cavnue/messages/world_state/v1/query.p"
    "roto\022\036cavnue.messages.world_state.v1\032\037go"
    "ogle/protobuf/timestamp.proto\032\031google/pr"
    "otobuf/api.proto\032\033google/protobuf/empty."
    "proto\032 google/protobuf/field_mask.proto\032"
    "&cavnue/messages/common/v1/common.proto\032"
    "(cavnue/messages/inference/v1/actor.prot"
    "o\032)cavnue/messages/inference/v1/events.p"
    "roto\032*cavnue/messages/inference/v1/traff"
    "ic.proto\032\'cavnue/messages/geometry/v1/po"
    "int.proto\032.cavnue/messages/geometry/v1/b"
    "ounding_box.proto\032&cavnue/messages/spati"
    "al/v1/wgs84.proto\032;cavnue/messages/data_"
    "warehouse/management/v1/datasets.proto\032("
    "cavnue/messages/world_state/v1/ivi.proto"
    "\"v\n\nTimeFilter\0225\n\010start_ts\030\001 \001(\0132\032.googl"
    "e.protobuf.TimestampR\007startTs\0221\n\006end_ts\030"
    "\002 \001(\0132\032.google.protobuf.TimestampR\005endTs"
    "\"\207\006\n\005Query\022)\n\016dataset_run_id\030\001 \001(\003H\000R\014da"
    "tasetRunId\210\001\001\022P\n\013time_filter\030\002 \001(\0132*.cav"
    "nue.messages.world_state.v1.TimeFilterH\001"
    "R\ntimeFilter\210\001\001\022]\n\ractors_filter\030\003 \001(\01323"
    ".cavnue.messages.world_state.v1.Query.Ac"
    "torIdFilterH\002R\014actorsFilter\210\001\001\022_\n\016spatia"
    "l_filter\030\004 \001(\01323.cavnue.messages.world_s"
    "tate.v1.Query.SpatialFilterH\003R\rspatialFi"
    "lter\210\001\001\0222\n\022dataset_identifier\030\005 \001(\tH\004R\021d"
    "atasetIdentifier\210\001\001\022\"\n\ndataset_id\030\006 \001(\003H"
    "\005R\tdatasetId\210\001\001\022&\n\014num_messages\030\007 \001(\rH\006R"
    "\013numMessages\210\001\001\022(\n\rtrace_context\030\010 \001(\tH\007"
    "R\014traceContext\210\001\001\032,\n\rActorIdFilter\022\033\n\tac"
    "tor_ids\030\001 \003(\003R\010actorIds\032X\n\rSpatialFilter"
    "\022G\n\tbb_region\030\001 \001(\0132*.cavnue.messages.ge"
    "ometry.v1.BoundingBox2fR\010bbRegionB\021\n\017_da"
    "taset_run_idB\016\n\014_time_filterB\020\n\016_actors_"
    "filterB\021\n\017_spatial_filterB\025\n\023_dataset_id"
    "entifierB\r\n\013_dataset_idB\017\n\r_num_messages"
    "B\020\n\016_trace_context\"\216\001\n\005Asset\022\033\n\tsensor_i"
    "d\030\001 \001(\003R\010sensorId\022\036\n\nidentifier\030\002 \001(\tR\ni"
    "dentifier\022H\n\016wgs84_position\030\003 \001(\0132!.cavn"
    "ue.messages.spatial.v1.WGS84R\rwgs84Posit"
    "ion\"\203\004\n\007Dataset\022\035\n\ndataset_id\030\001 \001(\003R\tdat"
    "asetId\022\036\n\nidentifier\030\002 \001(\tR\nidentifier\022%"
    "\n\016project_number\030\003 \001(\003R\rprojectNumber\022\035\n"
    "\nproject_id\030\004 \001(\tR\tprojectId\0225\n\010start_ts"
    "\030\005 \001(\0132\032.google.protobuf.TimestampR\007star"
    "tTs\0221\n\006end_ts\030\006 \001(\0132\032.google.protobuf.Ti"
    "mestampR\005endTs\022]\n\014dataset_type\030\007 \001(\0162:.c"
    "avnue.messages.data_warehouse.management"
    ".v1.Dataset.TypeR\013datasetType\022\025\n\006sim_id\030"
    "\010 \001(\tR\005simId\022\033\n\tcohort_id\030\t \001(\003R\010cohortI"
    "d\022<\n\014run_start_ts\030\n \001(\0132\032.google.protobu"
    "f.TimestampR\nrunStartTs\0228\n\nrun_end_ts\030\013 "
    "\001(\0132\032.google.protobuf.TimestampR\010runEndT"
    "s\"\273\003\n\nDatasetRun\022\025\n\006run_id\030\001 \001(\003R\005runId\022"
    "1\n\006run_ts\030\002 \001(\0132\032.google.protobuf.Timest"
    "ampR\005runTs\022\035\n\ndataset_id\030\003 \001(\003R\tdatasetI"
    "d\022\036\n\nidentifier\030\004 \001(\tR\nidentifier\022%\n\016pro"
    "ject_number\030\005 \001(\003R\rprojectNumber\022\035\n\nproj"
    "ect_id\030\006 \001(\tR\tprojectId\0225\n\010start_ts\030\007 \001("
    "\0132\032.google.protobuf.TimestampR\007startTs\0221"
    "\n\006end_ts\030\010 \001(\0132\032.google.protobuf.Timesta"
    "mpR\005endTs\022]\n\014dataset_type\030\t \001(\0162:.cavnue"
    ".messages.data_warehouse.management.v1.D"
    "ataset.TypeR\013datasetType\022\025\n\006sim_id\030\n \001(\t"
    "R\005simId\"D\n\024GetServiceApiRequest\022,\n\005empty"
    "\030\001 \001(\0132\026.google.protobuf.EmptyR\005empty\"\?\n"
    "\025GetServiceApiResponse\022&\n\003api\030\001 \001(\0132\024.go"
    "ogle.protobuf.ApiR\003api\"\336\002\n\025GetDatasetRun"
    "sRequest\022\"\n\ndataset_id\030\001 \001(\003H\000R\tdatasetI"
    "d\210\001\001\022)\n\016dataset_run_id\030\002 \001(\003H\001R\014datasetR"
    "unId\210\001\001\022\036\n\010sim_only\030\003 \001(\010H\002R\007simOnly\210\001\001\022"
    "S\n\004type\030\004 \001(\0162:.cavnue.messages.data_war"
    "ehouse.management.v1.Dataset.TypeH\003R\004typ"
    "e\210\001\001\0222\n\022dataset_identifier\030\005 \001(\tH\004R\021data"
    "setIdentifier\210\001\001B\r\n\013_dataset_idB\021\n\017_data"
    "set_run_idB\013\n\t_sim_onlyB\007\n\005_typeB\025\n\023_dat"
    "aset_identifier\"X\n\026GetDatasetRunsRespons"
    "e\022>\n\004runs\030\001 \003(\0132*.cavnue.messages.world_"
    "state.v1.DatasetRunR\004runs\"A\n\022GetDatasets"
    "Request\022\036\n\010sim_only\030\001 \001(\010H\000R\007simOnly\210\001\001B"
    "\013\n\t_sim_only\"Z\n\023GetDatasetsResponse\022C\n\010d"
    "atasets\030\001 \003(\0132\'.cavnue.messages.world_st"
    "ate.v1.DatasetR\010datasets\"S\n\024GetWorldStat"
    "eRequest\022;\n\005query\030\001 \001(\0132%.cavnue.message"
    "s.world_state.v1.QueryR\005query\"\243\002\n\025GetWor"
    "ldStateResponse\022;\n\006actors\030\001 \003(\0132#.cavnue"
    ".messages.inference.v1.ActorR\006actors\022;\n\006"
    "events\030\002 \003(\0132#.cavnue.messages.inference"
    ".v1.EventR\006events\022=\n\006assets\030\003 \003(\0132%.cavn"
    "ue.messages.world_state.v1.AssetR\006assets"
    "\022Q\n\016traffic_events\030\004 \003(\0132*.cavnue.messag"
    "es.inference.v1.TrafficEventR\rtrafficEve"
    "nts\"\262\003\n GetWorldStateNearRealTimeRequest"
    "\0229\n\006header\030\001 \001(\0132!.cavnue.messages.commo"
    "n.v1.HeaderR\006header\022P\n\013time_filter\030\002 \001(\013"
    "2*.cavnue.messages.world_state.v1.TimeFi"
    "lterH\000R\ntimeFilter\210\001\001\022J\n\023actor_field_req"
    "uest\030\003 \001(\0132\032.google.protobuf.FieldMaskR\021"
    "actorFieldRequest\022J\n\023event_field_request"
    "\030\004 \001(\0132\032.google.protobuf.FieldMaskR\021even"
    "tFieldRequest\022Y\n\033traffic_event_field_req"
    "uest\030\005 \001(\0132\032.google.protobuf.FieldMaskR\030"
    "trafficEventFieldRequestB\016\n\014_time_filter"
    "\"\214\004\n!GetWorldStateNearRealTimeResponse\0229"
    "\n\006header\030\001 \001(\0132!.cavnue.messages.common."
    "v1.HeaderR\006header\022D\n\020actor_field_mask\030\002 "
    "\001(\0132\032.google.protobuf.FieldMaskR\016actorFi"
    "eldMask\022D\n\020event_field_mask\030\003 \001(\0132\032.goog"
    "le.protobuf.FieldMaskR\016eventFieldMask\022S\n"
    "\030traffic_event_field_mask\030\004 \001(\0132\032.google"
    ".protobuf.FieldMaskR\025trafficEventFieldMa"
    "sk\022;\n\006actors\030\005 \003(\0132#.cavnue.messages.inf"
    "erence.v1.ActorR\006actors\022;\n\006events\030\006 \003(\0132"
    "#.cavnue.messages.inference.v1.EventR\006ev"
    "ents\022Q\n\016traffic_events\030\007 \003(\0132*.cavnue.me"
    "ssages.inference.v1.TrafficEventR\rtraffi"
    "cEvents\"O\n\020GetActorsRequest\022;\n\005query\030\001 \001"
    "(\0132%.cavnue.messages.world_state.v1.Quer"
    "yR\005query\"P\n\021GetActorsResponse\022;\n\006actors\030"
    "\001 \003(\0132#.cavnue.messages.inference.v1.Act"
    "orR\006actors\"O\n\020GetEventsRequest\022;\n\005query\030"
    "\001 \001(\0132%.cavnue.messages.world_state.v1.Q"
    "ueryR\005query\"P\n\021GetEventsResponse\022;\n\006even"
    "ts\030\001 \003(\0132#.cavnue.messages.inference.v1."
    "EventR\006events\"O\n\020GetAssetsRequest\022;\n\005que"
    "ry\030\001 \001(\0132%.cavnue.messages.world_state.v"
    "1.QueryR\005query\"R\n\021GetAssetsResponse\022=\n\006a"
    "ssets\030\001 \003(\0132%.cavnue.messages.world_stat"
    "e.v1.AssetR\006assets\"\260\002\n\034GetTrafficAggrega"
    "tionRequest\022K\n\013time_filter\030\001 \001(\0132*.cavnu"
    "e.messages.world_state.v1.TimeFilterR\nti"
    "meFilter\022d\n\tfrequency\030\002 \001(\0162F.cavnue.mes"
    "sages.world_state.v1.GetTrafficAggregati"
    "onRequest.FrequencyR\tfrequency\"]\n\tFreque"
    "ncy\022\031\n\025FREQUENCY_UNSPECIFIED\020\000\022\031\n\025FREQUE"
    "NCY_300_SECONDS\020\001\022\032\n\026FREQUENCY_3600_SECO"
    "NDS\020\002\"\345\001\n\035GetTrafficAggregationResponse\022"
    "a\n\021lane_aggregations\030\001 \003(\01324.cavnue.mess"
    "ages.inference.v1.LaneSegmentAggregation"
    "R\020laneAggregations\022a\n\021road_aggregations\030"
    "\002 \003(\01324.cavnue.messages.inference.v1.Roa"
    "dSegmentAggregationR\020roadAggregations\"l\n"
    "\035GetAverageDailyTrafficRequest\022K\n\013time_f"
    "ilter\030\001 \001(\0132*.cavnue.messages.world_stat"
    "e.v1.TimeFilterR\ntimeFilter\"\321\001\n\036GetAvera"
    "geDailyTrafficResponse\022W\n\004madt\030\001 \003(\0132C.c"
    "avnue.messages.inference.v1.MonthlyAvera"
    "geDailyTrafficCalculationR\004madt\022V\n\004aadt\030"
    "\002 \001(\0132B.cavnue.messages.inference.v1.Ann"
    "ualAverageDailyTrafficCalculationR\004aadt2"
    "\263\013\n\021WorldStateService\022|\n\rGetServiceApi\0224"
    ".cavnue.messages.world_state.v1.GetServi"
    "ceApiRequest\0325.cavnue.messages.world_sta"
    "te.v1.GetServiceApiResponse\022\177\n\016GetDatase"
    "tRuns\0225.cavnue.messages.world_state.v1.G"
    "etDatasetRunsRequest\0326.cavnue.messages.w"
    "orld_state.v1.GetDatasetRunsResponse\022v\n\013"
    "GetDatasets\0222.cavnue.messages.world_stat"
    "e.v1.GetDatasetsRequest\0323.cavnue.message"
    "s.world_state.v1.GetDatasetsResponse\022|\n\r"
    "GetWorldState\0224.cavnue.messages.world_st"
    "ate.v1.GetWorldStateRequest\0325.cavnue.mes"
    "sages.world_state.v1.GetWorldStateRespon"
    "se\022\240\001\n\031GetWorldStateNearRealTime\022@.cavnu"
    "e.messages.world_state.v1.GetWorldStateN"
    "earRealTimeRequest\032A.cavnue.messages.wor"
    "ld_state.v1.GetWorldStateNearRealTimeRes"
    "ponse\022p\n\tGetActors\0220.cavnue.messages.wor"
    "ld_state.v1.GetActorsRequest\0321.cavnue.me"
    "ssages.world_state.v1.GetActorsResponse\022"
    "p\n\tGetEvents\0220.cavnue.messages.world_sta"
    "te.v1.GetEventsRequest\0321.cavnue.messages"
    ".world_state.v1.GetEventsResponse\022p\n\tGet"
    "Assets\0220.cavnue.messages.world_state.v1."
    "GetAssetsRequest\0321.cavnue.messages.world"
    "_state.v1.GetAssetsResponse\022\224\001\n\025GetTraff"
    "icAggregation\022<.cavnue.messages.world_st"
    "ate.v1.GetTrafficAggregationRequest\032=.ca"
    "vnue.messages.world_state.v1.GetTrafficA"
    "ggregationResponse\022\227\001\n\026GetAverageDailyTr"
    "affic\022=.cavnue.messages.world_state.v1.G"
    "etAverageDailyTrafficRequest\032>.cavnue.me"
    "ssages.world_state.v1.GetAverageDailyTra"
    "fficResponse\022\177\n\016GetActorEvents\0225.cavnue."
    "messages.world_state.v1.GetActorEventsRe"
    "quest\0326.cavnue.messages.world_state.v1.G"
    "etActorEventsResponseb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_deps[13] =
    {
        &::descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasets_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fbounding_5fbox_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fpoint_2eproto,
        &::descriptor_table_cavnue_2fmessages_2finference_2fv1_2factor_2eproto,
        &::descriptor_table_cavnue_2fmessages_2finference_2fv1_2fevents_2eproto,
        &::descriptor_table_cavnue_2fmessages_2finference_2fv1_2ftraffic_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fspatial_2fv1_2fwgs84_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto,
        &::descriptor_table_google_2fprotobuf_2fapi_2eproto,
        &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
        &::descriptor_table_google_2fprotobuf_2ffield_5fmask_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto = {
    false,
    false,
    7509,
    descriptor_table_protodef_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto,
    "cavnue/messages/world_state/v1/query.proto",
    &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_once,
    descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_deps,
    13,
    27,
    schemas,
    file_default_instances,
    TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto::offsets,
    file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto,
    file_level_enum_descriptors_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto,
    file_level_service_descriptors_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_getter() {
  return &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto(&descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto);
namespace cavnue {
namespace messages {
namespace world_state {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetTrafficAggregationRequest_Frequency_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto);
  return file_level_enum_descriptors_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto[0];
}
bool GetTrafficAggregationRequest_Frequency_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr GetTrafficAggregationRequest_Frequency GetTrafficAggregationRequest::FREQUENCY_UNSPECIFIED;
constexpr GetTrafficAggregationRequest_Frequency GetTrafficAggregationRequest::FREQUENCY_300_SECONDS;
constexpr GetTrafficAggregationRequest_Frequency GetTrafficAggregationRequest::FREQUENCY_3600_SECONDS;
constexpr GetTrafficAggregationRequest_Frequency GetTrafficAggregationRequest::Frequency_MIN;
constexpr GetTrafficAggregationRequest_Frequency GetTrafficAggregationRequest::Frequency_MAX;
constexpr int GetTrafficAggregationRequest::Frequency_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class TimeFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<TimeFilter>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TimeFilter, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_ts(const TimeFilter* msg);
  static void set_has_start_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_ts(const TimeFilter* msg);
  static void set_has_end_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TimeFilter::_Internal::start_ts(const TimeFilter* msg) {
  return *msg->_impl_.start_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TimeFilter::_Internal::end_ts(const TimeFilter* msg) {
  return *msg->_impl_.end_ts_;
}
void TimeFilter::clear_start_ts() {
  if (_impl_.start_ts_ != nullptr) _impl_.start_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TimeFilter::clear_end_ts() {
  if (_impl_.end_ts_ != nullptr) _impl_.end_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TimeFilter::TimeFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.TimeFilter)
}
TimeFilter::TimeFilter(const TimeFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimeFilter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_ts_){nullptr}
    , decltype(_impl_.end_ts_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.start_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.start_ts_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.end_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.end_ts_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.TimeFilter)
}

inline void TimeFilter::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_ts_){nullptr}
    , decltype(_impl_.end_ts_){nullptr}
  };
}

TimeFilter::~TimeFilter() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.TimeFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimeFilter::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.start_ts_;
  if (this != internal_default_instance()) delete _impl_.end_ts_;
}

void TimeFilter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimeFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.TimeFilter)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.start_ts_ != nullptr);
      _impl_.start_ts_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.end_ts_ != nullptr);
      _impl_.end_ts_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp start_ts = 1 [json_name = "startTs"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp end_ts = 2 [json_name = "endTs"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TimeFilter::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.TimeFilter)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp start_ts = 1 [json_name = "startTs"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::start_ts(this),
        _Internal::start_ts(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp end_ts = 2 [json_name = "endTs"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::end_ts(this),
        _Internal::end_ts(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.TimeFilter)
  return target;
}

::size_t TimeFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.TimeFilter)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Timestamp start_ts = 1 [json_name = "startTs"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.start_ts_);
    }

    // .google.protobuf.Timestamp end_ts = 2 [json_name = "endTs"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.end_ts_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimeFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeFilter::GetClassData() const { return &_class_data_; }


void TimeFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimeFilter*>(&to_msg);
  auto& from = static_cast<const TimeFilter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.TimeFilter)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_start_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_start_ts());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_end_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_end_ts());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimeFilter::CopyFrom(const TimeFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.TimeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeFilter::IsInitialized() const {
  return true;
}

void TimeFilter::InternalSwap(TimeFilter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeFilter, _impl_.end_ts_)
      + sizeof(TimeFilter::_impl_.end_ts_)
      - PROTOBUF_FIELD_OFFSET(TimeFilter, _impl_.start_ts_)>(
          reinterpret_cast<char*>(&_impl_.start_ts_),
          reinterpret_cast<char*>(&other->_impl_.start_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto[0]);
}
// ===================================================================

class Query_ActorIdFilter::_Internal {
 public:
};

Query_ActorIdFilter::Query_ActorIdFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.Query.ActorIdFilter)
}
Query_ActorIdFilter::Query_ActorIdFilter(const Query_ActorIdFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Query_ActorIdFilter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.actor_ids_) { from._impl_.actor_ids_ }
    ,/* _impl_._actor_ids_cached_byte_size_ = */ { 0 }

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.Query.ActorIdFilter)
}

inline void Query_ActorIdFilter::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.actor_ids_) { arena }
    ,/* _impl_._actor_ids_cached_byte_size_ = */ { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Query_ActorIdFilter::~Query_ActorIdFilter() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.Query.ActorIdFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Query_ActorIdFilter::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.actor_ids_.~RepeatedField();
}

void Query_ActorIdFilter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Query_ActorIdFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.Query.ActorIdFilter)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_actor_ids()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Query_ActorIdFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 actor_ids = 1 [json_name = "actorIds"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_actor_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 8) {
          _internal_add_actor_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Query_ActorIdFilter::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.Query.ActorIdFilter)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 actor_ids = 1 [json_name = "actorIds"];
  {
    int byte_size = _impl_._actor_ids_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(1, _internal_actor_ids(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.Query.ActorIdFilter)
  return target;
}

::size_t Query_ActorIdFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.Query.ActorIdFilter)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 actor_ids = 1 [json_name = "actorIds"];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_actor_ids())
    ;
    _impl_._actor_ids_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Query_ActorIdFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Query_ActorIdFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Query_ActorIdFilter::GetClassData() const { return &_class_data_; }


void Query_ActorIdFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Query_ActorIdFilter*>(&to_msg);
  auto& from = static_cast<const Query_ActorIdFilter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.Query.ActorIdFilter)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.actor_ids_.MergeFrom(from._impl_.actor_ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Query_ActorIdFilter::CopyFrom(const Query_ActorIdFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.Query.ActorIdFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query_ActorIdFilter::IsInitialized() const {
  return true;
}

void Query_ActorIdFilter::InternalSwap(Query_ActorIdFilter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.actor_ids_.InternalSwap(&other->_impl_.actor_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Query_ActorIdFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto[1]);
}
// ===================================================================

class Query_SpatialFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<Query_SpatialFilter>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Query_SpatialFilter, _impl_._has_bits_);
  static const ::cavnue::messages::geometry::v1::BoundingBox2f& bb_region(const Query_SpatialFilter* msg);
  static void set_has_bb_region(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cavnue::messages::geometry::v1::BoundingBox2f&
Query_SpatialFilter::_Internal::bb_region(const Query_SpatialFilter* msg) {
  return *msg->_impl_.bb_region_;
}
void Query_SpatialFilter::clear_bb_region() {
  if (_impl_.bb_region_ != nullptr) _impl_.bb_region_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Query_SpatialFilter::Query_SpatialFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.Query.SpatialFilter)
}
Query_SpatialFilter::Query_SpatialFilter(const Query_SpatialFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Query_SpatialFilter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bb_region_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.bb_region_ = new ::cavnue::messages::geometry::v1::BoundingBox2f(*from._impl_.bb_region_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.Query.SpatialFilter)
}

inline void Query_SpatialFilter::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bb_region_){nullptr}
  };
}

Query_SpatialFilter::~Query_SpatialFilter() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.Query.SpatialFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Query_SpatialFilter::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.bb_region_;
}

void Query_SpatialFilter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Query_SpatialFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.Query.SpatialFilter)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.bb_region_ != nullptr);
    _impl_.bb_region_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Query_SpatialFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.geometry.v1.BoundingBox2f bb_region = 1 [json_name = "bbRegion"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bb_region(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Query_SpatialFilter::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.Query.SpatialFilter)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.geometry.v1.BoundingBox2f bb_region = 1 [json_name = "bbRegion"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::bb_region(this),
        _Internal::bb_region(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.Query.SpatialFilter)
  return target;
}

::size_t Query_SpatialFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.Query.SpatialFilter)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cavnue.messages.geometry.v1.BoundingBox2f bb_region = 1 [json_name = "bbRegion"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bb_region_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Query_SpatialFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Query_SpatialFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Query_SpatialFilter::GetClassData() const { return &_class_data_; }


void Query_SpatialFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Query_SpatialFilter*>(&to_msg);
  auto& from = static_cast<const Query_SpatialFilter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.Query.SpatialFilter)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_bb_region()->::cavnue::messages::geometry::v1::BoundingBox2f::MergeFrom(
        from._internal_bb_region());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Query_SpatialFilter::CopyFrom(const Query_SpatialFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.Query.SpatialFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query_SpatialFilter::IsInitialized() const {
  return true;
}

void Query_SpatialFilter::InternalSwap(Query_SpatialFilter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.bb_region_, other->_impl_.bb_region_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Query_SpatialFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto[2]);
}
// ===================================================================

class Query::_Internal {
 public:
  using HasBits = decltype(std::declval<Query>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Query, _impl_._has_bits_);
  static void set_has_dataset_run_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::cavnue::messages::world_state::v1::TimeFilter& time_filter(const Query* msg);
  static void set_has_time_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::cavnue::messages::world_state::v1::Query_ActorIdFilter& actors_filter(const Query* msg);
  static void set_has_actors_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::cavnue::messages::world_state::v1::Query_SpatialFilter& spatial_filter(const Query* msg);
  static void set_has_spatial_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dataset_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dataset_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_num_messages(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_trace_context(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::cavnue::messages::world_state::v1::TimeFilter&
Query::_Internal::time_filter(const Query* msg) {
  return *msg->_impl_.time_filter_;
}
const ::cavnue::messages::world_state::v1::Query_ActorIdFilter&
Query::_Internal::actors_filter(const Query* msg) {
  return *msg->_impl_.actors_filter_;
}
const ::cavnue::messages::world_state::v1::Query_SpatialFilter&
Query::_Internal::spatial_filter(const Query* msg) {
  return *msg->_impl_.spatial_filter_;
}
Query::Query(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.Query)
}
Query::Query(const Query& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Query* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dataset_identifier_) {}

    , decltype(_impl_.trace_context_) {}

    , decltype(_impl_.time_filter_){nullptr}
    , decltype(_impl_.actors_filter_){nullptr}
    , decltype(_impl_.spatial_filter_){nullptr}
    , decltype(_impl_.dataset_run_id_) {}

    , decltype(_impl_.dataset_id_) {}

    , decltype(_impl_.num_messages_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dataset_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dataset_identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.dataset_identifier_.Set(from._internal_dataset_identifier(), _this->GetArenaForAllocation());
  }
  _impl_.trace_context_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.trace_context_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.trace_context_.Set(from._internal_trace_context(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.time_filter_ = new ::cavnue::messages::world_state::v1::TimeFilter(*from._impl_.time_filter_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.actors_filter_ = new ::cavnue::messages::world_state::v1::Query_ActorIdFilter(*from._impl_.actors_filter_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.spatial_filter_ = new ::cavnue::messages::world_state::v1::Query_SpatialFilter(*from._impl_.spatial_filter_);
  }
  ::memcpy(&_impl_.dataset_run_id_, &from._impl_.dataset_run_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.num_messages_) -
    reinterpret_cast<char*>(&_impl_.dataset_run_id_)) + sizeof(_impl_.num_messages_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.Query)
}

inline void Query::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dataset_identifier_) {}

    , decltype(_impl_.trace_context_) {}

    , decltype(_impl_.time_filter_){nullptr}
    , decltype(_impl_.actors_filter_){nullptr}
    , decltype(_impl_.spatial_filter_){nullptr}
    , decltype(_impl_.dataset_run_id_) { ::int64_t{0} }

    , decltype(_impl_.dataset_id_) { ::int64_t{0} }

    , decltype(_impl_.num_messages_) { 0u }

  };
  _impl_.dataset_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dataset_identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.trace_context_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.trace_context_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Query::~Query() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.Query)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Query::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dataset_identifier_.Destroy();
  _impl_.trace_context_.Destroy();
  if (this != internal_default_instance()) delete _impl_.time_filter_;
  if (this != internal_default_instance()) delete _impl_.actors_filter_;
  if (this != internal_default_instance()) delete _impl_.spatial_filter_;
}

void Query::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Query::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.Query)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.dataset_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.trace_context_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.time_filter_ != nullptr);
      _impl_.time_filter_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.actors_filter_ != nullptr);
      _impl_.actors_filter_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.spatial_filter_ != nullptr);
      _impl_.spatial_filter_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.dataset_run_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.num_messages_) -
        reinterpret_cast<char*>(&_impl_.dataset_run_id_)) + sizeof(_impl_.num_messages_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Query::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 dataset_run_id = 1 [json_name = "datasetRunId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_dataset_run_id(&has_bits);
          _impl_.dataset_run_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .cavnue.messages.world_state.v1.TimeFilter time_filter = 2 [json_name = "timeFilter"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_filter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .cavnue.messages.world_state.v1.Query.ActorIdFilter actors_filter = 3 [json_name = "actorsFilter"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_actors_filter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .cavnue.messages.world_state.v1.Query.SpatialFilter spatial_filter = 4 [json_name = "spatialFilter"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_spatial_filter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string dataset_identifier = 5 [json_name = "datasetIdentifier"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_dataset_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.world_state.v1.Query.dataset_identifier"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 dataset_id = 6 [json_name = "datasetId"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_dataset_id(&has_bits);
          _impl_.dataset_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 num_messages = 7 [json_name = "numMessages"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_num_messages(&has_bits);
          _impl_.num_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string trace_context = 8 [json_name = "traceContext"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_trace_context();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.world_state.v1.Query.trace_context"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Query::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.Query)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 dataset_run_id = 1 [json_name = "datasetRunId"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_dataset_run_id(), target);
  }

  // optional .cavnue.messages.world_state.v1.TimeFilter time_filter = 2 [json_name = "timeFilter"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::time_filter(this),
        _Internal::time_filter(this).GetCachedSize(), target, stream);
  }

  // optional .cavnue.messages.world_state.v1.Query.ActorIdFilter actors_filter = 3 [json_name = "actorsFilter"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::actors_filter(this),
        _Internal::actors_filter(this).GetCachedSize(), target, stream);
  }

  // optional .cavnue.messages.world_state.v1.Query.SpatialFilter spatial_filter = 4 [json_name = "spatialFilter"];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::spatial_filter(this),
        _Internal::spatial_filter(this).GetCachedSize(), target, stream);
  }

  // optional string dataset_identifier = 5 [json_name = "datasetIdentifier"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_dataset_identifier();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.world_state.v1.Query.dataset_identifier");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional int64 dataset_id = 6 [json_name = "datasetId"];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        6, this->_internal_dataset_id(), target);
  }

  // optional uint32 num_messages = 7 [json_name = "numMessages"];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_num_messages(), target);
  }

  // optional string trace_context = 8 [json_name = "traceContext"];
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_trace_context();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.world_state.v1.Query.trace_context");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.Query)
  return target;
}

::size_t Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.Query)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string dataset_identifier = 5 [json_name = "datasetIdentifier"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_dataset_identifier());
    }

    // optional string trace_context = 8 [json_name = "traceContext"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_trace_context());
    }

    // optional .cavnue.messages.world_state.v1.TimeFilter time_filter = 2 [json_name = "timeFilter"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.time_filter_);
    }

    // optional .cavnue.messages.world_state.v1.Query.ActorIdFilter actors_filter = 3 [json_name = "actorsFilter"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.actors_filter_);
    }

    // optional .cavnue.messages.world_state.v1.Query.SpatialFilter spatial_filter = 4 [json_name = "spatialFilter"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spatial_filter_);
    }

    // optional int64 dataset_run_id = 1 [json_name = "datasetRunId"];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_dataset_run_id());
    }

    // optional int64 dataset_id = 6 [json_name = "datasetId"];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_dataset_id());
    }

    // optional uint32 num_messages = 7 [json_name = "numMessages"];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_num_messages());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Query::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Query::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Query::GetClassData() const { return &_class_data_; }


void Query::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Query*>(&to_msg);
  auto& from = static_cast<const Query&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.Query)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_dataset_identifier(from._internal_dataset_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_trace_context(from._internal_trace_context());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_time_filter()->::cavnue::messages::world_state::v1::TimeFilter::MergeFrom(
          from._internal_time_filter());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_actors_filter()->::cavnue::messages::world_state::v1::Query_ActorIdFilter::MergeFrom(
          from._internal_actors_filter());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_spatial_filter()->::cavnue::messages::world_state::v1::Query_SpatialFilter::MergeFrom(
          from._internal_spatial_filter());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.dataset_run_id_ = from._impl_.dataset_run_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.dataset_id_ = from._impl_.dataset_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.num_messages_ = from._impl_.num_messages_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Query::CopyFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query::IsInitialized() const {
  return true;
}

void Query::InternalSwap(Query* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dataset_identifier_, lhs_arena,
                                       &other->_impl_.dataset_identifier_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.trace_context_, lhs_arena,
                                       &other->_impl_.trace_context_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Query, _impl_.num_messages_)
      + sizeof(Query::_impl_.num_messages_)
      - PROTOBUF_FIELD_OFFSET(Query, _impl_.time_filter_)>(
          reinterpret_cast<char*>(&_impl_.time_filter_),
          reinterpret_cast<char*>(&other->_impl_.time_filter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Query::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto[3]);
}
// ===================================================================

class Asset::_Internal {
 public:
  using HasBits = decltype(std::declval<Asset>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Asset, _impl_._has_bits_);
  static const ::cavnue::messages::spatial::v1::WGS84& wgs84_position(const Asset* msg);
  static void set_has_wgs84_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cavnue::messages::spatial::v1::WGS84&
Asset::_Internal::wgs84_position(const Asset* msg) {
  return *msg->_impl_.wgs84_position_;
}
void Asset::clear_wgs84_position() {
  if (_impl_.wgs84_position_ != nullptr) _impl_.wgs84_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Asset::Asset(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.Asset)
}
Asset::Asset(const Asset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Asset* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.wgs84_position_){nullptr}
    , decltype(_impl_.sensor_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identifier().empty()) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.wgs84_position_ = new ::cavnue::messages::spatial::v1::WGS84(*from._impl_.wgs84_position_);
  }
  _this->_impl_.sensor_id_ = from._impl_.sensor_id_;
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.Asset)
}

inline void Asset::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.wgs84_position_){nullptr}
    , decltype(_impl_.sensor_id_) { ::int64_t{0} }

  };
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Asset::~Asset() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.Asset)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Asset::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.wgs84_position_;
}

void Asset::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Asset::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.Asset)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.identifier_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.wgs84_position_ != nullptr);
    _impl_.wgs84_position_->Clear();
  }
  _impl_.sensor_id_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Asset::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 sensor_id = 1 [json_name = "sensorId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.sensor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string identifier = 2 [json_name = "identifier"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.world_state.v1.Asset.identifier"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.spatial.v1.WGS84 wgs84_position = 3 [json_name = "wgs84Position"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_wgs84_position(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Asset::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.Asset)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sensor_id = 1 [json_name = "sensorId"];
  if (this->_internal_sensor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_sensor_id(), target);
  }

  // string identifier = 2 [json_name = "identifier"];
  if (!this->_internal_identifier().empty()) {
    const std::string& _s = this->_internal_identifier();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.world_state.v1.Asset.identifier");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.spatial.v1.WGS84 wgs84_position = 3 [json_name = "wgs84Position"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::wgs84_position(this),
        _Internal::wgs84_position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.Asset)
  return target;
}

::size_t Asset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.Asset)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string identifier = 2 [json_name = "identifier"];
  if (!this->_internal_identifier().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_identifier());
  }

  // .cavnue.messages.spatial.v1.WGS84 wgs84_position = 3 [json_name = "wgs84Position"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.wgs84_position_);
  }

  // int64 sensor_id = 1 [json_name = "sensorId"];
  if (this->_internal_sensor_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_sensor_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Asset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Asset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Asset::GetClassData() const { return &_class_data_; }


void Asset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Asset*>(&to_msg);
  auto& from = static_cast<const Asset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.Asset)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_identifier().empty()) {
    _this->_internal_set_identifier(from._internal_identifier());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_wgs84_position()->::cavnue::messages::spatial::v1::WGS84::MergeFrom(
        from._internal_wgs84_position());
  }
  if (from._internal_sensor_id() != 0) {
    _this->_internal_set_sensor_id(from._internal_sensor_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Asset::CopyFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Asset::IsInitialized() const {
  return true;
}

void Asset::InternalSwap(Asset* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identifier_, lhs_arena,
                                       &other->_impl_.identifier_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Asset, _impl_.sensor_id_)
      + sizeof(Asset::_impl_.sensor_id_)
      - PROTOBUF_FIELD_OFFSET(Asset, _impl_.wgs84_position_)>(
          reinterpret_cast<char*>(&_impl_.wgs84_position_),
          reinterpret_cast<char*>(&other->_impl_.wgs84_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Asset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto[4]);
}
// ===================================================================

class Dataset::_Internal {
 public:
  using HasBits = decltype(std::declval<Dataset>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Dataset, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_ts(const Dataset* msg);
  static void set_has_start_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_ts(const Dataset* msg);
  static void set_has_end_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& run_start_ts(const Dataset* msg);
  static void set_has_run_start_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& run_end_ts(const Dataset* msg);
  static void set_has_run_end_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Dataset::_Internal::start_ts(const Dataset* msg) {
  return *msg->_impl_.start_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Dataset::_Internal::end_ts(const Dataset* msg) {
  return *msg->_impl_.end_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Dataset::_Internal::run_start_ts(const Dataset* msg) {
  return *msg->_impl_.run_start_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Dataset::_Internal::run_end_ts(const Dataset* msg) {
  return *msg->_impl_.run_end_ts_;
}
void Dataset::clear_start_ts() {
  if (_impl_.start_ts_ != nullptr) _impl_.start_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Dataset::clear_end_ts() {
  if (_impl_.end_ts_ != nullptr) _impl_.end_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Dataset::clear_run_start_ts() {
  if (_impl_.run_start_ts_ != nullptr) _impl_.run_start_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Dataset::clear_run_end_ts() {
  if (_impl_.run_end_ts_ != nullptr) _impl_.run_end_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
Dataset::Dataset(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.Dataset)
}
Dataset::Dataset(const Dataset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Dataset* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.project_id_) {}

    , decltype(_impl_.sim_id_) {}

    , decltype(_impl_.start_ts_){nullptr}
    , decltype(_impl_.end_ts_){nullptr}
    , decltype(_impl_.run_start_ts_){nullptr}
    , decltype(_impl_.run_end_ts_){nullptr}
    , decltype(_impl_.dataset_id_) {}

    , decltype(_impl_.project_number_) {}

    , decltype(_impl_.cohort_id_) {}

    , decltype(_impl_.dataset_type_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identifier().empty()) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), _this->GetArenaForAllocation());
  }
  _impl_.project_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.project_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_project_id().empty()) {
    _this->_impl_.project_id_.Set(from._internal_project_id(), _this->GetArenaForAllocation());
  }
  _impl_.sim_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sim_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sim_id().empty()) {
    _this->_impl_.sim_id_.Set(from._internal_sim_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.start_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.start_ts_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.end_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.end_ts_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.run_start_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.run_start_ts_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.run_end_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.run_end_ts_);
  }
  ::memcpy(&_impl_.dataset_id_, &from._impl_.dataset_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.dataset_type_) -
    reinterpret_cast<char*>(&_impl_.dataset_id_)) + sizeof(_impl_.dataset_type_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.Dataset)
}

inline void Dataset::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.project_id_) {}

    , decltype(_impl_.sim_id_) {}

    , decltype(_impl_.start_ts_){nullptr}
    , decltype(_impl_.end_ts_){nullptr}
    , decltype(_impl_.run_start_ts_){nullptr}
    , decltype(_impl_.run_end_ts_){nullptr}
    , decltype(_impl_.dataset_id_) { ::int64_t{0} }

    , decltype(_impl_.project_number_) { ::int64_t{0} }

    , decltype(_impl_.cohort_id_) { ::int64_t{0} }

    , decltype(_impl_.dataset_type_) { 0 }

  };
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.project_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.project_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sim_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sim_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Dataset::~Dataset() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.Dataset)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Dataset::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identifier_.Destroy();
  _impl_.project_id_.Destroy();
  _impl_.sim_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.start_ts_;
  if (this != internal_default_instance()) delete _impl_.end_ts_;
  if (this != internal_default_instance()) delete _impl_.run_start_ts_;
  if (this != internal_default_instance()) delete _impl_.run_end_ts_;
}

void Dataset::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Dataset::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.Dataset)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.identifier_.ClearToEmpty();
  _impl_.project_id_.ClearToEmpty();
  _impl_.sim_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.start_ts_ != nullptr);
      _impl_.start_ts_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.end_ts_ != nullptr);
      _impl_.end_ts_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.run_start_ts_ != nullptr);
      _impl_.run_start_ts_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.run_end_ts_ != nullptr);
      _impl_.run_end_ts_->Clear();
    }
  }
  ::memset(&_impl_.dataset_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.dataset_type_) -
      reinterpret_cast<char*>(&_impl_.dataset_id_)) + sizeof(_impl_.dataset_type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dataset::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 dataset_id = 1 [json_name = "datasetId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.dataset_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string identifier = 2 [json_name = "identifier"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.world_state.v1.Dataset.identifier"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 project_number = 3 [json_name = "projectNumber"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.project_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string project_id = 4 [json_name = "projectId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_project_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.world_state.v1.Dataset.project_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp start_ts = 5 [json_name = "startTs"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp end_ts = 6 [json_name = "endTs"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.data_warehouse.management.v1.Dataset.Type dataset_type = 7 [json_name = "datasetType"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_dataset_type(static_cast<::cavnue::messages::data_warehouse::management::v1::Dataset_Type>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string sim_id = 8 [json_name = "simId"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_sim_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.world_state.v1.Dataset.sim_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 cohort_id = 9 [json_name = "cohortId"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _impl_.cohort_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp run_start_ts = 10 [json_name = "runStartTs"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_start_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp run_end_ts = 11 [json_name = "runEndTs"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_end_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Dataset::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.Dataset)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 dataset_id = 1 [json_name = "datasetId"];
  if (this->_internal_dataset_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_dataset_id(), target);
  }

  // string identifier = 2 [json_name = "identifier"];
  if (!this->_internal_identifier().empty()) {
    const std::string& _s = this->_internal_identifier();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.world_state.v1.Dataset.identifier");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int64 project_number = 3 [json_name = "projectNumber"];
  if (this->_internal_project_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_project_number(), target);
  }

  // string project_id = 4 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    const std::string& _s = this->_internal_project_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.world_state.v1.Dataset.project_id");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp start_ts = 5 [json_name = "startTs"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::start_ts(this),
        _Internal::start_ts(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp end_ts = 6 [json_name = "endTs"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::end_ts(this),
        _Internal::end_ts(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.data_warehouse.management.v1.Dataset.Type dataset_type = 7 [json_name = "datasetType"];
  if (this->_internal_dataset_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_dataset_type(), target);
  }

  // string sim_id = 8 [json_name = "simId"];
  if (!this->_internal_sim_id().empty()) {
    const std::string& _s = this->_internal_sim_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.world_state.v1.Dataset.sim_id");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // int64 cohort_id = 9 [json_name = "cohortId"];
  if (this->_internal_cohort_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        9, this->_internal_cohort_id(), target);
  }

  // .google.protobuf.Timestamp run_start_ts = 10 [json_name = "runStartTs"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::run_start_ts(this),
        _Internal::run_start_ts(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp run_end_ts = 11 [json_name = "runEndTs"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::run_end_ts(this),
        _Internal::run_end_ts(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.Dataset)
  return target;
}

::size_t Dataset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.Dataset)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string identifier = 2 [json_name = "identifier"];
  if (!this->_internal_identifier().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_identifier());
  }

  // string project_id = 4 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_project_id());
  }

  // string sim_id = 8 [json_name = "simId"];
  if (!this->_internal_sim_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sim_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .google.protobuf.Timestamp start_ts = 5 [json_name = "startTs"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.start_ts_);
    }

    // .google.protobuf.Timestamp end_ts = 6 [json_name = "endTs"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.end_ts_);
    }

    // .google.protobuf.Timestamp run_start_ts = 10 [json_name = "runStartTs"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.run_start_ts_);
    }

    // .google.protobuf.Timestamp run_end_ts = 11 [json_name = "runEndTs"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.run_end_ts_);
    }

  }
  // int64 dataset_id = 1 [json_name = "datasetId"];
  if (this->_internal_dataset_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_dataset_id());
  }

  // int64 project_number = 3 [json_name = "projectNumber"];
  if (this->_internal_project_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_project_number());
  }

  // int64 cohort_id = 9 [json_name = "cohortId"];
  if (this->_internal_cohort_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_cohort_id());
  }

  // .cavnue.messages.data_warehouse.management.v1.Dataset.Type dataset_type = 7 [json_name = "datasetType"];
  if (this->_internal_dataset_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_dataset_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Dataset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Dataset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Dataset::GetClassData() const { return &_class_data_; }


void Dataset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Dataset*>(&to_msg);
  auto& from = static_cast<const Dataset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.Dataset)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_identifier().empty()) {
    _this->_internal_set_identifier(from._internal_identifier());
  }
  if (!from._internal_project_id().empty()) {
    _this->_internal_set_project_id(from._internal_project_id());
  }
  if (!from._internal_sim_id().empty()) {
    _this->_internal_set_sim_id(from._internal_sim_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_start_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_start_ts());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_end_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_end_ts());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_run_start_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_run_start_ts());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_run_end_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_run_end_ts());
    }
  }
  if (from._internal_dataset_id() != 0) {
    _this->_internal_set_dataset_id(from._internal_dataset_id());
  }
  if (from._internal_project_number() != 0) {
    _this->_internal_set_project_number(from._internal_project_number());
  }
  if (from._internal_cohort_id() != 0) {
    _this->_internal_set_cohort_id(from._internal_cohort_id());
  }
  if (from._internal_dataset_type() != 0) {
    _this->_internal_set_dataset_type(from._internal_dataset_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Dataset::CopyFrom(const Dataset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.Dataset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dataset::IsInitialized() const {
  return true;
}

void Dataset::InternalSwap(Dataset* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identifier_, lhs_arena,
                                       &other->_impl_.identifier_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.project_id_, lhs_arena,
                                       &other->_impl_.project_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sim_id_, lhs_arena,
                                       &other->_impl_.sim_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Dataset, _impl_.dataset_type_)
      + sizeof(Dataset::_impl_.dataset_type_)
      - PROTOBUF_FIELD_OFFSET(Dataset, _impl_.start_ts_)>(
          reinterpret_cast<char*>(&_impl_.start_ts_),
          reinterpret_cast<char*>(&other->_impl_.start_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Dataset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto[5]);
}
// ===================================================================

class DatasetRun::_Internal {
 public:
  using HasBits = decltype(std::declval<DatasetRun>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DatasetRun, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& run_ts(const DatasetRun* msg);
  static void set_has_run_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_ts(const DatasetRun* msg);
  static void set_has_start_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_ts(const DatasetRun* msg);
  static void set_has_end_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
DatasetRun::_Internal::run_ts(const DatasetRun* msg) {
  return *msg->_impl_.run_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
DatasetRun::_Internal::start_ts(const DatasetRun* msg) {
  return *msg->_impl_.start_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
DatasetRun::_Internal::end_ts(const DatasetRun* msg) {
  return *msg->_impl_.end_ts_;
}
void DatasetRun::clear_run_ts() {
  if (_impl_.run_ts_ != nullptr) _impl_.run_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void DatasetRun::clear_start_ts() {
  if (_impl_.start_ts_ != nullptr) _impl_.start_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void DatasetRun::clear_end_ts() {
  if (_impl_.end_ts_ != nullptr) _impl_.end_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
DatasetRun::DatasetRun(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.DatasetRun)
}
DatasetRun::DatasetRun(const DatasetRun& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DatasetRun* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.project_id_) {}

    , decltype(_impl_.sim_id_) {}

    , decltype(_impl_.run_ts_){nullptr}
    , decltype(_impl_.start_ts_){nullptr}
    , decltype(_impl_.end_ts_){nullptr}
    , decltype(_impl_.run_id_) {}

    , decltype(_impl_.dataset_id_) {}

    , decltype(_impl_.project_number_) {}

    , decltype(_impl_.dataset_type_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identifier().empty()) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), _this->GetArenaForAllocation());
  }
  _impl_.project_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.project_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_project_id().empty()) {
    _this->_impl_.project_id_.Set(from._internal_project_id(), _this->GetArenaForAllocation());
  }
  _impl_.sim_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sim_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sim_id().empty()) {
    _this->_impl_.sim_id_.Set(from._internal_sim_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.run_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.run_ts_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.start_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.start_ts_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.end_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.end_ts_);
  }
  ::memcpy(&_impl_.run_id_, &from._impl_.run_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.dataset_type_) -
    reinterpret_cast<char*>(&_impl_.run_id_)) + sizeof(_impl_.dataset_type_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.DatasetRun)
}

inline void DatasetRun::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.project_id_) {}

    , decltype(_impl_.sim_id_) {}

    , decltype(_impl_.run_ts_){nullptr}
    , decltype(_impl_.start_ts_){nullptr}
    , decltype(_impl_.end_ts_){nullptr}
    , decltype(_impl_.run_id_) { ::int64_t{0} }

    , decltype(_impl_.dataset_id_) { ::int64_t{0} }

    , decltype(_impl_.project_number_) { ::int64_t{0} }

    , decltype(_impl_.dataset_type_) { 0 }

  };
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.project_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.project_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sim_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sim_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DatasetRun::~DatasetRun() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.DatasetRun)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DatasetRun::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identifier_.Destroy();
  _impl_.project_id_.Destroy();
  _impl_.sim_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.run_ts_;
  if (this != internal_default_instance()) delete _impl_.start_ts_;
  if (this != internal_default_instance()) delete _impl_.end_ts_;
}

void DatasetRun::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DatasetRun::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.DatasetRun)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.identifier_.ClearToEmpty();
  _impl_.project_id_.ClearToEmpty();
  _impl_.sim_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.run_ts_ != nullptr);
      _impl_.run_ts_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.start_ts_ != nullptr);
      _impl_.start_ts_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.end_ts_ != nullptr);
      _impl_.end_ts_->Clear();
    }
  }
  ::memset(&_impl_.run_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.dataset_type_) -
      reinterpret_cast<char*>(&_impl_.run_id_)) + sizeof(_impl_.dataset_type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DatasetRun::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 run_id = 1 [json_name = "runId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.run_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp run_ts = 2 [json_name = "runTs"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 dataset_id = 3 [json_name = "datasetId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.dataset_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string identifier = 4 [json_name = "identifier"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.world_state.v1.DatasetRun.identifier"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 project_number = 5 [json_name = "projectNumber"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.project_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string project_id = 6 [json_name = "projectId"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_project_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.world_state.v1.DatasetRun.project_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp start_ts = 7 [json_name = "startTs"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp end_ts = 8 [json_name = "endTs"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.data_warehouse.management.v1.Dataset.Type dataset_type = 9 [json_name = "datasetType"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_dataset_type(static_cast<::cavnue::messages::data_warehouse::management::v1::Dataset_Type>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string sim_id = 10 [json_name = "simId"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_sim_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.world_state.v1.DatasetRun.sim_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DatasetRun::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.DatasetRun)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 run_id = 1 [json_name = "runId"];
  if (this->_internal_run_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_run_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp run_ts = 2 [json_name = "runTs"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::run_ts(this),
        _Internal::run_ts(this).GetCachedSize(), target, stream);
  }

  // int64 dataset_id = 3 [json_name = "datasetId"];
  if (this->_internal_dataset_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_dataset_id(), target);
  }

  // string identifier = 4 [json_name = "identifier"];
  if (!this->_internal_identifier().empty()) {
    const std::string& _s = this->_internal_identifier();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.world_state.v1.DatasetRun.identifier");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // int64 project_number = 5 [json_name = "projectNumber"];
  if (this->_internal_project_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        5, this->_internal_project_number(), target);
  }

  // string project_id = 6 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    const std::string& _s = this->_internal_project_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.world_state.v1.DatasetRun.project_id");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // .google.protobuf.Timestamp start_ts = 7 [json_name = "startTs"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::start_ts(this),
        _Internal::start_ts(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp end_ts = 8 [json_name = "endTs"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::end_ts(this),
        _Internal::end_ts(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.data_warehouse.management.v1.Dataset.Type dataset_type = 9 [json_name = "datasetType"];
  if (this->_internal_dataset_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        9, this->_internal_dataset_type(), target);
  }

  // string sim_id = 10 [json_name = "simId"];
  if (!this->_internal_sim_id().empty()) {
    const std::string& _s = this->_internal_sim_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.world_state.v1.DatasetRun.sim_id");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.DatasetRun)
  return target;
}

::size_t DatasetRun::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.DatasetRun)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string identifier = 4 [json_name = "identifier"];
  if (!this->_internal_identifier().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_identifier());
  }

  // string project_id = 6 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_project_id());
  }

  // string sim_id = 10 [json_name = "simId"];
  if (!this->_internal_sim_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sim_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .google.protobuf.Timestamp run_ts = 2 [json_name = "runTs"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.run_ts_);
    }

    // .google.protobuf.Timestamp start_ts = 7 [json_name = "startTs"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.start_ts_);
    }

    // .google.protobuf.Timestamp end_ts = 8 [json_name = "endTs"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.end_ts_);
    }

  }
  // int64 run_id = 1 [json_name = "runId"];
  if (this->_internal_run_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_run_id());
  }

  // int64 dataset_id = 3 [json_name = "datasetId"];
  if (this->_internal_dataset_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_dataset_id());
  }

  // int64 project_number = 5 [json_name = "projectNumber"];
  if (this->_internal_project_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_project_number());
  }

  // .cavnue.messages.data_warehouse.management.v1.Dataset.Type dataset_type = 9 [json_name = "datasetType"];
  if (this->_internal_dataset_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_dataset_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DatasetRun::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DatasetRun::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DatasetRun::GetClassData() const { return &_class_data_; }


void DatasetRun::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DatasetRun*>(&to_msg);
  auto& from = static_cast<const DatasetRun&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.DatasetRun)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_identifier().empty()) {
    _this->_internal_set_identifier(from._internal_identifier());
  }
  if (!from._internal_project_id().empty()) {
    _this->_internal_set_project_id(from._internal_project_id());
  }
  if (!from._internal_sim_id().empty()) {
    _this->_internal_set_sim_id(from._internal_sim_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_run_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_run_ts());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_start_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_start_ts());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_end_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_end_ts());
    }
  }
  if (from._internal_run_id() != 0) {
    _this->_internal_set_run_id(from._internal_run_id());
  }
  if (from._internal_dataset_id() != 0) {
    _this->_internal_set_dataset_id(from._internal_dataset_id());
  }
  if (from._internal_project_number() != 0) {
    _this->_internal_set_project_number(from._internal_project_number());
  }
  if (from._internal_dataset_type() != 0) {
    _this->_internal_set_dataset_type(from._internal_dataset_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DatasetRun::CopyFrom(const DatasetRun& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.DatasetRun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetRun::IsInitialized() const {
  return true;
}

void DatasetRun::InternalSwap(DatasetRun* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identifier_, lhs_arena,
                                       &other->_impl_.identifier_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.project_id_, lhs_arena,
                                       &other->_impl_.project_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sim_id_, lhs_arena,
                                       &other->_impl_.sim_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DatasetRun, _impl_.dataset_type_)
      + sizeof(DatasetRun::_impl_.dataset_type_)
      - PROTOBUF_FIELD_OFFSET(DatasetRun, _impl_.run_ts_)>(
          reinterpret_cast<char*>(&_impl_.run_ts_),
          reinterpret_cast<char*>(&other->_impl_.run_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DatasetRun::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto[6]);
}
// ===================================================================

class GetServiceApiRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetServiceApiRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetServiceApiRequest, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Empty& empty(const GetServiceApiRequest* msg);
  static void set_has_empty(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Empty&
GetServiceApiRequest::_Internal::empty(const GetServiceApiRequest* msg) {
  return *msg->_impl_.empty_;
}
void GetServiceApiRequest::clear_empty() {
  if (_impl_.empty_ != nullptr) _impl_.empty_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetServiceApiRequest::GetServiceApiRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.GetServiceApiRequest)
}
GetServiceApiRequest::GetServiceApiRequest(const GetServiceApiRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetServiceApiRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.empty_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.empty_ = new ::PROTOBUF_NAMESPACE_ID::Empty(*from._impl_.empty_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.GetServiceApiRequest)
}

inline void GetServiceApiRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.empty_){nullptr}
  };
}

GetServiceApiRequest::~GetServiceApiRequest() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.GetServiceApiRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetServiceApiRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.empty_;
}

void GetServiceApiRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetServiceApiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.GetServiceApiRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.empty_ != nullptr);
    _impl_.empty_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceApiRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Empty empty = 1 [json_name = "empty"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetServiceApiRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.GetServiceApiRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Empty empty = 1 [json_name = "empty"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::empty(this),
        _Internal::empty(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.GetServiceApiRequest)
  return target;
}

::size_t GetServiceApiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.GetServiceApiRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Empty empty = 1 [json_name = "empty"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.empty_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServiceApiRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetServiceApiRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServiceApiRequest::GetClassData() const { return &_class_data_; }


void GetServiceApiRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetServiceApiRequest*>(&to_msg);
  auto& from = static_cast<const GetServiceApiRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.GetServiceApiRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_empty()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(
        from._internal_empty());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServiceApiRequest::CopyFrom(const GetServiceApiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.GetServiceApiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceApiRequest::IsInitialized() const {
  return true;
}

void GetServiceApiRequest::InternalSwap(GetServiceApiRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.empty_, other->_impl_.empty_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceApiRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto[7]);
}
// ===================================================================

class GetServiceApiResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetServiceApiResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetServiceApiResponse, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Api& api(const GetServiceApiResponse* msg);
  static void set_has_api(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Api&
GetServiceApiResponse::_Internal::api(const GetServiceApiResponse* msg) {
  return *msg->_impl_.api_;
}
void GetServiceApiResponse::clear_api() {
  if (_impl_.api_ != nullptr) _impl_.api_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetServiceApiResponse::GetServiceApiResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.GetServiceApiResponse)
}
GetServiceApiResponse::GetServiceApiResponse(const GetServiceApiResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetServiceApiResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.api_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.api_ = new ::PROTOBUF_NAMESPACE_ID::Api(*from._impl_.api_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.GetServiceApiResponse)
}

inline void GetServiceApiResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.api_){nullptr}
  };
}

GetServiceApiResponse::~GetServiceApiResponse() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.GetServiceApiResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetServiceApiResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.api_;
}

void GetServiceApiResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetServiceApiResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.GetServiceApiResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.api_ != nullptr);
    _impl_.api_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceApiResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Api api = 1 [json_name = "api"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_api(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetServiceApiResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.GetServiceApiResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Api api = 1 [json_name = "api"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::api(this),
        _Internal::api(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.GetServiceApiResponse)
  return target;
}

::size_t GetServiceApiResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.GetServiceApiResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Api api = 1 [json_name = "api"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.api_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServiceApiResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetServiceApiResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServiceApiResponse::GetClassData() const { return &_class_data_; }


void GetServiceApiResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetServiceApiResponse*>(&to_msg);
  auto& from = static_cast<const GetServiceApiResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.GetServiceApiResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_api()->::PROTOBUF_NAMESPACE_ID::Api::MergeFrom(
        from._internal_api());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServiceApiResponse::CopyFrom(const GetServiceApiResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.GetServiceApiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceApiResponse::IsInitialized() const {
  return true;
}

void GetServiceApiResponse::InternalSwap(GetServiceApiResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.api_, other->_impl_.api_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceApiResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto[8]);
}
// ===================================================================

class GetDatasetRunsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetDatasetRunsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetDatasetRunsRequest, _impl_._has_bits_);
  static void set_has_dataset_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dataset_run_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sim_only(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dataset_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetDatasetRunsRequest::GetDatasetRunsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.GetDatasetRunsRequest)
}
GetDatasetRunsRequest::GetDatasetRunsRequest(const GetDatasetRunsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDatasetRunsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dataset_identifier_) {}

    , decltype(_impl_.dataset_id_) {}

    , decltype(_impl_.dataset_run_id_) {}

    , decltype(_impl_.sim_only_) {}

    , decltype(_impl_.type_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dataset_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dataset_identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.dataset_identifier_.Set(from._internal_dataset_identifier(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dataset_id_, &from._impl_.dataset_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.dataset_id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.GetDatasetRunsRequest)
}

inline void GetDatasetRunsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dataset_identifier_) {}

    , decltype(_impl_.dataset_id_) { ::int64_t{0} }

    , decltype(_impl_.dataset_run_id_) { ::int64_t{0} }

    , decltype(_impl_.sim_only_) { false }

    , decltype(_impl_.type_) { 0 }

  };
  _impl_.dataset_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dataset_identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetDatasetRunsRequest::~GetDatasetRunsRequest() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.GetDatasetRunsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDatasetRunsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dataset_identifier_.Destroy();
}

void GetDatasetRunsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDatasetRunsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.GetDatasetRunsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.dataset_identifier_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.dataset_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.dataset_id_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDatasetRunsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 dataset_id = 1 [json_name = "datasetId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_dataset_id(&has_bits);
          _impl_.dataset_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 dataset_run_id = 2 [json_name = "datasetRunId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_dataset_run_id(&has_bits);
          _impl_.dataset_run_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool sim_only = 3 [json_name = "simOnly"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_sim_only(&has_bits);
          _impl_.sim_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .cavnue.messages.data_warehouse.management.v1.Dataset.Type type = 4 [json_name = "type"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::cavnue::messages::data_warehouse::management::v1::Dataset_Type>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string dataset_identifier = 5 [json_name = "datasetIdentifier"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_dataset_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.world_state.v1.GetDatasetRunsRequest.dataset_identifier"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetDatasetRunsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.GetDatasetRunsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 dataset_id = 1 [json_name = "datasetId"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_dataset_id(), target);
  }

  // optional int64 dataset_run_id = 2 [json_name = "datasetRunId"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_dataset_run_id(), target);
  }

  // optional bool sim_only = 3 [json_name = "simOnly"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_sim_only(), target);
  }

  // optional .cavnue.messages.data_warehouse.management.v1.Dataset.Type type = 4 [json_name = "type"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_type(), target);
  }

  // optional string dataset_identifier = 5 [json_name = "datasetIdentifier"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_dataset_identifier();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.world_state.v1.GetDatasetRunsRequest.dataset_identifier");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.GetDatasetRunsRequest)
  return target;
}

::size_t GetDatasetRunsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.GetDatasetRunsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string dataset_identifier = 5 [json_name = "datasetIdentifier"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_dataset_identifier());
    }

    // optional int64 dataset_id = 1 [json_name = "datasetId"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_dataset_id());
    }

    // optional int64 dataset_run_id = 2 [json_name = "datasetRunId"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_dataset_run_id());
    }

    // optional bool sim_only = 3 [json_name = "simOnly"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

    // optional .cavnue.messages.data_warehouse.management.v1.Dataset.Type type = 4 [json_name = "type"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDatasetRunsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDatasetRunsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDatasetRunsRequest::GetClassData() const { return &_class_data_; }


void GetDatasetRunsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDatasetRunsRequest*>(&to_msg);
  auto& from = static_cast<const GetDatasetRunsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.GetDatasetRunsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_dataset_identifier(from._internal_dataset_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.dataset_id_ = from._impl_.dataset_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dataset_run_id_ = from._impl_.dataset_run_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sim_only_ = from._impl_.sim_only_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDatasetRunsRequest::CopyFrom(const GetDatasetRunsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.GetDatasetRunsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDatasetRunsRequest::IsInitialized() const {
  return true;
}

void GetDatasetRunsRequest::InternalSwap(GetDatasetRunsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dataset_identifier_, lhs_arena,
                                       &other->_impl_.dataset_identifier_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDatasetRunsRequest, _impl_.type_)
      + sizeof(GetDatasetRunsRequest::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(GetDatasetRunsRequest, _impl_.dataset_id_)>(
          reinterpret_cast<char*>(&_impl_.dataset_id_),
          reinterpret_cast<char*>(&other->_impl_.dataset_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDatasetRunsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto[9]);
}
// ===================================================================

class GetDatasetRunsResponse::_Internal {
 public:
};

GetDatasetRunsResponse::GetDatasetRunsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.GetDatasetRunsResponse)
}
GetDatasetRunsResponse::GetDatasetRunsResponse(const GetDatasetRunsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDatasetRunsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.runs_){from._impl_.runs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.GetDatasetRunsResponse)
}

inline void GetDatasetRunsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.runs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetDatasetRunsResponse::~GetDatasetRunsResponse() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.GetDatasetRunsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDatasetRunsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_runs()->~RepeatedPtrField();
}

void GetDatasetRunsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDatasetRunsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.GetDatasetRunsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_runs()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDatasetRunsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cavnue.messages.world_state.v1.DatasetRun runs = 1 [json_name = "runs"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_runs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetDatasetRunsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.GetDatasetRunsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cavnue.messages.world_state.v1.DatasetRun runs = 1 [json_name = "runs"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_runs_size()); i < n; i++) {
    const auto& repfield = this->_internal_runs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.GetDatasetRunsResponse)
  return target;
}

::size_t GetDatasetRunsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.GetDatasetRunsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cavnue.messages.world_state.v1.DatasetRun runs = 1 [json_name = "runs"];
  total_size += 1UL * this->_internal_runs_size();
  for (const auto& msg : this->_internal_runs()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDatasetRunsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDatasetRunsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDatasetRunsResponse::GetClassData() const { return &_class_data_; }


void GetDatasetRunsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDatasetRunsResponse*>(&to_msg);
  auto& from = static_cast<const GetDatasetRunsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.GetDatasetRunsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_runs()->MergeFrom(from._internal_runs());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDatasetRunsResponse::CopyFrom(const GetDatasetRunsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.GetDatasetRunsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDatasetRunsResponse::IsInitialized() const {
  return true;
}

void GetDatasetRunsResponse::InternalSwap(GetDatasetRunsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_runs()->InternalSwap(other->_internal_mutable_runs());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDatasetRunsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto[10]);
}
// ===================================================================

class GetDatasetsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetDatasetsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetDatasetsRequest, _impl_._has_bits_);
  static void set_has_sim_only(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetDatasetsRequest::GetDatasetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.GetDatasetsRequest)
}
GetDatasetsRequest::GetDatasetsRequest(const GetDatasetsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.GetDatasetsRequest)
}

inline void GetDatasetsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sim_only_) { false }

  };
}

GetDatasetsRequest::~GetDatasetsRequest() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.GetDatasetsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDatasetsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetDatasetsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDatasetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.GetDatasetsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sim_only_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDatasetsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool sim_only = 1 [json_name = "simOnly"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_sim_only(&has_bits);
          _impl_.sim_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetDatasetsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.GetDatasetsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool sim_only = 1 [json_name = "simOnly"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_sim_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.GetDatasetsRequest)
  return target;
}

::size_t GetDatasetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.GetDatasetsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool sim_only = 1 [json_name = "simOnly"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDatasetsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDatasetsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDatasetsRequest::GetClassData() const { return &_class_data_; }


void GetDatasetsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDatasetsRequest*>(&to_msg);
  auto& from = static_cast<const GetDatasetsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.GetDatasetsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_sim_only(from._internal_sim_only());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDatasetsRequest::CopyFrom(const GetDatasetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.GetDatasetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDatasetsRequest::IsInitialized() const {
  return true;
}

void GetDatasetsRequest::InternalSwap(GetDatasetsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.sim_only_, other->_impl_.sim_only_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDatasetsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto[11]);
}
// ===================================================================

class GetDatasetsResponse::_Internal {
 public:
};

GetDatasetsResponse::GetDatasetsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.GetDatasetsResponse)
}
GetDatasetsResponse::GetDatasetsResponse(const GetDatasetsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDatasetsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.datasets_){from._impl_.datasets_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.GetDatasetsResponse)
}

inline void GetDatasetsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.datasets_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetDatasetsResponse::~GetDatasetsResponse() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.GetDatasetsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDatasetsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_datasets()->~RepeatedPtrField();
}

void GetDatasetsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDatasetsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.GetDatasetsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_datasets()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDatasetsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cavnue.messages.world_state.v1.Dataset datasets = 1 [json_name = "datasets"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datasets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetDatasetsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.GetDatasetsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cavnue.messages.world_state.v1.Dataset datasets = 1 [json_name = "datasets"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_datasets_size()); i < n; i++) {
    const auto& repfield = this->_internal_datasets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.GetDatasetsResponse)
  return target;
}

::size_t GetDatasetsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.GetDatasetsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cavnue.messages.world_state.v1.Dataset datasets = 1 [json_name = "datasets"];
  total_size += 1UL * this->_internal_datasets_size();
  for (const auto& msg : this->_internal_datasets()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDatasetsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDatasetsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDatasetsResponse::GetClassData() const { return &_class_data_; }


void GetDatasetsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDatasetsResponse*>(&to_msg);
  auto& from = static_cast<const GetDatasetsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.GetDatasetsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_datasets()->MergeFrom(from._internal_datasets());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDatasetsResponse::CopyFrom(const GetDatasetsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.GetDatasetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDatasetsResponse::IsInitialized() const {
  return true;
}

void GetDatasetsResponse::InternalSwap(GetDatasetsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_datasets()->InternalSwap(other->_internal_mutable_datasets());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDatasetsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto[12]);
}
// ===================================================================

class GetWorldStateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetWorldStateRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetWorldStateRequest, _impl_._has_bits_);
  static const ::cavnue::messages::world_state::v1::Query& query(const GetWorldStateRequest* msg);
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cavnue::messages::world_state::v1::Query&
GetWorldStateRequest::_Internal::query(const GetWorldStateRequest* msg) {
  return *msg->_impl_.query_;
}
GetWorldStateRequest::GetWorldStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.GetWorldStateRequest)
}
GetWorldStateRequest::GetWorldStateRequest(const GetWorldStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetWorldStateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.query_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.query_ = new ::cavnue::messages::world_state::v1::Query(*from._impl_.query_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.GetWorldStateRequest)
}

inline void GetWorldStateRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.query_){nullptr}
  };
}

GetWorldStateRequest::~GetWorldStateRequest() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.GetWorldStateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetWorldStateRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.query_;
}

void GetWorldStateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetWorldStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.GetWorldStateRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.query_ != nullptr);
    _impl_.query_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWorldStateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetWorldStateRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.GetWorldStateRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::query(this),
        _Internal::query(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.GetWorldStateRequest)
  return target;
}

::size_t GetWorldStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.GetWorldStateRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.query_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWorldStateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetWorldStateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWorldStateRequest::GetClassData() const { return &_class_data_; }


void GetWorldStateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetWorldStateRequest*>(&to_msg);
  auto& from = static_cast<const GetWorldStateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.GetWorldStateRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_query()->::cavnue::messages::world_state::v1::Query::MergeFrom(
        from._internal_query());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetWorldStateRequest::CopyFrom(const GetWorldStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.GetWorldStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWorldStateRequest::IsInitialized() const {
  return true;
}

void GetWorldStateRequest::InternalSwap(GetWorldStateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.query_, other->_impl_.query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWorldStateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto[13]);
}
// ===================================================================

class GetWorldStateResponse::_Internal {
 public:
};

void GetWorldStateResponse::clear_actors() {
  _internal_mutable_actors()->Clear();
}
void GetWorldStateResponse::clear_events() {
  _internal_mutable_events()->Clear();
}
void GetWorldStateResponse::clear_traffic_events() {
  _internal_mutable_traffic_events()->Clear();
}
GetWorldStateResponse::GetWorldStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.GetWorldStateResponse)
}
GetWorldStateResponse::GetWorldStateResponse(const GetWorldStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetWorldStateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.actors_){from._impl_.actors_}
    , decltype(_impl_.events_){from._impl_.events_}
    , decltype(_impl_.assets_){from._impl_.assets_}
    , decltype(_impl_.traffic_events_){from._impl_.traffic_events_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.GetWorldStateResponse)
}

inline void GetWorldStateResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.actors_){arena}
    , decltype(_impl_.events_){arena}
    , decltype(_impl_.assets_){arena}
    , decltype(_impl_.traffic_events_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetWorldStateResponse::~GetWorldStateResponse() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.GetWorldStateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetWorldStateResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_actors()->~RepeatedPtrField();
  _internal_mutable_events()->~RepeatedPtrField();
  _internal_mutable_assets()->~RepeatedPtrField();
  _internal_mutable_traffic_events()->~RepeatedPtrField();
}

void GetWorldStateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetWorldStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.GetWorldStateResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_actors()->Clear();
  _internal_mutable_events()->Clear();
  _internal_mutable_assets()->Clear();
  _internal_mutable_traffic_events()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWorldStateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cavnue.messages.inference.v1.Actor actors = 1 [json_name = "actors"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cavnue.messages.inference.v1.Event events = 2 [json_name = "events"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cavnue.messages.world_state.v1.Asset assets = 3 [json_name = "assets"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cavnue.messages.inference.v1.TrafficEvent traffic_events = 4 [json_name = "trafficEvents"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_traffic_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetWorldStateResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.GetWorldStateResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cavnue.messages.inference.v1.Actor actors = 1 [json_name = "actors"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_actors_size()); i < n; i++) {
    const auto& repfield = this->_internal_actors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cavnue.messages.inference.v1.Event events = 2 [json_name = "events"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cavnue.messages.world_state.v1.Asset assets = 3 [json_name = "assets"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_assets_size()); i < n; i++) {
    const auto& repfield = this->_internal_assets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cavnue.messages.inference.v1.TrafficEvent traffic_events = 4 [json_name = "trafficEvents"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_traffic_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_traffic_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.GetWorldStateResponse)
  return target;
}

::size_t GetWorldStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.GetWorldStateResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cavnue.messages.inference.v1.Actor actors = 1 [json_name = "actors"];
  total_size += 1UL * this->_internal_actors_size();
  for (const auto& msg : this->_internal_actors()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cavnue.messages.inference.v1.Event events = 2 [json_name = "events"];
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_internal_events()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cavnue.messages.world_state.v1.Asset assets = 3 [json_name = "assets"];
  total_size += 1UL * this->_internal_assets_size();
  for (const auto& msg : this->_internal_assets()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cavnue.messages.inference.v1.TrafficEvent traffic_events = 4 [json_name = "trafficEvents"];
  total_size += 1UL * this->_internal_traffic_events_size();
  for (const auto& msg : this->_internal_traffic_events()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWorldStateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetWorldStateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWorldStateResponse::GetClassData() const { return &_class_data_; }


void GetWorldStateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetWorldStateResponse*>(&to_msg);
  auto& from = static_cast<const GetWorldStateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.GetWorldStateResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_actors()->MergeFrom(from._internal_actors());
  _this->_internal_mutable_events()->MergeFrom(from._internal_events());
  _this->_internal_mutable_assets()->MergeFrom(from._internal_assets());
  _this->_internal_mutable_traffic_events()->MergeFrom(from._internal_traffic_events());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetWorldStateResponse::CopyFrom(const GetWorldStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.GetWorldStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWorldStateResponse::IsInitialized() const {
  return true;
}

void GetWorldStateResponse::InternalSwap(GetWorldStateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_actors()->InternalSwap(other->_internal_mutable_actors());
  _internal_mutable_events()->InternalSwap(other->_internal_mutable_events());
  _internal_mutable_assets()->InternalSwap(other->_internal_mutable_assets());
  _internal_mutable_traffic_events()->InternalSwap(other->_internal_mutable_traffic_events());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWorldStateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto[14]);
}
// ===================================================================

class GetWorldStateNearRealTimeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetWorldStateNearRealTimeRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetWorldStateNearRealTimeRequest, _impl_._has_bits_);
  static const ::cavnue::messages::common::v1::Header& header(const GetWorldStateNearRealTimeRequest* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cavnue::messages::world_state::v1::TimeFilter& time_filter(const GetWorldStateNearRealTimeRequest* msg);
  static void set_has_time_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::FieldMask& actor_field_request(const GetWorldStateNearRealTimeRequest* msg);
  static void set_has_actor_field_request(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::FieldMask& event_field_request(const GetWorldStateNearRealTimeRequest* msg);
  static void set_has_event_field_request(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::FieldMask& traffic_event_field_request(const GetWorldStateNearRealTimeRequest* msg);
  static void set_has_traffic_event_field_request(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::cavnue::messages::common::v1::Header&
GetWorldStateNearRealTimeRequest::_Internal::header(const GetWorldStateNearRealTimeRequest* msg) {
  return *msg->_impl_.header_;
}
const ::cavnue::messages::world_state::v1::TimeFilter&
GetWorldStateNearRealTimeRequest::_Internal::time_filter(const GetWorldStateNearRealTimeRequest* msg) {
  return *msg->_impl_.time_filter_;
}
const ::PROTOBUF_NAMESPACE_ID::FieldMask&
GetWorldStateNearRealTimeRequest::_Internal::actor_field_request(const GetWorldStateNearRealTimeRequest* msg) {
  return *msg->_impl_.actor_field_request_;
}
const ::PROTOBUF_NAMESPACE_ID::FieldMask&
GetWorldStateNearRealTimeRequest::_Internal::event_field_request(const GetWorldStateNearRealTimeRequest* msg) {
  return *msg->_impl_.event_field_request_;
}
const ::PROTOBUF_NAMESPACE_ID::FieldMask&
GetWorldStateNearRealTimeRequest::_Internal::traffic_event_field_request(const GetWorldStateNearRealTimeRequest* msg) {
  return *msg->_impl_.traffic_event_field_request_;
}
void GetWorldStateNearRealTimeRequest::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetWorldStateNearRealTimeRequest::clear_actor_field_request() {
  if (_impl_.actor_field_request_ != nullptr) _impl_.actor_field_request_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void GetWorldStateNearRealTimeRequest::clear_event_field_request() {
  if (_impl_.event_field_request_ != nullptr) _impl_.event_field_request_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void GetWorldStateNearRealTimeRequest::clear_traffic_event_field_request() {
  if (_impl_.traffic_event_field_request_ != nullptr) _impl_.traffic_event_field_request_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
GetWorldStateNearRealTimeRequest::GetWorldStateNearRealTimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest)
}
GetWorldStateNearRealTimeRequest::GetWorldStateNearRealTimeRequest(const GetWorldStateNearRealTimeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetWorldStateNearRealTimeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.time_filter_){nullptr}
    , decltype(_impl_.actor_field_request_){nullptr}
    , decltype(_impl_.event_field_request_){nullptr}
    , decltype(_impl_.traffic_event_field_request_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_ = new ::cavnue::messages::common::v1::Header(*from._impl_.header_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.time_filter_ = new ::cavnue::messages::world_state::v1::TimeFilter(*from._impl_.time_filter_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.actor_field_request_ = new ::PROTOBUF_NAMESPACE_ID::FieldMask(*from._impl_.actor_field_request_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.event_field_request_ = new ::PROTOBUF_NAMESPACE_ID::FieldMask(*from._impl_.event_field_request_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.traffic_event_field_request_ = new ::PROTOBUF_NAMESPACE_ID::FieldMask(*from._impl_.traffic_event_field_request_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest)
}

inline void GetWorldStateNearRealTimeRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.time_filter_){nullptr}
    , decltype(_impl_.actor_field_request_){nullptr}
    , decltype(_impl_.event_field_request_){nullptr}
    , decltype(_impl_.traffic_event_field_request_){nullptr}
  };
}

GetWorldStateNearRealTimeRequest::~GetWorldStateNearRealTimeRequest() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetWorldStateNearRealTimeRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.time_filter_;
  if (this != internal_default_instance()) delete _impl_.actor_field_request_;
  if (this != internal_default_instance()) delete _impl_.event_field_request_;
  if (this != internal_default_instance()) delete _impl_.traffic_event_field_request_;
}

void GetWorldStateNearRealTimeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetWorldStateNearRealTimeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.time_filter_ != nullptr);
      _impl_.time_filter_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.actor_field_request_ != nullptr);
      _impl_.actor_field_request_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.event_field_request_ != nullptr);
      _impl_.event_field_request_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.traffic_event_field_request_ != nullptr);
      _impl_.traffic_event_field_request_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWorldStateNearRealTimeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .cavnue.messages.world_state.v1.TimeFilter time_filter = 2 [json_name = "timeFilter"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_filter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.FieldMask actor_field_request = 3 [json_name = "actorFieldRequest"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_actor_field_request(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.FieldMask event_field_request = 4 [json_name = "eventFieldRequest"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_event_field_request(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.FieldMask traffic_event_field_request = 5 [json_name = "trafficEventFieldRequest"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_event_field_request(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetWorldStateNearRealTimeRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional .cavnue.messages.world_state.v1.TimeFilter time_filter = 2 [json_name = "timeFilter"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::time_filter(this),
        _Internal::time_filter(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.FieldMask actor_field_request = 3 [json_name = "actorFieldRequest"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::actor_field_request(this),
        _Internal::actor_field_request(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.FieldMask event_field_request = 4 [json_name = "eventFieldRequest"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::event_field_request(this),
        _Internal::event_field_request(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.FieldMask traffic_event_field_request = 5 [json_name = "trafficEventFieldRequest"];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::traffic_event_field_request(this),
        _Internal::traffic_event_field_request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest)
  return target;
}

::size_t GetWorldStateNearRealTimeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .cavnue.messages.world_state.v1.TimeFilter time_filter = 2 [json_name = "timeFilter"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.time_filter_);
    }

    // .google.protobuf.FieldMask actor_field_request = 3 [json_name = "actorFieldRequest"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.actor_field_request_);
    }

    // .google.protobuf.FieldMask event_field_request = 4 [json_name = "eventFieldRequest"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_field_request_);
    }

    // .google.protobuf.FieldMask traffic_event_field_request = 5 [json_name = "trafficEventFieldRequest"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.traffic_event_field_request_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWorldStateNearRealTimeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetWorldStateNearRealTimeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWorldStateNearRealTimeRequest::GetClassData() const { return &_class_data_; }


void GetWorldStateNearRealTimeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetWorldStateNearRealTimeRequest*>(&to_msg);
  auto& from = static_cast<const GetWorldStateNearRealTimeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::cavnue::messages::common::v1::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_time_filter()->::cavnue::messages::world_state::v1::TimeFilter::MergeFrom(
          from._internal_time_filter());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_actor_field_request()->::PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(
          from._internal_actor_field_request());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_event_field_request()->::PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(
          from._internal_event_field_request());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_traffic_event_field_request()->::PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(
          from._internal_traffic_event_field_request());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetWorldStateNearRealTimeRequest::CopyFrom(const GetWorldStateNearRealTimeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWorldStateNearRealTimeRequest::IsInitialized() const {
  return true;
}

void GetWorldStateNearRealTimeRequest::InternalSwap(GetWorldStateNearRealTimeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetWorldStateNearRealTimeRequest, _impl_.traffic_event_field_request_)
      + sizeof(GetWorldStateNearRealTimeRequest::_impl_.traffic_event_field_request_)
      - PROTOBUF_FIELD_OFFSET(GetWorldStateNearRealTimeRequest, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWorldStateNearRealTimeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto[15]);
}
// ===================================================================

class GetWorldStateNearRealTimeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetWorldStateNearRealTimeResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetWorldStateNearRealTimeResponse, _impl_._has_bits_);
  static const ::cavnue::messages::common::v1::Header& header(const GetWorldStateNearRealTimeResponse* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::FieldMask& actor_field_mask(const GetWorldStateNearRealTimeResponse* msg);
  static void set_has_actor_field_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::FieldMask& event_field_mask(const GetWorldStateNearRealTimeResponse* msg);
  static void set_has_event_field_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::FieldMask& traffic_event_field_mask(const GetWorldStateNearRealTimeResponse* msg);
  static void set_has_traffic_event_field_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::cavnue::messages::common::v1::Header&
GetWorldStateNearRealTimeResponse::_Internal::header(const GetWorldStateNearRealTimeResponse* msg) {
  return *msg->_impl_.header_;
}
const ::PROTOBUF_NAMESPACE_ID::FieldMask&
GetWorldStateNearRealTimeResponse::_Internal::actor_field_mask(const GetWorldStateNearRealTimeResponse* msg) {
  return *msg->_impl_.actor_field_mask_;
}
const ::PROTOBUF_NAMESPACE_ID::FieldMask&
GetWorldStateNearRealTimeResponse::_Internal::event_field_mask(const GetWorldStateNearRealTimeResponse* msg) {
  return *msg->_impl_.event_field_mask_;
}
const ::PROTOBUF_NAMESPACE_ID::FieldMask&
GetWorldStateNearRealTimeResponse::_Internal::traffic_event_field_mask(const GetWorldStateNearRealTimeResponse* msg) {
  return *msg->_impl_.traffic_event_field_mask_;
}
void GetWorldStateNearRealTimeResponse::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetWorldStateNearRealTimeResponse::clear_actor_field_mask() {
  if (_impl_.actor_field_mask_ != nullptr) _impl_.actor_field_mask_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void GetWorldStateNearRealTimeResponse::clear_event_field_mask() {
  if (_impl_.event_field_mask_ != nullptr) _impl_.event_field_mask_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void GetWorldStateNearRealTimeResponse::clear_traffic_event_field_mask() {
  if (_impl_.traffic_event_field_mask_ != nullptr) _impl_.traffic_event_field_mask_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void GetWorldStateNearRealTimeResponse::clear_actors() {
  _internal_mutable_actors()->Clear();
}
void GetWorldStateNearRealTimeResponse::clear_events() {
  _internal_mutable_events()->Clear();
}
void GetWorldStateNearRealTimeResponse::clear_traffic_events() {
  _internal_mutable_traffic_events()->Clear();
}
GetWorldStateNearRealTimeResponse::GetWorldStateNearRealTimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse)
}
GetWorldStateNearRealTimeResponse::GetWorldStateNearRealTimeResponse(const GetWorldStateNearRealTimeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetWorldStateNearRealTimeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.actors_){from._impl_.actors_}
    , decltype(_impl_.events_){from._impl_.events_}
    , decltype(_impl_.traffic_events_){from._impl_.traffic_events_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.actor_field_mask_){nullptr}
    , decltype(_impl_.event_field_mask_){nullptr}
    , decltype(_impl_.traffic_event_field_mask_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_ = new ::cavnue::messages::common::v1::Header(*from._impl_.header_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.actor_field_mask_ = new ::PROTOBUF_NAMESPACE_ID::FieldMask(*from._impl_.actor_field_mask_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.event_field_mask_ = new ::PROTOBUF_NAMESPACE_ID::FieldMask(*from._impl_.event_field_mask_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.traffic_event_field_mask_ = new ::PROTOBUF_NAMESPACE_ID::FieldMask(*from._impl_.traffic_event_field_mask_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse)
}

inline void GetWorldStateNearRealTimeResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.actors_){arena}
    , decltype(_impl_.events_){arena}
    , decltype(_impl_.traffic_events_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.actor_field_mask_){nullptr}
    , decltype(_impl_.event_field_mask_){nullptr}
    , decltype(_impl_.traffic_event_field_mask_){nullptr}
  };
}

GetWorldStateNearRealTimeResponse::~GetWorldStateNearRealTimeResponse() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetWorldStateNearRealTimeResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_actors()->~RepeatedPtrField();
  _internal_mutable_events()->~RepeatedPtrField();
  _internal_mutable_traffic_events()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.actor_field_mask_;
  if (this != internal_default_instance()) delete _impl_.event_field_mask_;
  if (this != internal_default_instance()) delete _impl_.traffic_event_field_mask_;
}

void GetWorldStateNearRealTimeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetWorldStateNearRealTimeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_actors()->Clear();
  _internal_mutable_events()->Clear();
  _internal_mutable_traffic_events()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.actor_field_mask_ != nullptr);
      _impl_.actor_field_mask_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.event_field_mask_ != nullptr);
      _impl_.event_field_mask_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.traffic_event_field_mask_ != nullptr);
      _impl_.traffic_event_field_mask_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWorldStateNearRealTimeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.FieldMask actor_field_mask = 2 [json_name = "actorFieldMask"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_actor_field_mask(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.FieldMask event_field_mask = 3 [json_name = "eventFieldMask"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_event_field_mask(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.FieldMask traffic_event_field_mask = 4 [json_name = "trafficEventFieldMask"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_event_field_mask(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cavnue.messages.inference.v1.Actor actors = 5 [json_name = "actors"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cavnue.messages.inference.v1.Event events = 6 [json_name = "events"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cavnue.messages.inference.v1.TrafficEvent traffic_events = 7 [json_name = "trafficEvents"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_traffic_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetWorldStateNearRealTimeResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.FieldMask actor_field_mask = 2 [json_name = "actorFieldMask"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::actor_field_mask(this),
        _Internal::actor_field_mask(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.FieldMask event_field_mask = 3 [json_name = "eventFieldMask"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::event_field_mask(this),
        _Internal::event_field_mask(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.FieldMask traffic_event_field_mask = 4 [json_name = "trafficEventFieldMask"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::traffic_event_field_mask(this),
        _Internal::traffic_event_field_mask(this).GetCachedSize(), target, stream);
  }

  // repeated .cavnue.messages.inference.v1.Actor actors = 5 [json_name = "actors"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_actors_size()); i < n; i++) {
    const auto& repfield = this->_internal_actors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cavnue.messages.inference.v1.Event events = 6 [json_name = "events"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cavnue.messages.inference.v1.TrafficEvent traffic_events = 7 [json_name = "trafficEvents"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_traffic_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_traffic_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse)
  return target;
}

::size_t GetWorldStateNearRealTimeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cavnue.messages.inference.v1.Actor actors = 5 [json_name = "actors"];
  total_size += 1UL * this->_internal_actors_size();
  for (const auto& msg : this->_internal_actors()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cavnue.messages.inference.v1.Event events = 6 [json_name = "events"];
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_internal_events()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cavnue.messages.inference.v1.TrafficEvent traffic_events = 7 [json_name = "trafficEvents"];
  total_size += 1UL * this->_internal_traffic_events_size();
  for (const auto& msg : this->_internal_traffic_events()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // .google.protobuf.FieldMask actor_field_mask = 2 [json_name = "actorFieldMask"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.actor_field_mask_);
    }

    // .google.protobuf.FieldMask event_field_mask = 3 [json_name = "eventFieldMask"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_field_mask_);
    }

    // .google.protobuf.FieldMask traffic_event_field_mask = 4 [json_name = "trafficEventFieldMask"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.traffic_event_field_mask_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWorldStateNearRealTimeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetWorldStateNearRealTimeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWorldStateNearRealTimeResponse::GetClassData() const { return &_class_data_; }


void GetWorldStateNearRealTimeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetWorldStateNearRealTimeResponse*>(&to_msg);
  auto& from = static_cast<const GetWorldStateNearRealTimeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_actors()->MergeFrom(from._internal_actors());
  _this->_internal_mutable_events()->MergeFrom(from._internal_events());
  _this->_internal_mutable_traffic_events()->MergeFrom(from._internal_traffic_events());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::cavnue::messages::common::v1::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_actor_field_mask()->::PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(
          from._internal_actor_field_mask());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_event_field_mask()->::PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(
          from._internal_event_field_mask());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_traffic_event_field_mask()->::PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(
          from._internal_traffic_event_field_mask());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetWorldStateNearRealTimeResponse::CopyFrom(const GetWorldStateNearRealTimeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.GetWorldStateNearRealTimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWorldStateNearRealTimeResponse::IsInitialized() const {
  return true;
}

void GetWorldStateNearRealTimeResponse::InternalSwap(GetWorldStateNearRealTimeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_actors()->InternalSwap(other->_internal_mutable_actors());
  _internal_mutable_events()->InternalSwap(other->_internal_mutable_events());
  _internal_mutable_traffic_events()->InternalSwap(other->_internal_mutable_traffic_events());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetWorldStateNearRealTimeResponse, _impl_.traffic_event_field_mask_)
      + sizeof(GetWorldStateNearRealTimeResponse::_impl_.traffic_event_field_mask_)
      - PROTOBUF_FIELD_OFFSET(GetWorldStateNearRealTimeResponse, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWorldStateNearRealTimeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto[16]);
}
// ===================================================================

class GetActorsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetActorsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetActorsRequest, _impl_._has_bits_);
  static const ::cavnue::messages::world_state::v1::Query& query(const GetActorsRequest* msg);
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cavnue::messages::world_state::v1::Query&
GetActorsRequest::_Internal::query(const GetActorsRequest* msg) {
  return *msg->_impl_.query_;
}
GetActorsRequest::GetActorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.GetActorsRequest)
}
GetActorsRequest::GetActorsRequest(const GetActorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetActorsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.query_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.query_ = new ::cavnue::messages::world_state::v1::Query(*from._impl_.query_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.GetActorsRequest)
}

inline void GetActorsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.query_){nullptr}
  };
}

GetActorsRequest::~GetActorsRequest() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.GetActorsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetActorsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.query_;
}

void GetActorsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetActorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.GetActorsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.query_ != nullptr);
    _impl_.query_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetActorsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetActorsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.GetActorsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::query(this),
        _Internal::query(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.GetActorsRequest)
  return target;
}

::size_t GetActorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.GetActorsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.query_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetActorsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetActorsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetActorsRequest::GetClassData() const { return &_class_data_; }


void GetActorsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetActorsRequest*>(&to_msg);
  auto& from = static_cast<const GetActorsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.GetActorsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_query()->::cavnue::messages::world_state::v1::Query::MergeFrom(
        from._internal_query());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetActorsRequest::CopyFrom(const GetActorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.GetActorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetActorsRequest::IsInitialized() const {
  return true;
}

void GetActorsRequest::InternalSwap(GetActorsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.query_, other->_impl_.query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetActorsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto[17]);
}
// ===================================================================

class GetActorsResponse::_Internal {
 public:
};

void GetActorsResponse::clear_actors() {
  _internal_mutable_actors()->Clear();
}
GetActorsResponse::GetActorsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.GetActorsResponse)
}
GetActorsResponse::GetActorsResponse(const GetActorsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetActorsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.actors_){from._impl_.actors_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.GetActorsResponse)
}

inline void GetActorsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.actors_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetActorsResponse::~GetActorsResponse() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.GetActorsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetActorsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_actors()->~RepeatedPtrField();
}

void GetActorsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetActorsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.GetActorsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_actors()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetActorsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cavnue.messages.inference.v1.Actor actors = 1 [json_name = "actors"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetActorsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.GetActorsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cavnue.messages.inference.v1.Actor actors = 1 [json_name = "actors"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_actors_size()); i < n; i++) {
    const auto& repfield = this->_internal_actors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.GetActorsResponse)
  return target;
}

::size_t GetActorsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.GetActorsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cavnue.messages.inference.v1.Actor actors = 1 [json_name = "actors"];
  total_size += 1UL * this->_internal_actors_size();
  for (const auto& msg : this->_internal_actors()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetActorsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetActorsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetActorsResponse::GetClassData() const { return &_class_data_; }


void GetActorsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetActorsResponse*>(&to_msg);
  auto& from = static_cast<const GetActorsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.GetActorsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_actors()->MergeFrom(from._internal_actors());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetActorsResponse::CopyFrom(const GetActorsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.GetActorsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetActorsResponse::IsInitialized() const {
  return true;
}

void GetActorsResponse::InternalSwap(GetActorsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_actors()->InternalSwap(other->_internal_mutable_actors());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetActorsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto[18]);
}
// ===================================================================

class GetEventsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetEventsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetEventsRequest, _impl_._has_bits_);
  static const ::cavnue::messages::world_state::v1::Query& query(const GetEventsRequest* msg);
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cavnue::messages::world_state::v1::Query&
GetEventsRequest::_Internal::query(const GetEventsRequest* msg) {
  return *msg->_impl_.query_;
}
GetEventsRequest::GetEventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.GetEventsRequest)
}
GetEventsRequest::GetEventsRequest(const GetEventsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetEventsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.query_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.query_ = new ::cavnue::messages::world_state::v1::Query(*from._impl_.query_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.GetEventsRequest)
}

inline void GetEventsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.query_){nullptr}
  };
}

GetEventsRequest::~GetEventsRequest() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.GetEventsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetEventsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.query_;
}

void GetEventsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetEventsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.GetEventsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.query_ != nullptr);
    _impl_.query_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEventsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetEventsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.GetEventsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::query(this),
        _Internal::query(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.GetEventsRequest)
  return target;
}

::size_t GetEventsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.GetEventsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.query_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetEventsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetEventsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetEventsRequest::GetClassData() const { return &_class_data_; }


void GetEventsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetEventsRequest*>(&to_msg);
  auto& from = static_cast<const GetEventsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.GetEventsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_query()->::cavnue::messages::world_state::v1::Query::MergeFrom(
        from._internal_query());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetEventsRequest::CopyFrom(const GetEventsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.GetEventsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEventsRequest::IsInitialized() const {
  return true;
}

void GetEventsRequest::InternalSwap(GetEventsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.query_, other->_impl_.query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEventsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto[19]);
}
// ===================================================================

class GetEventsResponse::_Internal {
 public:
};

void GetEventsResponse::clear_events() {
  _internal_mutable_events()->Clear();
}
GetEventsResponse::GetEventsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.GetEventsResponse)
}
GetEventsResponse::GetEventsResponse(const GetEventsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetEventsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){from._impl_.events_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.GetEventsResponse)
}

inline void GetEventsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetEventsResponse::~GetEventsResponse() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.GetEventsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetEventsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_events()->~RepeatedPtrField();
}

void GetEventsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetEventsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.GetEventsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_events()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEventsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cavnue.messages.inference.v1.Event events = 1 [json_name = "events"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetEventsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.GetEventsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cavnue.messages.inference.v1.Event events = 1 [json_name = "events"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.GetEventsResponse)
  return target;
}

::size_t GetEventsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.GetEventsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cavnue.messages.inference.v1.Event events = 1 [json_name = "events"];
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_internal_events()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetEventsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetEventsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetEventsResponse::GetClassData() const { return &_class_data_; }


void GetEventsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetEventsResponse*>(&to_msg);
  auto& from = static_cast<const GetEventsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.GetEventsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_events()->MergeFrom(from._internal_events());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetEventsResponse::CopyFrom(const GetEventsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.GetEventsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEventsResponse::IsInitialized() const {
  return true;
}

void GetEventsResponse::InternalSwap(GetEventsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_events()->InternalSwap(other->_internal_mutable_events());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEventsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto[20]);
}
// ===================================================================

class GetAssetsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAssetsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetAssetsRequest, _impl_._has_bits_);
  static const ::cavnue::messages::world_state::v1::Query& query(const GetAssetsRequest* msg);
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cavnue::messages::world_state::v1::Query&
GetAssetsRequest::_Internal::query(const GetAssetsRequest* msg) {
  return *msg->_impl_.query_;
}
GetAssetsRequest::GetAssetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.GetAssetsRequest)
}
GetAssetsRequest::GetAssetsRequest(const GetAssetsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAssetsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.query_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.query_ = new ::cavnue::messages::world_state::v1::Query(*from._impl_.query_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.GetAssetsRequest)
}

inline void GetAssetsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.query_){nullptr}
  };
}

GetAssetsRequest::~GetAssetsRequest() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.GetAssetsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAssetsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.query_;
}

void GetAssetsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAssetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.GetAssetsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.query_ != nullptr);
    _impl_.query_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAssetsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetAssetsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.GetAssetsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::query(this),
        _Internal::query(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.GetAssetsRequest)
  return target;
}

::size_t GetAssetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.GetAssetsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cavnue.messages.world_state.v1.Query query = 1 [json_name = "query"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.query_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAssetsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAssetsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAssetsRequest::GetClassData() const { return &_class_data_; }


void GetAssetsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAssetsRequest*>(&to_msg);
  auto& from = static_cast<const GetAssetsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.GetAssetsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_query()->::cavnue::messages::world_state::v1::Query::MergeFrom(
        from._internal_query());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAssetsRequest::CopyFrom(const GetAssetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.GetAssetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAssetsRequest::IsInitialized() const {
  return true;
}

void GetAssetsRequest::InternalSwap(GetAssetsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.query_, other->_impl_.query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAssetsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto[21]);
}
// ===================================================================

class GetAssetsResponse::_Internal {
 public:
};

GetAssetsResponse::GetAssetsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.GetAssetsResponse)
}
GetAssetsResponse::GetAssetsResponse(const GetAssetsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAssetsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.assets_){from._impl_.assets_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.GetAssetsResponse)
}

inline void GetAssetsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.assets_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetAssetsResponse::~GetAssetsResponse() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.GetAssetsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAssetsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_assets()->~RepeatedPtrField();
}

void GetAssetsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAssetsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.GetAssetsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_assets()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAssetsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cavnue.messages.world_state.v1.Asset assets = 1 [json_name = "assets"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetAssetsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.GetAssetsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cavnue.messages.world_state.v1.Asset assets = 1 [json_name = "assets"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_assets_size()); i < n; i++) {
    const auto& repfield = this->_internal_assets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.GetAssetsResponse)
  return target;
}

::size_t GetAssetsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.GetAssetsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cavnue.messages.world_state.v1.Asset assets = 1 [json_name = "assets"];
  total_size += 1UL * this->_internal_assets_size();
  for (const auto& msg : this->_internal_assets()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAssetsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAssetsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAssetsResponse::GetClassData() const { return &_class_data_; }


void GetAssetsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAssetsResponse*>(&to_msg);
  auto& from = static_cast<const GetAssetsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.GetAssetsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_assets()->MergeFrom(from._internal_assets());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAssetsResponse::CopyFrom(const GetAssetsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.GetAssetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAssetsResponse::IsInitialized() const {
  return true;
}

void GetAssetsResponse::InternalSwap(GetAssetsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_assets()->InternalSwap(other->_internal_mutable_assets());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAssetsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto[22]);
}
// ===================================================================

class GetTrafficAggregationRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetTrafficAggregationRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetTrafficAggregationRequest, _impl_._has_bits_);
  static const ::cavnue::messages::world_state::v1::TimeFilter& time_filter(const GetTrafficAggregationRequest* msg);
  static void set_has_time_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cavnue::messages::world_state::v1::TimeFilter&
GetTrafficAggregationRequest::_Internal::time_filter(const GetTrafficAggregationRequest* msg) {
  return *msg->_impl_.time_filter_;
}
GetTrafficAggregationRequest::GetTrafficAggregationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.GetTrafficAggregationRequest)
}
GetTrafficAggregationRequest::GetTrafficAggregationRequest(const GetTrafficAggregationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTrafficAggregationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_filter_){nullptr}
    , decltype(_impl_.frequency_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.time_filter_ = new ::cavnue::messages::world_state::v1::TimeFilter(*from._impl_.time_filter_);
  }
  _this->_impl_.frequency_ = from._impl_.frequency_;
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.GetTrafficAggregationRequest)
}

inline void GetTrafficAggregationRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_filter_){nullptr}
    , decltype(_impl_.frequency_) { 0 }

  };
}

GetTrafficAggregationRequest::~GetTrafficAggregationRequest() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.GetTrafficAggregationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTrafficAggregationRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.time_filter_;
}

void GetTrafficAggregationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTrafficAggregationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.GetTrafficAggregationRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.time_filter_ != nullptr);
    _impl_.time_filter_->Clear();
  }
  _impl_.frequency_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTrafficAggregationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.world_state.v1.TimeFilter time_filter = 1 [json_name = "timeFilter"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_filter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.world_state.v1.GetTrafficAggregationRequest.Frequency frequency = 2 [json_name = "frequency"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_frequency(static_cast<::cavnue::messages::world_state::v1::GetTrafficAggregationRequest_Frequency>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetTrafficAggregationRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.GetTrafficAggregationRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.world_state.v1.TimeFilter time_filter = 1 [json_name = "timeFilter"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time_filter(this),
        _Internal::time_filter(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.world_state.v1.GetTrafficAggregationRequest.Frequency frequency = 2 [json_name = "frequency"];
  if (this->_internal_frequency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_frequency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.GetTrafficAggregationRequest)
  return target;
}

::size_t GetTrafficAggregationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.GetTrafficAggregationRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cavnue.messages.world_state.v1.TimeFilter time_filter = 1 [json_name = "timeFilter"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_filter_);
  }

  // .cavnue.messages.world_state.v1.GetTrafficAggregationRequest.Frequency frequency = 2 [json_name = "frequency"];
  if (this->_internal_frequency() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_frequency());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTrafficAggregationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTrafficAggregationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTrafficAggregationRequest::GetClassData() const { return &_class_data_; }


void GetTrafficAggregationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTrafficAggregationRequest*>(&to_msg);
  auto& from = static_cast<const GetTrafficAggregationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.GetTrafficAggregationRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_time_filter()->::cavnue::messages::world_state::v1::TimeFilter::MergeFrom(
        from._internal_time_filter());
  }
  if (from._internal_frequency() != 0) {
    _this->_internal_set_frequency(from._internal_frequency());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTrafficAggregationRequest::CopyFrom(const GetTrafficAggregationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.GetTrafficAggregationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTrafficAggregationRequest::IsInitialized() const {
  return true;
}

void GetTrafficAggregationRequest::InternalSwap(GetTrafficAggregationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTrafficAggregationRequest, _impl_.frequency_)
      + sizeof(GetTrafficAggregationRequest::_impl_.frequency_)
      - PROTOBUF_FIELD_OFFSET(GetTrafficAggregationRequest, _impl_.time_filter_)>(
          reinterpret_cast<char*>(&_impl_.time_filter_),
          reinterpret_cast<char*>(&other->_impl_.time_filter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTrafficAggregationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto[23]);
}
// ===================================================================

class GetTrafficAggregationResponse::_Internal {
 public:
};

void GetTrafficAggregationResponse::clear_lane_aggregations() {
  _internal_mutable_lane_aggregations()->Clear();
}
void GetTrafficAggregationResponse::clear_road_aggregations() {
  _internal_mutable_road_aggregations()->Clear();
}
GetTrafficAggregationResponse::GetTrafficAggregationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.GetTrafficAggregationResponse)
}
GetTrafficAggregationResponse::GetTrafficAggregationResponse(const GetTrafficAggregationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTrafficAggregationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lane_aggregations_){from._impl_.lane_aggregations_}
    , decltype(_impl_.road_aggregations_){from._impl_.road_aggregations_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.GetTrafficAggregationResponse)
}

inline void GetTrafficAggregationResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.lane_aggregations_){arena}
    , decltype(_impl_.road_aggregations_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetTrafficAggregationResponse::~GetTrafficAggregationResponse() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.GetTrafficAggregationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTrafficAggregationResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_lane_aggregations()->~RepeatedPtrField();
  _internal_mutable_road_aggregations()->~RepeatedPtrField();
}

void GetTrafficAggregationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTrafficAggregationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.GetTrafficAggregationResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_lane_aggregations()->Clear();
  _internal_mutable_road_aggregations()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTrafficAggregationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cavnue.messages.inference.v1.LaneSegmentAggregation lane_aggregations = 1 [json_name = "laneAggregations"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lane_aggregations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cavnue.messages.inference.v1.RoadSegmentAggregation road_aggregations = 2 [json_name = "roadAggregations"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_road_aggregations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetTrafficAggregationResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.GetTrafficAggregationResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cavnue.messages.inference.v1.LaneSegmentAggregation lane_aggregations = 1 [json_name = "laneAggregations"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lane_aggregations_size()); i < n; i++) {
    const auto& repfield = this->_internal_lane_aggregations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cavnue.messages.inference.v1.RoadSegmentAggregation road_aggregations = 2 [json_name = "roadAggregations"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_road_aggregations_size()); i < n; i++) {
    const auto& repfield = this->_internal_road_aggregations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.GetTrafficAggregationResponse)
  return target;
}

::size_t GetTrafficAggregationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.GetTrafficAggregationResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cavnue.messages.inference.v1.LaneSegmentAggregation lane_aggregations = 1 [json_name = "laneAggregations"];
  total_size += 1UL * this->_internal_lane_aggregations_size();
  for (const auto& msg : this->_internal_lane_aggregations()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cavnue.messages.inference.v1.RoadSegmentAggregation road_aggregations = 2 [json_name = "roadAggregations"];
  total_size += 1UL * this->_internal_road_aggregations_size();
  for (const auto& msg : this->_internal_road_aggregations()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTrafficAggregationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTrafficAggregationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTrafficAggregationResponse::GetClassData() const { return &_class_data_; }


void GetTrafficAggregationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTrafficAggregationResponse*>(&to_msg);
  auto& from = static_cast<const GetTrafficAggregationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.GetTrafficAggregationResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_lane_aggregations()->MergeFrom(from._internal_lane_aggregations());
  _this->_internal_mutable_road_aggregations()->MergeFrom(from._internal_road_aggregations());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTrafficAggregationResponse::CopyFrom(const GetTrafficAggregationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.GetTrafficAggregationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTrafficAggregationResponse::IsInitialized() const {
  return true;
}

void GetTrafficAggregationResponse::InternalSwap(GetTrafficAggregationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_lane_aggregations()->InternalSwap(other->_internal_mutable_lane_aggregations());
  _internal_mutable_road_aggregations()->InternalSwap(other->_internal_mutable_road_aggregations());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTrafficAggregationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto[24]);
}
// ===================================================================

class GetAverageDailyTrafficRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAverageDailyTrafficRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetAverageDailyTrafficRequest, _impl_._has_bits_);
  static const ::cavnue::messages::world_state::v1::TimeFilter& time_filter(const GetAverageDailyTrafficRequest* msg);
  static void set_has_time_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cavnue::messages::world_state::v1::TimeFilter&
GetAverageDailyTrafficRequest::_Internal::time_filter(const GetAverageDailyTrafficRequest* msg) {
  return *msg->_impl_.time_filter_;
}
GetAverageDailyTrafficRequest::GetAverageDailyTrafficRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.GetAverageDailyTrafficRequest)
}
GetAverageDailyTrafficRequest::GetAverageDailyTrafficRequest(const GetAverageDailyTrafficRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAverageDailyTrafficRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_filter_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.time_filter_ = new ::cavnue::messages::world_state::v1::TimeFilter(*from._impl_.time_filter_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.GetAverageDailyTrafficRequest)
}

inline void GetAverageDailyTrafficRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_filter_){nullptr}
  };
}

GetAverageDailyTrafficRequest::~GetAverageDailyTrafficRequest() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.GetAverageDailyTrafficRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAverageDailyTrafficRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.time_filter_;
}

void GetAverageDailyTrafficRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAverageDailyTrafficRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.GetAverageDailyTrafficRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.time_filter_ != nullptr);
    _impl_.time_filter_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAverageDailyTrafficRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.world_state.v1.TimeFilter time_filter = 1 [json_name = "timeFilter"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_filter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetAverageDailyTrafficRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.GetAverageDailyTrafficRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.world_state.v1.TimeFilter time_filter = 1 [json_name = "timeFilter"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time_filter(this),
        _Internal::time_filter(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.GetAverageDailyTrafficRequest)
  return target;
}

::size_t GetAverageDailyTrafficRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.GetAverageDailyTrafficRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cavnue.messages.world_state.v1.TimeFilter time_filter = 1 [json_name = "timeFilter"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_filter_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAverageDailyTrafficRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAverageDailyTrafficRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAverageDailyTrafficRequest::GetClassData() const { return &_class_data_; }


void GetAverageDailyTrafficRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAverageDailyTrafficRequest*>(&to_msg);
  auto& from = static_cast<const GetAverageDailyTrafficRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.GetAverageDailyTrafficRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_time_filter()->::cavnue::messages::world_state::v1::TimeFilter::MergeFrom(
        from._internal_time_filter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAverageDailyTrafficRequest::CopyFrom(const GetAverageDailyTrafficRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.GetAverageDailyTrafficRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAverageDailyTrafficRequest::IsInitialized() const {
  return true;
}

void GetAverageDailyTrafficRequest::InternalSwap(GetAverageDailyTrafficRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.time_filter_, other->_impl_.time_filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAverageDailyTrafficRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto[25]);
}
// ===================================================================

class GetAverageDailyTrafficResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAverageDailyTrafficResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetAverageDailyTrafficResponse, _impl_._has_bits_);
  static const ::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation& aadt(const GetAverageDailyTrafficResponse* msg);
  static void set_has_aadt(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation&
GetAverageDailyTrafficResponse::_Internal::aadt(const GetAverageDailyTrafficResponse* msg) {
  return *msg->_impl_.aadt_;
}
void GetAverageDailyTrafficResponse::clear_madt() {
  _internal_mutable_madt()->Clear();
}
void GetAverageDailyTrafficResponse::clear_aadt() {
  if (_impl_.aadt_ != nullptr) _impl_.aadt_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetAverageDailyTrafficResponse::GetAverageDailyTrafficResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.GetAverageDailyTrafficResponse)
}
GetAverageDailyTrafficResponse::GetAverageDailyTrafficResponse(const GetAverageDailyTrafficResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAverageDailyTrafficResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.madt_){from._impl_.madt_}
    , decltype(_impl_.aadt_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.aadt_ = new ::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation(*from._impl_.aadt_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.GetAverageDailyTrafficResponse)
}

inline void GetAverageDailyTrafficResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.madt_){arena}
    , decltype(_impl_.aadt_){nullptr}
  };
}

GetAverageDailyTrafficResponse::~GetAverageDailyTrafficResponse() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.GetAverageDailyTrafficResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAverageDailyTrafficResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_madt()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.aadt_;
}

void GetAverageDailyTrafficResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAverageDailyTrafficResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.GetAverageDailyTrafficResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_madt()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.aadt_ != nullptr);
    _impl_.aadt_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAverageDailyTrafficResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cavnue.messages.inference.v1.MonthlyAverageDailyTrafficCalculation madt = 1 [json_name = "madt"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_madt(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.inference.v1.AnnualAverageDailyTrafficCalculation aadt = 2 [json_name = "aadt"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_aadt(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetAverageDailyTrafficResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.GetAverageDailyTrafficResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cavnue.messages.inference.v1.MonthlyAverageDailyTrafficCalculation madt = 1 [json_name = "madt"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_madt_size()); i < n; i++) {
    const auto& repfield = this->_internal_madt(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.inference.v1.AnnualAverageDailyTrafficCalculation aadt = 2 [json_name = "aadt"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::aadt(this),
        _Internal::aadt(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.GetAverageDailyTrafficResponse)
  return target;
}

::size_t GetAverageDailyTrafficResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.GetAverageDailyTrafficResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cavnue.messages.inference.v1.MonthlyAverageDailyTrafficCalculation madt = 1 [json_name = "madt"];
  total_size += 1UL * this->_internal_madt_size();
  for (const auto& msg : this->_internal_madt()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cavnue.messages.inference.v1.AnnualAverageDailyTrafficCalculation aadt = 2 [json_name = "aadt"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.aadt_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAverageDailyTrafficResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAverageDailyTrafficResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAverageDailyTrafficResponse::GetClassData() const { return &_class_data_; }


void GetAverageDailyTrafficResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAverageDailyTrafficResponse*>(&to_msg);
  auto& from = static_cast<const GetAverageDailyTrafficResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.GetAverageDailyTrafficResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_madt()->MergeFrom(from._internal_madt());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_aadt()->::cavnue::messages::inference::v1::AnnualAverageDailyTrafficCalculation::MergeFrom(
        from._internal_aadt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAverageDailyTrafficResponse::CopyFrom(const GetAverageDailyTrafficResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.GetAverageDailyTrafficResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAverageDailyTrafficResponse::IsInitialized() const {
  return true;
}

void GetAverageDailyTrafficResponse::InternalSwap(GetAverageDailyTrafficResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_madt()->InternalSwap(other->_internal_mutable_madt());
  swap(_impl_.aadt_, other->_impl_.aadt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAverageDailyTrafficResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fquery_2eproto[26]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace world_state
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::TimeFilter*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::TimeFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::TimeFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::Query_ActorIdFilter*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::Query_ActorIdFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::Query_ActorIdFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::Query_SpatialFilter*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::Query_SpatialFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::Query_SpatialFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::Query*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::Query >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::Query >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::Asset*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::Asset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::Asset >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::Dataset*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::Dataset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::Dataset >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::DatasetRun*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::DatasetRun >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::DatasetRun >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::GetServiceApiRequest*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::GetServiceApiRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::GetServiceApiRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::GetServiceApiResponse*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::GetServiceApiResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::GetServiceApiResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::GetDatasetRunsRequest*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::GetDatasetRunsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::GetDatasetRunsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::GetDatasetRunsResponse*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::GetDatasetRunsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::GetDatasetRunsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::GetDatasetsRequest*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::GetDatasetsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::GetDatasetsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::GetDatasetsResponse*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::GetDatasetsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::GetDatasetsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::GetWorldStateRequest*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::GetWorldStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::GetWorldStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::GetWorldStateResponse*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::GetWorldStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::GetWorldStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::GetWorldStateNearRealTimeRequest*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::GetWorldStateNearRealTimeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::GetWorldStateNearRealTimeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::GetWorldStateNearRealTimeResponse*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::GetWorldStateNearRealTimeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::GetWorldStateNearRealTimeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::GetActorsRequest*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::GetActorsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::GetActorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::GetActorsResponse*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::GetActorsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::GetActorsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::GetEventsRequest*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::GetEventsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::GetEventsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::GetEventsResponse*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::GetEventsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::GetEventsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::GetAssetsRequest*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::GetAssetsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::GetAssetsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::GetAssetsResponse*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::GetAssetsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::GetAssetsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::GetTrafficAggregationRequest*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::GetTrafficAggregationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::GetTrafficAggregationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::GetTrafficAggregationResponse*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::GetTrafficAggregationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::GetTrafficAggregationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::GetAverageDailyTrafficRequest*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::GetAverageDailyTrafficRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::GetAverageDailyTrafficRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::GetAverageDailyTrafficResponse*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::GetAverageDailyTrafficResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::GetAverageDailyTrafficResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/world_state/v1/ivi.proto

#include "cavnue/messages/world_state/v1/ivi.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cavnue {
namespace messages {
namespace world_state {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR ActorEvent::ActorEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.actor_)*/nullptr
  , /*decltype(_impl_.wgs84_position_)*/nullptr} {}
struct ActorEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActorEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActorEventDefaultTypeInternal() {}
  union {
    ActorEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActorEventDefaultTypeInternal _ActorEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetActorEventsRequest::GetActorEventsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.wgs84_position_)*/nullptr} {}
struct GetActorEventsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetActorEventsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetActorEventsRequestDefaultTypeInternal() {}
  union {
    GetActorEventsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetActorEventsRequestDefaultTypeInternal _GetActorEventsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetActorEventsResponse::GetActorEventsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.actor_events_)*/{}
  , /*decltype(_impl_.response_ts_)*/nullptr
  , /*decltype(_impl_.field_mask_)*/nullptr} {}
struct GetActorEventsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetActorEventsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetActorEventsResponseDefaultTypeInternal() {}
  union {
    GetActorEventsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetActorEventsResponseDefaultTypeInternal _GetActorEventsResponse_default_instance_;
}  // namespace v1
}  // namespace world_state
}  // namespace messages
}  // namespace cavnue
static ::_pb::Metadata file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto = nullptr;
const ::uint32_t TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::ActorEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::ActorEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::ActorEvent, _impl_.actor_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::ActorEvent, _impl_.wgs84_position_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetActorEventsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetActorEventsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetActorEventsRequest, _impl_.wgs84_position_),
    0,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetActorEventsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetActorEventsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetActorEventsResponse, _impl_.response_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetActorEventsResponse, _impl_.actor_events_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::world_state::v1::GetActorEventsResponse, _impl_.field_mask_),
    0,
    ~0u,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::cavnue::messages::world_state::v1::ActorEvent)},
        { 12, 21, -1, sizeof(::cavnue::messages::world_state::v1::GetActorEventsRequest)},
        { 22, 33, -1, sizeof(::cavnue::messages::world_state::v1::GetActorEventsResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cavnue::messages::world_state::v1::_ActorEvent_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_GetActorEventsRequest_default_instance_._instance,
    &::cavnue::messages::world_state::v1::_GetActorEventsResponse_default_instance_._instance,
};
const char descriptor_table_protodef_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n(cavnue/messages/world_state/v1/ivi.pro"
    "to\022\036cavnue.messages.world_state.v1\032\037goog"
    "le/protobuf/timestamp.proto\032 google/prot"
    "obuf/field_mask.proto\032(cavnue/messages/i"
    "nference/v1/actor.proto\032&cavnue/messages"
    "/spatial/v1/wgs84.proto\032\'cavnue/third_pa"
    "rty/bq/v1/bq_field.proto\"\221\001\n\nActorEvent\022"
    "9\n\005actor\030\001 \001(\0132#.cavnue.messages.inferen"
    "ce.v1.ActorR\005actor\022H\n\016wgs84_position\030\002 \001"
    "(\0132!.cavnue.messages.spatial.v1.WGS84R\rw"
    "gs84Position\"a\n\025GetActorEventsRequest\022H\n"
    "\016wgs84_position\030\001 \001(\0132!.cavnue.messages."
    "spatial.v1.WGS84R\rwgs84Position\"\347\001\n\026GetA"
    "ctorEventsResponse\022;\n\013response_ts\030\001 \001(\0132"
    "\032.google.protobuf.TimestampR\nresponseTs\022"
    "M\n\014actor_events\030\002 \003(\0132*.cavnue.messages."
    "world_state.v1.ActorEventR\013actorEvents\022A"
    "\n\nfield_mask\030\003 \001(\0132\032.google.protobuf.Fie"
    "ldMaskB\006\212\371+\002\030\001R\tfieldMaskb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto_deps[5] =
    {
        &::descriptor_table_cavnue_2fmessages_2finference_2fv1_2factor_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fspatial_2fv1_2fwgs84_2eproto,
        &::descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ffield_2eproto,
        &::descriptor_table_google_2fprotobuf_2ffield_5fmask_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto = {
    false,
    false,
    753,
    descriptor_table_protodef_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto,
    "cavnue/messages/world_state/v1/ivi.proto",
    &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto_once,
    descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto_deps,
    5,
    3,
    schemas,
    file_default_instances,
    TableStruct_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto::offsets,
    file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto,
    file_level_enum_descriptors_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto,
    file_level_service_descriptors_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto_getter() {
  return &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto(&descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto);
namespace cavnue {
namespace messages {
namespace world_state {
namespace v1 {
// ===================================================================

class ActorEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<ActorEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ActorEvent, _impl_._has_bits_);
  static const ::cavnue::messages::inference::v1::Actor& actor(const ActorEvent* msg);
  static void set_has_actor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cavnue::messages::spatial::v1::WGS84& wgs84_position(const ActorEvent* msg);
  static void set_has_wgs84_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::cavnue::messages::inference::v1::Actor&
ActorEvent::_Internal::actor(const ActorEvent* msg) {
  return *msg->_impl_.actor_;
}
const ::cavnue::messages::spatial::v1::WGS84&
ActorEvent::_Internal::wgs84_position(const ActorEvent* msg) {
  return *msg->_impl_.wgs84_position_;
}
void ActorEvent::clear_actor() {
  if (_impl_.actor_ != nullptr) _impl_.actor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ActorEvent::clear_wgs84_position() {
  if (_impl_.wgs84_position_ != nullptr) _impl_.wgs84_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ActorEvent::ActorEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.ActorEvent)
}
ActorEvent::ActorEvent(const ActorEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActorEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.actor_){nullptr}
    , decltype(_impl_.wgs84_position_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.actor_ = new ::cavnue::messages::inference::v1::Actor(*from._impl_.actor_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.wgs84_position_ = new ::cavnue::messages::spatial::v1::WGS84(*from._impl_.wgs84_position_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.ActorEvent)
}

inline void ActorEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.actor_){nullptr}
    , decltype(_impl_.wgs84_position_){nullptr}
  };
}

ActorEvent::~ActorEvent() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.ActorEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActorEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.actor_;
  if (this != internal_default_instance()) delete _impl_.wgs84_position_;
}

void ActorEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActorEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.ActorEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.actor_ != nullptr);
      _impl_.actor_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.wgs84_position_ != nullptr);
      _impl_.wgs84_position_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActorEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.inference.v1.Actor actor = 1 [json_name = "actor"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_actor(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.spatial.v1.WGS84 wgs84_position = 2 [json_name = "wgs84Position"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_wgs84_position(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ActorEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.ActorEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.inference.v1.Actor actor = 1 [json_name = "actor"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::actor(this),
        _Internal::actor(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.spatial.v1.WGS84 wgs84_position = 2 [json_name = "wgs84Position"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::wgs84_position(this),
        _Internal::wgs84_position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.ActorEvent)
  return target;
}

::size_t ActorEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.ActorEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .cavnue.messages.inference.v1.Actor actor = 1 [json_name = "actor"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.actor_);
    }

    // .cavnue.messages.spatial.v1.WGS84 wgs84_position = 2 [json_name = "wgs84Position"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.wgs84_position_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActorEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActorEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActorEvent::GetClassData() const { return &_class_data_; }


void ActorEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActorEvent*>(&to_msg);
  auto& from = static_cast<const ActorEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.ActorEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_actor()->::cavnue::messages::inference::v1::Actor::MergeFrom(
          from._internal_actor());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_wgs84_position()->::cavnue::messages::spatial::v1::WGS84::MergeFrom(
          from._internal_wgs84_position());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActorEvent::CopyFrom(const ActorEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.ActorEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorEvent::IsInitialized() const {
  return true;
}

void ActorEvent::InternalSwap(ActorEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActorEvent, _impl_.wgs84_position_)
      + sizeof(ActorEvent::_impl_.wgs84_position_)
      - PROTOBUF_FIELD_OFFSET(ActorEvent, _impl_.actor_)>(
          reinterpret_cast<char*>(&_impl_.actor_),
          reinterpret_cast<char*>(&other->_impl_.actor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActorEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto[0]);
}
// ===================================================================

class GetActorEventsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetActorEventsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetActorEventsRequest, _impl_._has_bits_);
  static const ::cavnue::messages::spatial::v1::WGS84& wgs84_position(const GetActorEventsRequest* msg);
  static void set_has_wgs84_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cavnue::messages::spatial::v1::WGS84&
GetActorEventsRequest::_Internal::wgs84_position(const GetActorEventsRequest* msg) {
  return *msg->_impl_.wgs84_position_;
}
void GetActorEventsRequest::clear_wgs84_position() {
  if (_impl_.wgs84_position_ != nullptr) _impl_.wgs84_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetActorEventsRequest::GetActorEventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.GetActorEventsRequest)
}
GetActorEventsRequest::GetActorEventsRequest(const GetActorEventsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetActorEventsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.wgs84_position_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.wgs84_position_ = new ::cavnue::messages::spatial::v1::WGS84(*from._impl_.wgs84_position_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.GetActorEventsRequest)
}

inline void GetActorEventsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.wgs84_position_){nullptr}
  };
}

GetActorEventsRequest::~GetActorEventsRequest() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.GetActorEventsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetActorEventsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.wgs84_position_;
}

void GetActorEventsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetActorEventsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.GetActorEventsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.wgs84_position_ != nullptr);
    _impl_.wgs84_position_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetActorEventsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.spatial.v1.WGS84 wgs84_position = 1 [json_name = "wgs84Position"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_wgs84_position(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetActorEventsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.GetActorEventsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.spatial.v1.WGS84 wgs84_position = 1 [json_name = "wgs84Position"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::wgs84_position(this),
        _Internal::wgs84_position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.GetActorEventsRequest)
  return target;
}

::size_t GetActorEventsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.GetActorEventsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cavnue.messages.spatial.v1.WGS84 wgs84_position = 1 [json_name = "wgs84Position"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.wgs84_position_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetActorEventsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetActorEventsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetActorEventsRequest::GetClassData() const { return &_class_data_; }


void GetActorEventsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetActorEventsRequest*>(&to_msg);
  auto& from = static_cast<const GetActorEventsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.GetActorEventsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_wgs84_position()->::cavnue::messages::spatial::v1::WGS84::MergeFrom(
        from._internal_wgs84_position());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetActorEventsRequest::CopyFrom(const GetActorEventsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.GetActorEventsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetActorEventsRequest::IsInitialized() const {
  return true;
}

void GetActorEventsRequest::InternalSwap(GetActorEventsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.wgs84_position_, other->_impl_.wgs84_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetActorEventsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto[1]);
}
// ===================================================================

class GetActorEventsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetActorEventsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetActorEventsResponse, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& response_ts(const GetActorEventsResponse* msg);
  static void set_has_response_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::FieldMask& field_mask(const GetActorEventsResponse* msg);
  static void set_has_field_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetActorEventsResponse::_Internal::response_ts(const GetActorEventsResponse* msg) {
  return *msg->_impl_.response_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::FieldMask&
GetActorEventsResponse::_Internal::field_mask(const GetActorEventsResponse* msg) {
  return *msg->_impl_.field_mask_;
}
void GetActorEventsResponse::clear_response_ts() {
  if (_impl_.response_ts_ != nullptr) _impl_.response_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetActorEventsResponse::clear_field_mask() {
  if (_impl_.field_mask_ != nullptr) _impl_.field_mask_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GetActorEventsResponse::GetActorEventsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.world_state.v1.GetActorEventsResponse)
}
GetActorEventsResponse::GetActorEventsResponse(const GetActorEventsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetActorEventsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.actor_events_){from._impl_.actor_events_}
    , decltype(_impl_.response_ts_){nullptr}
    , decltype(_impl_.field_mask_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.response_ts_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.field_mask_ = new ::PROTOBUF_NAMESPACE_ID::FieldMask(*from._impl_.field_mask_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.world_state.v1.GetActorEventsResponse)
}

inline void GetActorEventsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.actor_events_){arena}
    , decltype(_impl_.response_ts_){nullptr}
    , decltype(_impl_.field_mask_){nullptr}
  };
}

GetActorEventsResponse::~GetActorEventsResponse() {
  // @@protoc_insertion_point(destructor:cavnue.messages.world_state.v1.GetActorEventsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetActorEventsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_actor_events()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.response_ts_;
  if (this != internal_default_instance()) delete _impl_.field_mask_;
}

void GetActorEventsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetActorEventsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.world_state.v1.GetActorEventsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_actor_events()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.response_ts_ != nullptr);
      _impl_.response_ts_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.field_mask_ != nullptr);
      _impl_.field_mask_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetActorEventsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp response_ts = 1 [json_name = "responseTs"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cavnue.messages.world_state.v1.ActorEvent actor_events = 2 [json_name = "actorEvents"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actor_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.FieldMask field_mask = 3 [json_name = "fieldMask", (.gen_bq_schema.bigquery) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_field_mask(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetActorEventsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.world_state.v1.GetActorEventsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp response_ts = 1 [json_name = "responseTs"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response_ts(this),
        _Internal::response_ts(this).GetCachedSize(), target, stream);
  }

  // repeated .cavnue.messages.world_state.v1.ActorEvent actor_events = 2 [json_name = "actorEvents"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_actor_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_actor_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.FieldMask field_mask = 3 [json_name = "fieldMask", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::field_mask(this),
        _Internal::field_mask(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.world_state.v1.GetActorEventsResponse)
  return target;
}

::size_t GetActorEventsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.world_state.v1.GetActorEventsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cavnue.messages.world_state.v1.ActorEvent actor_events = 2 [json_name = "actorEvents"];
  total_size += 1UL * this->_internal_actor_events_size();
  for (const auto& msg : this->_internal_actor_events()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Timestamp response_ts = 1 [json_name = "responseTs"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_ts_);
    }

    // .google.protobuf.FieldMask field_mask = 3 [json_name = "fieldMask", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.field_mask_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetActorEventsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetActorEventsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetActorEventsResponse::GetClassData() const { return &_class_data_; }


void GetActorEventsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetActorEventsResponse*>(&to_msg);
  auto& from = static_cast<const GetActorEventsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.world_state.v1.GetActorEventsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_actor_events()->MergeFrom(from._internal_actor_events());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_response_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_response_ts());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_field_mask()->::PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(
          from._internal_field_mask());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetActorEventsResponse::CopyFrom(const GetActorEventsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.world_state.v1.GetActorEventsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetActorEventsResponse::IsInitialized() const {
  return true;
}

void GetActorEventsResponse::InternalSwap(GetActorEventsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_actor_events()->InternalSwap(other->_internal_mutable_actor_events());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetActorEventsResponse, _impl_.field_mask_)
      + sizeof(GetActorEventsResponse::_impl_.field_mask_)
      - PROTOBUF_FIELD_OFFSET(GetActorEventsResponse, _impl_.response_ts_)>(
          reinterpret_cast<char*>(&_impl_.response_ts_),
          reinterpret_cast<char*>(&other->_impl_.response_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetActorEventsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fworld_5fstate_2fv1_2fivi_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace world_state
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::ActorEvent*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::ActorEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::ActorEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::GetActorEventsRequest*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::GetActorEventsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::GetActorEventsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::world_state::v1::GetActorEventsResponse*
Arena::CreateMaybeMessage< ::cavnue::messages::world_state::v1::GetActorEventsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::world_state::v1::GetActorEventsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

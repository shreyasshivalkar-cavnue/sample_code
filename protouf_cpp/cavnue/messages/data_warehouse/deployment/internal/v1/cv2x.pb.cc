// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/data_warehouse/deployment/internal/v1/cv2x.proto

#include "cavnue/messages/data_warehouse/deployment/internal/v1/cv2x.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace deployment {
namespace internal {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR CV2XReceive::CV2XReceive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.redis_ts_)*/nullptr
  , /*decltype(_impl_.payload_)*/nullptr
  , /*decltype(_impl_.redis_id_)*/ 0u
} {}
struct CV2XReceiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CV2XReceiveDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CV2XReceiveDefaultTypeInternal() {}
  union {
    CV2XReceive _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CV2XReceiveDefaultTypeInternal _CV2XReceive_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CV2XSend::CV2XSend(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.redis_ts_)*/nullptr
  , /*decltype(_impl_.payload_)*/nullptr
  , /*decltype(_impl_.redis_id_)*/ 0u
} {}
struct CV2XSendDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CV2XSendDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CV2XSendDefaultTypeInternal() {}
  union {
    CV2XSend _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CV2XSendDefaultTypeInternal _CV2XSend_default_instance_;
}  // namespace v1
}  // namespace internal
}  // namespace deployment
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
static ::_pb::Metadata file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2finternal_2fv1_2fcv2x_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2finternal_2fv1_2fcv2x_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2finternal_2fv1_2fcv2x_2eproto = nullptr;
const ::uint32_t TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2finternal_2fv1_2fcv2x_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::internal::v1::CV2XReceive, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::internal::v1::CV2XReceive, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::internal::v1::CV2XReceive, _impl_.redis_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::internal::v1::CV2XReceive, _impl_.redis_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::internal::v1::CV2XReceive, _impl_.payload_),
    0,
    2,
    1,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::internal::v1::CV2XSend, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::internal::v1::CV2XSend, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::internal::v1::CV2XSend, _impl_.redis_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::internal::v1::CV2XSend, _impl_.redis_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::internal::v1::CV2XSend, _impl_.payload_),
    0,
    2,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 11, -1, sizeof(::cavnue::messages::data_warehouse::deployment::internal::v1::CV2XReceive)},
        { 14, 25, -1, sizeof(::cavnue::messages::data_warehouse::deployment::internal::v1::CV2XSend)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cavnue::messages::data_warehouse::deployment::internal::v1::_CV2XReceive_default_instance_._instance,
    &::cavnue::messages::data_warehouse::deployment::internal::v1::_CV2XSend_default_instance_._instance,
};
const char descriptor_table_protodef_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2finternal_2fv1_2fcv2x_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n@cavnue/messages/data_warehouse/deploym"
    "ent/internal/v1/cv2x.proto\0225cavnue.messa"
    "ges.data_warehouse.deployment.internal.v"
    "1\032\'cavnue/third_party/bq/v1/bq_field.pro"
    "to\032\'cavnue/third_party/bq/v1/bq_table.pr"
    "oto\032#cavnue/messages/cv2x/v1/radio.proto"
    "\032\037google/protobuf/timestamp.proto\"\216\002\n\013CV"
    "2XReceive\022O\n\010redis_ts\030\001 \001(\0132\032.google.pro"
    "tobuf.TimestampB\023\212\371+\017\010\001\022\tTIMESTAMP8\001H\000R\007"
    "redisTs\210\001\001\022&\n\010redis_id\030\002 \001(\rB\006\212\371+\002\010\001H\001R\007"
    "redisId\210\001\001\022L\n\007payload\030\003 \001(\0132%.cavnue.mes"
    "sages.cv2x.v1.RadioReceiveB\006\212\371+\002\010\001H\002R\007pa"
    "yload\210\001\001:\022\202\371+\016\n\014CV2X-ReceiveB\013\n\t_redis_t"
    "sB\013\n\t_redis_idB\n\n\010_payload\"\205\002\n\010CV2XSend\022"
    "O\n\010redis_ts\030\001 \001(\0132\032.google.protobuf.Time"
    "stampB\023\212\371+\017\010\001\022\tTIMESTAMP8\001H\000R\007redisTs\210\001\001"
    "\022&\n\010redis_id\030\002 \001(\rB\006\212\371+\002\010\001H\001R\007redisId\210\001\001"
    "\022I\n\007payload\030\003 \001(\0132\".cavnue.messages.cv2x"
    ".v1.RadioSendB\006\212\371+\002\010\001H\002R\007payload\210\001\001:\017\202\371+"
    "\013\n\tCV2X-SendB\013\n\t_redis_tsB\013\n\t_redis_idB\n"
    "\n\010_payloadb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2finternal_2fv1_2fcv2x_2eproto_deps[4] =
    {
        &::descriptor_table_cavnue_2fmessages_2fcv2x_2fv1_2fradio_2eproto,
        &::descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ffield_2eproto,
        &::descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2finternal_2fv1_2fcv2x_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2finternal_2fv1_2fcv2x_2eproto = {
    false,
    false,
    818,
    descriptor_table_protodef_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2finternal_2fv1_2fcv2x_2eproto,
    "cavnue/messages/data_warehouse/deployment/internal/v1/cv2x.proto",
    &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2finternal_2fv1_2fcv2x_2eproto_once,
    descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2finternal_2fv1_2fcv2x_2eproto_deps,
    4,
    2,
    schemas,
    file_default_instances,
    TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2finternal_2fv1_2fcv2x_2eproto::offsets,
    file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2finternal_2fv1_2fcv2x_2eproto,
    file_level_enum_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2finternal_2fv1_2fcv2x_2eproto,
    file_level_service_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2finternal_2fv1_2fcv2x_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2finternal_2fv1_2fcv2x_2eproto_getter() {
  return &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2finternal_2fv1_2fcv2x_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2finternal_2fv1_2fcv2x_2eproto(&descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2finternal_2fv1_2fcv2x_2eproto);
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace deployment {
namespace internal {
namespace v1 {
// ===================================================================

class CV2XReceive::_Internal {
 public:
  using HasBits = decltype(std::declval<CV2XReceive>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CV2XReceive, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& redis_ts(const CV2XReceive* msg);
  static void set_has_redis_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_redis_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::cavnue::messages::cv2x::v1::RadioReceive& payload(const CV2XReceive* msg);
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CV2XReceive::_Internal::redis_ts(const CV2XReceive* msg) {
  return *msg->_impl_.redis_ts_;
}
const ::cavnue::messages::cv2x::v1::RadioReceive&
CV2XReceive::_Internal::payload(const CV2XReceive* msg) {
  return *msg->_impl_.payload_;
}
void CV2XReceive::clear_redis_ts() {
  if (_impl_.redis_ts_ != nullptr) _impl_.redis_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CV2XReceive::clear_payload() {
  if (_impl_.payload_ != nullptr) _impl_.payload_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CV2XReceive::CV2XReceive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.deployment.internal.v1.CV2XReceive)
}
CV2XReceive::CV2XReceive(const CV2XReceive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CV2XReceive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.redis_ts_){nullptr}
    , decltype(_impl_.payload_){nullptr}
    , decltype(_impl_.redis_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.redis_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.redis_ts_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.payload_ = new ::cavnue::messages::cv2x::v1::RadioReceive(*from._impl_.payload_);
  }
  _this->_impl_.redis_id_ = from._impl_.redis_id_;
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.deployment.internal.v1.CV2XReceive)
}

inline void CV2XReceive::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.redis_ts_){nullptr}
    , decltype(_impl_.payload_){nullptr}
    , decltype(_impl_.redis_id_) { 0u }

  };
}

CV2XReceive::~CV2XReceive() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.deployment.internal.v1.CV2XReceive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CV2XReceive::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.redis_ts_;
  if (this != internal_default_instance()) delete _impl_.payload_;
}

void CV2XReceive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CV2XReceive::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.deployment.internal.v1.CV2XReceive)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.redis_ts_ != nullptr);
      _impl_.redis_ts_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.payload_ != nullptr);
      _impl_.payload_->Clear();
    }
  }
  _impl_.redis_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CV2XReceive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .google.protobuf.Timestamp redis_ts = 1 [json_name = "redisTs", (.gen_bq_schema.bigquery) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_redis_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 redis_id = 2 [json_name = "redisId", (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_redis_id(&has_bits);
          _impl_.redis_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .cavnue.messages.cv2x.v1.RadioReceive payload = 3 [json_name = "payload", (.gen_bq_schema.bigquery) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CV2XReceive::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.deployment.internal.v1.CV2XReceive)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .google.protobuf.Timestamp redis_ts = 1 [json_name = "redisTs", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::redis_ts(this),
        _Internal::redis_ts(this).GetCachedSize(), target, stream);
  }

  // optional uint32 redis_id = 2 [json_name = "redisId", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_redis_id(), target);
  }

  // optional .cavnue.messages.cv2x.v1.RadioReceive payload = 3 [json_name = "payload", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::payload(this),
        _Internal::payload(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.deployment.internal.v1.CV2XReceive)
  return target;
}

::size_t CV2XReceive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.deployment.internal.v1.CV2XReceive)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .google.protobuf.Timestamp redis_ts = 1 [json_name = "redisTs", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.redis_ts_);
    }

    // optional .cavnue.messages.cv2x.v1.RadioReceive payload = 3 [json_name = "payload", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_);
    }

    // optional uint32 redis_id = 2 [json_name = "redisId", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_redis_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CV2XReceive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CV2XReceive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CV2XReceive::GetClassData() const { return &_class_data_; }


void CV2XReceive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CV2XReceive*>(&to_msg);
  auto& from = static_cast<const CV2XReceive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.deployment.internal.v1.CV2XReceive)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_redis_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_redis_ts());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_payload()->::cavnue::messages::cv2x::v1::RadioReceive::MergeFrom(
          from._internal_payload());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.redis_id_ = from._impl_.redis_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CV2XReceive::CopyFrom(const CV2XReceive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.deployment.internal.v1.CV2XReceive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CV2XReceive::IsInitialized() const {
  return true;
}

void CV2XReceive::InternalSwap(CV2XReceive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CV2XReceive, _impl_.redis_id_)
      + sizeof(CV2XReceive::_impl_.redis_id_)
      - PROTOBUF_FIELD_OFFSET(CV2XReceive, _impl_.redis_ts_)>(
          reinterpret_cast<char*>(&_impl_.redis_ts_),
          reinterpret_cast<char*>(&other->_impl_.redis_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CV2XReceive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2finternal_2fv1_2fcv2x_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2finternal_2fv1_2fcv2x_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2finternal_2fv1_2fcv2x_2eproto[0]);
}
// ===================================================================

class CV2XSend::_Internal {
 public:
  using HasBits = decltype(std::declval<CV2XSend>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CV2XSend, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& redis_ts(const CV2XSend* msg);
  static void set_has_redis_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_redis_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::cavnue::messages::cv2x::v1::RadioSend& payload(const CV2XSend* msg);
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CV2XSend::_Internal::redis_ts(const CV2XSend* msg) {
  return *msg->_impl_.redis_ts_;
}
const ::cavnue::messages::cv2x::v1::RadioSend&
CV2XSend::_Internal::payload(const CV2XSend* msg) {
  return *msg->_impl_.payload_;
}
void CV2XSend::clear_redis_ts() {
  if (_impl_.redis_ts_ != nullptr) _impl_.redis_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CV2XSend::clear_payload() {
  if (_impl_.payload_ != nullptr) _impl_.payload_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CV2XSend::CV2XSend(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.deployment.internal.v1.CV2XSend)
}
CV2XSend::CV2XSend(const CV2XSend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CV2XSend* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.redis_ts_){nullptr}
    , decltype(_impl_.payload_){nullptr}
    , decltype(_impl_.redis_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.redis_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.redis_ts_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.payload_ = new ::cavnue::messages::cv2x::v1::RadioSend(*from._impl_.payload_);
  }
  _this->_impl_.redis_id_ = from._impl_.redis_id_;
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.deployment.internal.v1.CV2XSend)
}

inline void CV2XSend::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.redis_ts_){nullptr}
    , decltype(_impl_.payload_){nullptr}
    , decltype(_impl_.redis_id_) { 0u }

  };
}

CV2XSend::~CV2XSend() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.deployment.internal.v1.CV2XSend)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CV2XSend::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.redis_ts_;
  if (this != internal_default_instance()) delete _impl_.payload_;
}

void CV2XSend::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CV2XSend::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.deployment.internal.v1.CV2XSend)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.redis_ts_ != nullptr);
      _impl_.redis_ts_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.payload_ != nullptr);
      _impl_.payload_->Clear();
    }
  }
  _impl_.redis_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CV2XSend::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .google.protobuf.Timestamp redis_ts = 1 [json_name = "redisTs", (.gen_bq_schema.bigquery) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_redis_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 redis_id = 2 [json_name = "redisId", (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_redis_id(&has_bits);
          _impl_.redis_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .cavnue.messages.cv2x.v1.RadioSend payload = 3 [json_name = "payload", (.gen_bq_schema.bigquery) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CV2XSend::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.deployment.internal.v1.CV2XSend)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .google.protobuf.Timestamp redis_ts = 1 [json_name = "redisTs", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::redis_ts(this),
        _Internal::redis_ts(this).GetCachedSize(), target, stream);
  }

  // optional uint32 redis_id = 2 [json_name = "redisId", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_redis_id(), target);
  }

  // optional .cavnue.messages.cv2x.v1.RadioSend payload = 3 [json_name = "payload", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::payload(this),
        _Internal::payload(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.deployment.internal.v1.CV2XSend)
  return target;
}

::size_t CV2XSend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.deployment.internal.v1.CV2XSend)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .google.protobuf.Timestamp redis_ts = 1 [json_name = "redisTs", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.redis_ts_);
    }

    // optional .cavnue.messages.cv2x.v1.RadioSend payload = 3 [json_name = "payload", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_);
    }

    // optional uint32 redis_id = 2 [json_name = "redisId", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_redis_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CV2XSend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CV2XSend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CV2XSend::GetClassData() const { return &_class_data_; }


void CV2XSend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CV2XSend*>(&to_msg);
  auto& from = static_cast<const CV2XSend&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.deployment.internal.v1.CV2XSend)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_redis_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_redis_ts());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_payload()->::cavnue::messages::cv2x::v1::RadioSend::MergeFrom(
          from._internal_payload());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.redis_id_ = from._impl_.redis_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CV2XSend::CopyFrom(const CV2XSend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.deployment.internal.v1.CV2XSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CV2XSend::IsInitialized() const {
  return true;
}

void CV2XSend::InternalSwap(CV2XSend* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CV2XSend, _impl_.redis_id_)
      + sizeof(CV2XSend::_impl_.redis_id_)
      - PROTOBUF_FIELD_OFFSET(CV2XSend, _impl_.redis_ts_)>(
          reinterpret_cast<char*>(&_impl_.redis_ts_),
          reinterpret_cast<char*>(&other->_impl_.redis_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CV2XSend::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2finternal_2fv1_2fcv2x_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2finternal_2fv1_2fcv2x_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2finternal_2fv1_2fcv2x_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace internal
}  // namespace deployment
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::deployment::internal::v1::CV2XReceive*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::deployment::internal::v1::CV2XReceive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::deployment::internal::v1::CV2XReceive >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::deployment::internal::v1::CV2XSend*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::deployment::internal::v1::CV2XSend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::deployment::internal::v1::CV2XSend >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

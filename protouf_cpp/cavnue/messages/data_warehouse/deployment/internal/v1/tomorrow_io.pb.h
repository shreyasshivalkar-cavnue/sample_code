// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/data_warehouse/deployment/internal/v1/tomorrow_io.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2finternal_2fv1_2ftomorrow_5fio_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2finternal_2fv1_2ftomorrow_5fio_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cavnue/third_party/bq/v1/bq_field.pb.h"
#include "cavnue/third_party/bq/v1/bq_table.pb.h"
#include "cavnue/messages/common/v1/field_options.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2finternal_2fv1_2ftomorrow_5fio_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2finternal_2fv1_2ftomorrow_5fio_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2finternal_2fv1_2ftomorrow_5fio_2eproto;
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace deployment {
namespace internal {
namespace v1 {
class TomorrowIO;
struct TomorrowIODefaultTypeInternal;
extern TomorrowIODefaultTypeInternal _TomorrowIO_default_instance_;
}  // namespace v1
}  // namespace internal
}  // namespace deployment
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template <>
::cavnue::messages::data_warehouse::deployment::internal::v1::TomorrowIO* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::deployment::internal::v1::TomorrowIO>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace deployment {
namespace internal {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class TomorrowIO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO) */ {
 public:
  inline TomorrowIO() : TomorrowIO(nullptr) {}
  ~TomorrowIO() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TomorrowIO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TomorrowIO(const TomorrowIO& from);
  TomorrowIO(TomorrowIO&& from) noexcept
    : TomorrowIO() {
    *this = ::std::move(from);
  }

  inline TomorrowIO& operator=(const TomorrowIO& from) {
    CopyFrom(from);
    return *this;
  }
  inline TomorrowIO& operator=(TomorrowIO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TomorrowIO& default_instance() {
    return *internal_default_instance();
  }
  static inline const TomorrowIO* internal_default_instance() {
    return reinterpret_cast<const TomorrowIO*>(
               &_TomorrowIO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TomorrowIO& a, TomorrowIO& b) {
    a.Swap(&b);
  }
  inline void Swap(TomorrowIO* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TomorrowIO* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TomorrowIO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TomorrowIO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TomorrowIO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TomorrowIO& from) {
    TomorrowIO::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TomorrowIO* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO";
  }
  protected:
  explicit TomorrowIO(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrecipitationTypeFieldNumber = 6,
    kWeatherTypeFieldNumber = 13,
    kTsFieldNumber = 2,
    kSourceIdFieldNumber = 1,
    kDurationFieldNumber = 3,
    kCloudCoverFieldNumber = 4,
    kHumidityFieldNumber = 5,
    kRainIntensityFieldNumber = 7,
    kSnowIntensityFieldNumber = 8,
    kTemperatureFieldNumber = 9,
    kWindSpeedFieldNumber = 10,
    kWindDirectionFieldNumber = 11,
    kVisibilityFieldNumber = 12,
  };
  // string precipitation_type = 6 [json_name = "precipitationType"];
  void clear_precipitation_type() ;
  const std::string& precipitation_type() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_precipitation_type(Arg_&& arg, Args_... args);
  std::string* mutable_precipitation_type();
  PROTOBUF_NODISCARD std::string* release_precipitation_type();
  void set_allocated_precipitation_type(std::string* ptr);

  private:
  const std::string& _internal_precipitation_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_precipitation_type(
      const std::string& value);
  std::string* _internal_mutable_precipitation_type();

  public:
  // string weather_type = 13 [json_name = "weatherType"];
  void clear_weather_type() ;
  const std::string& weather_type() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_weather_type(Arg_&& arg, Args_... args);
  std::string* mutable_weather_type();
  PROTOBUF_NODISCARD std::string* release_weather_type();
  void set_allocated_weather_type(std::string* ptr);

  private:
  const std::string& _internal_weather_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_weather_type(
      const std::string& value);
  std::string* _internal_mutable_weather_type();

  public:
  // optional .google.protobuf.Timestamp ts = 2 [json_name = "ts", (.gen_bq_schema.bigquery) = {
  bool has_ts() const;
  void clear_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_ts();
  void set_allocated_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_ts();
  public:
  void unsafe_arena_set_allocated_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_ts();
  // optional int64 source_id = 1 [json_name = "sourceId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  bool has_source_id() const;
  void clear_source_id() ;
  ::int64_t source_id() const;
  void set_source_id(::int64_t value);

  private:
  ::int64_t _internal_source_id() const;
  void _internal_set_source_id(::int64_t value);

  public:
  // optional uint32 duration = 3 [json_name = "duration", (.cavnue.messages.common.v1.units) = UNITS_MILLISECONDS, (.gen_bq_schema.bigquery) = {
  bool has_duration() const;
  void clear_duration() ;
  ::uint32_t duration() const;
  void set_duration(::uint32_t value);

  private:
  ::uint32_t _internal_duration() const;
  void _internal_set_duration(::uint32_t value);

  public:
  // float cloud_cover = 4 [json_name = "cloudCover"];
  void clear_cloud_cover() ;
  float cloud_cover() const;
  void set_cloud_cover(float value);

  private:
  float _internal_cloud_cover() const;
  void _internal_set_cloud_cover(float value);

  public:
  // float humidity = 5 [json_name = "humidity"];
  void clear_humidity() ;
  float humidity() const;
  void set_humidity(float value);

  private:
  float _internal_humidity() const;
  void _internal_set_humidity(float value);

  public:
  // float rain_intensity = 7 [json_name = "rainIntensity", (.cavnue.messages.common.v1.units) = UNITS_MILLIMETERS_PER_HOUR];
  void clear_rain_intensity() ;
  float rain_intensity() const;
  void set_rain_intensity(float value);

  private:
  float _internal_rain_intensity() const;
  void _internal_set_rain_intensity(float value);

  public:
  // float snow_intensity = 8 [json_name = "snowIntensity", (.cavnue.messages.common.v1.units) = UNITS_MILLIMETERS_PER_HOUR];
  void clear_snow_intensity() ;
  float snow_intensity() const;
  void set_snow_intensity(float value);

  private:
  float _internal_snow_intensity() const;
  void _internal_set_snow_intensity(float value);

  public:
  // float temperature = 9 [json_name = "temperature", (.cavnue.messages.common.v1.units) = UNITS_CELSIUS];
  void clear_temperature() ;
  float temperature() const;
  void set_temperature(float value);

  private:
  float _internal_temperature() const;
  void _internal_set_temperature(float value);

  public:
  // float wind_speed = 10 [json_name = "windSpeed", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
  void clear_wind_speed() ;
  float wind_speed() const;
  void set_wind_speed(float value);

  private:
  float _internal_wind_speed() const;
  void _internal_set_wind_speed(float value);

  public:
  // float wind_direction = 11 [json_name = "windDirection"];
  void clear_wind_direction() ;
  float wind_direction() const;
  void set_wind_direction(float value);

  private:
  float _internal_wind_direction() const;
  void _internal_set_wind_direction(float value);

  public:
  // float visibility = 12 [json_name = "visibility", (.cavnue.messages.common.v1.units) = UNITS_METERS];
  void clear_visibility() ;
  float visibility() const;
  void set_visibility(float value);

  private:
  float _internal_visibility() const;
  void _internal_set_visibility(float value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr precipitation_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr weather_type_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_;
    ::int64_t source_id_;
    ::uint32_t duration_;
    float cloud_cover_;
    float humidity_;
    float rain_intensity_;
    float snow_intensity_;
    float temperature_;
    float wind_speed_;
    float wind_direction_;
    float visibility_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2finternal_2fv1_2ftomorrow_5fio_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TomorrowIO

// optional int64 source_id = 1 [json_name = "sourceId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
inline bool TomorrowIO::has_source_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TomorrowIO::clear_source_id() {
  _impl_.source_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t TomorrowIO::source_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.source_id)
  return _internal_source_id();
}
inline void TomorrowIO::set_source_id(::int64_t value) {
  _internal_set_source_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.source_id)
}
inline ::int64_t TomorrowIO::_internal_source_id() const {
  return _impl_.source_id_;
}
inline void TomorrowIO::_internal_set_source_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.source_id_ = value;
}

// optional .google.protobuf.Timestamp ts = 2 [json_name = "ts", (.gen_bq_schema.bigquery) = {
inline bool TomorrowIO::has_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TomorrowIO::_internal_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TomorrowIO::ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.ts)
  return _internal_ts();
}
inline void TomorrowIO::unsafe_arena_set_allocated_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_);
  }
  _impl_.ts_ = ts;
  if (ts) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TomorrowIO::release_ts() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_;
  _impl_.ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TomorrowIO::unsafe_arena_release_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.ts)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_;
  _impl_.ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TomorrowIO::_internal_mutable_ts() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.ts_ = p;
  }
  return _impl_.ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TomorrowIO::mutable_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.ts)
  return _msg;
}
inline void TomorrowIO::set_allocated_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_);
  }
  if (ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts));
    if (message_arena != submessage_arena) {
      ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ts_ = ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.ts)
}

// optional uint32 duration = 3 [json_name = "duration", (.cavnue.messages.common.v1.units) = UNITS_MILLISECONDS, (.gen_bq_schema.bigquery) = {
inline bool TomorrowIO::has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TomorrowIO::clear_duration() {
  _impl_.duration_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t TomorrowIO::duration() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.duration)
  return _internal_duration();
}
inline void TomorrowIO::set_duration(::uint32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.duration)
}
inline ::uint32_t TomorrowIO::_internal_duration() const {
  return _impl_.duration_;
}
inline void TomorrowIO::_internal_set_duration(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.duration_ = value;
}

// float cloud_cover = 4 [json_name = "cloudCover"];
inline void TomorrowIO::clear_cloud_cover() {
  _impl_.cloud_cover_ = 0;
}
inline float TomorrowIO::cloud_cover() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.cloud_cover)
  return _internal_cloud_cover();
}
inline void TomorrowIO::set_cloud_cover(float value) {
  _internal_set_cloud_cover(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.cloud_cover)
}
inline float TomorrowIO::_internal_cloud_cover() const {
  return _impl_.cloud_cover_;
}
inline void TomorrowIO::_internal_set_cloud_cover(float value) {
  ;
  _impl_.cloud_cover_ = value;
}

// float humidity = 5 [json_name = "humidity"];
inline void TomorrowIO::clear_humidity() {
  _impl_.humidity_ = 0;
}
inline float TomorrowIO::humidity() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.humidity)
  return _internal_humidity();
}
inline void TomorrowIO::set_humidity(float value) {
  _internal_set_humidity(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.humidity)
}
inline float TomorrowIO::_internal_humidity() const {
  return _impl_.humidity_;
}
inline void TomorrowIO::_internal_set_humidity(float value) {
  ;
  _impl_.humidity_ = value;
}

// string precipitation_type = 6 [json_name = "precipitationType"];
inline void TomorrowIO::clear_precipitation_type() {
  _impl_.precipitation_type_.ClearToEmpty();
}
inline const std::string& TomorrowIO::precipitation_type() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.precipitation_type)
  return _internal_precipitation_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TomorrowIO::set_precipitation_type(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.precipitation_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.precipitation_type)
}
inline std::string* TomorrowIO::mutable_precipitation_type() {
  std::string* _s = _internal_mutable_precipitation_type();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.precipitation_type)
  return _s;
}
inline const std::string& TomorrowIO::_internal_precipitation_type() const {
  return _impl_.precipitation_type_.Get();
}
inline void TomorrowIO::_internal_set_precipitation_type(const std::string& value) {
  ;


  _impl_.precipitation_type_.Set(value, GetArenaForAllocation());
}
inline std::string* TomorrowIO::_internal_mutable_precipitation_type() {
  ;
  return _impl_.precipitation_type_.Mutable( GetArenaForAllocation());
}
inline std::string* TomorrowIO::release_precipitation_type() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.precipitation_type)
  return _impl_.precipitation_type_.Release();
}
inline void TomorrowIO::set_allocated_precipitation_type(std::string* value) {
  _impl_.precipitation_type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.precipitation_type_.IsDefault()) {
          _impl_.precipitation_type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.precipitation_type)
}

// float rain_intensity = 7 [json_name = "rainIntensity", (.cavnue.messages.common.v1.units) = UNITS_MILLIMETERS_PER_HOUR];
inline void TomorrowIO::clear_rain_intensity() {
  _impl_.rain_intensity_ = 0;
}
inline float TomorrowIO::rain_intensity() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.rain_intensity)
  return _internal_rain_intensity();
}
inline void TomorrowIO::set_rain_intensity(float value) {
  _internal_set_rain_intensity(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.rain_intensity)
}
inline float TomorrowIO::_internal_rain_intensity() const {
  return _impl_.rain_intensity_;
}
inline void TomorrowIO::_internal_set_rain_intensity(float value) {
  ;
  _impl_.rain_intensity_ = value;
}

// float snow_intensity = 8 [json_name = "snowIntensity", (.cavnue.messages.common.v1.units) = UNITS_MILLIMETERS_PER_HOUR];
inline void TomorrowIO::clear_snow_intensity() {
  _impl_.snow_intensity_ = 0;
}
inline float TomorrowIO::snow_intensity() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.snow_intensity)
  return _internal_snow_intensity();
}
inline void TomorrowIO::set_snow_intensity(float value) {
  _internal_set_snow_intensity(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.snow_intensity)
}
inline float TomorrowIO::_internal_snow_intensity() const {
  return _impl_.snow_intensity_;
}
inline void TomorrowIO::_internal_set_snow_intensity(float value) {
  ;
  _impl_.snow_intensity_ = value;
}

// float temperature = 9 [json_name = "temperature", (.cavnue.messages.common.v1.units) = UNITS_CELSIUS];
inline void TomorrowIO::clear_temperature() {
  _impl_.temperature_ = 0;
}
inline float TomorrowIO::temperature() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.temperature)
  return _internal_temperature();
}
inline void TomorrowIO::set_temperature(float value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.temperature)
}
inline float TomorrowIO::_internal_temperature() const {
  return _impl_.temperature_;
}
inline void TomorrowIO::_internal_set_temperature(float value) {
  ;
  _impl_.temperature_ = value;
}

// float wind_speed = 10 [json_name = "windSpeed", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
inline void TomorrowIO::clear_wind_speed() {
  _impl_.wind_speed_ = 0;
}
inline float TomorrowIO::wind_speed() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.wind_speed)
  return _internal_wind_speed();
}
inline void TomorrowIO::set_wind_speed(float value) {
  _internal_set_wind_speed(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.wind_speed)
}
inline float TomorrowIO::_internal_wind_speed() const {
  return _impl_.wind_speed_;
}
inline void TomorrowIO::_internal_set_wind_speed(float value) {
  ;
  _impl_.wind_speed_ = value;
}

// float wind_direction = 11 [json_name = "windDirection"];
inline void TomorrowIO::clear_wind_direction() {
  _impl_.wind_direction_ = 0;
}
inline float TomorrowIO::wind_direction() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.wind_direction)
  return _internal_wind_direction();
}
inline void TomorrowIO::set_wind_direction(float value) {
  _internal_set_wind_direction(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.wind_direction)
}
inline float TomorrowIO::_internal_wind_direction() const {
  return _impl_.wind_direction_;
}
inline void TomorrowIO::_internal_set_wind_direction(float value) {
  ;
  _impl_.wind_direction_ = value;
}

// float visibility = 12 [json_name = "visibility", (.cavnue.messages.common.v1.units) = UNITS_METERS];
inline void TomorrowIO::clear_visibility() {
  _impl_.visibility_ = 0;
}
inline float TomorrowIO::visibility() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.visibility)
  return _internal_visibility();
}
inline void TomorrowIO::set_visibility(float value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.visibility)
}
inline float TomorrowIO::_internal_visibility() const {
  return _impl_.visibility_;
}
inline void TomorrowIO::_internal_set_visibility(float value) {
  ;
  _impl_.visibility_ = value;
}

// string weather_type = 13 [json_name = "weatherType"];
inline void TomorrowIO::clear_weather_type() {
  _impl_.weather_type_.ClearToEmpty();
}
inline const std::string& TomorrowIO::weather_type() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.weather_type)
  return _internal_weather_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TomorrowIO::set_weather_type(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.weather_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.weather_type)
}
inline std::string* TomorrowIO::mutable_weather_type() {
  std::string* _s = _internal_mutable_weather_type();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.weather_type)
  return _s;
}
inline const std::string& TomorrowIO::_internal_weather_type() const {
  return _impl_.weather_type_.Get();
}
inline void TomorrowIO::_internal_set_weather_type(const std::string& value) {
  ;


  _impl_.weather_type_.Set(value, GetArenaForAllocation());
}
inline std::string* TomorrowIO::_internal_mutable_weather_type() {
  ;
  return _impl_.weather_type_.Mutable( GetArenaForAllocation());
}
inline std::string* TomorrowIO::release_weather_type() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.weather_type)
  return _impl_.weather_type_.Release();
}
inline void TomorrowIO::set_allocated_weather_type(std::string* value) {
  _impl_.weather_type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.weather_type_.IsDefault()) {
          _impl_.weather_type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.deployment.internal.v1.TomorrowIO.weather_type)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace internal
}  // namespace deployment
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2finternal_2fv1_2ftomorrow_5fio_2eproto_2epb_2eh

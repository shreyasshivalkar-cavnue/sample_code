// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/data_warehouse/deployment/external/v1/camera_media_outputs.proto

#include "cavnue/messages/data_warehouse/deployment/external/v1/camera_media_outputs.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace deployment {
namespace external {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR CameraMediaOutput::CameraMediaOutput(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uri_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.ts_)*/nullptr
  , /*decltype(_impl_.data_id_)*/ ::int64_t{0}
} {}
struct CameraMediaOutputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CameraMediaOutputDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CameraMediaOutputDefaultTypeInternal() {}
  union {
    CameraMediaOutput _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CameraMediaOutputDefaultTypeInternal _CameraMediaOutput_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CameraMediaOutputMetadata::CameraMediaOutputMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uri_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.start_ts_)*/nullptr
  , /*decltype(_impl_.height_)*/ 0u

  , /*decltype(_impl_.width_)*/ 0u

  , /*decltype(_impl_.duration_)*/ 0

  , /*decltype(_impl_.frame_rate_)*/ 0u
} {}
struct CameraMediaOutputMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CameraMediaOutputMetadataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CameraMediaOutputMetadataDefaultTypeInternal() {}
  union {
    CameraMediaOutputMetadata _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CameraMediaOutputMetadataDefaultTypeInternal _CameraMediaOutputMetadata_default_instance_;
}  // namespace v1
}  // namespace external
}  // namespace deployment
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
static ::_pb::Metadata file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5fmedia_5foutputs_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5fmedia_5foutputs_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5fmedia_5foutputs_2eproto = nullptr;
const ::uint32_t TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5fmedia_5foutputs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::CameraMediaOutput, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::CameraMediaOutput, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::CameraMediaOutput, _impl_.uri_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::CameraMediaOutput, _impl_.data_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::CameraMediaOutput, _impl_.ts_),
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::CameraMediaOutputMetadata, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::CameraMediaOutputMetadata, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::CameraMediaOutputMetadata, _impl_.uri_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::CameraMediaOutputMetadata, _impl_.start_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::CameraMediaOutputMetadata, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::CameraMediaOutputMetadata, _impl_.width_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::CameraMediaOutputMetadata, _impl_.duration_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::CameraMediaOutputMetadata, _impl_.frame_rate_),
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 11, -1, sizeof(::cavnue::messages::data_warehouse::deployment::external::v1::CameraMediaOutput)},
        { 14, 28, -1, sizeof(::cavnue::messages::data_warehouse::deployment::external::v1::CameraMediaOutputMetadata)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cavnue::messages::data_warehouse::deployment::external::v1::_CameraMediaOutput_default_instance_._instance,
    &::cavnue::messages::data_warehouse::deployment::external::v1::_CameraMediaOutputMetadata_default_instance_._instance,
};
const char descriptor_table_protodef_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5fmedia_5foutputs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\nPcavnue/messages/data_warehouse/deploym"
    "ent/external/v1/camera_media_outputs.pro"
    "to\0225cavnue.messages.data_warehouse.deplo"
    "yment.external.v1\032\'cavnue/third_party/bq"
    "/v1/bq_field.proto\032\'cavnue/third_party/b"
    "q/v1/bq_table.proto\032-cavnue/messages/com"
    "mon/v1/field_options.proto\032\037google/proto"
    "buf/timestamp.proto\"\255\001\n\021CameraMediaOutpu"
    "t\022\030\n\003uri\030\001 \001(\tB\006\212\371+\002\010\001R\003uri\022#\n\007data_id\030\002"
    " \001(\003B\n\230\265\030\001\212\371+\002\010\001R\006dataId\022\?\n\002ts\030\003 \001(\0132\032.g"
    "oogle.protobuf.TimestampB\023\212\371+\017\010\001\022\tTIMEST"
    "AMP8\001R\002ts:\030\202\371+\024\n\022CameraMediaOutputs\"\272\002\n\031"
    "CameraMediaOutputMetadata\022\034\n\003uri\030\001 \001(\tB\n"
    "\230\265\030\001\212\371+\002\010\001R\003uri\022H\n\010start_ts\030\002 \001(\0132\032.goog"
    "le.protobuf.TimestampB\021\212\371+\r\010\001\022\tTIMESTAMP"
    "R\007startTs\022\"\n\006height\030\003 \001(\rB\n\210\361\004\004\212\371+\002\010\001R\006h"
    "eight\022 \n\005width\030\004 \001(\rB\n\210\361\004\004\212\371+\002\010\001R\005width\022"
    "&\n\010duration\030\005 \001(\002B\n\210\361\004\010\212\371+\002\010\001R\010duration\022"
    "%\n\nframe_rate\030\006 \001(\rB\006\212\371+\002\010\001R\tframeRate: "
    "\202\371+\034\n\032CameraMediaOutputsMetadatab\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5fmedia_5foutputs_2eproto_deps[4] =
    {
        &::descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2ffield_5foptions_2eproto,
        &::descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ffield_2eproto,
        &::descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5fmedia_5foutputs_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5fmedia_5foutputs_2eproto = {
    false,
    false,
    800,
    descriptor_table_protodef_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5fmedia_5foutputs_2eproto,
    "cavnue/messages/data_warehouse/deployment/external/v1/camera_media_outputs.proto",
    &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5fmedia_5foutputs_2eproto_once,
    descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5fmedia_5foutputs_2eproto_deps,
    4,
    2,
    schemas,
    file_default_instances,
    TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5fmedia_5foutputs_2eproto::offsets,
    file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5fmedia_5foutputs_2eproto,
    file_level_enum_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5fmedia_5foutputs_2eproto,
    file_level_service_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5fmedia_5foutputs_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5fmedia_5foutputs_2eproto_getter() {
  return &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5fmedia_5foutputs_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5fmedia_5foutputs_2eproto(&descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5fmedia_5foutputs_2eproto);
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace deployment {
namespace external {
namespace v1 {
// ===================================================================

class CameraMediaOutput::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraMediaOutput>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CameraMediaOutput, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts(const CameraMediaOutput* msg);
  static void set_has_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CameraMediaOutput::_Internal::ts(const CameraMediaOutput* msg) {
  return *msg->_impl_.ts_;
}
void CameraMediaOutput::clear_ts() {
  if (_impl_.ts_ != nullptr) _impl_.ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CameraMediaOutput::CameraMediaOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.deployment.external.v1.CameraMediaOutput)
}
CameraMediaOutput::CameraMediaOutput(const CameraMediaOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CameraMediaOutput* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uri_) {}

    , decltype(_impl_.ts_){nullptr}
    , decltype(_impl_.data_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.uri_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    _this->_impl_.uri_.Set(from._internal_uri(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.ts_);
  }
  _this->_impl_.data_id_ = from._impl_.data_id_;
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.deployment.external.v1.CameraMediaOutput)
}

inline void CameraMediaOutput::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uri_) {}

    , decltype(_impl_.ts_){nullptr}
    , decltype(_impl_.data_id_) { ::int64_t{0} }

  };
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.uri_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CameraMediaOutput::~CameraMediaOutput() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.deployment.external.v1.CameraMediaOutput)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CameraMediaOutput::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uri_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ts_;
}

void CameraMediaOutput::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CameraMediaOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.deployment.external.v1.CameraMediaOutput)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uri_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.ts_ != nullptr);
    _impl_.ts_->Clear();
  }
  _impl_.data_id_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraMediaOutput::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uri = 1 [json_name = "uri", (.gen_bq_schema.bigquery) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.deployment.external.v1.CameraMediaOutput.uri"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 data_id = 2 [json_name = "dataId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.data_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp ts = 3 [json_name = "ts", (.gen_bq_schema.bigquery) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CameraMediaOutput::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.deployment.external.v1.CameraMediaOutput)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1 [json_name = "uri", (.gen_bq_schema.bigquery) = {
  if (!this->_internal_uri().empty()) {
    const std::string& _s = this->_internal_uri();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.deployment.external.v1.CameraMediaOutput.uri");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int64 data_id = 2 [json_name = "dataId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (this->_internal_data_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_data_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp ts = 3 [json_name = "ts", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::ts(this),
        _Internal::ts(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.deployment.external.v1.CameraMediaOutput)
  return target;
}

::size_t CameraMediaOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.deployment.external.v1.CameraMediaOutput)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 1 [json_name = "uri", (.gen_bq_schema.bigquery) = {
  if (!this->_internal_uri().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_uri());
  }

  // .google.protobuf.Timestamp ts = 3 [json_name = "ts", (.gen_bq_schema.bigquery) = {
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ts_);
  }

  // int64 data_id = 2 [json_name = "dataId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (this->_internal_data_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_data_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraMediaOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CameraMediaOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraMediaOutput::GetClassData() const { return &_class_data_; }


void CameraMediaOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CameraMediaOutput*>(&to_msg);
  auto& from = static_cast<const CameraMediaOutput&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.deployment.external.v1.CameraMediaOutput)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_ts());
  }
  if (from._internal_data_id() != 0) {
    _this->_internal_set_data_id(from._internal_data_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraMediaOutput::CopyFrom(const CameraMediaOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.deployment.external.v1.CameraMediaOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraMediaOutput::IsInitialized() const {
  return true;
}

void CameraMediaOutput::InternalSwap(CameraMediaOutput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uri_, lhs_arena,
                                       &other->_impl_.uri_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraMediaOutput, _impl_.data_id_)
      + sizeof(CameraMediaOutput::_impl_.data_id_)
      - PROTOBUF_FIELD_OFFSET(CameraMediaOutput, _impl_.ts_)>(
          reinterpret_cast<char*>(&_impl_.ts_),
          reinterpret_cast<char*>(&other->_impl_.ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraMediaOutput::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5fmedia_5foutputs_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5fmedia_5foutputs_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5fmedia_5foutputs_2eproto[0]);
}
// ===================================================================

class CameraMediaOutputMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraMediaOutputMetadata>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CameraMediaOutputMetadata, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_ts(const CameraMediaOutputMetadata* msg);
  static void set_has_start_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CameraMediaOutputMetadata::_Internal::start_ts(const CameraMediaOutputMetadata* msg) {
  return *msg->_impl_.start_ts_;
}
void CameraMediaOutputMetadata::clear_start_ts() {
  if (_impl_.start_ts_ != nullptr) _impl_.start_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CameraMediaOutputMetadata::CameraMediaOutputMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.deployment.external.v1.CameraMediaOutputMetadata)
}
CameraMediaOutputMetadata::CameraMediaOutputMetadata(const CameraMediaOutputMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CameraMediaOutputMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uri_) {}

    , decltype(_impl_.start_ts_){nullptr}
    , decltype(_impl_.height_) {}

    , decltype(_impl_.width_) {}

    , decltype(_impl_.duration_) {}

    , decltype(_impl_.frame_rate_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.uri_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    _this->_impl_.uri_.Set(from._internal_uri(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.start_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.start_ts_);
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.frame_rate_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.frame_rate_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.deployment.external.v1.CameraMediaOutputMetadata)
}

inline void CameraMediaOutputMetadata::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uri_) {}

    , decltype(_impl_.start_ts_){nullptr}
    , decltype(_impl_.height_) { 0u }

    , decltype(_impl_.width_) { 0u }

    , decltype(_impl_.duration_) { 0 }

    , decltype(_impl_.frame_rate_) { 0u }

  };
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.uri_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CameraMediaOutputMetadata::~CameraMediaOutputMetadata() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.deployment.external.v1.CameraMediaOutputMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CameraMediaOutputMetadata::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uri_.Destroy();
  if (this != internal_default_instance()) delete _impl_.start_ts_;
}

void CameraMediaOutputMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CameraMediaOutputMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.deployment.external.v1.CameraMediaOutputMetadata)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uri_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.start_ts_ != nullptr);
    _impl_.start_ts_->Clear();
  }
  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.frame_rate_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.frame_rate_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraMediaOutputMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uri = 1 [json_name = "uri", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.deployment.external.v1.CameraMediaOutputMetadata.uri"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp start_ts = 2 [json_name = "startTs", (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 height = 3 [json_name = "height", (.cavnue.messages.common.v1.units) = UNITS_PIXELS, (.gen_bq_schema.bigquery) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 width = 4 [json_name = "width", (.cavnue.messages.common.v1.units) = UNITS_PIXELS, (.gen_bq_schema.bigquery) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // float duration = 5 [json_name = "duration", (.cavnue.messages.common.v1.units) = UNITS_MILLISECONDS, (.gen_bq_schema.bigquery) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 45)) {
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 frame_rate = 6 [json_name = "frameRate", (.gen_bq_schema.bigquery) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.frame_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CameraMediaOutputMetadata::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.deployment.external.v1.CameraMediaOutputMetadata)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1 [json_name = "uri", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (!this->_internal_uri().empty()) {
    const std::string& _s = this->_internal_uri();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.deployment.external.v1.CameraMediaOutputMetadata.uri");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp start_ts = 2 [json_name = "startTs", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::start_ts(this),
        _Internal::start_ts(this).GetCachedSize(), target, stream);
  }

  // uint32 height = 3 [json_name = "height", (.cavnue.messages.common.v1.units) = UNITS_PIXELS, (.gen_bq_schema.bigquery) = {
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_height(), target);
  }

  // uint32 width = 4 [json_name = "width", (.cavnue.messages.common.v1.units) = UNITS_PIXELS, (.gen_bq_schema.bigquery) = {
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_width(), target);
  }

  // float duration = 5 [json_name = "duration", (.cavnue.messages.common.v1.units) = UNITS_MILLISECONDS, (.gen_bq_schema.bigquery) = {
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_duration = this->_internal_duration();
  ::uint32_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_duration(), target);
  }

  // uint32 frame_rate = 6 [json_name = "frameRate", (.gen_bq_schema.bigquery) = {
  if (this->_internal_frame_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_frame_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.deployment.external.v1.CameraMediaOutputMetadata)
  return target;
}

::size_t CameraMediaOutputMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.deployment.external.v1.CameraMediaOutputMetadata)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 1 [json_name = "uri", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (!this->_internal_uri().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_uri());
  }

  // .google.protobuf.Timestamp start_ts = 2 [json_name = "startTs", (.gen_bq_schema.bigquery) = {
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.start_ts_);
  }

  // uint32 height = 3 [json_name = "height", (.cavnue.messages.common.v1.units) = UNITS_PIXELS, (.gen_bq_schema.bigquery) = {
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_height());
  }

  // uint32 width = 4 [json_name = "width", (.cavnue.messages.common.v1.units) = UNITS_PIXELS, (.gen_bq_schema.bigquery) = {
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_width());
  }

  // float duration = 5 [json_name = "duration", (.cavnue.messages.common.v1.units) = UNITS_MILLISECONDS, (.gen_bq_schema.bigquery) = {
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_duration = this->_internal_duration();
  ::uint32_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    total_size += 5;
  }

  // uint32 frame_rate = 6 [json_name = "frameRate", (.gen_bq_schema.bigquery) = {
  if (this->_internal_frame_rate() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_frame_rate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraMediaOutputMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CameraMediaOutputMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraMediaOutputMetadata::GetClassData() const { return &_class_data_; }


void CameraMediaOutputMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CameraMediaOutputMetadata*>(&to_msg);
  auto& from = static_cast<const CameraMediaOutputMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.deployment.external.v1.CameraMediaOutputMetadata)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_start_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_start_ts());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_duration = from._internal_duration();
  ::uint32_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  if (from._internal_frame_rate() != 0) {
    _this->_internal_set_frame_rate(from._internal_frame_rate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraMediaOutputMetadata::CopyFrom(const CameraMediaOutputMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.deployment.external.v1.CameraMediaOutputMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraMediaOutputMetadata::IsInitialized() const {
  return true;
}

void CameraMediaOutputMetadata::InternalSwap(CameraMediaOutputMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uri_, lhs_arena,
                                       &other->_impl_.uri_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraMediaOutputMetadata, _impl_.frame_rate_)
      + sizeof(CameraMediaOutputMetadata::_impl_.frame_rate_)
      - PROTOBUF_FIELD_OFFSET(CameraMediaOutputMetadata, _impl_.start_ts_)>(
          reinterpret_cast<char*>(&_impl_.start_ts_),
          reinterpret_cast<char*>(&other->_impl_.start_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraMediaOutputMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5fmedia_5foutputs_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5fmedia_5foutputs_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5fmedia_5foutputs_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace external
}  // namespace deployment
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::deployment::external::v1::CameraMediaOutput*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::deployment::external::v1::CameraMediaOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::deployment::external::v1::CameraMediaOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::deployment::external::v1::CameraMediaOutputMetadata*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::deployment::external::v1::CameraMediaOutputMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::deployment::external::v1::CameraMediaOutputMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

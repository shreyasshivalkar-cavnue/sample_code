// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/data_warehouse/deployment/external/v1/sim_data_map.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fsim_5fdata_5fmap_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fsim_5fdata_5fmap_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cavnue/third_party/bq/v1/bq_field.pb.h"
#include "cavnue/third_party/bq/v1/bq_table.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fsim_5fdata_5fmap_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fsim_5fdata_5fmap_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fsim_5fdata_5fmap_2eproto;
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace deployment {
namespace external {
namespace v1 {
class SimDataMap;
struct SimDataMapDefaultTypeInternal;
extern SimDataMapDefaultTypeInternal _SimDataMap_default_instance_;
}  // namespace v1
}  // namespace external
}  // namespace deployment
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template <>
::cavnue::messages::data_warehouse::deployment::external::v1::SimDataMap* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::deployment::external::v1::SimDataMap>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace deployment {
namespace external {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class SimDataMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.data_warehouse.deployment.external.v1.SimDataMap) */ {
 public:
  inline SimDataMap() : SimDataMap(nullptr) {}
  ~SimDataMap() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SimDataMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimDataMap(const SimDataMap& from);
  SimDataMap(SimDataMap&& from) noexcept
    : SimDataMap() {
    *this = ::std::move(from);
  }

  inline SimDataMap& operator=(const SimDataMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimDataMap& operator=(SimDataMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimDataMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimDataMap* internal_default_instance() {
    return reinterpret_cast<const SimDataMap*>(
               &_SimDataMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SimDataMap& a, SimDataMap& b) {
    a.Swap(&b);
  }
  inline void Swap(SimDataMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimDataMap* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimDataMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimDataMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimDataMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimDataMap& from) {
    SimDataMap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimDataMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.data_warehouse.deployment.external.v1.SimDataMap";
  }
  protected:
  explicit SimDataMap(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataIdFieldNumber = 2,
    kSimulationIdFieldNumber = 1,
    kVariantFieldNumber = 3,
  };
  // repeated int64 data_id = 2 [json_name = "dataId"];
  int data_id_size() const;
  private:
  int _internal_data_id_size() const;

  public:
  void clear_data_id() ;
  ::int64_t data_id(int index) const;
  void set_data_id(int index, ::int64_t value);
  void add_data_id(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& data_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* mutable_data_id();

  private:
  ::int64_t _internal_data_id(int index) const;
  void _internal_add_data_id(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& _internal_data_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* _internal_mutable_data_id();

  public:
  // string simulation_id = 1 [json_name = "simulationId", (.gen_bq_schema.bigquery) = {
  void clear_simulation_id() ;
  const std::string& simulation_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_simulation_id(Arg_&& arg, Args_... args);
  std::string* mutable_simulation_id();
  PROTOBUF_NODISCARD std::string* release_simulation_id();
  void set_allocated_simulation_id(std::string* ptr);

  private:
  const std::string& _internal_simulation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_simulation_id(
      const std::string& value);
  std::string* _internal_mutable_simulation_id();

  public:
  // uint32 variant = 3 [json_name = "variant", (.gen_bq_schema.bigquery) = {
  void clear_variant() ;
  ::uint32_t variant() const;
  void set_variant(::uint32_t value);

  private:
  ::uint32_t _internal_variant() const;
  void _internal_set_variant(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.data_warehouse.deployment.external.v1.SimDataMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t> data_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _data_id_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr simulation_id_;
    ::uint32_t variant_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fsim_5fdata_5fmap_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SimDataMap

// string simulation_id = 1 [json_name = "simulationId", (.gen_bq_schema.bigquery) = {
inline void SimDataMap::clear_simulation_id() {
  _impl_.simulation_id_.ClearToEmpty();
}
inline const std::string& SimDataMap::simulation_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.deployment.external.v1.SimDataMap.simulation_id)
  return _internal_simulation_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SimDataMap::set_simulation_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.simulation_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.deployment.external.v1.SimDataMap.simulation_id)
}
inline std::string* SimDataMap::mutable_simulation_id() {
  std::string* _s = _internal_mutable_simulation_id();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.deployment.external.v1.SimDataMap.simulation_id)
  return _s;
}
inline const std::string& SimDataMap::_internal_simulation_id() const {
  return _impl_.simulation_id_.Get();
}
inline void SimDataMap::_internal_set_simulation_id(const std::string& value) {
  ;


  _impl_.simulation_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SimDataMap::_internal_mutable_simulation_id() {
  ;
  return _impl_.simulation_id_.Mutable( GetArenaForAllocation());
}
inline std::string* SimDataMap::release_simulation_id() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.deployment.external.v1.SimDataMap.simulation_id)
  return _impl_.simulation_id_.Release();
}
inline void SimDataMap::set_allocated_simulation_id(std::string* value) {
  _impl_.simulation_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.simulation_id_.IsDefault()) {
          _impl_.simulation_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.deployment.external.v1.SimDataMap.simulation_id)
}

// repeated int64 data_id = 2 [json_name = "dataId"];
inline int SimDataMap::_internal_data_id_size() const {
  return _impl_.data_id_.size();
}
inline int SimDataMap::data_id_size() const {
  return _internal_data_id_size();
}
inline void SimDataMap::clear_data_id() {
  _internal_mutable_data_id()->Clear();
}
inline ::int64_t SimDataMap::data_id(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.deployment.external.v1.SimDataMap.data_id)
  return _internal_data_id(index);
}
inline void SimDataMap::set_data_id(int index, ::int64_t value) {
  _internal_mutable_data_id()->Set(index, value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.deployment.external.v1.SimDataMap.data_id)
}
inline void SimDataMap::add_data_id(::int64_t value) {
  _internal_add_data_id(value);
  // @@protoc_insertion_point(field_add:cavnue.messages.data_warehouse.deployment.external.v1.SimDataMap.data_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& SimDataMap::data_id() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.data_warehouse.deployment.external.v1.SimDataMap.data_id)
  return _internal_data_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* SimDataMap::mutable_data_id() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.data_warehouse.deployment.external.v1.SimDataMap.data_id)
  return _internal_mutable_data_id();
}

inline ::int64_t SimDataMap::_internal_data_id(int index) const {
  return _internal_data_id().Get(index);
}
inline void SimDataMap::_internal_add_data_id(::int64_t value) {
  _internal_mutable_data_id()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& SimDataMap::_internal_data_id() const {
  return _impl_.data_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* SimDataMap::_internal_mutable_data_id() {
  return &_impl_.data_id_;
}

// uint32 variant = 3 [json_name = "variant", (.gen_bq_schema.bigquery) = {
inline void SimDataMap::clear_variant() {
  _impl_.variant_ = 0u;
}
inline ::uint32_t SimDataMap::variant() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.deployment.external.v1.SimDataMap.variant)
  return _internal_variant();
}
inline void SimDataMap::set_variant(::uint32_t value) {
  _internal_set_variant(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.deployment.external.v1.SimDataMap.variant)
}
inline ::uint32_t SimDataMap::_internal_variant() const {
  return _impl_.variant_;
}
inline void SimDataMap::_internal_set_variant(::uint32_t value) {
  ;
  _impl_.variant_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace external
}  // namespace deployment
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fsim_5fdata_5fmap_2eproto_2epb_2eh

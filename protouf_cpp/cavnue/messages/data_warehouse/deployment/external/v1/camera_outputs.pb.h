// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/data_warehouse/deployment/external/v1/camera_outputs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5foutputs_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5foutputs_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cavnue/third_party/bq/v1/bq_field.pb.h"
#include "cavnue/third_party/bq/v1/bq_table.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5foutputs_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5foutputs_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5foutputs_2eproto;
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace deployment {
namespace external {
namespace v1 {
class CameraOutput;
struct CameraOutputDefaultTypeInternal;
extern CameraOutputDefaultTypeInternal _CameraOutput_default_instance_;
class CameraOutputMetadata;
struct CameraOutputMetadataDefaultTypeInternal;
extern CameraOutputMetadataDefaultTypeInternal _CameraOutputMetadata_default_instance_;
class CameraOutputMetadata_CameraOutputMetadataPayload;
struct CameraOutputMetadata_CameraOutputMetadataPayloadDefaultTypeInternal;
extern CameraOutputMetadata_CameraOutputMetadataPayloadDefaultTypeInternal _CameraOutputMetadata_CameraOutputMetadataPayload_default_instance_;
}  // namespace v1
}  // namespace external
}  // namespace deployment
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template <>
::cavnue::messages::data_warehouse::deployment::external::v1::CameraOutput* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::deployment::external::v1::CameraOutput>(Arena*);
template <>
::cavnue::messages::data_warehouse::deployment::external::v1::CameraOutputMetadata* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::deployment::external::v1::CameraOutputMetadata>(Arena*);
template <>
::cavnue::messages::data_warehouse::deployment::external::v1::CameraOutputMetadata_CameraOutputMetadataPayload* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::deployment::external::v1::CameraOutputMetadata_CameraOutputMetadataPayload>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace deployment {
namespace external {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class CameraOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutput) */ {
 public:
  inline CameraOutput() : CameraOutput(nullptr) {}
  ~CameraOutput() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CameraOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraOutput(const CameraOutput& from);
  CameraOutput(CameraOutput&& from) noexcept
    : CameraOutput() {
    *this = ::std::move(from);
  }

  inline CameraOutput& operator=(const CameraOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraOutput& operator=(CameraOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraOutput* internal_default_instance() {
    return reinterpret_cast<const CameraOutput*>(
               &_CameraOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CameraOutput& a, CameraOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraOutput* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CameraOutput& from) {
    CameraOutput::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.data_warehouse.deployment.external.v1.CameraOutput";
  }
  protected:
  explicit CameraOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 1,
    kTsFieldNumber = 3,
    kDataIdFieldNumber = 2,
  };
  // string uri = 1 [json_name = "uri", (.gen_bq_schema.bigquery) = {
  void clear_uri() ;
  const std::string& uri() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uri(Arg_&& arg, Args_... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* ptr);

  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(
      const std::string& value);
  std::string* _internal_mutable_uri();

  public:
  // .google.protobuf.Timestamp ts = 3 [json_name = "ts", (.gen_bq_schema.bigquery) = {
  bool has_ts() const;
  void clear_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_ts();
  void set_allocated_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_ts();
  public:
  void unsafe_arena_set_allocated_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_ts();
  // int64 data_id = 2 [json_name = "dataId", (.gen_bq_schema.bigquery) = {
  void clear_data_id() ;
  ::int64_t data_id() const;
  void set_data_id(::int64_t value);

  private:
  ::int64_t _internal_data_id() const;
  void _internal_set_data_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_;
    ::int64_t data_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5foutputs_2eproto;
};// -------------------------------------------------------------------

class CameraOutputMetadata_CameraOutputMetadataPayload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutputMetadata.CameraOutputMetadataPayload) */ {
 public:
  inline CameraOutputMetadata_CameraOutputMetadataPayload() : CameraOutputMetadata_CameraOutputMetadataPayload(nullptr) {}
  ~CameraOutputMetadata_CameraOutputMetadataPayload() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CameraOutputMetadata_CameraOutputMetadataPayload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraOutputMetadata_CameraOutputMetadataPayload(const CameraOutputMetadata_CameraOutputMetadataPayload& from);
  CameraOutputMetadata_CameraOutputMetadataPayload(CameraOutputMetadata_CameraOutputMetadataPayload&& from) noexcept
    : CameraOutputMetadata_CameraOutputMetadataPayload() {
    *this = ::std::move(from);
  }

  inline CameraOutputMetadata_CameraOutputMetadataPayload& operator=(const CameraOutputMetadata_CameraOutputMetadataPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraOutputMetadata_CameraOutputMetadataPayload& operator=(CameraOutputMetadata_CameraOutputMetadataPayload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraOutputMetadata_CameraOutputMetadataPayload& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraOutputMetadata_CameraOutputMetadataPayload* internal_default_instance() {
    return reinterpret_cast<const CameraOutputMetadata_CameraOutputMetadataPayload*>(
               &_CameraOutputMetadata_CameraOutputMetadataPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CameraOutputMetadata_CameraOutputMetadataPayload& a, CameraOutputMetadata_CameraOutputMetadataPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraOutputMetadata_CameraOutputMetadataPayload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraOutputMetadata_CameraOutputMetadataPayload* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraOutputMetadata_CameraOutputMetadataPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraOutputMetadata_CameraOutputMetadataPayload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraOutputMetadata_CameraOutputMetadataPayload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CameraOutputMetadata_CameraOutputMetadataPayload& from) {
    CameraOutputMetadata_CameraOutputMetadataPayload::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraOutputMetadata_CameraOutputMetadataPayload* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.data_warehouse.deployment.external.v1.CameraOutputMetadata.CameraOutputMetadataPayload";
  }
  protected:
  explicit CameraOutputMetadata_CameraOutputMetadataPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
    kWidthFieldNumber = 2,
    kDurationFieldNumber = 3,
    kFrameRateFieldNumber = 4,
  };
  // int64 height = 1 [json_name = "height", (.gen_bq_schema.bigquery) = {
  void clear_height() ;
  ::int64_t height() const;
  void set_height(::int64_t value);

  private:
  ::int64_t _internal_height() const;
  void _internal_set_height(::int64_t value);

  public:
  // int64 width = 2 [json_name = "width", (.gen_bq_schema.bigquery) = {
  void clear_width() ;
  ::int64_t width() const;
  void set_width(::int64_t value);

  private:
  ::int64_t _internal_width() const;
  void _internal_set_width(::int64_t value);

  public:
  // float duration = 3 [json_name = "duration", (.gen_bq_schema.bigquery) = {
  void clear_duration() ;
  float duration() const;
  void set_duration(float value);

  private:
  float _internal_duration() const;
  void _internal_set_duration(float value);

  public:
  // float frame_rate = 4 [json_name = "frameRate", (.gen_bq_schema.bigquery) = {
  void clear_frame_rate() ;
  float frame_rate() const;
  void set_frame_rate(float value);

  private:
  float _internal_frame_rate() const;
  void _internal_set_frame_rate(float value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutputMetadata.CameraOutputMetadataPayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int64_t height_;
    ::int64_t width_;
    float duration_;
    float frame_rate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5foutputs_2eproto;
};// -------------------------------------------------------------------

class CameraOutputMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutputMetadata) */ {
 public:
  inline CameraOutputMetadata() : CameraOutputMetadata(nullptr) {}
  ~CameraOutputMetadata() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CameraOutputMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraOutputMetadata(const CameraOutputMetadata& from);
  CameraOutputMetadata(CameraOutputMetadata&& from) noexcept
    : CameraOutputMetadata() {
    *this = ::std::move(from);
  }

  inline CameraOutputMetadata& operator=(const CameraOutputMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraOutputMetadata& operator=(CameraOutputMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraOutputMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraOutputMetadata* internal_default_instance() {
    return reinterpret_cast<const CameraOutputMetadata*>(
               &_CameraOutputMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CameraOutputMetadata& a, CameraOutputMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraOutputMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraOutputMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraOutputMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraOutputMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraOutputMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CameraOutputMetadata& from) {
    CameraOutputMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraOutputMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.data_warehouse.deployment.external.v1.CameraOutputMetadata";
  }
  protected:
  explicit CameraOutputMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CameraOutputMetadata_CameraOutputMetadataPayload CameraOutputMetadataPayload;

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 1,
    kStartTsFieldNumber = 2,
    kPayloadFieldNumber = 3,
  };
  // string uri = 1 [json_name = "uri", (.gen_bq_schema.bigquery) = {
  void clear_uri() ;
  const std::string& uri() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uri(Arg_&& arg, Args_... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* ptr);

  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(
      const std::string& value);
  std::string* _internal_mutable_uri();

  public:
  // .google.protobuf.Timestamp start_ts = 2 [json_name = "startTs", (.gen_bq_schema.bigquery) = {
  bool has_start_ts() const;
  void clear_start_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_start_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_ts();
  void set_allocated_start_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* start_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_ts();
  public:
  void unsafe_arena_set_allocated_start_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* start_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_ts();
  // .cavnue.messages.data_warehouse.deployment.external.v1.CameraOutputMetadata.CameraOutputMetadataPayload payload = 3 [json_name = "payload", (.gen_bq_schema.bigquery) = {
  bool has_payload() const;
  void clear_payload() ;
  const ::cavnue::messages::data_warehouse::deployment::external::v1::CameraOutputMetadata_CameraOutputMetadataPayload& payload() const;
  PROTOBUF_NODISCARD ::cavnue::messages::data_warehouse::deployment::external::v1::CameraOutputMetadata_CameraOutputMetadataPayload* release_payload();
  ::cavnue::messages::data_warehouse::deployment::external::v1::CameraOutputMetadata_CameraOutputMetadataPayload* mutable_payload();
  void set_allocated_payload(::cavnue::messages::data_warehouse::deployment::external::v1::CameraOutputMetadata_CameraOutputMetadataPayload* payload);
  private:
  const ::cavnue::messages::data_warehouse::deployment::external::v1::CameraOutputMetadata_CameraOutputMetadataPayload& _internal_payload() const;
  ::cavnue::messages::data_warehouse::deployment::external::v1::CameraOutputMetadata_CameraOutputMetadataPayload* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      ::cavnue::messages::data_warehouse::deployment::external::v1::CameraOutputMetadata_CameraOutputMetadataPayload* payload);
  ::cavnue::messages::data_warehouse::deployment::external::v1::CameraOutputMetadata_CameraOutputMetadataPayload* unsafe_arena_release_payload();
  // @@protoc_insertion_point(class_scope:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutputMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_ts_;
    ::cavnue::messages::data_warehouse::deployment::external::v1::CameraOutputMetadata_CameraOutputMetadataPayload* payload_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5foutputs_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CameraOutput

// string uri = 1 [json_name = "uri", (.gen_bq_schema.bigquery) = {
inline void CameraOutput::clear_uri() {
  _impl_.uri_.ClearToEmpty();
}
inline const std::string& CameraOutput::uri() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutput.uri)
  return _internal_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CameraOutput::set_uri(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.uri_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutput.uri)
}
inline std::string* CameraOutput::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutput.uri)
  return _s;
}
inline const std::string& CameraOutput::_internal_uri() const {
  return _impl_.uri_.Get();
}
inline void CameraOutput::_internal_set_uri(const std::string& value) {
  ;


  _impl_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* CameraOutput::_internal_mutable_uri() {
  ;
  return _impl_.uri_.Mutable( GetArenaForAllocation());
}
inline std::string* CameraOutput::release_uri() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutput.uri)
  return _impl_.uri_.Release();
}
inline void CameraOutput::set_allocated_uri(std::string* value) {
  _impl_.uri_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uri_.IsDefault()) {
          _impl_.uri_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutput.uri)
}

// int64 data_id = 2 [json_name = "dataId", (.gen_bq_schema.bigquery) = {
inline void CameraOutput::clear_data_id() {
  _impl_.data_id_ = ::int64_t{0};
}
inline ::int64_t CameraOutput::data_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutput.data_id)
  return _internal_data_id();
}
inline void CameraOutput::set_data_id(::int64_t value) {
  _internal_set_data_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutput.data_id)
}
inline ::int64_t CameraOutput::_internal_data_id() const {
  return _impl_.data_id_;
}
inline void CameraOutput::_internal_set_data_id(::int64_t value) {
  ;
  _impl_.data_id_ = value;
}

// .google.protobuf.Timestamp ts = 3 [json_name = "ts", (.gen_bq_schema.bigquery) = {
inline bool CameraOutput::has_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CameraOutput::_internal_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CameraOutput::ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutput.ts)
  return _internal_ts();
}
inline void CameraOutput::unsafe_arena_set_allocated_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_);
  }
  _impl_.ts_ = ts;
  if (ts) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutput.ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CameraOutput::release_ts() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_;
  _impl_.ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CameraOutput::unsafe_arena_release_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutput.ts)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_;
  _impl_.ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CameraOutput::_internal_mutable_ts() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.ts_ = p;
  }
  return _impl_.ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CameraOutput::mutable_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutput.ts)
  return _msg;
}
inline void CameraOutput::set_allocated_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_);
  }
  if (ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts));
    if (message_arena != submessage_arena) {
      ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ts_ = ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutput.ts)
}

// -------------------------------------------------------------------

// CameraOutputMetadata_CameraOutputMetadataPayload

// int64 height = 1 [json_name = "height", (.gen_bq_schema.bigquery) = {
inline void CameraOutputMetadata_CameraOutputMetadataPayload::clear_height() {
  _impl_.height_ = ::int64_t{0};
}
inline ::int64_t CameraOutputMetadata_CameraOutputMetadataPayload::height() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutputMetadata.CameraOutputMetadataPayload.height)
  return _internal_height();
}
inline void CameraOutputMetadata_CameraOutputMetadataPayload::set_height(::int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutputMetadata.CameraOutputMetadataPayload.height)
}
inline ::int64_t CameraOutputMetadata_CameraOutputMetadataPayload::_internal_height() const {
  return _impl_.height_;
}
inline void CameraOutputMetadata_CameraOutputMetadataPayload::_internal_set_height(::int64_t value) {
  ;
  _impl_.height_ = value;
}

// int64 width = 2 [json_name = "width", (.gen_bq_schema.bigquery) = {
inline void CameraOutputMetadata_CameraOutputMetadataPayload::clear_width() {
  _impl_.width_ = ::int64_t{0};
}
inline ::int64_t CameraOutputMetadata_CameraOutputMetadataPayload::width() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutputMetadata.CameraOutputMetadataPayload.width)
  return _internal_width();
}
inline void CameraOutputMetadata_CameraOutputMetadataPayload::set_width(::int64_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutputMetadata.CameraOutputMetadataPayload.width)
}
inline ::int64_t CameraOutputMetadata_CameraOutputMetadataPayload::_internal_width() const {
  return _impl_.width_;
}
inline void CameraOutputMetadata_CameraOutputMetadataPayload::_internal_set_width(::int64_t value) {
  ;
  _impl_.width_ = value;
}

// float duration = 3 [json_name = "duration", (.gen_bq_schema.bigquery) = {
inline void CameraOutputMetadata_CameraOutputMetadataPayload::clear_duration() {
  _impl_.duration_ = 0;
}
inline float CameraOutputMetadata_CameraOutputMetadataPayload::duration() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutputMetadata.CameraOutputMetadataPayload.duration)
  return _internal_duration();
}
inline void CameraOutputMetadata_CameraOutputMetadataPayload::set_duration(float value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutputMetadata.CameraOutputMetadataPayload.duration)
}
inline float CameraOutputMetadata_CameraOutputMetadataPayload::_internal_duration() const {
  return _impl_.duration_;
}
inline void CameraOutputMetadata_CameraOutputMetadataPayload::_internal_set_duration(float value) {
  ;
  _impl_.duration_ = value;
}

// float frame_rate = 4 [json_name = "frameRate", (.gen_bq_schema.bigquery) = {
inline void CameraOutputMetadata_CameraOutputMetadataPayload::clear_frame_rate() {
  _impl_.frame_rate_ = 0;
}
inline float CameraOutputMetadata_CameraOutputMetadataPayload::frame_rate() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutputMetadata.CameraOutputMetadataPayload.frame_rate)
  return _internal_frame_rate();
}
inline void CameraOutputMetadata_CameraOutputMetadataPayload::set_frame_rate(float value) {
  _internal_set_frame_rate(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutputMetadata.CameraOutputMetadataPayload.frame_rate)
}
inline float CameraOutputMetadata_CameraOutputMetadataPayload::_internal_frame_rate() const {
  return _impl_.frame_rate_;
}
inline void CameraOutputMetadata_CameraOutputMetadataPayload::_internal_set_frame_rate(float value) {
  ;
  _impl_.frame_rate_ = value;
}

// -------------------------------------------------------------------

// CameraOutputMetadata

// string uri = 1 [json_name = "uri", (.gen_bq_schema.bigquery) = {
inline void CameraOutputMetadata::clear_uri() {
  _impl_.uri_.ClearToEmpty();
}
inline const std::string& CameraOutputMetadata::uri() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutputMetadata.uri)
  return _internal_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CameraOutputMetadata::set_uri(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.uri_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutputMetadata.uri)
}
inline std::string* CameraOutputMetadata::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutputMetadata.uri)
  return _s;
}
inline const std::string& CameraOutputMetadata::_internal_uri() const {
  return _impl_.uri_.Get();
}
inline void CameraOutputMetadata::_internal_set_uri(const std::string& value) {
  ;


  _impl_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* CameraOutputMetadata::_internal_mutable_uri() {
  ;
  return _impl_.uri_.Mutable( GetArenaForAllocation());
}
inline std::string* CameraOutputMetadata::release_uri() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutputMetadata.uri)
  return _impl_.uri_.Release();
}
inline void CameraOutputMetadata::set_allocated_uri(std::string* value) {
  _impl_.uri_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uri_.IsDefault()) {
          _impl_.uri_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutputMetadata.uri)
}

// .google.protobuf.Timestamp start_ts = 2 [json_name = "startTs", (.gen_bq_schema.bigquery) = {
inline bool CameraOutputMetadata::has_start_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.start_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CameraOutputMetadata::_internal_start_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.start_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CameraOutputMetadata::start_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutputMetadata.start_ts)
  return _internal_start_ts();
}
inline void CameraOutputMetadata::unsafe_arena_set_allocated_start_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_ts_);
  }
  _impl_.start_ts_ = start_ts;
  if (start_ts) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutputMetadata.start_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CameraOutputMetadata::release_start_ts() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_ts_;
  _impl_.start_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CameraOutputMetadata::unsafe_arena_release_start_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutputMetadata.start_ts)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_ts_;
  _impl_.start_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CameraOutputMetadata::_internal_mutable_start_ts() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.start_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.start_ts_ = p;
  }
  return _impl_.start_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CameraOutputMetadata::mutable_start_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_start_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutputMetadata.start_ts)
  return _msg;
}
inline void CameraOutputMetadata::set_allocated_start_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* start_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_ts_);
  }
  if (start_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_ts));
    if (message_arena != submessage_arena) {
      start_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.start_ts_ = start_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutputMetadata.start_ts)
}

// .cavnue.messages.data_warehouse.deployment.external.v1.CameraOutputMetadata.CameraOutputMetadataPayload payload = 3 [json_name = "payload", (.gen_bq_schema.bigquery) = {
inline bool CameraOutputMetadata::has_payload() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.payload_ != nullptr);
  return value;
}
inline void CameraOutputMetadata::clear_payload() {
  if (_impl_.payload_ != nullptr) _impl_.payload_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::cavnue::messages::data_warehouse::deployment::external::v1::CameraOutputMetadata_CameraOutputMetadataPayload& CameraOutputMetadata::_internal_payload() const {
  const ::cavnue::messages::data_warehouse::deployment::external::v1::CameraOutputMetadata_CameraOutputMetadataPayload* p = _impl_.payload_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::data_warehouse::deployment::external::v1::CameraOutputMetadata_CameraOutputMetadataPayload&>(
      ::cavnue::messages::data_warehouse::deployment::external::v1::_CameraOutputMetadata_CameraOutputMetadataPayload_default_instance_);
}
inline const ::cavnue::messages::data_warehouse::deployment::external::v1::CameraOutputMetadata_CameraOutputMetadataPayload& CameraOutputMetadata::payload() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutputMetadata.payload)
  return _internal_payload();
}
inline void CameraOutputMetadata::unsafe_arena_set_allocated_payload(
    ::cavnue::messages::data_warehouse::deployment::external::v1::CameraOutputMetadata_CameraOutputMetadataPayload* payload) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.payload_);
  }
  _impl_.payload_ = payload;
  if (payload) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutputMetadata.payload)
}
inline ::cavnue::messages::data_warehouse::deployment::external::v1::CameraOutputMetadata_CameraOutputMetadataPayload* CameraOutputMetadata::release_payload() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::data_warehouse::deployment::external::v1::CameraOutputMetadata_CameraOutputMetadataPayload* temp = _impl_.payload_;
  _impl_.payload_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::data_warehouse::deployment::external::v1::CameraOutputMetadata_CameraOutputMetadataPayload* CameraOutputMetadata::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutputMetadata.payload)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::data_warehouse::deployment::external::v1::CameraOutputMetadata_CameraOutputMetadataPayload* temp = _impl_.payload_;
  _impl_.payload_ = nullptr;
  return temp;
}
inline ::cavnue::messages::data_warehouse::deployment::external::v1::CameraOutputMetadata_CameraOutputMetadataPayload* CameraOutputMetadata::_internal_mutable_payload() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::data_warehouse::deployment::external::v1::CameraOutputMetadata_CameraOutputMetadataPayload>(GetArenaForAllocation());
    _impl_.payload_ = p;
  }
  return _impl_.payload_;
}
inline ::cavnue::messages::data_warehouse::deployment::external::v1::CameraOutputMetadata_CameraOutputMetadataPayload* CameraOutputMetadata::mutable_payload() {
  ::cavnue::messages::data_warehouse::deployment::external::v1::CameraOutputMetadata_CameraOutputMetadataPayload* _msg = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutputMetadata.payload)
  return _msg;
}
inline void CameraOutputMetadata::set_allocated_payload(::cavnue::messages::data_warehouse::deployment::external::v1::CameraOutputMetadata_CameraOutputMetadataPayload* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.payload_;
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(payload);
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.deployment.external.v1.CameraOutputMetadata.payload)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace external
}  // namespace deployment
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fcamera_5foutputs_2eproto_2epb_2eh

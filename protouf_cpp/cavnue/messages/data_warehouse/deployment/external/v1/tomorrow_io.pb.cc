// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/data_warehouse/deployment/external/v1/tomorrow_io.proto

#include "cavnue/messages/data_warehouse/deployment/external/v1/tomorrow_io.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace deployment {
namespace external {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR TomorrowIO::TomorrowIO(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.precipitation_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.weather_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.ts_)*/nullptr
  , /*decltype(_impl_.source_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.duration_)*/ 0u

  , /*decltype(_impl_.cloud_cover_)*/ 0

  , /*decltype(_impl_.humidity_)*/ 0

  , /*decltype(_impl_.rain_intensity_)*/ 0

  , /*decltype(_impl_.snow_intensity_)*/ 0

  , /*decltype(_impl_.temperature_)*/ 0

  , /*decltype(_impl_.wind_speed_)*/ 0

  , /*decltype(_impl_.wind_direction_)*/ 0

  , /*decltype(_impl_.visibility_)*/ 0
} {}
struct TomorrowIODefaultTypeInternal {
  PROTOBUF_CONSTEXPR TomorrowIODefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TomorrowIODefaultTypeInternal() {}
  union {
    TomorrowIO _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TomorrowIODefaultTypeInternal _TomorrowIO_default_instance_;
}  // namespace v1
}  // namespace external
}  // namespace deployment
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
static ::_pb::Metadata file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2ftomorrow_5fio_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2ftomorrow_5fio_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2ftomorrow_5fio_2eproto = nullptr;
const ::uint32_t TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2ftomorrow_5fio_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::TomorrowIO, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::TomorrowIO, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::TomorrowIO, _impl_.source_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::TomorrowIO, _impl_.ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::TomorrowIO, _impl_.duration_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::TomorrowIO, _impl_.cloud_cover_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::TomorrowIO, _impl_.humidity_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::TomorrowIO, _impl_.precipitation_type_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::TomorrowIO, _impl_.rain_intensity_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::TomorrowIO, _impl_.snow_intensity_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::TomorrowIO, _impl_.temperature_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::TomorrowIO, _impl_.wind_speed_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::TomorrowIO, _impl_.wind_direction_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::TomorrowIO, _impl_.visibility_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::TomorrowIO, _impl_.weather_type_),
    1,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 21, -1, sizeof(::cavnue::messages::data_warehouse::deployment::external::v1::TomorrowIO)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cavnue::messages::data_warehouse::deployment::external::v1::_TomorrowIO_default_instance_._instance,
};
const char descriptor_table_protodef_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2ftomorrow_5fio_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\nGcavnue/messages/data_warehouse/deploym"
    "ent/external/v1/tomorrow_io.proto\0225cavnu"
    "e.messages.data_warehouse.deployment.ext"
    "ernal.v1\032\'cavnue/third_party/bq/v1/bq_fi"
    "eld.proto\032\'cavnue/third_party/bq/v1/bq_t"
    "able.proto\032-cavnue/messages/common/v1/fi"
    "eld_options.proto\032\037google/protobuf/times"
    "tamp.proto\"\324\004\n\nTomorrowIO\022.\n\tsource_id\030\001"
    " \001(\003B\014\230\265\030\001\212\371+\004\010\001@\001H\000R\010sourceId\210\001\001\022D\n\002ts\030"
    "\002 \001(\0132\032.google.protobuf.TimestampB\023\212\371+\017\010"
    "\001\022\tTIMESTAMP8\001H\001R\002ts\210\001\001\022&\n\010duration\030\003 \001("
    "\rB\n\210\361\004\010\212\371+\002\010\001R\010duration\022\037\n\013cloud_cover\030\004"
    " \001(\002R\ncloudCover\022\032\n\010humidity\030\005 \001(\002R\010humi"
    "dity\022-\n\022precipitation_type\030\006 \001(\tR\021precip"
    "itationType\022+\n\016rain_intensity\030\007 \001(\002B\004\210\361\004"
    "\014R\rrainIntensity\022+\n\016snow_intensity\030\010 \001(\002"
    "B\004\210\361\004\014R\rsnowIntensity\022&\n\013temperature\030\t \001"
    "(\002B\004\210\361\004\rR\013temperature\022#\n\nwind_speed\030\n \001("
    "\002B\004\210\361\004\001R\twindSpeed\022%\n\016wind_direction\030\013 \001"
    "(\002R\rwindDirection\022$\n\nvisibility\030\014 \001(\002B\004\210"
    "\361\004\005R\nvisibility\022!\n\014weather_type\030\r \001(\tR\013w"
    "eatherType:\020\202\371+\014\n\nTomorrowIOB\014\n\n_source_"
    "idB\005\n\003_tsb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2ftomorrow_5fio_2eproto_deps[4] =
    {
        &::descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2ffield_5foptions_2eproto,
        &::descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ffield_2eproto,
        &::descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2ftomorrow_5fio_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2ftomorrow_5fio_2eproto = {
    false,
    false,
    897,
    descriptor_table_protodef_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2ftomorrow_5fio_2eproto,
    "cavnue/messages/data_warehouse/deployment/external/v1/tomorrow_io.proto",
    &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2ftomorrow_5fio_2eproto_once,
    descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2ftomorrow_5fio_2eproto_deps,
    4,
    1,
    schemas,
    file_default_instances,
    TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2ftomorrow_5fio_2eproto::offsets,
    file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2ftomorrow_5fio_2eproto,
    file_level_enum_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2ftomorrow_5fio_2eproto,
    file_level_service_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2ftomorrow_5fio_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2ftomorrow_5fio_2eproto_getter() {
  return &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2ftomorrow_5fio_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2ftomorrow_5fio_2eproto(&descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2ftomorrow_5fio_2eproto);
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace deployment {
namespace external {
namespace v1 {
// ===================================================================

class TomorrowIO::_Internal {
 public:
  using HasBits = decltype(std::declval<TomorrowIO>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TomorrowIO, _impl_._has_bits_);
  static void set_has_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts(const TomorrowIO* msg);
  static void set_has_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TomorrowIO::_Internal::ts(const TomorrowIO* msg) {
  return *msg->_impl_.ts_;
}
void TomorrowIO::clear_ts() {
  if (_impl_.ts_ != nullptr) _impl_.ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TomorrowIO::TomorrowIO(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.deployment.external.v1.TomorrowIO)
}
TomorrowIO::TomorrowIO(const TomorrowIO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TomorrowIO* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.precipitation_type_) {}

    , decltype(_impl_.weather_type_) {}

    , decltype(_impl_.ts_){nullptr}
    , decltype(_impl_.source_id_) {}

    , decltype(_impl_.duration_) {}

    , decltype(_impl_.cloud_cover_) {}

    , decltype(_impl_.humidity_) {}

    , decltype(_impl_.rain_intensity_) {}

    , decltype(_impl_.snow_intensity_) {}

    , decltype(_impl_.temperature_) {}

    , decltype(_impl_.wind_speed_) {}

    , decltype(_impl_.wind_direction_) {}

    , decltype(_impl_.visibility_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.precipitation_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.precipitation_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_precipitation_type().empty()) {
    _this->_impl_.precipitation_type_.Set(from._internal_precipitation_type(), _this->GetArenaForAllocation());
  }
  _impl_.weather_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.weather_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_weather_type().empty()) {
    _this->_impl_.weather_type_.Set(from._internal_weather_type(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.ts_);
  }
  ::memcpy(&_impl_.source_id_, &from._impl_.source_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.visibility_) -
    reinterpret_cast<char*>(&_impl_.source_id_)) + sizeof(_impl_.visibility_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.deployment.external.v1.TomorrowIO)
}

inline void TomorrowIO::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.precipitation_type_) {}

    , decltype(_impl_.weather_type_) {}

    , decltype(_impl_.ts_){nullptr}
    , decltype(_impl_.source_id_) { ::int64_t{0} }

    , decltype(_impl_.duration_) { 0u }

    , decltype(_impl_.cloud_cover_) { 0 }

    , decltype(_impl_.humidity_) { 0 }

    , decltype(_impl_.rain_intensity_) { 0 }

    , decltype(_impl_.snow_intensity_) { 0 }

    , decltype(_impl_.temperature_) { 0 }

    , decltype(_impl_.wind_speed_) { 0 }

    , decltype(_impl_.wind_direction_) { 0 }

    , decltype(_impl_.visibility_) { 0 }

  };
  _impl_.precipitation_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.precipitation_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.weather_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.weather_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TomorrowIO::~TomorrowIO() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.deployment.external.v1.TomorrowIO)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TomorrowIO::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.precipitation_type_.Destroy();
  _impl_.weather_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ts_;
}

void TomorrowIO::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TomorrowIO::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.deployment.external.v1.TomorrowIO)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.precipitation_type_.ClearToEmpty();
  _impl_.weather_type_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.ts_ != nullptr);
    _impl_.ts_->Clear();
  }
  _impl_.source_id_ = ::int64_t{0};
  ::memset(&_impl_.duration_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.visibility_) -
      reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.visibility_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TomorrowIO::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 source_id = 1 [json_name = "sourceId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_source_id(&has_bits);
          _impl_.source_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .google.protobuf.Timestamp ts = 2 [json_name = "ts", (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 duration = 3 [json_name = "duration", (.cavnue.messages.common.v1.units) = UNITS_MILLISECONDS, (.gen_bq_schema.bigquery) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // float cloud_cover = 4 [json_name = "cloudCover"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 37)) {
          _impl_.cloud_cover_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float humidity = 5 [json_name = "humidity"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 45)) {
          _impl_.humidity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // string precipitation_type = 6 [json_name = "precipitationType"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_precipitation_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.deployment.external.v1.TomorrowIO.precipitation_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // float rain_intensity = 7 [json_name = "rainIntensity", (.cavnue.messages.common.v1.units) = UNITS_MILLIMETERS_PER_HOUR];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 61)) {
          _impl_.rain_intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float snow_intensity = 8 [json_name = "snowIntensity", (.cavnue.messages.common.v1.units) = UNITS_MILLIMETERS_PER_HOUR];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 69)) {
          _impl_.snow_intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float temperature = 9 [json_name = "temperature", (.cavnue.messages.common.v1.units) = UNITS_CELSIUS];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 77)) {
          _impl_.temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float wind_speed = 10 [json_name = "windSpeed", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 85)) {
          _impl_.wind_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float wind_direction = 11 [json_name = "windDirection"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 93)) {
          _impl_.wind_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float visibility = 12 [json_name = "visibility", (.cavnue.messages.common.v1.units) = UNITS_METERS];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 101)) {
          _impl_.visibility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // string weather_type = 13 [json_name = "weatherType"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_weather_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.deployment.external.v1.TomorrowIO.weather_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TomorrowIO::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.deployment.external.v1.TomorrowIO)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 source_id = 1 [json_name = "sourceId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_source_id(), target);
  }

  // optional .google.protobuf.Timestamp ts = 2 [json_name = "ts", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ts(this),
        _Internal::ts(this).GetCachedSize(), target, stream);
  }

  // uint32 duration = 3 [json_name = "duration", (.cavnue.messages.common.v1.units) = UNITS_MILLISECONDS, (.gen_bq_schema.bigquery) = {
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_duration(), target);
  }

  // float cloud_cover = 4 [json_name = "cloudCover"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_cloud_cover = this->_internal_cloud_cover();
  ::uint32_t raw_cloud_cover;
  memcpy(&raw_cloud_cover, &tmp_cloud_cover, sizeof(tmp_cloud_cover));
  if (raw_cloud_cover != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_cloud_cover(), target);
  }

  // float humidity = 5 [json_name = "humidity"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_humidity = this->_internal_humidity();
  ::uint32_t raw_humidity;
  memcpy(&raw_humidity, &tmp_humidity, sizeof(tmp_humidity));
  if (raw_humidity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_humidity(), target);
  }

  // string precipitation_type = 6 [json_name = "precipitationType"];
  if (!this->_internal_precipitation_type().empty()) {
    const std::string& _s = this->_internal_precipitation_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.deployment.external.v1.TomorrowIO.precipitation_type");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // float rain_intensity = 7 [json_name = "rainIntensity", (.cavnue.messages.common.v1.units) = UNITS_MILLIMETERS_PER_HOUR];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_rain_intensity = this->_internal_rain_intensity();
  ::uint32_t raw_rain_intensity;
  memcpy(&raw_rain_intensity, &tmp_rain_intensity, sizeof(tmp_rain_intensity));
  if (raw_rain_intensity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_rain_intensity(), target);
  }

  // float snow_intensity = 8 [json_name = "snowIntensity", (.cavnue.messages.common.v1.units) = UNITS_MILLIMETERS_PER_HOUR];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_snow_intensity = this->_internal_snow_intensity();
  ::uint32_t raw_snow_intensity;
  memcpy(&raw_snow_intensity, &tmp_snow_intensity, sizeof(tmp_snow_intensity));
  if (raw_snow_intensity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        8, this->_internal_snow_intensity(), target);
  }

  // float temperature = 9 [json_name = "temperature", (.cavnue.messages.common.v1.units) = UNITS_CELSIUS];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_temperature = this->_internal_temperature();
  ::uint32_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        9, this->_internal_temperature(), target);
  }

  // float wind_speed = 10 [json_name = "windSpeed", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_wind_speed = this->_internal_wind_speed();
  ::uint32_t raw_wind_speed;
  memcpy(&raw_wind_speed, &tmp_wind_speed, sizeof(tmp_wind_speed));
  if (raw_wind_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        10, this->_internal_wind_speed(), target);
  }

  // float wind_direction = 11 [json_name = "windDirection"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_wind_direction = this->_internal_wind_direction();
  ::uint32_t raw_wind_direction;
  memcpy(&raw_wind_direction, &tmp_wind_direction, sizeof(tmp_wind_direction));
  if (raw_wind_direction != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        11, this->_internal_wind_direction(), target);
  }

  // float visibility = 12 [json_name = "visibility", (.cavnue.messages.common.v1.units) = UNITS_METERS];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_visibility = this->_internal_visibility();
  ::uint32_t raw_visibility;
  memcpy(&raw_visibility, &tmp_visibility, sizeof(tmp_visibility));
  if (raw_visibility != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        12, this->_internal_visibility(), target);
  }

  // string weather_type = 13 [json_name = "weatherType"];
  if (!this->_internal_weather_type().empty()) {
    const std::string& _s = this->_internal_weather_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.deployment.external.v1.TomorrowIO.weather_type");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.deployment.external.v1.TomorrowIO)
  return target;
}

::size_t TomorrowIO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.deployment.external.v1.TomorrowIO)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string precipitation_type = 6 [json_name = "precipitationType"];
  if (!this->_internal_precipitation_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_precipitation_type());
  }

  // string weather_type = 13 [json_name = "weatherType"];
  if (!this->_internal_weather_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_weather_type());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .google.protobuf.Timestamp ts = 2 [json_name = "ts", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ts_);
    }

    // optional int64 source_id = 1 [json_name = "sourceId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_source_id());
    }

  }
  // uint32 duration = 3 [json_name = "duration", (.cavnue.messages.common.v1.units) = UNITS_MILLISECONDS, (.gen_bq_schema.bigquery) = {
  if (this->_internal_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_duration());
  }

  // float cloud_cover = 4 [json_name = "cloudCover"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_cloud_cover = this->_internal_cloud_cover();
  ::uint32_t raw_cloud_cover;
  memcpy(&raw_cloud_cover, &tmp_cloud_cover, sizeof(tmp_cloud_cover));
  if (raw_cloud_cover != 0) {
    total_size += 5;
  }

  // float humidity = 5 [json_name = "humidity"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_humidity = this->_internal_humidity();
  ::uint32_t raw_humidity;
  memcpy(&raw_humidity, &tmp_humidity, sizeof(tmp_humidity));
  if (raw_humidity != 0) {
    total_size += 5;
  }

  // float rain_intensity = 7 [json_name = "rainIntensity", (.cavnue.messages.common.v1.units) = UNITS_MILLIMETERS_PER_HOUR];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_rain_intensity = this->_internal_rain_intensity();
  ::uint32_t raw_rain_intensity;
  memcpy(&raw_rain_intensity, &tmp_rain_intensity, sizeof(tmp_rain_intensity));
  if (raw_rain_intensity != 0) {
    total_size += 5;
  }

  // float snow_intensity = 8 [json_name = "snowIntensity", (.cavnue.messages.common.v1.units) = UNITS_MILLIMETERS_PER_HOUR];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_snow_intensity = this->_internal_snow_intensity();
  ::uint32_t raw_snow_intensity;
  memcpy(&raw_snow_intensity, &tmp_snow_intensity, sizeof(tmp_snow_intensity));
  if (raw_snow_intensity != 0) {
    total_size += 5;
  }

  // float temperature = 9 [json_name = "temperature", (.cavnue.messages.common.v1.units) = UNITS_CELSIUS];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_temperature = this->_internal_temperature();
  ::uint32_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    total_size += 5;
  }

  // float wind_speed = 10 [json_name = "windSpeed", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_wind_speed = this->_internal_wind_speed();
  ::uint32_t raw_wind_speed;
  memcpy(&raw_wind_speed, &tmp_wind_speed, sizeof(tmp_wind_speed));
  if (raw_wind_speed != 0) {
    total_size += 5;
  }

  // float wind_direction = 11 [json_name = "windDirection"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_wind_direction = this->_internal_wind_direction();
  ::uint32_t raw_wind_direction;
  memcpy(&raw_wind_direction, &tmp_wind_direction, sizeof(tmp_wind_direction));
  if (raw_wind_direction != 0) {
    total_size += 5;
  }

  // float visibility = 12 [json_name = "visibility", (.cavnue.messages.common.v1.units) = UNITS_METERS];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_visibility = this->_internal_visibility();
  ::uint32_t raw_visibility;
  memcpy(&raw_visibility, &tmp_visibility, sizeof(tmp_visibility));
  if (raw_visibility != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TomorrowIO::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TomorrowIO::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TomorrowIO::GetClassData() const { return &_class_data_; }


void TomorrowIO::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TomorrowIO*>(&to_msg);
  auto& from = static_cast<const TomorrowIO&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.deployment.external.v1.TomorrowIO)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_precipitation_type().empty()) {
    _this->_internal_set_precipitation_type(from._internal_precipitation_type());
  }
  if (!from._internal_weather_type().empty()) {
    _this->_internal_set_weather_type(from._internal_weather_type());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_ts());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.source_id_ = from._impl_.source_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_duration() != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_cloud_cover = from._internal_cloud_cover();
  ::uint32_t raw_cloud_cover;
  memcpy(&raw_cloud_cover, &tmp_cloud_cover, sizeof(tmp_cloud_cover));
  if (raw_cloud_cover != 0) {
    _this->_internal_set_cloud_cover(from._internal_cloud_cover());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_humidity = from._internal_humidity();
  ::uint32_t raw_humidity;
  memcpy(&raw_humidity, &tmp_humidity, sizeof(tmp_humidity));
  if (raw_humidity != 0) {
    _this->_internal_set_humidity(from._internal_humidity());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_rain_intensity = from._internal_rain_intensity();
  ::uint32_t raw_rain_intensity;
  memcpy(&raw_rain_intensity, &tmp_rain_intensity, sizeof(tmp_rain_intensity));
  if (raw_rain_intensity != 0) {
    _this->_internal_set_rain_intensity(from._internal_rain_intensity());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_snow_intensity = from._internal_snow_intensity();
  ::uint32_t raw_snow_intensity;
  memcpy(&raw_snow_intensity, &tmp_snow_intensity, sizeof(tmp_snow_intensity));
  if (raw_snow_intensity != 0) {
    _this->_internal_set_snow_intensity(from._internal_snow_intensity());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_temperature = from._internal_temperature();
  ::uint32_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    _this->_internal_set_temperature(from._internal_temperature());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_wind_speed = from._internal_wind_speed();
  ::uint32_t raw_wind_speed;
  memcpy(&raw_wind_speed, &tmp_wind_speed, sizeof(tmp_wind_speed));
  if (raw_wind_speed != 0) {
    _this->_internal_set_wind_speed(from._internal_wind_speed());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_wind_direction = from._internal_wind_direction();
  ::uint32_t raw_wind_direction;
  memcpy(&raw_wind_direction, &tmp_wind_direction, sizeof(tmp_wind_direction));
  if (raw_wind_direction != 0) {
    _this->_internal_set_wind_direction(from._internal_wind_direction());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_visibility = from._internal_visibility();
  ::uint32_t raw_visibility;
  memcpy(&raw_visibility, &tmp_visibility, sizeof(tmp_visibility));
  if (raw_visibility != 0) {
    _this->_internal_set_visibility(from._internal_visibility());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TomorrowIO::CopyFrom(const TomorrowIO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.deployment.external.v1.TomorrowIO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TomorrowIO::IsInitialized() const {
  return true;
}

void TomorrowIO::InternalSwap(TomorrowIO* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.precipitation_type_, lhs_arena,
                                       &other->_impl_.precipitation_type_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.weather_type_, lhs_arena,
                                       &other->_impl_.weather_type_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TomorrowIO, _impl_.visibility_)
      + sizeof(TomorrowIO::_impl_.visibility_)
      - PROTOBUF_FIELD_OFFSET(TomorrowIO, _impl_.ts_)>(
          reinterpret_cast<char*>(&_impl_.ts_),
          reinterpret_cast<char*>(&other->_impl_.ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TomorrowIO::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2ftomorrow_5fio_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2ftomorrow_5fio_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2ftomorrow_5fio_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace external
}  // namespace deployment
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::deployment::external::v1::TomorrowIO*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::deployment::external::v1::TomorrowIO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::deployment::external::v1::TomorrowIO >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

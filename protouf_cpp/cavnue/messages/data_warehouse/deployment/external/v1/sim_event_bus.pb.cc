// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/data_warehouse/deployment/external/v1/sim_event_bus.proto

#include "cavnue/messages/data_warehouse/deployment/external/v1/sim_event_bus.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace deployment {
namespace external {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR SimEventBus::SimEventBus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.trace_context_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.message_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.topic_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.simulation_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.payload_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.ts_)*/nullptr
  , /*decltype(_impl_.redis_ts_)*/nullptr
  , /*decltype(_impl_.redis_id_)*/ 0u
} {}
struct SimEventBusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimEventBusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimEventBusDefaultTypeInternal() {}
  union {
    SimEventBus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimEventBusDefaultTypeInternal _SimEventBus_default_instance_;
}  // namespace v1
}  // namespace external
}  // namespace deployment
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
static ::_pb::Metadata file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fsim_5fevent_5fbus_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fsim_5fevent_5fbus_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fsim_5fevent_5fbus_2eproto = nullptr;
const ::uint32_t TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fsim_5fevent_5fbus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::SimEventBus, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::SimEventBus, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::SimEventBus, _impl_.ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::SimEventBus, _impl_.trace_context_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::SimEventBus, _impl_.redis_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::SimEventBus, _impl_.redis_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::SimEventBus, _impl_.message_name_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::SimEventBus, _impl_.topic_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::SimEventBus, _impl_.simulation_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::deployment::external::v1::SimEventBus, _impl_.payload_),
    0,
    ~0u,
    1,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 16, -1, sizeof(::cavnue::messages::data_warehouse::deployment::external::v1::SimEventBus)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cavnue::messages::data_warehouse::deployment::external::v1::_SimEventBus_default_instance_._instance,
};
const char descriptor_table_protodef_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fsim_5fevent_5fbus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\nIcavnue/messages/data_warehouse/deploym"
    "ent/external/v1/sim_event_bus.proto\0225cav"
    "nue.messages.data_warehouse.deployment.e"
    "xternal.v1\032\'cavnue/third_party/bq/v1/bq_"
    "field.proto\032\'cavnue/third_party/bq/v1/bq"
    "_table.proto\032\037google/protobuf/timestamp."
    "proto\"\231\003\n\013SimEventBus\022=\n\002ts\030\001 \001(\0132\032.goog"
    "le.protobuf.TimestampB\021\212\371+\r\010\001\022\tTIMESTAMP"
    "R\002ts\022+\n\rtrace_context\030\002 \001(\tB\006\212\371+\002\010\001R\014tra"
    "ceContext\022J\n\010redis_ts\030\003 \001(\0132\032.google.pro"
    "tobuf.TimestampB\023\212\371+\017\010\001\022\tTIMESTAMP8\001R\007re"
    "disTs\022!\n\010redis_id\030\004 \001(\rB\006\212\371+\002\010\001R\007redisId"
    "\022+\n\014message_name\030\005 \001(\tB\010\212\371+\004\010\001@\001R\013messag"
    "eName\022\036\n\005topic\030\006 \001(\tB\010\212\371+\004\010\001@\001R\005topic\022-\n"
    "\rsimulation_id\030\007 \001(\tB\010\212\371+\004\010\001@\001R\014simulati"
    "onId\022 \n\007payload\030\010 \001(\014B\006\212\371+\002\010\001R\007payload:\021"
    "\202\371+\r\n\013SimEventBusb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fsim_5fevent_5fbus_2eproto_deps[3] =
    {
        &::descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ffield_2eproto,
        &::descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fsim_5fevent_5fbus_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fsim_5fevent_5fbus_2eproto = {
    false,
    false,
    665,
    descriptor_table_protodef_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fsim_5fevent_5fbus_2eproto,
    "cavnue/messages/data_warehouse/deployment/external/v1/sim_event_bus.proto",
    &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fsim_5fevent_5fbus_2eproto_once,
    descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fsim_5fevent_5fbus_2eproto_deps,
    3,
    1,
    schemas,
    file_default_instances,
    TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fsim_5fevent_5fbus_2eproto::offsets,
    file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fsim_5fevent_5fbus_2eproto,
    file_level_enum_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fsim_5fevent_5fbus_2eproto,
    file_level_service_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fsim_5fevent_5fbus_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fsim_5fevent_5fbus_2eproto_getter() {
  return &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fsim_5fevent_5fbus_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fsim_5fevent_5fbus_2eproto(&descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fsim_5fevent_5fbus_2eproto);
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace deployment {
namespace external {
namespace v1 {
// ===================================================================

class SimEventBus::_Internal {
 public:
  using HasBits = decltype(std::declval<SimEventBus>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SimEventBus, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts(const SimEventBus* msg);
  static void set_has_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& redis_ts(const SimEventBus* msg);
  static void set_has_redis_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SimEventBus::_Internal::ts(const SimEventBus* msg) {
  return *msg->_impl_.ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SimEventBus::_Internal::redis_ts(const SimEventBus* msg) {
  return *msg->_impl_.redis_ts_;
}
void SimEventBus::clear_ts() {
  if (_impl_.ts_ != nullptr) _impl_.ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SimEventBus::clear_redis_ts() {
  if (_impl_.redis_ts_ != nullptr) _impl_.redis_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
SimEventBus::SimEventBus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.deployment.external.v1.SimEventBus)
}
SimEventBus::SimEventBus(const SimEventBus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SimEventBus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trace_context_) {}

    , decltype(_impl_.message_name_) {}

    , decltype(_impl_.topic_) {}

    , decltype(_impl_.simulation_id_) {}

    , decltype(_impl_.payload_) {}

    , decltype(_impl_.ts_){nullptr}
    , decltype(_impl_.redis_ts_){nullptr}
    , decltype(_impl_.redis_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.trace_context_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.trace_context_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trace_context().empty()) {
    _this->_impl_.trace_context_.Set(from._internal_trace_context(), _this->GetArenaForAllocation());
  }
  _impl_.message_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_name().empty()) {
    _this->_impl_.message_name_.Set(from._internal_message_name(), _this->GetArenaForAllocation());
  }
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.topic_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_topic().empty()) {
    _this->_impl_.topic_.Set(from._internal_topic(), _this->GetArenaForAllocation());
  }
  _impl_.simulation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.simulation_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_simulation_id().empty()) {
    _this->_impl_.simulation_id_.Set(from._internal_simulation_id(), _this->GetArenaForAllocation());
  }
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.ts_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.redis_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.redis_ts_);
  }
  _this->_impl_.redis_id_ = from._impl_.redis_id_;
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.deployment.external.v1.SimEventBus)
}

inline void SimEventBus::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trace_context_) {}

    , decltype(_impl_.message_name_) {}

    , decltype(_impl_.topic_) {}

    , decltype(_impl_.simulation_id_) {}

    , decltype(_impl_.payload_) {}

    , decltype(_impl_.ts_){nullptr}
    , decltype(_impl_.redis_ts_){nullptr}
    , decltype(_impl_.redis_id_) { 0u }

  };
  _impl_.trace_context_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.trace_context_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.topic_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.simulation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.simulation_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SimEventBus::~SimEventBus() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.deployment.external.v1.SimEventBus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimEventBus::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trace_context_.Destroy();
  _impl_.message_name_.Destroy();
  _impl_.topic_.Destroy();
  _impl_.simulation_id_.Destroy();
  _impl_.payload_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ts_;
  if (this != internal_default_instance()) delete _impl_.redis_ts_;
}

void SimEventBus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimEventBus::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.deployment.external.v1.SimEventBus)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trace_context_.ClearToEmpty();
  _impl_.message_name_.ClearToEmpty();
  _impl_.topic_.ClearToEmpty();
  _impl_.simulation_id_.ClearToEmpty();
  _impl_.payload_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.ts_ != nullptr);
      _impl_.ts_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.redis_ts_ != nullptr);
      _impl_.redis_ts_->Clear();
    }
  }
  _impl_.redis_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimEventBus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp ts = 1 [json_name = "ts", (.gen_bq_schema.bigquery) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string trace_context = 2 [json_name = "traceContext", (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_trace_context();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.deployment.external.v1.SimEventBus.trace_context"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp redis_ts = 3 [json_name = "redisTs", (.gen_bq_schema.bigquery) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_redis_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 redis_id = 4 [json_name = "redisId", (.gen_bq_schema.bigquery) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.redis_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string message_name = 5 [json_name = "messageName", (.gen_bq_schema.bigquery) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_message_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.deployment.external.v1.SimEventBus.message_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string topic = 6 [json_name = "topic", (.gen_bq_schema.bigquery) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.deployment.external.v1.SimEventBus.topic"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string simulation_id = 7 [json_name = "simulationId", (.gen_bq_schema.bigquery) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_simulation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.deployment.external.v1.SimEventBus.simulation_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes payload = 8 [json_name = "payload", (.gen_bq_schema.bigquery) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SimEventBus::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.deployment.external.v1.SimEventBus)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp ts = 1 [json_name = "ts", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ts(this),
        _Internal::ts(this).GetCachedSize(), target, stream);
  }

  // string trace_context = 2 [json_name = "traceContext", (.gen_bq_schema.bigquery) = {
  if (!this->_internal_trace_context().empty()) {
    const std::string& _s = this->_internal_trace_context();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.deployment.external.v1.SimEventBus.trace_context");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .google.protobuf.Timestamp redis_ts = 3 [json_name = "redisTs", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::redis_ts(this),
        _Internal::redis_ts(this).GetCachedSize(), target, stream);
  }

  // uint32 redis_id = 4 [json_name = "redisId", (.gen_bq_schema.bigquery) = {
  if (this->_internal_redis_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_redis_id(), target);
  }

  // string message_name = 5 [json_name = "messageName", (.gen_bq_schema.bigquery) = {
  if (!this->_internal_message_name().empty()) {
    const std::string& _s = this->_internal_message_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.deployment.external.v1.SimEventBus.message_name");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string topic = 6 [json_name = "topic", (.gen_bq_schema.bigquery) = {
  if (!this->_internal_topic().empty()) {
    const std::string& _s = this->_internal_topic();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.deployment.external.v1.SimEventBus.topic");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string simulation_id = 7 [json_name = "simulationId", (.gen_bq_schema.bigquery) = {
  if (!this->_internal_simulation_id().empty()) {
    const std::string& _s = this->_internal_simulation_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.deployment.external.v1.SimEventBus.simulation_id");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // bytes payload = 8 [json_name = "payload", (.gen_bq_schema.bigquery) = {
  if (!this->_internal_payload().empty()) {
    const std::string& _s = this->_internal_payload();
    target = stream->WriteBytesMaybeAliased(8, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.deployment.external.v1.SimEventBus)
  return target;
}

::size_t SimEventBus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.deployment.external.v1.SimEventBus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trace_context = 2 [json_name = "traceContext", (.gen_bq_schema.bigquery) = {
  if (!this->_internal_trace_context().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_trace_context());
  }

  // string message_name = 5 [json_name = "messageName", (.gen_bq_schema.bigquery) = {
  if (!this->_internal_message_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_message_name());
  }

  // string topic = 6 [json_name = "topic", (.gen_bq_schema.bigquery) = {
  if (!this->_internal_topic().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_topic());
  }

  // string simulation_id = 7 [json_name = "simulationId", (.gen_bq_schema.bigquery) = {
  if (!this->_internal_simulation_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_simulation_id());
  }

  // bytes payload = 8 [json_name = "payload", (.gen_bq_schema.bigquery) = {
  if (!this->_internal_payload().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_payload());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Timestamp ts = 1 [json_name = "ts", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ts_);
    }

    // .google.protobuf.Timestamp redis_ts = 3 [json_name = "redisTs", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.redis_ts_);
    }

  }
  // uint32 redis_id = 4 [json_name = "redisId", (.gen_bq_schema.bigquery) = {
  if (this->_internal_redis_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_redis_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimEventBus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SimEventBus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimEventBus::GetClassData() const { return &_class_data_; }


void SimEventBus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SimEventBus*>(&to_msg);
  auto& from = static_cast<const SimEventBus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.deployment.external.v1.SimEventBus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trace_context().empty()) {
    _this->_internal_set_trace_context(from._internal_trace_context());
  }
  if (!from._internal_message_name().empty()) {
    _this->_internal_set_message_name(from._internal_message_name());
  }
  if (!from._internal_topic().empty()) {
    _this->_internal_set_topic(from._internal_topic());
  }
  if (!from._internal_simulation_id().empty()) {
    _this->_internal_set_simulation_id(from._internal_simulation_id());
  }
  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_ts());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_redis_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_redis_ts());
    }
  }
  if (from._internal_redis_id() != 0) {
    _this->_internal_set_redis_id(from._internal_redis_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimEventBus::CopyFrom(const SimEventBus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.deployment.external.v1.SimEventBus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimEventBus::IsInitialized() const {
  return true;
}

void SimEventBus::InternalSwap(SimEventBus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.trace_context_, lhs_arena,
                                       &other->_impl_.trace_context_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_name_, lhs_arena,
                                       &other->_impl_.message_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.topic_, lhs_arena,
                                       &other->_impl_.topic_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.simulation_id_, lhs_arena,
                                       &other->_impl_.simulation_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payload_, lhs_arena,
                                       &other->_impl_.payload_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimEventBus, _impl_.redis_id_)
      + sizeof(SimEventBus::_impl_.redis_id_)
      - PROTOBUF_FIELD_OFFSET(SimEventBus, _impl_.ts_)>(
          reinterpret_cast<char*>(&_impl_.ts_),
          reinterpret_cast<char*>(&other->_impl_.ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimEventBus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fsim_5fevent_5fbus_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fsim_5fevent_5fbus_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fdeployment_2fexternal_2fv1_2fsim_5fevent_5fbus_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace external
}  // namespace deployment
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::deployment::external::v1::SimEventBus*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::deployment::external::v1::SimEventBus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::deployment::external::v1::SimEventBus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

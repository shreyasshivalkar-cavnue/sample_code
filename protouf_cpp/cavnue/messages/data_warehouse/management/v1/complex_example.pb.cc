// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/data_warehouse/management/v1/complex_example.proto

#include "cavnue/messages/data_warehouse/management/v1/complex_example.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace management {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR NestedMessage::NestedMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.id_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NestedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NestedMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NestedMessageDefaultTypeInternal() {}
  union {
    NestedMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NestedMessageDefaultTypeInternal _NestedMessage_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CustomMetadata::CustomMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CustomMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustomMetadataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustomMetadataDefaultTypeInternal() {}
  union {
    CustomMetadata _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustomMetadataDefaultTypeInternal _CustomMetadata_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ComplexMessage_MapFieldEntry_DoNotUse::ComplexMessage_MapFieldEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ComplexMessage_MapFieldEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexMessage_MapFieldEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexMessage_MapFieldEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ComplexMessage_MapFieldEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexMessage_MapFieldEntry_DoNotUseDefaultTypeInternal _ComplexMessage_MapFieldEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ComplexMessage::ComplexMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.repeated_int_field_)*/ {}
  ,/* _impl_._repeated_int_field_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.map_field_)*/{}
  , /*decltype(_impl_.string_field_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.bytes_field_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.nested_message_field_)*/nullptr
  , /*decltype(_impl_.timestamp_field_)*/nullptr
  , /*decltype(_impl_.duration_field_)*/nullptr
  , /*decltype(_impl_.custom_metadata_)*/nullptr
  , /*decltype(_impl_.int64_field_)*/ ::int64_t{0}

  , /*decltype(_impl_.int_field_)*/ 0

  , /*decltype(_impl_.uint_field_)*/ 0u

  , /*decltype(_impl_.uint64_field_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.sint64_field_)*/ ::int64_t{0}

  , /*decltype(_impl_.sint_field_)*/ 0

  , /*decltype(_impl_.fixed32_field_)*/ 0u

  , /*decltype(_impl_.fixed64_field_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.sfixed64_field_)*/ ::int64_t{0}

  , /*decltype(_impl_.sfixed32_field_)*/ 0

  , /*decltype(_impl_.float_field_)*/ 0

  , /*decltype(_impl_.double_field_)*/ 0

  , /*decltype(_impl_.bool_field_)*/ false

  , /*decltype(_impl_.enum_field_)*/ 0

  , /*decltype(_impl_.test_oneof_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ComplexMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexMessageDefaultTypeInternal() {}
  union {
    ComplexMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexMessageDefaultTypeInternal _ComplexMessage_default_instance_;
}  // namespace v1
}  // namespace management
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
static ::_pb::Metadata file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto = nullptr;
const ::uint32_t TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::NestedMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::NestedMessage, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::NestedMessage, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::NestedMessage, _impl_.tags_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::CustomMetadata, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::CustomMetadata, _impl_.message_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::ComplexMessage_MapFieldEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::ComplexMessage_MapFieldEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::ComplexMessage_MapFieldEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::ComplexMessage_MapFieldEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::ComplexMessage, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::ComplexMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::ComplexMessage, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::ComplexMessage, _impl_.int_field_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::ComplexMessage, _impl_.int64_field_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::ComplexMessage, _impl_.uint_field_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::ComplexMessage, _impl_.uint64_field_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::ComplexMessage, _impl_.sint_field_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::ComplexMessage, _impl_.sint64_field_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::ComplexMessage, _impl_.fixed32_field_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::ComplexMessage, _impl_.fixed64_field_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::ComplexMessage, _impl_.sfixed32_field_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::ComplexMessage, _impl_.sfixed64_field_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::ComplexMessage, _impl_.float_field_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::ComplexMessage, _impl_.double_field_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::ComplexMessage, _impl_.bool_field_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::ComplexMessage, _impl_.string_field_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::ComplexMessage, _impl_.bytes_field_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::ComplexMessage, _impl_.enum_field_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::ComplexMessage, _impl_.repeated_int_field_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::ComplexMessage, _impl_.map_field_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::ComplexMessage, _impl_.nested_message_field_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::ComplexMessage, _impl_.timestamp_field_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::ComplexMessage, _impl_.duration_field_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::ComplexMessage, _impl_.custom_metadata_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::ComplexMessage, _impl_.test_oneof_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    2,
    3,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::cavnue::messages::data_warehouse::management::v1::NestedMessage)},
        { 11, -1, -1, sizeof(::cavnue::messages::data_warehouse::management::v1::CustomMetadata)},
        { 20, 30, -1, sizeof(::cavnue::messages::data_warehouse::management::v1::ComplexMessage_MapFieldEntry_DoNotUse)},
        { 32, 65, -1, sizeof(::cavnue::messages::data_warehouse::management::v1::ComplexMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cavnue::messages::data_warehouse::management::v1::_NestedMessage_default_instance_._instance,
    &::cavnue::messages::data_warehouse::management::v1::_CustomMetadata_default_instance_._instance,
    &::cavnue::messages::data_warehouse::management::v1::_ComplexMessage_MapFieldEntry_DoNotUse_default_instance_._instance,
    &::cavnue::messages::data_warehouse::management::v1::_ComplexMessage_default_instance_._instance,
};
const char descriptor_table_protodef_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\nBcavnue/messages/data_warehouse/managem"
    "ent/v1/complex_example.proto\022,cavnue.mes"
    "sages.data_warehouse.management.v1\032\037goog"
    "le/protobuf/timestamp.proto\032\036google/prot"
    "obuf/duration.proto\"G\n\rNestedMessage\022\016\n\002"
    "id\030\001 \001(\005R\002id\022\022\n\004name\030\002 \001(\tR\004name\022\022\n\004tags"
    "\030\003 \003(\tR\004tags\"*\n\016CustomMetadata\022\030\n\007messag"
    "e\030\001 \001(\tR\007message\"\375\n\n\016ComplexMessage\022\033\n\ti"
    "nt_field\030\001 \001(\005R\010intField\022\037\n\013int64_field\030"
    "\002 \001(\003R\nint64Field\022\035\n\nuint_field\030\003 \001(\rR\tu"
    "intField\022!\n\014uint64_field\030\004 \001(\004R\013uint64Fi"
    "eld\022\035\n\nsint_field\030\005 \001(\021R\tsintField\022!\n\014si"
    "nt64_field\030\006 \001(\022R\013sint64Field\022#\n\rfixed32"
    "_field\030\007 \001(\007R\014fixed32Field\022#\n\rfixed64_fi"
    "eld\030\010 \001(\006R\014fixed64Field\022%\n\016sfixed32_fiel"
    "d\030\t \001(\017R\rsfixed32Field\022%\n\016sfixed64_field"
    "\030\n \001(\020R\rsfixed64Field\022\037\n\013float_field\030\013 \001"
    "(\002R\nfloatField\022!\n\014double_field\030\014 \001(\001R\013do"
    "ubleField\022\035\n\nbool_field\030\r \001(\010R\tboolField"
    "\022!\n\014string_field\030\016 \001(\tR\013stringField\022\037\n\013b"
    "ytes_field\030\017 \001(\014R\nbytesField\022X\n\nenum_fie"
    "ld\030\020 \001(\01629.cavnue.messages.data_warehous"
    "e.management.v1.ExampleEnumR\tenumField\022,"
    "\n\022repeated_int_field\030\021 \003(\005R\020repeatedIntF"
    "ield\022g\n\tmap_field\030\022 \003(\0132J.cavnue.message"
    "s.data_warehouse.management.v1.ComplexMe"
    "ssage.MapFieldEntryR\010mapField\022#\n\014oneof_s"
    "tring\030\023 \001(\tH\000R\013oneofString\022o\n\024oneof_nest"
    "ed_message\030\024 \001(\0132;.cavnue.messages.data_"
    "warehouse.management.v1.NestedMessageH\000R"
    "\022oneofNestedMessage\022m\n\024nested_message_fi"
    "eld\030\025 \001(\0132;.cavnue.messages.data_warehou"
    "se.management.v1.NestedMessageR\022nestedMe"
    "ssageField\022C\n\017timestamp_field\030\026 \001(\0132\032.go"
    "ogle.protobuf.TimestampR\016timestampField\022"
    "@\n\016duration_field\030\027 \001(\0132\031.google.protobu"
    "f.DurationR\rdurationField\022e\n\017custom_meta"
    "data\030\030 \001(\0132<.cavnue.messages.data_wareho"
    "use.management.v1.CustomMetadataR\016custom"
    "Metadata\032x\n\rMapFieldEntry\022\020\n\003key\030\001 \001(\tR\003"
    "key\022Q\n\005value\030\002 \001(\0132;.cavnue.messages.dat"
    "a_warehouse.management.v1.NestedMessageR"
    "\005value:\0028\001B\014\n\ntest_oneof*{\n\013ExampleEnum\022"
    "\034\n\030EXAMPLE_ENUM_UNSPECIFIED\020\000\022\030\n\024EXAMPLE"
    "_ENUM_STARTED\020\001\022\030\n\024EXAMPLE_ENUM_RUNNING\020"
    "\002\022\032\n\026EXAMPLE_ENUM_COMPLETED\020\003b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto_deps[2] =
    {
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto = {
    false,
    false,
    1837,
    descriptor_table_protodef_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto,
    "cavnue/messages/data_warehouse/management/v1/complex_example.proto",
    &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto_once,
    descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto_deps,
    2,
    4,
    schemas,
    file_default_instances,
    TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto::offsets,
    file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto,
    file_level_enum_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto,
    file_level_service_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto_getter() {
  return &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto(&descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto);
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace management {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExampleEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto);
  return file_level_enum_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto[0];
}
bool ExampleEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class NestedMessage::_Internal {
 public:
};

NestedMessage::NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.management.v1.NestedMessage)
}
NestedMessage::NestedMessage(const NestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NestedMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){from._impl_.tags_}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.management.v1.NestedMessage)
}

inline void NestedMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){arena}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.id_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NestedMessage::~NestedMessage() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.management.v1.NestedMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NestedMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_tags()->~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void NestedMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.management.v1.NestedMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_tags()->Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NestedMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v1.NestedMessage.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string tags = 3 [json_name = "tags"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v1.NestedMessage.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* NestedMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.management.v1.NestedMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v1.NestedMessage.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated string tags = 3 [json_name = "tags"];
  for (int i = 0, n = this->_internal_tags_size(); i < n; ++i) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v1.NestedMessage.tags");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.management.v1.NestedMessage)
  return target;
}

::size_t NestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.management.v1.NestedMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 3 [json_name = "tags"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_tags().size());
  for (int i = 0, n = _internal_tags().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_tags().Get(i));
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NestedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NestedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NestedMessage::GetClassData() const { return &_class_data_; }


void NestedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NestedMessage*>(&to_msg);
  auto& from = static_cast<const NestedMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.management.v1.NestedMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tags()->MergeFrom(from._internal_tags());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NestedMessage::CopyFrom(const NestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.management.v1.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NestedMessage::IsInitialized() const {
  return true;
}

void NestedMessage::InternalSwap(NestedMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_tags()->InternalSwap(
      other->_internal_mutable_tags());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);

  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NestedMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto[0]);
}
// ===================================================================

class CustomMetadata::_Internal {
 public:
};

CustomMetadata::CustomMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.management.v1.CustomMetadata)
}
CustomMetadata::CustomMetadata(const CustomMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CustomMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.management.v1.CustomMetadata)
}

inline void CustomMetadata::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.message_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CustomMetadata::~CustomMetadata() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.management.v1.CustomMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CustomMetadata::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void CustomMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CustomMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.management.v1.CustomMetadata)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1 [json_name = "message"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v1.CustomMetadata.message"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CustomMetadata::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.management.v1.CustomMetadata)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1 [json_name = "message"];
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v1.CustomMetadata.message");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.management.v1.CustomMetadata)
  return target;
}

::size_t CustomMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.management.v1.CustomMetadata)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1 [json_name = "message"];
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CustomMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CustomMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CustomMetadata::GetClassData() const { return &_class_data_; }


void CustomMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CustomMetadata*>(&to_msg);
  auto& from = static_cast<const CustomMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.management.v1.CustomMetadata)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CustomMetadata::CopyFrom(const CustomMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.management.v1.CustomMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomMetadata::IsInitialized() const {
  return true;
}

void CustomMetadata::InternalSwap(CustomMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, lhs_arena,
                                       &other->_impl_.message_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto[1]);
}
// ===================================================================

ComplexMessage_MapFieldEntry_DoNotUse::ComplexMessage_MapFieldEntry_DoNotUse() {}
ComplexMessage_MapFieldEntry_DoNotUse::ComplexMessage_MapFieldEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ComplexMessage_MapFieldEntry_DoNotUse::MergeFrom(const ComplexMessage_MapFieldEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ComplexMessage_MapFieldEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto[2]);
}
// ===================================================================

class ComplexMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ComplexMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ComplexMessage, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::ComplexMessage, _impl_._oneof_case_);
  static const ::cavnue::messages::data_warehouse::management::v1::NestedMessage& oneof_nested_message(const ComplexMessage* msg);
  static const ::cavnue::messages::data_warehouse::management::v1::NestedMessage& nested_message_field(const ComplexMessage* msg);
  static void set_has_nested_message_field(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp_field(const ComplexMessage* msg);
  static void set_has_timestamp_field(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Duration& duration_field(const ComplexMessage* msg);
  static void set_has_duration_field(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::cavnue::messages::data_warehouse::management::v1::CustomMetadata& custom_metadata(const ComplexMessage* msg);
  static void set_has_custom_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::cavnue::messages::data_warehouse::management::v1::NestedMessage&
ComplexMessage::_Internal::oneof_nested_message(const ComplexMessage* msg) {
  return *msg->_impl_.test_oneof_.oneof_nested_message_;
}
const ::cavnue::messages::data_warehouse::management::v1::NestedMessage&
ComplexMessage::_Internal::nested_message_field(const ComplexMessage* msg) {
  return *msg->_impl_.nested_message_field_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ComplexMessage::_Internal::timestamp_field(const ComplexMessage* msg) {
  return *msg->_impl_.timestamp_field_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
ComplexMessage::_Internal::duration_field(const ComplexMessage* msg) {
  return *msg->_impl_.duration_field_;
}
const ::cavnue::messages::data_warehouse::management::v1::CustomMetadata&
ComplexMessage::_Internal::custom_metadata(const ComplexMessage* msg) {
  return *msg->_impl_.custom_metadata_;
}
void ComplexMessage::set_allocated_oneof_nested_message(::cavnue::messages::data_warehouse::management::v1::NestedMessage* oneof_nested_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_test_oneof();
  if (oneof_nested_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(oneof_nested_message);
    if (message_arena != submessage_arena) {
      oneof_nested_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oneof_nested_message, submessage_arena);
    }
    set_has_oneof_nested_message();
    _impl_.test_oneof_.oneof_nested_message_ = oneof_nested_message;
  }
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v1.ComplexMessage.oneof_nested_message)
}
void ComplexMessage::clear_timestamp_field() {
  if (_impl_.timestamp_field_ != nullptr) _impl_.timestamp_field_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ComplexMessage::clear_duration_field() {
  if (_impl_.duration_field_ != nullptr) _impl_.duration_field_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ComplexMessage::ComplexMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.management.v1.ComplexMessage)
}
ComplexMessage::ComplexMessage(const ComplexMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComplexMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.repeated_int_field_) { from._impl_.repeated_int_field_ }
    ,/* _impl_._repeated_int_field_cached_byte_size_ = */ { 0 }

    , /*decltype(_impl_.map_field_)*/{}
    , decltype(_impl_.string_field_) {}

    , decltype(_impl_.bytes_field_) {}

    , decltype(_impl_.nested_message_field_){nullptr}
    , decltype(_impl_.timestamp_field_){nullptr}
    , decltype(_impl_.duration_field_){nullptr}
    , decltype(_impl_.custom_metadata_){nullptr}
    , decltype(_impl_.int64_field_) {}

    , decltype(_impl_.int_field_) {}

    , decltype(_impl_.uint_field_) {}

    , decltype(_impl_.uint64_field_) {}

    , decltype(_impl_.sint64_field_) {}

    , decltype(_impl_.sint_field_) {}

    , decltype(_impl_.fixed32_field_) {}

    , decltype(_impl_.fixed64_field_) {}

    , decltype(_impl_.sfixed64_field_) {}

    , decltype(_impl_.sfixed32_field_) {}

    , decltype(_impl_.float_field_) {}

    , decltype(_impl_.double_field_) {}

    , decltype(_impl_.bool_field_) {}

    , decltype(_impl_.enum_field_) {}

    , decltype(_impl_.test_oneof_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.map_field_.MergeFrom(from._impl_.map_field_);
  _impl_.string_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.string_field_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_string_field().empty()) {
    _this->_impl_.string_field_.Set(from._internal_string_field(), _this->GetArenaForAllocation());
  }
  _impl_.bytes_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bytes_field_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bytes_field().empty()) {
    _this->_impl_.bytes_field_.Set(from._internal_bytes_field(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.nested_message_field_ = new ::cavnue::messages::data_warehouse::management::v1::NestedMessage(*from._impl_.nested_message_field_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.timestamp_field_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_field_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.duration_field_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.duration_field_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.custom_metadata_ = new ::cavnue::messages::data_warehouse::management::v1::CustomMetadata(*from._impl_.custom_metadata_);
  }
  ::memcpy(&_impl_.int64_field_, &from._impl_.int64_field_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.enum_field_) -
    reinterpret_cast<char*>(&_impl_.int64_field_)) + sizeof(_impl_.enum_field_));
  clear_has_test_oneof();
  switch (from.test_oneof_case()) {
    case kOneofString: {
      _this->_internal_set_oneof_string(from._internal_oneof_string());
      break;
    }
    case kOneofNestedMessage: {
      _this->_internal_mutable_oneof_nested_message()->::cavnue::messages::data_warehouse::management::v1::NestedMessage::MergeFrom(
          from._internal_oneof_nested_message());
      break;
    }
    case TEST_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.management.v1.ComplexMessage)
}

inline void ComplexMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.repeated_int_field_) { arena }
    ,/* _impl_._repeated_int_field_cached_byte_size_ = */ { 0 }

    , /*decltype(_impl_.map_field_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.string_field_) {}

    , decltype(_impl_.bytes_field_) {}

    , decltype(_impl_.nested_message_field_){nullptr}
    , decltype(_impl_.timestamp_field_){nullptr}
    , decltype(_impl_.duration_field_){nullptr}
    , decltype(_impl_.custom_metadata_){nullptr}
    , decltype(_impl_.int64_field_) { ::int64_t{0} }

    , decltype(_impl_.int_field_) { 0 }

    , decltype(_impl_.uint_field_) { 0u }

    , decltype(_impl_.uint64_field_) { ::uint64_t{0u} }

    , decltype(_impl_.sint64_field_) { ::int64_t{0} }

    , decltype(_impl_.sint_field_) { 0 }

    , decltype(_impl_.fixed32_field_) { 0u }

    , decltype(_impl_.fixed64_field_) { ::uint64_t{0u} }

    , decltype(_impl_.sfixed64_field_) { ::int64_t{0} }

    , decltype(_impl_.sfixed32_field_) { 0 }

    , decltype(_impl_.float_field_) { 0 }

    , decltype(_impl_.double_field_) { 0 }

    , decltype(_impl_.bool_field_) { false }

    , decltype(_impl_.enum_field_) { 0 }

    , decltype(_impl_.test_oneof_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.string_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.string_field_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bytes_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bytes_field_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_test_oneof();
}

ComplexMessage::~ComplexMessage() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.management.v1.ComplexMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComplexMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.repeated_int_field_.~RepeatedField();
  _impl_.map_field_.~MapField();
  _impl_.string_field_.Destroy();
  _impl_.bytes_field_.Destroy();
  if (this != internal_default_instance()) delete _impl_.nested_message_field_;
  if (this != internal_default_instance()) delete _impl_.timestamp_field_;
  if (this != internal_default_instance()) delete _impl_.duration_field_;
  if (this != internal_default_instance()) delete _impl_.custom_metadata_;
  if (has_test_oneof()) {
    clear_test_oneof();
  }
}

void ComplexMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComplexMessage::clear_test_oneof() {
// @@protoc_insertion_point(one_of_clear_start:cavnue.messages.data_warehouse.management.v1.ComplexMessage)
  switch (test_oneof_case()) {
    case kOneofString: {
      _impl_.test_oneof_.oneof_string_.Destroy();
      break;
    }
    case kOneofNestedMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.test_oneof_.oneof_nested_message_;
      }
      break;
    }
    case TEST_ONEOF_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TEST_ONEOF_NOT_SET;
}


void ComplexMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.management.v1.ComplexMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_repeated_int_field()->Clear();
  _impl_.map_field_.Clear();
  _impl_.string_field_.ClearToEmpty();
  _impl_.bytes_field_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.nested_message_field_ != nullptr);
      _impl_.nested_message_field_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.timestamp_field_ != nullptr);
      _impl_.timestamp_field_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.duration_field_ != nullptr);
      _impl_.duration_field_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.custom_metadata_ != nullptr);
      _impl_.custom_metadata_->Clear();
    }
  }
  ::memset(&_impl_.int64_field_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.enum_field_) -
      reinterpret_cast<char*>(&_impl_.int64_field_)) + sizeof(_impl_.enum_field_));
  clear_test_oneof();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComplexMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 int_field = 1 [json_name = "intField"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.int_field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 int64_field = 2 [json_name = "int64Field"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.int64_field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 uint_field = 3 [json_name = "uintField"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.uint_field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 uint64_field = 4 [json_name = "uint64Field"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.uint64_field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 sint_field = 5 [json_name = "sintField"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.sint_field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 sint64_field = 6 [json_name = "sint64Field"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.sint64_field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // fixed32 fixed32_field = 7 [json_name = "fixed32Field"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 61)) {
          _impl_.fixed32_field_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::uint32_t>(ptr);
          ptr += sizeof(::uint32_t);
        } else {
          goto handle_unusual;
        }
        continue;
      // fixed64 fixed64_field = 8 [json_name = "fixed64Field"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 65)) {
          _impl_.fixed64_field_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::uint64_t>(ptr);
          ptr += sizeof(::uint64_t);
        } else {
          goto handle_unusual;
        }
        continue;
      // sfixed32 sfixed32_field = 9 [json_name = "sfixed32Field"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 77)) {
          _impl_.sfixed32_field_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::int32_t>(ptr);
          ptr += sizeof(::int32_t);
        } else {
          goto handle_unusual;
        }
        continue;
      // sfixed64 sfixed64_field = 10 [json_name = "sfixed64Field"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 81)) {
          _impl_.sfixed64_field_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::int64_t>(ptr);
          ptr += sizeof(::int64_t);
        } else {
          goto handle_unusual;
        }
        continue;
      // float float_field = 11 [json_name = "floatField"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 93)) {
          _impl_.float_field_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // double double_field = 12 [json_name = "doubleField"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 97)) {
          _impl_.double_field_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool bool_field = 13 [json_name = "boolField"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _impl_.bool_field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string string_field = 14 [json_name = "stringField"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_string_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v1.ComplexMessage.string_field"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes bytes_field = 15 [json_name = "bytesField"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_bytes_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.data_warehouse.management.v1.ExampleEnum enum_field = 16 [json_name = "enumField"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 128)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_enum_field(static_cast<::cavnue::messages::data_warehouse::management::v1::ExampleEnum>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int32 repeated_int_field = 17 [json_name = "repeatedIntField"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_repeated_int_field(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 136) {
          _internal_add_repeated_int_field(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // map<string, .cavnue.messages.data_warehouse.management.v1.NestedMessage> map_field = 18 [json_name = "mapField"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.map_field_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string oneof_string = 19 [json_name = "oneofString"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_oneof_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v1.ComplexMessage.oneof_string"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.data_warehouse.management.v1.NestedMessage oneof_nested_message = 20 [json_name = "oneofNestedMessage"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_oneof_nested_message(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.data_warehouse.management.v1.NestedMessage nested_message_field = 21 [json_name = "nestedMessageField"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_nested_message_field(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp timestamp_field = 22 [json_name = "timestampField"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp_field(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Duration duration_field = 23 [json_name = "durationField"];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration_field(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.data_warehouse.management.v1.CustomMetadata custom_metadata = 24 [json_name = "customMetadata"];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_metadata(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ComplexMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.management.v1.ComplexMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 int_field = 1 [json_name = "intField"];
  if (this->_internal_int_field() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_int_field(), target);
  }

  // int64 int64_field = 2 [json_name = "int64Field"];
  if (this->_internal_int64_field() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_int64_field(), target);
  }

  // uint32 uint_field = 3 [json_name = "uintField"];
  if (this->_internal_uint_field() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_uint_field(), target);
  }

  // uint64 uint64_field = 4 [json_name = "uint64Field"];
  if (this->_internal_uint64_field() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_uint64_field(), target);
  }

  // sint32 sint_field = 5 [json_name = "sintField"];
  if (this->_internal_sint_field() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        5, this->_internal_sint_field(), target);
  }

  // sint64 sint64_field = 6 [json_name = "sint64Field"];
  if (this->_internal_sint64_field() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        6, this->_internal_sint64_field(), target);
  }

  // fixed32 fixed32_field = 7 [json_name = "fixed32Field"];
  if (this->_internal_fixed32_field() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        7, this->_internal_fixed32_field(), target);
  }

  // fixed64 fixed64_field = 8 [json_name = "fixed64Field"];
  if (this->_internal_fixed64_field() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        8, this->_internal_fixed64_field(), target);
  }

  // sfixed32 sfixed32_field = 9 [json_name = "sfixed32Field"];
  if (this->_internal_sfixed32_field() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(
        9, this->_internal_sfixed32_field(), target);
  }

  // sfixed64 sfixed64_field = 10 [json_name = "sfixed64Field"];
  if (this->_internal_sfixed64_field() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(
        10, this->_internal_sfixed64_field(), target);
  }

  // float float_field = 11 [json_name = "floatField"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_float_field = this->_internal_float_field();
  ::uint32_t raw_float_field;
  memcpy(&raw_float_field, &tmp_float_field, sizeof(tmp_float_field));
  if (raw_float_field != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        11, this->_internal_float_field(), target);
  }

  // double double_field = 12 [json_name = "doubleField"];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_double_field = this->_internal_double_field();
  ::uint64_t raw_double_field;
  memcpy(&raw_double_field, &tmp_double_field, sizeof(tmp_double_field));
  if (raw_double_field != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        12, this->_internal_double_field(), target);
  }

  // bool bool_field = 13 [json_name = "boolField"];
  if (this->_internal_bool_field() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        13, this->_internal_bool_field(), target);
  }

  // string string_field = 14 [json_name = "stringField"];
  if (!this->_internal_string_field().empty()) {
    const std::string& _s = this->_internal_string_field();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v1.ComplexMessage.string_field");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  // bytes bytes_field = 15 [json_name = "bytesField"];
  if (!this->_internal_bytes_field().empty()) {
    const std::string& _s = this->_internal_bytes_field();
    target = stream->WriteBytesMaybeAliased(15, _s, target);
  }

  // .cavnue.messages.data_warehouse.management.v1.ExampleEnum enum_field = 16 [json_name = "enumField"];
  if (this->_internal_enum_field() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        16, this->_internal_enum_field(), target);
  }

  // repeated int32 repeated_int_field = 17 [json_name = "repeatedIntField"];
  {
    int byte_size = _impl_._repeated_int_field_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(17, _internal_repeated_int_field(),
                                                 byte_size, target);
    }
  }

  // map<string, .cavnue.messages.data_warehouse.management.v1.NestedMessage> map_field = 18 [json_name = "mapField"];
  if (!this->_internal_map_field().empty()) {
    using MapType = ::_pb::Map<std::string, ::cavnue::messages::data_warehouse::management::v1::NestedMessage>;
    using WireHelper = ComplexMessage_MapFieldEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_field();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v1.ComplexMessage.map_field");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(18, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(18, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  switch (test_oneof_case()) {
    case kOneofString: {
      const std::string& _s = this->_internal_oneof_string();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v1.ComplexMessage.oneof_string");
      target = stream->WriteStringMaybeAliased(19, _s, target);
      break;
    }
    case kOneofNestedMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, _Internal::oneof_nested_message(this),
          _Internal::oneof_nested_message(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.data_warehouse.management.v1.NestedMessage nested_message_field = 21 [json_name = "nestedMessageField"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::nested_message_field(this),
        _Internal::nested_message_field(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp timestamp_field = 22 [json_name = "timestampField"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::timestamp_field(this),
        _Internal::timestamp_field(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration duration_field = 23 [json_name = "durationField"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::duration_field(this),
        _Internal::duration_field(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.data_warehouse.management.v1.CustomMetadata custom_metadata = 24 [json_name = "customMetadata"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::custom_metadata(this),
        _Internal::custom_metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.management.v1.ComplexMessage)
  return target;
}

::size_t ComplexMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.management.v1.ComplexMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 repeated_int_field = 17 [json_name = "repeatedIntField"];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_repeated_int_field())
    ;
    _impl_._repeated_int_field_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 2 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // map<string, .cavnue.messages.data_warehouse.management.v1.NestedMessage> map_field = 18 [json_name = "mapField"];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_field_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::cavnue::messages::data_warehouse::management::v1::NestedMessage >::const_iterator
      it = this->_internal_map_field().begin();
      it != this->_internal_map_field().end(); ++it) {
    total_size += ComplexMessage_MapFieldEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string string_field = 14 [json_name = "stringField"];
  if (!this->_internal_string_field().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_string_field());
  }

  // bytes bytes_field = 15 [json_name = "bytesField"];
  if (!this->_internal_bytes_field().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_bytes_field());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .cavnue.messages.data_warehouse.management.v1.NestedMessage nested_message_field = 21 [json_name = "nestedMessageField"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.nested_message_field_);
    }

    // .google.protobuf.Timestamp timestamp_field = 22 [json_name = "timestampField"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.timestamp_field_);
    }

    // .google.protobuf.Duration duration_field = 23 [json_name = "durationField"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.duration_field_);
    }

    // .cavnue.messages.data_warehouse.management.v1.CustomMetadata custom_metadata = 24 [json_name = "customMetadata"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.custom_metadata_);
    }

  }
  // int64 int64_field = 2 [json_name = "int64Field"];
  if (this->_internal_int64_field() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_int64_field());
  }

  // int32 int_field = 1 [json_name = "intField"];
  if (this->_internal_int_field() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_int_field());
  }

  // uint32 uint_field = 3 [json_name = "uintField"];
  if (this->_internal_uint_field() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_uint_field());
  }

  // uint64 uint64_field = 4 [json_name = "uint64Field"];
  if (this->_internal_uint64_field() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_uint64_field());
  }

  // sint64 sint64_field = 6 [json_name = "sint64Field"];
  if (this->_internal_sint64_field() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_sint64_field());
  }

  // sint32 sint_field = 5 [json_name = "sintField"];
  if (this->_internal_sint_field() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_sint_field());
  }

  // fixed32 fixed32_field = 7 [json_name = "fixed32Field"];
  if (this->_internal_fixed32_field() != 0) {
    total_size += 5;
  }

  // fixed64 fixed64_field = 8 [json_name = "fixed64Field"];
  if (this->_internal_fixed64_field() != 0) {
    total_size += 9;
  }

  // sfixed64 sfixed64_field = 10 [json_name = "sfixed64Field"];
  if (this->_internal_sfixed64_field() != 0) {
    total_size += 9;
  }

  // sfixed32 sfixed32_field = 9 [json_name = "sfixed32Field"];
  if (this->_internal_sfixed32_field() != 0) {
    total_size += 5;
  }

  // float float_field = 11 [json_name = "floatField"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_float_field = this->_internal_float_field();
  ::uint32_t raw_float_field;
  memcpy(&raw_float_field, &tmp_float_field, sizeof(tmp_float_field));
  if (raw_float_field != 0) {
    total_size += 5;
  }

  // double double_field = 12 [json_name = "doubleField"];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_double_field = this->_internal_double_field();
  ::uint64_t raw_double_field;
  memcpy(&raw_double_field, &tmp_double_field, sizeof(tmp_double_field));
  if (raw_double_field != 0) {
    total_size += 9;
  }

  // bool bool_field = 13 [json_name = "boolField"];
  if (this->_internal_bool_field() != 0) {
    total_size += 2;
  }

  // .cavnue.messages.data_warehouse.management.v1.ExampleEnum enum_field = 16 [json_name = "enumField"];
  if (this->_internal_enum_field() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_enum_field());
  }

  switch (test_oneof_case()) {
    // string oneof_string = 19 [json_name = "oneofString"];
    case kOneofString: {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_oneof_string());
      break;
    }
    // .cavnue.messages.data_warehouse.management.v1.NestedMessage oneof_nested_message = 20 [json_name = "oneofNestedMessage"];
    case kOneofNestedMessage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.test_oneof_.oneof_nested_message_);
      break;
    }
    case TEST_ONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComplexMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComplexMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComplexMessage::GetClassData() const { return &_class_data_; }


void ComplexMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComplexMessage*>(&to_msg);
  auto& from = static_cast<const ComplexMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.management.v1.ComplexMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.repeated_int_field_.MergeFrom(from._impl_.repeated_int_field_);
  _this->_impl_.map_field_.MergeFrom(from._impl_.map_field_);
  if (!from._internal_string_field().empty()) {
    _this->_internal_set_string_field(from._internal_string_field());
  }
  if (!from._internal_bytes_field().empty()) {
    _this->_internal_set_bytes_field(from._internal_bytes_field());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_nested_message_field()->::cavnue::messages::data_warehouse::management::v1::NestedMessage::MergeFrom(
          from._internal_nested_message_field());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_timestamp_field()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_timestamp_field());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_duration_field()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
          from._internal_duration_field());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_custom_metadata()->::cavnue::messages::data_warehouse::management::v1::CustomMetadata::MergeFrom(
          from._internal_custom_metadata());
    }
  }
  if (from._internal_int64_field() != 0) {
    _this->_internal_set_int64_field(from._internal_int64_field());
  }
  if (from._internal_int_field() != 0) {
    _this->_internal_set_int_field(from._internal_int_field());
  }
  if (from._internal_uint_field() != 0) {
    _this->_internal_set_uint_field(from._internal_uint_field());
  }
  if (from._internal_uint64_field() != 0) {
    _this->_internal_set_uint64_field(from._internal_uint64_field());
  }
  if (from._internal_sint64_field() != 0) {
    _this->_internal_set_sint64_field(from._internal_sint64_field());
  }
  if (from._internal_sint_field() != 0) {
    _this->_internal_set_sint_field(from._internal_sint_field());
  }
  if (from._internal_fixed32_field() != 0) {
    _this->_internal_set_fixed32_field(from._internal_fixed32_field());
  }
  if (from._internal_fixed64_field() != 0) {
    _this->_internal_set_fixed64_field(from._internal_fixed64_field());
  }
  if (from._internal_sfixed64_field() != 0) {
    _this->_internal_set_sfixed64_field(from._internal_sfixed64_field());
  }
  if (from._internal_sfixed32_field() != 0) {
    _this->_internal_set_sfixed32_field(from._internal_sfixed32_field());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_float_field = from._internal_float_field();
  ::uint32_t raw_float_field;
  memcpy(&raw_float_field, &tmp_float_field, sizeof(tmp_float_field));
  if (raw_float_field != 0) {
    _this->_internal_set_float_field(from._internal_float_field());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_double_field = from._internal_double_field();
  ::uint64_t raw_double_field;
  memcpy(&raw_double_field, &tmp_double_field, sizeof(tmp_double_field));
  if (raw_double_field != 0) {
    _this->_internal_set_double_field(from._internal_double_field());
  }
  if (from._internal_bool_field() != 0) {
    _this->_internal_set_bool_field(from._internal_bool_field());
  }
  if (from._internal_enum_field() != 0) {
    _this->_internal_set_enum_field(from._internal_enum_field());
  }
  switch (from.test_oneof_case()) {
    case kOneofString: {
      _this->_internal_set_oneof_string(from._internal_oneof_string());
      break;
    }
    case kOneofNestedMessage: {
      _this->_internal_mutable_oneof_nested_message()->::cavnue::messages::data_warehouse::management::v1::NestedMessage::MergeFrom(
          from._internal_oneof_nested_message());
      break;
    }
    case TEST_ONEOF_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComplexMessage::CopyFrom(const ComplexMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.management.v1.ComplexMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexMessage::IsInitialized() const {
  return true;
}

void ComplexMessage::InternalSwap(ComplexMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.repeated_int_field_.InternalSwap(&other->_impl_.repeated_int_field_);
  _impl_.map_field_.InternalSwap(&other->_impl_.map_field_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.string_field_, lhs_arena,
                                       &other->_impl_.string_field_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bytes_field_, lhs_arena,
                                       &other->_impl_.bytes_field_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComplexMessage, _impl_.enum_field_)
      + sizeof(ComplexMessage::_impl_.enum_field_)
      - PROTOBUF_FIELD_OFFSET(ComplexMessage, _impl_.nested_message_field_)>(
          reinterpret_cast<char*>(&_impl_.nested_message_field_),
          reinterpret_cast<char*>(&other->_impl_.nested_message_field_));
  swap(_impl_.test_oneof_, other->_impl_.test_oneof_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ComplexMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace management
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::management::v1::NestedMessage*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::management::v1::NestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::management::v1::NestedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::management::v1::CustomMetadata*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::management::v1::CustomMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::management::v1::CustomMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::management::v1::ComplexMessage_MapFieldEntry_DoNotUse*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::management::v1::ComplexMessage_MapFieldEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::management::v1::ComplexMessage_MapFieldEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::management::v1::ComplexMessage*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::management::v1::ComplexMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::management::v1::ComplexMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

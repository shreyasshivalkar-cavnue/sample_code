// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/data_warehouse/management/v1/complex_example.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
#include "google/protobuf/duration.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto;
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace management {
namespace v1 {
class ComplexMessage;
struct ComplexMessageDefaultTypeInternal;
extern ComplexMessageDefaultTypeInternal _ComplexMessage_default_instance_;
class ComplexMessage_MapFieldEntry_DoNotUse;
struct ComplexMessage_MapFieldEntry_DoNotUseDefaultTypeInternal;
extern ComplexMessage_MapFieldEntry_DoNotUseDefaultTypeInternal _ComplexMessage_MapFieldEntry_DoNotUse_default_instance_;
class CustomMetadata;
struct CustomMetadataDefaultTypeInternal;
extern CustomMetadataDefaultTypeInternal _CustomMetadata_default_instance_;
class NestedMessage;
struct NestedMessageDefaultTypeInternal;
extern NestedMessageDefaultTypeInternal _NestedMessage_default_instance_;
}  // namespace v1
}  // namespace management
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template <>
::cavnue::messages::data_warehouse::management::v1::ComplexMessage* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::management::v1::ComplexMessage>(Arena*);
template <>
::cavnue::messages::data_warehouse::management::v1::ComplexMessage_MapFieldEntry_DoNotUse* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::management::v1::ComplexMessage_MapFieldEntry_DoNotUse>(Arena*);
template <>
::cavnue::messages::data_warehouse::management::v1::CustomMetadata* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::management::v1::CustomMetadata>(Arena*);
template <>
::cavnue::messages::data_warehouse::management::v1::NestedMessage* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::management::v1::NestedMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace management {
namespace v1 {
enum ExampleEnum : int {
  EXAMPLE_ENUM_UNSPECIFIED = 0,
  EXAMPLE_ENUM_STARTED = 1,
  EXAMPLE_ENUM_RUNNING = 2,
  EXAMPLE_ENUM_COMPLETED = 3,
  ExampleEnum_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ExampleEnum_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ExampleEnum_IsValid(int value);
constexpr ExampleEnum ExampleEnum_MIN = static_cast<ExampleEnum>(0);
constexpr ExampleEnum ExampleEnum_MAX = static_cast<ExampleEnum>(3);
constexpr int ExampleEnum_ARRAYSIZE = 3 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ExampleEnum_descriptor();
template <typename T>
const std::string& ExampleEnum_Name(T value) {
  static_assert(std::is_same<T, ExampleEnum>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ExampleEnum_Name().");
  return ExampleEnum_Name(static_cast<ExampleEnum>(value));
}
template <>
inline const std::string& ExampleEnum_Name(ExampleEnum value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ExampleEnum_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool ExampleEnum_Parse(absl::string_view name, ExampleEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ExampleEnum>(
      ExampleEnum_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class NestedMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.data_warehouse.management.v1.NestedMessage) */ {
 public:
  inline NestedMessage() : NestedMessage(nullptr) {}
  ~NestedMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NestedMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NestedMessage(const NestedMessage& from);
  NestedMessage(NestedMessage&& from) noexcept
    : NestedMessage() {
    *this = ::std::move(from);
  }

  inline NestedMessage& operator=(const NestedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NestedMessage& operator=(NestedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NestedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NestedMessage* internal_default_instance() {
    return reinterpret_cast<const NestedMessage*>(
               &_NestedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NestedMessage& a, NestedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NestedMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NestedMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NestedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NestedMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NestedMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NestedMessage& from) {
    NestedMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NestedMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.data_warehouse.management.v1.NestedMessage";
  }
  protected:
  explicit NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 3,
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated string tags = 3 [json_name = "tags"];
  int tags_size() const;
  private:
  int _internal_tags_size() const;

  public:
  void clear_tags() ;
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, std::size_t size);
  void set_tags(int index, absl::string_view value);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, std::size_t size);
  void add_tags(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();

  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_tags();

  public:
  // string name = 2 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int32 id = 1 [json_name = "id"];
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.data_warehouse.management.v1.NestedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto;
};// -------------------------------------------------------------------

class CustomMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.data_warehouse.management.v1.CustomMetadata) */ {
 public:
  inline CustomMetadata() : CustomMetadata(nullptr) {}
  ~CustomMetadata() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CustomMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomMetadata(const CustomMetadata& from);
  CustomMetadata(CustomMetadata&& from) noexcept
    : CustomMetadata() {
    *this = ::std::move(from);
  }

  inline CustomMetadata& operator=(const CustomMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomMetadata& operator=(CustomMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomMetadata* internal_default_instance() {
    return reinterpret_cast<const CustomMetadata*>(
               &_CustomMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CustomMetadata& a, CustomMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomMetadata& from) {
    CustomMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.data_warehouse.management.v1.CustomMetadata";
  }
  protected:
  explicit CustomMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1 [json_name = "message"];
  void clear_message() ;
  const std::string& message() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* ptr);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.data_warehouse.management.v1.CustomMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto;
};// -------------------------------------------------------------------

class ComplexMessage_MapFieldEntry_DoNotUse final : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ComplexMessage_MapFieldEntry_DoNotUse, 
    std::string, ::cavnue::messages::data_warehouse::management::v1::NestedMessage,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ComplexMessage_MapFieldEntry_DoNotUse, 
    std::string, ::cavnue::messages::data_warehouse::management::v1::NestedMessage,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ComplexMessage_MapFieldEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ComplexMessage_MapFieldEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ComplexMessage_MapFieldEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ComplexMessage_MapFieldEntry_DoNotUse& other);
  static const ComplexMessage_MapFieldEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ComplexMessage_MapFieldEntry_DoNotUse*>(&_ComplexMessage_MapFieldEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "cavnue.messages.data_warehouse.management.v1.ComplexMessage.MapFieldEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto;
};
// -------------------------------------------------------------------

class ComplexMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.data_warehouse.management.v1.ComplexMessage) */ {
 public:
  inline ComplexMessage() : ComplexMessage(nullptr) {}
  ~ComplexMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ComplexMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComplexMessage(const ComplexMessage& from);
  ComplexMessage(ComplexMessage&& from) noexcept
    : ComplexMessage() {
    *this = ::std::move(from);
  }

  inline ComplexMessage& operator=(const ComplexMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComplexMessage& operator=(ComplexMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComplexMessage& default_instance() {
    return *internal_default_instance();
  }
  enum TestOneofCase {
    kOneofString = 19,
    kOneofNestedMessage = 20,
    TEST_ONEOF_NOT_SET = 0,
  };

  static inline const ComplexMessage* internal_default_instance() {
    return reinterpret_cast<const ComplexMessage*>(
               &_ComplexMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ComplexMessage& a, ComplexMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ComplexMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComplexMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComplexMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComplexMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComplexMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ComplexMessage& from) {
    ComplexMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComplexMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.data_warehouse.management.v1.ComplexMessage";
  }
  protected:
  explicit ComplexMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedIntFieldFieldNumber = 17,
    kMapFieldFieldNumber = 18,
    kStringFieldFieldNumber = 14,
    kBytesFieldFieldNumber = 15,
    kNestedMessageFieldFieldNumber = 21,
    kTimestampFieldFieldNumber = 22,
    kDurationFieldFieldNumber = 23,
    kCustomMetadataFieldNumber = 24,
    kInt64FieldFieldNumber = 2,
    kIntFieldFieldNumber = 1,
    kUintFieldFieldNumber = 3,
    kUint64FieldFieldNumber = 4,
    kSint64FieldFieldNumber = 6,
    kSintFieldFieldNumber = 5,
    kFixed32FieldFieldNumber = 7,
    kFixed64FieldFieldNumber = 8,
    kSfixed64FieldFieldNumber = 10,
    kSfixed32FieldFieldNumber = 9,
    kFloatFieldFieldNumber = 11,
    kDoubleFieldFieldNumber = 12,
    kBoolFieldFieldNumber = 13,
    kEnumFieldFieldNumber = 16,
    kOneofStringFieldNumber = 19,
    kOneofNestedMessageFieldNumber = 20,
  };
  // repeated int32 repeated_int_field = 17 [json_name = "repeatedIntField"];
  int repeated_int_field_size() const;
  private:
  int _internal_repeated_int_field_size() const;

  public:
  void clear_repeated_int_field() ;
  ::int32_t repeated_int_field(int index) const;
  void set_repeated_int_field(int index, ::int32_t value);
  void add_repeated_int_field(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& repeated_int_field() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_repeated_int_field();

  private:
  ::int32_t _internal_repeated_int_field(int index) const;
  void _internal_add_repeated_int_field(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_repeated_int_field() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_repeated_int_field();

  public:
  // map<string, .cavnue.messages.data_warehouse.management.v1.NestedMessage> map_field = 18 [json_name = "mapField"];
  int map_field_size() const;
  private:
  int _internal_map_field_size() const;

  public:
  void clear_map_field() ;
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::cavnue::messages::data_warehouse::management::v1::NestedMessage >&
      _internal_map_field() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::cavnue::messages::data_warehouse::management::v1::NestedMessage >*
      _internal_mutable_map_field();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::cavnue::messages::data_warehouse::management::v1::NestedMessage >&
      map_field() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::cavnue::messages::data_warehouse::management::v1::NestedMessage >*
      mutable_map_field();
  // string string_field = 14 [json_name = "stringField"];
  void clear_string_field() ;
  const std::string& string_field() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_string_field(Arg_&& arg, Args_... args);
  std::string* mutable_string_field();
  PROTOBUF_NODISCARD std::string* release_string_field();
  void set_allocated_string_field(std::string* ptr);

  private:
  const std::string& _internal_string_field() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_field(
      const std::string& value);
  std::string* _internal_mutable_string_field();

  public:
  // bytes bytes_field = 15 [json_name = "bytesField"];
  void clear_bytes_field() ;
  const std::string& bytes_field() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bytes_field(Arg_&& arg, Args_... args);
  std::string* mutable_bytes_field();
  PROTOBUF_NODISCARD std::string* release_bytes_field();
  void set_allocated_bytes_field(std::string* ptr);

  private:
  const std::string& _internal_bytes_field() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes_field(
      const std::string& value);
  std::string* _internal_mutable_bytes_field();

  public:
  // .cavnue.messages.data_warehouse.management.v1.NestedMessage nested_message_field = 21 [json_name = "nestedMessageField"];
  bool has_nested_message_field() const;
  void clear_nested_message_field() ;
  const ::cavnue::messages::data_warehouse::management::v1::NestedMessage& nested_message_field() const;
  PROTOBUF_NODISCARD ::cavnue::messages::data_warehouse::management::v1::NestedMessage* release_nested_message_field();
  ::cavnue::messages::data_warehouse::management::v1::NestedMessage* mutable_nested_message_field();
  void set_allocated_nested_message_field(::cavnue::messages::data_warehouse::management::v1::NestedMessage* nested_message_field);
  private:
  const ::cavnue::messages::data_warehouse::management::v1::NestedMessage& _internal_nested_message_field() const;
  ::cavnue::messages::data_warehouse::management::v1::NestedMessage* _internal_mutable_nested_message_field();
  public:
  void unsafe_arena_set_allocated_nested_message_field(
      ::cavnue::messages::data_warehouse::management::v1::NestedMessage* nested_message_field);
  ::cavnue::messages::data_warehouse::management::v1::NestedMessage* unsafe_arena_release_nested_message_field();
  // .google.protobuf.Timestamp timestamp_field = 22 [json_name = "timestampField"];
  bool has_timestamp_field() const;
  void clear_timestamp_field() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp_field() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp_field();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp_field();
  void set_allocated_timestamp_field(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_field);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp_field() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp_field();
  public:
  void unsafe_arena_set_allocated_timestamp_field(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_field);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp_field();
  // .google.protobuf.Duration duration_field = 23 [json_name = "durationField"];
  bool has_duration_field() const;
  void clear_duration_field() ;
  const ::PROTOBUF_NAMESPACE_ID::Duration& duration_field() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_duration_field();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_duration_field();
  void set_allocated_duration_field(::PROTOBUF_NAMESPACE_ID::Duration* duration_field);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_duration_field() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_duration_field();
  public:
  void unsafe_arena_set_allocated_duration_field(
      ::PROTOBUF_NAMESPACE_ID::Duration* duration_field);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_duration_field();
  // .cavnue.messages.data_warehouse.management.v1.CustomMetadata custom_metadata = 24 [json_name = "customMetadata"];
  bool has_custom_metadata() const;
  void clear_custom_metadata() ;
  const ::cavnue::messages::data_warehouse::management::v1::CustomMetadata& custom_metadata() const;
  PROTOBUF_NODISCARD ::cavnue::messages::data_warehouse::management::v1::CustomMetadata* release_custom_metadata();
  ::cavnue::messages::data_warehouse::management::v1::CustomMetadata* mutable_custom_metadata();
  void set_allocated_custom_metadata(::cavnue::messages::data_warehouse::management::v1::CustomMetadata* custom_metadata);
  private:
  const ::cavnue::messages::data_warehouse::management::v1::CustomMetadata& _internal_custom_metadata() const;
  ::cavnue::messages::data_warehouse::management::v1::CustomMetadata* _internal_mutable_custom_metadata();
  public:
  void unsafe_arena_set_allocated_custom_metadata(
      ::cavnue::messages::data_warehouse::management::v1::CustomMetadata* custom_metadata);
  ::cavnue::messages::data_warehouse::management::v1::CustomMetadata* unsafe_arena_release_custom_metadata();
  // int64 int64_field = 2 [json_name = "int64Field"];
  void clear_int64_field() ;
  ::int64_t int64_field() const;
  void set_int64_field(::int64_t value);

  private:
  ::int64_t _internal_int64_field() const;
  void _internal_set_int64_field(::int64_t value);

  public:
  // int32 int_field = 1 [json_name = "intField"];
  void clear_int_field() ;
  ::int32_t int_field() const;
  void set_int_field(::int32_t value);

  private:
  ::int32_t _internal_int_field() const;
  void _internal_set_int_field(::int32_t value);

  public:
  // uint32 uint_field = 3 [json_name = "uintField"];
  void clear_uint_field() ;
  ::uint32_t uint_field() const;
  void set_uint_field(::uint32_t value);

  private:
  ::uint32_t _internal_uint_field() const;
  void _internal_set_uint_field(::uint32_t value);

  public:
  // uint64 uint64_field = 4 [json_name = "uint64Field"];
  void clear_uint64_field() ;
  ::uint64_t uint64_field() const;
  void set_uint64_field(::uint64_t value);

  private:
  ::uint64_t _internal_uint64_field() const;
  void _internal_set_uint64_field(::uint64_t value);

  public:
  // sint64 sint64_field = 6 [json_name = "sint64Field"];
  void clear_sint64_field() ;
  ::int64_t sint64_field() const;
  void set_sint64_field(::int64_t value);

  private:
  ::int64_t _internal_sint64_field() const;
  void _internal_set_sint64_field(::int64_t value);

  public:
  // sint32 sint_field = 5 [json_name = "sintField"];
  void clear_sint_field() ;
  ::int32_t sint_field() const;
  void set_sint_field(::int32_t value);

  private:
  ::int32_t _internal_sint_field() const;
  void _internal_set_sint_field(::int32_t value);

  public:
  // fixed32 fixed32_field = 7 [json_name = "fixed32Field"];
  void clear_fixed32_field() ;
  ::uint32_t fixed32_field() const;
  void set_fixed32_field(::uint32_t value);

  private:
  ::uint32_t _internal_fixed32_field() const;
  void _internal_set_fixed32_field(::uint32_t value);

  public:
  // fixed64 fixed64_field = 8 [json_name = "fixed64Field"];
  void clear_fixed64_field() ;
  ::uint64_t fixed64_field() const;
  void set_fixed64_field(::uint64_t value);

  private:
  ::uint64_t _internal_fixed64_field() const;
  void _internal_set_fixed64_field(::uint64_t value);

  public:
  // sfixed64 sfixed64_field = 10 [json_name = "sfixed64Field"];
  void clear_sfixed64_field() ;
  ::int64_t sfixed64_field() const;
  void set_sfixed64_field(::int64_t value);

  private:
  ::int64_t _internal_sfixed64_field() const;
  void _internal_set_sfixed64_field(::int64_t value);

  public:
  // sfixed32 sfixed32_field = 9 [json_name = "sfixed32Field"];
  void clear_sfixed32_field() ;
  ::int32_t sfixed32_field() const;
  void set_sfixed32_field(::int32_t value);

  private:
  ::int32_t _internal_sfixed32_field() const;
  void _internal_set_sfixed32_field(::int32_t value);

  public:
  // float float_field = 11 [json_name = "floatField"];
  void clear_float_field() ;
  float float_field() const;
  void set_float_field(float value);

  private:
  float _internal_float_field() const;
  void _internal_set_float_field(float value);

  public:
  // double double_field = 12 [json_name = "doubleField"];
  void clear_double_field() ;
  double double_field() const;
  void set_double_field(double value);

  private:
  double _internal_double_field() const;
  void _internal_set_double_field(double value);

  public:
  // bool bool_field = 13 [json_name = "boolField"];
  void clear_bool_field() ;
  bool bool_field() const;
  void set_bool_field(bool value);

  private:
  bool _internal_bool_field() const;
  void _internal_set_bool_field(bool value);

  public:
  // .cavnue.messages.data_warehouse.management.v1.ExampleEnum enum_field = 16 [json_name = "enumField"];
  void clear_enum_field() ;
  ::cavnue::messages::data_warehouse::management::v1::ExampleEnum enum_field() const;
  void set_enum_field(::cavnue::messages::data_warehouse::management::v1::ExampleEnum value);

  private:
  ::cavnue::messages::data_warehouse::management::v1::ExampleEnum _internal_enum_field() const;
  void _internal_set_enum_field(::cavnue::messages::data_warehouse::management::v1::ExampleEnum value);

  public:
  // string oneof_string = 19 [json_name = "oneofString"];
  bool has_oneof_string() const;
  void clear_oneof_string() ;
  const std::string& oneof_string() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_oneof_string(Arg_&& arg, Args_... args);
  std::string* mutable_oneof_string();
  PROTOBUF_NODISCARD std::string* release_oneof_string();
  void set_allocated_oneof_string(std::string* ptr);

  private:
  const std::string& _internal_oneof_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oneof_string(
      const std::string& value);
  std::string* _internal_mutable_oneof_string();

  public:
  // .cavnue.messages.data_warehouse.management.v1.NestedMessage oneof_nested_message = 20 [json_name = "oneofNestedMessage"];
  bool has_oneof_nested_message() const;
  private:
  bool _internal_has_oneof_nested_message() const;

  public:
  void clear_oneof_nested_message() ;
  const ::cavnue::messages::data_warehouse::management::v1::NestedMessage& oneof_nested_message() const;
  PROTOBUF_NODISCARD ::cavnue::messages::data_warehouse::management::v1::NestedMessage* release_oneof_nested_message();
  ::cavnue::messages::data_warehouse::management::v1::NestedMessage* mutable_oneof_nested_message();
  void set_allocated_oneof_nested_message(::cavnue::messages::data_warehouse::management::v1::NestedMessage* oneof_nested_message);
  private:
  const ::cavnue::messages::data_warehouse::management::v1::NestedMessage& _internal_oneof_nested_message() const;
  ::cavnue::messages::data_warehouse::management::v1::NestedMessage* _internal_mutable_oneof_nested_message();
  public:
  void unsafe_arena_set_allocated_oneof_nested_message(
      ::cavnue::messages::data_warehouse::management::v1::NestedMessage* oneof_nested_message);
  ::cavnue::messages::data_warehouse::management::v1::NestedMessage* unsafe_arena_release_oneof_nested_message();
  void clear_test_oneof();
  TestOneofCase test_oneof_case() const;
  // @@protoc_insertion_point(class_scope:cavnue.messages.data_warehouse.management.v1.ComplexMessage)
 private:
  class _Internal;
  void set_has_oneof_string();
  void set_has_oneof_nested_message();

  inline bool has_test_oneof() const;
  inline void clear_has_test_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> repeated_int_field_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _repeated_int_field_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        ComplexMessage_MapFieldEntry_DoNotUse,
        std::string, ::cavnue::messages::data_warehouse::management::v1::NestedMessage,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> map_field_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_field_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_field_;
    ::cavnue::messages::data_warehouse::management::v1::NestedMessage* nested_message_field_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_field_;
    ::PROTOBUF_NAMESPACE_ID::Duration* duration_field_;
    ::cavnue::messages::data_warehouse::management::v1::CustomMetadata* custom_metadata_;
    ::int64_t int64_field_;
    ::int32_t int_field_;
    ::uint32_t uint_field_;
    ::uint64_t uint64_field_;
    ::int64_t sint64_field_;
    ::int32_t sint_field_;
    ::uint32_t fixed32_field_;
    ::uint64_t fixed64_field_;
    ::int64_t sfixed64_field_;
    ::int32_t sfixed32_field_;
    float float_field_;
    double double_field_;
    bool bool_field_;
    int enum_field_;
    union TestOneofUnion {
      constexpr TestOneofUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oneof_string_;
      ::cavnue::messages::data_warehouse::management::v1::NestedMessage* oneof_nested_message_;
    } test_oneof_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// NestedMessage

// int32 id = 1 [json_name = "id"];
inline void NestedMessage::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t NestedMessage::id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.NestedMessage.id)
  return _internal_id();
}
inline void NestedMessage::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.NestedMessage.id)
}
inline ::int32_t NestedMessage::_internal_id() const {
  return _impl_.id_;
}
inline void NestedMessage::_internal_set_id(::int32_t value) {
  ;
  _impl_.id_ = value;
}

// string name = 2 [json_name = "name"];
inline void NestedMessage::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& NestedMessage::name() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.NestedMessage.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NestedMessage::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.NestedMessage.name)
}
inline std::string* NestedMessage::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v1.NestedMessage.name)
  return _s;
}
inline const std::string& NestedMessage::_internal_name() const {
  return _impl_.name_.Get();
}
inline void NestedMessage::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* NestedMessage::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* NestedMessage::release_name() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v1.NestedMessage.name)
  return _impl_.name_.Release();
}
inline void NestedMessage::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v1.NestedMessage.name)
}

// repeated string tags = 3 [json_name = "tags"];
inline int NestedMessage::_internal_tags_size() const {
  return _impl_.tags_.size();
}
inline int NestedMessage::tags_size() const {
  return _internal_tags_size();
}
inline void NestedMessage::clear_tags() {
  _internal_mutable_tags()->Clear();
}
inline std::string* NestedMessage::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:cavnue.messages.data_warehouse.management.v1.NestedMessage.tags)
  return _s;
}
inline const std::string& NestedMessage::tags(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.NestedMessage.tags)
  return _internal_tags(index);
}
inline std::string* NestedMessage::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v1.NestedMessage.tags)
  return _internal_mutable_tags()->Mutable(index);
}
inline void NestedMessage::set_tags(int index, const std::string& value) {
  _internal_mutable_tags()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.NestedMessage.tags)
}
inline void NestedMessage::set_tags(int index, std::string&& value) {
  _internal_mutable_tags()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.NestedMessage.tags)
}
inline void NestedMessage::set_tags(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_tags()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cavnue.messages.data_warehouse.management.v1.NestedMessage.tags)
}
inline void NestedMessage::set_tags(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_tags()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cavnue.messages.data_warehouse.management.v1.NestedMessage.tags)
}
inline void NestedMessage::set_tags(int index, absl::string_view value) {
  _internal_mutable_tags()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:cavnue.messages.data_warehouse.management.v1.NestedMessage.tags)
}
inline void NestedMessage::add_tags(const std::string& value) {
  _internal_mutable_tags()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:cavnue.messages.data_warehouse.management.v1.NestedMessage.tags)
}
inline void NestedMessage::add_tags(std::string&& value) {
  _internal_mutable_tags()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:cavnue.messages.data_warehouse.management.v1.NestedMessage.tags)
}
inline void NestedMessage::add_tags(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_tags()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cavnue.messages.data_warehouse.management.v1.NestedMessage.tags)
}
inline void NestedMessage::add_tags(const char* value, std::size_t size) {
  _internal_mutable_tags()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cavnue.messages.data_warehouse.management.v1.NestedMessage.tags)
}
inline void NestedMessage::add_tags(absl::string_view value) {
  _internal_mutable_tags()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:cavnue.messages.data_warehouse.management.v1.NestedMessage.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NestedMessage::tags() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.data_warehouse.management.v1.NestedMessage.tags)
  return _internal_tags();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* NestedMessage::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.data_warehouse.management.v1.NestedMessage.tags)
  return _internal_mutable_tags();
}
inline const std::string& NestedMessage::_internal_tags(int index) const {
  return _internal_tags().Get(index);
}
inline std::string* NestedMessage::_internal_add_tags() {
  return _internal_mutable_tags()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NestedMessage::_internal_tags() const {
  return _impl_.tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NestedMessage::_internal_mutable_tags() {
  return &_impl_.tags_;
}

// -------------------------------------------------------------------

// CustomMetadata

// string message = 1 [json_name = "message"];
inline void CustomMetadata::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& CustomMetadata::message() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.CustomMetadata.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CustomMetadata::set_message(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.CustomMetadata.message)
}
inline std::string* CustomMetadata::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v1.CustomMetadata.message)
  return _s;
}
inline const std::string& CustomMetadata::_internal_message() const {
  return _impl_.message_.Get();
}
inline void CustomMetadata::_internal_set_message(const std::string& value) {
  ;


  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomMetadata::_internal_mutable_message() {
  ;
  return _impl_.message_.Mutable( GetArenaForAllocation());
}
inline std::string* CustomMetadata::release_message() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v1.CustomMetadata.message)
  return _impl_.message_.Release();
}
inline void CustomMetadata::set_allocated_message(std::string* value) {
  _impl_.message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v1.CustomMetadata.message)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ComplexMessage

// int32 int_field = 1 [json_name = "intField"];
inline void ComplexMessage::clear_int_field() {
  _impl_.int_field_ = 0;
}
inline ::int32_t ComplexMessage::int_field() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.ComplexMessage.int_field)
  return _internal_int_field();
}
inline void ComplexMessage::set_int_field(::int32_t value) {
  _internal_set_int_field(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.ComplexMessage.int_field)
}
inline ::int32_t ComplexMessage::_internal_int_field() const {
  return _impl_.int_field_;
}
inline void ComplexMessage::_internal_set_int_field(::int32_t value) {
  ;
  _impl_.int_field_ = value;
}

// int64 int64_field = 2 [json_name = "int64Field"];
inline void ComplexMessage::clear_int64_field() {
  _impl_.int64_field_ = ::int64_t{0};
}
inline ::int64_t ComplexMessage::int64_field() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.ComplexMessage.int64_field)
  return _internal_int64_field();
}
inline void ComplexMessage::set_int64_field(::int64_t value) {
  _internal_set_int64_field(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.ComplexMessage.int64_field)
}
inline ::int64_t ComplexMessage::_internal_int64_field() const {
  return _impl_.int64_field_;
}
inline void ComplexMessage::_internal_set_int64_field(::int64_t value) {
  ;
  _impl_.int64_field_ = value;
}

// uint32 uint_field = 3 [json_name = "uintField"];
inline void ComplexMessage::clear_uint_field() {
  _impl_.uint_field_ = 0u;
}
inline ::uint32_t ComplexMessage::uint_field() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.ComplexMessage.uint_field)
  return _internal_uint_field();
}
inline void ComplexMessage::set_uint_field(::uint32_t value) {
  _internal_set_uint_field(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.ComplexMessage.uint_field)
}
inline ::uint32_t ComplexMessage::_internal_uint_field() const {
  return _impl_.uint_field_;
}
inline void ComplexMessage::_internal_set_uint_field(::uint32_t value) {
  ;
  _impl_.uint_field_ = value;
}

// uint64 uint64_field = 4 [json_name = "uint64Field"];
inline void ComplexMessage::clear_uint64_field() {
  _impl_.uint64_field_ = ::uint64_t{0u};
}
inline ::uint64_t ComplexMessage::uint64_field() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.ComplexMessage.uint64_field)
  return _internal_uint64_field();
}
inline void ComplexMessage::set_uint64_field(::uint64_t value) {
  _internal_set_uint64_field(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.ComplexMessage.uint64_field)
}
inline ::uint64_t ComplexMessage::_internal_uint64_field() const {
  return _impl_.uint64_field_;
}
inline void ComplexMessage::_internal_set_uint64_field(::uint64_t value) {
  ;
  _impl_.uint64_field_ = value;
}

// sint32 sint_field = 5 [json_name = "sintField"];
inline void ComplexMessage::clear_sint_field() {
  _impl_.sint_field_ = 0;
}
inline ::int32_t ComplexMessage::sint_field() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.ComplexMessage.sint_field)
  return _internal_sint_field();
}
inline void ComplexMessage::set_sint_field(::int32_t value) {
  _internal_set_sint_field(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.ComplexMessage.sint_field)
}
inline ::int32_t ComplexMessage::_internal_sint_field() const {
  return _impl_.sint_field_;
}
inline void ComplexMessage::_internal_set_sint_field(::int32_t value) {
  ;
  _impl_.sint_field_ = value;
}

// sint64 sint64_field = 6 [json_name = "sint64Field"];
inline void ComplexMessage::clear_sint64_field() {
  _impl_.sint64_field_ = ::int64_t{0};
}
inline ::int64_t ComplexMessage::sint64_field() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.ComplexMessage.sint64_field)
  return _internal_sint64_field();
}
inline void ComplexMessage::set_sint64_field(::int64_t value) {
  _internal_set_sint64_field(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.ComplexMessage.sint64_field)
}
inline ::int64_t ComplexMessage::_internal_sint64_field() const {
  return _impl_.sint64_field_;
}
inline void ComplexMessage::_internal_set_sint64_field(::int64_t value) {
  ;
  _impl_.sint64_field_ = value;
}

// fixed32 fixed32_field = 7 [json_name = "fixed32Field"];
inline void ComplexMessage::clear_fixed32_field() {
  _impl_.fixed32_field_ = 0u;
}
inline ::uint32_t ComplexMessage::fixed32_field() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.ComplexMessage.fixed32_field)
  return _internal_fixed32_field();
}
inline void ComplexMessage::set_fixed32_field(::uint32_t value) {
  _internal_set_fixed32_field(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.ComplexMessage.fixed32_field)
}
inline ::uint32_t ComplexMessage::_internal_fixed32_field() const {
  return _impl_.fixed32_field_;
}
inline void ComplexMessage::_internal_set_fixed32_field(::uint32_t value) {
  ;
  _impl_.fixed32_field_ = value;
}

// fixed64 fixed64_field = 8 [json_name = "fixed64Field"];
inline void ComplexMessage::clear_fixed64_field() {
  _impl_.fixed64_field_ = ::uint64_t{0u};
}
inline ::uint64_t ComplexMessage::fixed64_field() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.ComplexMessage.fixed64_field)
  return _internal_fixed64_field();
}
inline void ComplexMessage::set_fixed64_field(::uint64_t value) {
  _internal_set_fixed64_field(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.ComplexMessage.fixed64_field)
}
inline ::uint64_t ComplexMessage::_internal_fixed64_field() const {
  return _impl_.fixed64_field_;
}
inline void ComplexMessage::_internal_set_fixed64_field(::uint64_t value) {
  ;
  _impl_.fixed64_field_ = value;
}

// sfixed32 sfixed32_field = 9 [json_name = "sfixed32Field"];
inline void ComplexMessage::clear_sfixed32_field() {
  _impl_.sfixed32_field_ = 0;
}
inline ::int32_t ComplexMessage::sfixed32_field() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.ComplexMessage.sfixed32_field)
  return _internal_sfixed32_field();
}
inline void ComplexMessage::set_sfixed32_field(::int32_t value) {
  _internal_set_sfixed32_field(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.ComplexMessage.sfixed32_field)
}
inline ::int32_t ComplexMessage::_internal_sfixed32_field() const {
  return _impl_.sfixed32_field_;
}
inline void ComplexMessage::_internal_set_sfixed32_field(::int32_t value) {
  ;
  _impl_.sfixed32_field_ = value;
}

// sfixed64 sfixed64_field = 10 [json_name = "sfixed64Field"];
inline void ComplexMessage::clear_sfixed64_field() {
  _impl_.sfixed64_field_ = ::int64_t{0};
}
inline ::int64_t ComplexMessage::sfixed64_field() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.ComplexMessage.sfixed64_field)
  return _internal_sfixed64_field();
}
inline void ComplexMessage::set_sfixed64_field(::int64_t value) {
  _internal_set_sfixed64_field(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.ComplexMessage.sfixed64_field)
}
inline ::int64_t ComplexMessage::_internal_sfixed64_field() const {
  return _impl_.sfixed64_field_;
}
inline void ComplexMessage::_internal_set_sfixed64_field(::int64_t value) {
  ;
  _impl_.sfixed64_field_ = value;
}

// float float_field = 11 [json_name = "floatField"];
inline void ComplexMessage::clear_float_field() {
  _impl_.float_field_ = 0;
}
inline float ComplexMessage::float_field() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.ComplexMessage.float_field)
  return _internal_float_field();
}
inline void ComplexMessage::set_float_field(float value) {
  _internal_set_float_field(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.ComplexMessage.float_field)
}
inline float ComplexMessage::_internal_float_field() const {
  return _impl_.float_field_;
}
inline void ComplexMessage::_internal_set_float_field(float value) {
  ;
  _impl_.float_field_ = value;
}

// double double_field = 12 [json_name = "doubleField"];
inline void ComplexMessage::clear_double_field() {
  _impl_.double_field_ = 0;
}
inline double ComplexMessage::double_field() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.ComplexMessage.double_field)
  return _internal_double_field();
}
inline void ComplexMessage::set_double_field(double value) {
  _internal_set_double_field(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.ComplexMessage.double_field)
}
inline double ComplexMessage::_internal_double_field() const {
  return _impl_.double_field_;
}
inline void ComplexMessage::_internal_set_double_field(double value) {
  ;
  _impl_.double_field_ = value;
}

// bool bool_field = 13 [json_name = "boolField"];
inline void ComplexMessage::clear_bool_field() {
  _impl_.bool_field_ = false;
}
inline bool ComplexMessage::bool_field() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.ComplexMessage.bool_field)
  return _internal_bool_field();
}
inline void ComplexMessage::set_bool_field(bool value) {
  _internal_set_bool_field(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.ComplexMessage.bool_field)
}
inline bool ComplexMessage::_internal_bool_field() const {
  return _impl_.bool_field_;
}
inline void ComplexMessage::_internal_set_bool_field(bool value) {
  ;
  _impl_.bool_field_ = value;
}

// string string_field = 14 [json_name = "stringField"];
inline void ComplexMessage::clear_string_field() {
  _impl_.string_field_.ClearToEmpty();
}
inline const std::string& ComplexMessage::string_field() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.ComplexMessage.string_field)
  return _internal_string_field();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ComplexMessage::set_string_field(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.string_field_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.ComplexMessage.string_field)
}
inline std::string* ComplexMessage::mutable_string_field() {
  std::string* _s = _internal_mutable_string_field();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v1.ComplexMessage.string_field)
  return _s;
}
inline const std::string& ComplexMessage::_internal_string_field() const {
  return _impl_.string_field_.Get();
}
inline void ComplexMessage::_internal_set_string_field(const std::string& value) {
  ;


  _impl_.string_field_.Set(value, GetArenaForAllocation());
}
inline std::string* ComplexMessage::_internal_mutable_string_field() {
  ;
  return _impl_.string_field_.Mutable( GetArenaForAllocation());
}
inline std::string* ComplexMessage::release_string_field() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v1.ComplexMessage.string_field)
  return _impl_.string_field_.Release();
}
inline void ComplexMessage::set_allocated_string_field(std::string* value) {
  _impl_.string_field_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.string_field_.IsDefault()) {
          _impl_.string_field_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v1.ComplexMessage.string_field)
}

// bytes bytes_field = 15 [json_name = "bytesField"];
inline void ComplexMessage::clear_bytes_field() {
  _impl_.bytes_field_.ClearToEmpty();
}
inline const std::string& ComplexMessage::bytes_field() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.ComplexMessage.bytes_field)
  return _internal_bytes_field();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ComplexMessage::set_bytes_field(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.bytes_field_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.ComplexMessage.bytes_field)
}
inline std::string* ComplexMessage::mutable_bytes_field() {
  std::string* _s = _internal_mutable_bytes_field();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v1.ComplexMessage.bytes_field)
  return _s;
}
inline const std::string& ComplexMessage::_internal_bytes_field() const {
  return _impl_.bytes_field_.Get();
}
inline void ComplexMessage::_internal_set_bytes_field(const std::string& value) {
  ;


  _impl_.bytes_field_.Set(value, GetArenaForAllocation());
}
inline std::string* ComplexMessage::_internal_mutable_bytes_field() {
  ;
  return _impl_.bytes_field_.Mutable( GetArenaForAllocation());
}
inline std::string* ComplexMessage::release_bytes_field() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v1.ComplexMessage.bytes_field)
  return _impl_.bytes_field_.Release();
}
inline void ComplexMessage::set_allocated_bytes_field(std::string* value) {
  _impl_.bytes_field_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bytes_field_.IsDefault()) {
          _impl_.bytes_field_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v1.ComplexMessage.bytes_field)
}

// .cavnue.messages.data_warehouse.management.v1.ExampleEnum enum_field = 16 [json_name = "enumField"];
inline void ComplexMessage::clear_enum_field() {
  _impl_.enum_field_ = 0;
}
inline ::cavnue::messages::data_warehouse::management::v1::ExampleEnum ComplexMessage::enum_field() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.ComplexMessage.enum_field)
  return _internal_enum_field();
}
inline void ComplexMessage::set_enum_field(::cavnue::messages::data_warehouse::management::v1::ExampleEnum value) {
   _internal_set_enum_field(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.ComplexMessage.enum_field)
}
inline ::cavnue::messages::data_warehouse::management::v1::ExampleEnum ComplexMessage::_internal_enum_field() const {
  return static_cast<::cavnue::messages::data_warehouse::management::v1::ExampleEnum>(_impl_.enum_field_);
}
inline void ComplexMessage::_internal_set_enum_field(::cavnue::messages::data_warehouse::management::v1::ExampleEnum value) {
  ;
  _impl_.enum_field_ = value;
}

// repeated int32 repeated_int_field = 17 [json_name = "repeatedIntField"];
inline int ComplexMessage::_internal_repeated_int_field_size() const {
  return _impl_.repeated_int_field_.size();
}
inline int ComplexMessage::repeated_int_field_size() const {
  return _internal_repeated_int_field_size();
}
inline void ComplexMessage::clear_repeated_int_field() {
  _internal_mutable_repeated_int_field()->Clear();
}
inline ::int32_t ComplexMessage::repeated_int_field(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.ComplexMessage.repeated_int_field)
  return _internal_repeated_int_field(index);
}
inline void ComplexMessage::set_repeated_int_field(int index, ::int32_t value) {
  _internal_mutable_repeated_int_field()->Set(index, value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.ComplexMessage.repeated_int_field)
}
inline void ComplexMessage::add_repeated_int_field(::int32_t value) {
  _internal_add_repeated_int_field(value);
  // @@protoc_insertion_point(field_add:cavnue.messages.data_warehouse.management.v1.ComplexMessage.repeated_int_field)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& ComplexMessage::repeated_int_field() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.data_warehouse.management.v1.ComplexMessage.repeated_int_field)
  return _internal_repeated_int_field();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* ComplexMessage::mutable_repeated_int_field() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.data_warehouse.management.v1.ComplexMessage.repeated_int_field)
  return _internal_mutable_repeated_int_field();
}

inline ::int32_t ComplexMessage::_internal_repeated_int_field(int index) const {
  return _internal_repeated_int_field().Get(index);
}
inline void ComplexMessage::_internal_add_repeated_int_field(::int32_t value) {
  _internal_mutable_repeated_int_field()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& ComplexMessage::_internal_repeated_int_field() const {
  return _impl_.repeated_int_field_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* ComplexMessage::_internal_mutable_repeated_int_field() {
  return &_impl_.repeated_int_field_;
}

// map<string, .cavnue.messages.data_warehouse.management.v1.NestedMessage> map_field = 18 [json_name = "mapField"];
inline int ComplexMessage::_internal_map_field_size() const {
  return _impl_.map_field_.size();
}
inline int ComplexMessage::map_field_size() const {
  return _internal_map_field_size();
}
inline void ComplexMessage::clear_map_field() {
  _impl_.map_field_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::cavnue::messages::data_warehouse::management::v1::NestedMessage >&
ComplexMessage::_internal_map_field() const {
  return _impl_.map_field_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::cavnue::messages::data_warehouse::management::v1::NestedMessage >&
ComplexMessage::map_field() const {
  // @@protoc_insertion_point(field_map:cavnue.messages.data_warehouse.management.v1.ComplexMessage.map_field)
  return _internal_map_field();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::cavnue::messages::data_warehouse::management::v1::NestedMessage >*
ComplexMessage::_internal_mutable_map_field() {
  return _impl_.map_field_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::cavnue::messages::data_warehouse::management::v1::NestedMessage >*
ComplexMessage::mutable_map_field() {
  // @@protoc_insertion_point(field_mutable_map:cavnue.messages.data_warehouse.management.v1.ComplexMessage.map_field)
  return _internal_mutable_map_field();
}

// string oneof_string = 19 [json_name = "oneofString"];
inline bool ComplexMessage::has_oneof_string() const {
  return test_oneof_case() == kOneofString;
}
inline void ComplexMessage::set_has_oneof_string() {
  _impl_._oneof_case_[0] = kOneofString;
}
inline void ComplexMessage::clear_oneof_string() {
  if (test_oneof_case() == kOneofString) {
    _impl_.test_oneof_.oneof_string_.Destroy();
    clear_has_test_oneof();
  }
}
inline const std::string& ComplexMessage::oneof_string() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.ComplexMessage.oneof_string)
  return _internal_oneof_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ComplexMessage::set_oneof_string(Arg_&& arg,
                                                     Args_... args) {
  if (test_oneof_case() != kOneofString) {
    clear_test_oneof();

    set_has_oneof_string();
    _impl_.test_oneof_.oneof_string_.InitDefault();
  }
  _impl_.test_oneof_.oneof_string_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.ComplexMessage.oneof_string)
}
inline std::string* ComplexMessage::mutable_oneof_string() {
  std::string* _s = _internal_mutable_oneof_string();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v1.ComplexMessage.oneof_string)
  return _s;
}
inline const std::string& ComplexMessage::_internal_oneof_string() const {
  if (test_oneof_case() != kOneofString) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.test_oneof_.oneof_string_.Get();
}
inline void ComplexMessage::_internal_set_oneof_string(const std::string& value) {
  if (test_oneof_case() != kOneofString) {
    clear_test_oneof();

    set_has_oneof_string();
    _impl_.test_oneof_.oneof_string_.InitDefault();
  }


  _impl_.test_oneof_.oneof_string_.Set(value, GetArenaForAllocation());
}
inline std::string* ComplexMessage::_internal_mutable_oneof_string() {
  if (test_oneof_case() != kOneofString) {
    clear_test_oneof();

    set_has_oneof_string();
    _impl_.test_oneof_.oneof_string_.InitDefault();
  }
  return _impl_.test_oneof_.oneof_string_.Mutable( GetArenaForAllocation());
}
inline std::string* ComplexMessage::release_oneof_string() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v1.ComplexMessage.oneof_string)
  if (test_oneof_case() != kOneofString) {
    return nullptr;
  }
  clear_has_test_oneof();
  return _impl_.test_oneof_.oneof_string_.Release();
}
inline void ComplexMessage::set_allocated_oneof_string(std::string* value) {
  if (has_test_oneof()) {
    clear_test_oneof();
  }
  if (value != nullptr) {
    set_has_oneof_string();
    _impl_.test_oneof_.oneof_string_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v1.ComplexMessage.oneof_string)
}

// .cavnue.messages.data_warehouse.management.v1.NestedMessage oneof_nested_message = 20 [json_name = "oneofNestedMessage"];
inline bool ComplexMessage::has_oneof_nested_message() const {
  return test_oneof_case() == kOneofNestedMessage;
}
inline bool ComplexMessage::_internal_has_oneof_nested_message() const {
  return test_oneof_case() == kOneofNestedMessage;
}
inline void ComplexMessage::set_has_oneof_nested_message() {
  _impl_._oneof_case_[0] = kOneofNestedMessage;
}
inline void ComplexMessage::clear_oneof_nested_message() {
  if (test_oneof_case() == kOneofNestedMessage) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.test_oneof_.oneof_nested_message_;
    }
    clear_has_test_oneof();
  }
}
inline ::cavnue::messages::data_warehouse::management::v1::NestedMessage* ComplexMessage::release_oneof_nested_message() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v1.ComplexMessage.oneof_nested_message)
  if (test_oneof_case() == kOneofNestedMessage) {
    clear_has_test_oneof();
    ::cavnue::messages::data_warehouse::management::v1::NestedMessage* temp = _impl_.test_oneof_.oneof_nested_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.test_oneof_.oneof_nested_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cavnue::messages::data_warehouse::management::v1::NestedMessage& ComplexMessage::_internal_oneof_nested_message() const {
  return test_oneof_case() == kOneofNestedMessage
      ? *_impl_.test_oneof_.oneof_nested_message_
      : reinterpret_cast<::cavnue::messages::data_warehouse::management::v1::NestedMessage&>(::cavnue::messages::data_warehouse::management::v1::_NestedMessage_default_instance_);
}
inline const ::cavnue::messages::data_warehouse::management::v1::NestedMessage& ComplexMessage::oneof_nested_message() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.ComplexMessage.oneof_nested_message)
  return _internal_oneof_nested_message();
}
inline ::cavnue::messages::data_warehouse::management::v1::NestedMessage* ComplexMessage::unsafe_arena_release_oneof_nested_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cavnue.messages.data_warehouse.management.v1.ComplexMessage.oneof_nested_message)
  if (test_oneof_case() == kOneofNestedMessage) {
    clear_has_test_oneof();
    ::cavnue::messages::data_warehouse::management::v1::NestedMessage* temp = _impl_.test_oneof_.oneof_nested_message_;
    _impl_.test_oneof_.oneof_nested_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ComplexMessage::unsafe_arena_set_allocated_oneof_nested_message(::cavnue::messages::data_warehouse::management::v1::NestedMessage* oneof_nested_message) {
  clear_test_oneof();
  if (oneof_nested_message) {
    set_has_oneof_nested_message();
    _impl_.test_oneof_.oneof_nested_message_ = oneof_nested_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.data_warehouse.management.v1.ComplexMessage.oneof_nested_message)
}
inline ::cavnue::messages::data_warehouse::management::v1::NestedMessage* ComplexMessage::_internal_mutable_oneof_nested_message() {
  if (test_oneof_case() != kOneofNestedMessage) {
    clear_test_oneof();
    set_has_oneof_nested_message();
    _impl_.test_oneof_.oneof_nested_message_ = CreateMaybeMessage< ::cavnue::messages::data_warehouse::management::v1::NestedMessage >(GetArenaForAllocation());
  }
  return _impl_.test_oneof_.oneof_nested_message_;
}
inline ::cavnue::messages::data_warehouse::management::v1::NestedMessage* ComplexMessage::mutable_oneof_nested_message() {
  ::cavnue::messages::data_warehouse::management::v1::NestedMessage* _msg = _internal_mutable_oneof_nested_message();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v1.ComplexMessage.oneof_nested_message)
  return _msg;
}

// .cavnue.messages.data_warehouse.management.v1.NestedMessage nested_message_field = 21 [json_name = "nestedMessageField"];
inline bool ComplexMessage::has_nested_message_field() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nested_message_field_ != nullptr);
  return value;
}
inline void ComplexMessage::clear_nested_message_field() {
  if (_impl_.nested_message_field_ != nullptr) _impl_.nested_message_field_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cavnue::messages::data_warehouse::management::v1::NestedMessage& ComplexMessage::_internal_nested_message_field() const {
  const ::cavnue::messages::data_warehouse::management::v1::NestedMessage* p = _impl_.nested_message_field_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::data_warehouse::management::v1::NestedMessage&>(
      ::cavnue::messages::data_warehouse::management::v1::_NestedMessage_default_instance_);
}
inline const ::cavnue::messages::data_warehouse::management::v1::NestedMessage& ComplexMessage::nested_message_field() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.ComplexMessage.nested_message_field)
  return _internal_nested_message_field();
}
inline void ComplexMessage::unsafe_arena_set_allocated_nested_message_field(
    ::cavnue::messages::data_warehouse::management::v1::NestedMessage* nested_message_field) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nested_message_field_);
  }
  _impl_.nested_message_field_ = nested_message_field;
  if (nested_message_field) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.data_warehouse.management.v1.ComplexMessage.nested_message_field)
}
inline ::cavnue::messages::data_warehouse::management::v1::NestedMessage* ComplexMessage::release_nested_message_field() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::data_warehouse::management::v1::NestedMessage* temp = _impl_.nested_message_field_;
  _impl_.nested_message_field_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::data_warehouse::management::v1::NestedMessage* ComplexMessage::unsafe_arena_release_nested_message_field() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v1.ComplexMessage.nested_message_field)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::data_warehouse::management::v1::NestedMessage* temp = _impl_.nested_message_field_;
  _impl_.nested_message_field_ = nullptr;
  return temp;
}
inline ::cavnue::messages::data_warehouse::management::v1::NestedMessage* ComplexMessage::_internal_mutable_nested_message_field() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.nested_message_field_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::data_warehouse::management::v1::NestedMessage>(GetArenaForAllocation());
    _impl_.nested_message_field_ = p;
  }
  return _impl_.nested_message_field_;
}
inline ::cavnue::messages::data_warehouse::management::v1::NestedMessage* ComplexMessage::mutable_nested_message_field() {
  ::cavnue::messages::data_warehouse::management::v1::NestedMessage* _msg = _internal_mutable_nested_message_field();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v1.ComplexMessage.nested_message_field)
  return _msg;
}
inline void ComplexMessage::set_allocated_nested_message_field(::cavnue::messages::data_warehouse::management::v1::NestedMessage* nested_message_field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nested_message_field_;
  }
  if (nested_message_field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nested_message_field);
    if (message_arena != submessage_arena) {
      nested_message_field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nested_message_field, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.nested_message_field_ = nested_message_field;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v1.ComplexMessage.nested_message_field)
}

// .google.protobuf.Timestamp timestamp_field = 22 [json_name = "timestampField"];
inline bool ComplexMessage::has_timestamp_field() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_field_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ComplexMessage::_internal_timestamp_field() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_field_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ComplexMessage::timestamp_field() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.ComplexMessage.timestamp_field)
  return _internal_timestamp_field();
}
inline void ComplexMessage::unsafe_arena_set_allocated_timestamp_field(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_field) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_field_);
  }
  _impl_.timestamp_field_ = timestamp_field;
  if (timestamp_field) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.data_warehouse.management.v1.ComplexMessage.timestamp_field)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ComplexMessage::release_timestamp_field() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_field_;
  _impl_.timestamp_field_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ComplexMessage::unsafe_arena_release_timestamp_field() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v1.ComplexMessage.timestamp_field)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_field_;
  _impl_.timestamp_field_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ComplexMessage::_internal_mutable_timestamp_field() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.timestamp_field_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_field_ = p;
  }
  return _impl_.timestamp_field_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ComplexMessage::mutable_timestamp_field() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp_field();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v1.ComplexMessage.timestamp_field)
  return _msg;
}
inline void ComplexMessage::set_allocated_timestamp_field(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_field_);
  }
  if (timestamp_field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_field));
    if (message_arena != submessage_arena) {
      timestamp_field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp_field, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.timestamp_field_ = timestamp_field;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v1.ComplexMessage.timestamp_field)
}

// .google.protobuf.Duration duration_field = 23 [json_name = "durationField"];
inline bool ComplexMessage::has_duration_field() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.duration_field_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ComplexMessage::_internal_duration_field() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.duration_field_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ComplexMessage::duration_field() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.ComplexMessage.duration_field)
  return _internal_duration_field();
}
inline void ComplexMessage::unsafe_arena_set_allocated_duration_field(
    ::PROTOBUF_NAMESPACE_ID::Duration* duration_field) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.duration_field_);
  }
  _impl_.duration_field_ = duration_field;
  if (duration_field) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.data_warehouse.management.v1.ComplexMessage.duration_field)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ComplexMessage::release_duration_field() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.duration_field_;
  _impl_.duration_field_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ComplexMessage::unsafe_arena_release_duration_field() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v1.ComplexMessage.duration_field)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.duration_field_;
  _impl_.duration_field_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ComplexMessage::_internal_mutable_duration_field() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.duration_field_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.duration_field_ = p;
  }
  return _impl_.duration_field_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ComplexMessage::mutable_duration_field() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_duration_field();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v1.ComplexMessage.duration_field)
  return _msg;
}
inline void ComplexMessage::set_allocated_duration_field(::PROTOBUF_NAMESPACE_ID::Duration* duration_field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.duration_field_);
  }
  if (duration_field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_field));
    if (message_arena != submessage_arena) {
      duration_field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration_field, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.duration_field_ = duration_field;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v1.ComplexMessage.duration_field)
}

// .cavnue.messages.data_warehouse.management.v1.CustomMetadata custom_metadata = 24 [json_name = "customMetadata"];
inline bool ComplexMessage::has_custom_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.custom_metadata_ != nullptr);
  return value;
}
inline void ComplexMessage::clear_custom_metadata() {
  if (_impl_.custom_metadata_ != nullptr) _impl_.custom_metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::cavnue::messages::data_warehouse::management::v1::CustomMetadata& ComplexMessage::_internal_custom_metadata() const {
  const ::cavnue::messages::data_warehouse::management::v1::CustomMetadata* p = _impl_.custom_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::data_warehouse::management::v1::CustomMetadata&>(
      ::cavnue::messages::data_warehouse::management::v1::_CustomMetadata_default_instance_);
}
inline const ::cavnue::messages::data_warehouse::management::v1::CustomMetadata& ComplexMessage::custom_metadata() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.ComplexMessage.custom_metadata)
  return _internal_custom_metadata();
}
inline void ComplexMessage::unsafe_arena_set_allocated_custom_metadata(
    ::cavnue::messages::data_warehouse::management::v1::CustomMetadata* custom_metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_metadata_);
  }
  _impl_.custom_metadata_ = custom_metadata;
  if (custom_metadata) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.data_warehouse.management.v1.ComplexMessage.custom_metadata)
}
inline ::cavnue::messages::data_warehouse::management::v1::CustomMetadata* ComplexMessage::release_custom_metadata() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::cavnue::messages::data_warehouse::management::v1::CustomMetadata* temp = _impl_.custom_metadata_;
  _impl_.custom_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::data_warehouse::management::v1::CustomMetadata* ComplexMessage::unsafe_arena_release_custom_metadata() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v1.ComplexMessage.custom_metadata)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::cavnue::messages::data_warehouse::management::v1::CustomMetadata* temp = _impl_.custom_metadata_;
  _impl_.custom_metadata_ = nullptr;
  return temp;
}
inline ::cavnue::messages::data_warehouse::management::v1::CustomMetadata* ComplexMessage::_internal_mutable_custom_metadata() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.custom_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::data_warehouse::management::v1::CustomMetadata>(GetArenaForAllocation());
    _impl_.custom_metadata_ = p;
  }
  return _impl_.custom_metadata_;
}
inline ::cavnue::messages::data_warehouse::management::v1::CustomMetadata* ComplexMessage::mutable_custom_metadata() {
  ::cavnue::messages::data_warehouse::management::v1::CustomMetadata* _msg = _internal_mutable_custom_metadata();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v1.ComplexMessage.custom_metadata)
  return _msg;
}
inline void ComplexMessage::set_allocated_custom_metadata(::cavnue::messages::data_warehouse::management::v1::CustomMetadata* custom_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.custom_metadata_;
  }
  if (custom_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(custom_metadata);
    if (message_arena != submessage_arena) {
      custom_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_metadata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.custom_metadata_ = custom_metadata;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v1.ComplexMessage.custom_metadata)
}

inline bool ComplexMessage::has_test_oneof() const {
  return test_oneof_case() != TEST_ONEOF_NOT_SET;
}
inline void ComplexMessage::clear_has_test_oneof() {
  _impl_._oneof_case_[0] = TEST_ONEOF_NOT_SET;
}
inline ComplexMessage::TestOneofCase ComplexMessage::test_oneof_case() const {
  return ComplexMessage::TestOneofCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace management
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::cavnue::messages::data_warehouse::management::v1::ExampleEnum> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::cavnue::messages::data_warehouse::management::v1::ExampleEnum>() {
  return ::cavnue::messages::data_warehouse::management::v1::ExampleEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fcomplex_5fexample_2eproto_2epb_2eh

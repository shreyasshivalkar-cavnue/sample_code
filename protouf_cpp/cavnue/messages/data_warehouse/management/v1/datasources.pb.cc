// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/data_warehouse/management/v1/datasources.proto

#include "cavnue/messages/data_warehouse/management/v1/datasources.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace management {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR Location::Location(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.coordinate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.identifier_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.deploy_ts_)*/nullptr
  , /*decltype(_impl_.location_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.folder_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.cohort_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.h3_)*/ ::int64_t{0}
} {}
struct LocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocationDefaultTypeInternal() {}
  union {
    Location _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocationDefaultTypeInternal _Location_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Sensor::Sensor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.identifier_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.serial_number_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.make_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.deploy_ts_)*/nullptr
  , /*decltype(_impl_.sensor_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.location_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.type_)*/ 0
} {}
struct SensorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorDefaultTypeInternal() {}
  union {
    Sensor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorDefaultTypeInternal _Sensor_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CameraMetadata_DistortionCoefficients::CameraMetadata_DistortionCoefficients(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.p1_)*/ 0

  , /*decltype(_impl_.p2_)*/ 0

  , /*decltype(_impl_.s1_)*/ 0

  , /*decltype(_impl_.s2_)*/ 0

  , /*decltype(_impl_.s3_)*/ 0

  , /*decltype(_impl_.s4_)*/ 0

  , /*decltype(_impl_.k1_)*/ 0

  , /*decltype(_impl_.k2_)*/ 0

  , /*decltype(_impl_.k3_)*/ 0

  , /*decltype(_impl_.k4_)*/ 0

  , /*decltype(_impl_.k5_)*/ 0

  , /*decltype(_impl_.k6_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CameraMetadata_DistortionCoefficientsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CameraMetadata_DistortionCoefficientsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CameraMetadata_DistortionCoefficientsDefaultTypeInternal() {}
  union {
    CameraMetadata_DistortionCoefficients _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CameraMetadata_DistortionCoefficientsDefaultTypeInternal _CameraMetadata_DistortionCoefficients_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CameraMetadata::CameraMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.projection_matrix_)*/nullptr
  , /*decltype(_impl_.intrinsic_matrix_)*/nullptr
  , /*decltype(_impl_.translation_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_.scene_center_)*/nullptr
  , /*decltype(_impl_.distortion_coefficients_)*/nullptr
  , /*decltype(_impl_.sensor_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.width_)*/ 0u

  , /*decltype(_impl_.height_)*/ 0u
} {}
struct CameraMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CameraMetadataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CameraMetadataDefaultTypeInternal() {}
  union {
    CameraMetadata _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CameraMetadataDefaultTypeInternal _CameraMetadata_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR VehicleCalibration::VehicleCalibration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.length_uncertainty_)*/ {}

  , /*decltype(_impl_.width_uncertainty_)*/ {}

  , /*decltype(_impl_.length_correction_)*/ {}

  , /*decltype(_impl_.width_correction_)*/ {}

  , /*decltype(_impl_.sensor_id_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VehicleCalibrationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleCalibrationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleCalibrationDefaultTypeInternal() {}
  union {
    VehicleCalibration _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleCalibrationDefaultTypeInternal _VehicleCalibration_default_instance_;
}  // namespace v1
}  // namespace management
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
static ::_pb::Metadata file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto = nullptr;
const ::uint32_t TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Location, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Location, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Location, _impl_.location_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Location, _impl_.folder_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Location, _impl_.cohort_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Location, _impl_.coordinate_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Location, _impl_.h3_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Location, _impl_.deploy_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Location, _impl_.identifier_),
    3,
    4,
    5,
    0,
    6,
    2,
    1,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Sensor, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Sensor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Sensor, _impl_.sensor_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Sensor, _impl_.location_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Sensor, _impl_.identifier_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Sensor, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Sensor, _impl_.deploy_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Sensor, _impl_.serial_number_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Sensor, _impl_.make_),
    2,
    3,
    0,
    4,
    1,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::CameraMetadata_DistortionCoefficients, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::CameraMetadata_DistortionCoefficients, _impl_.p1_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::CameraMetadata_DistortionCoefficients, _impl_.p2_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::CameraMetadata_DistortionCoefficients, _impl_.s1_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::CameraMetadata_DistortionCoefficients, _impl_.s2_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::CameraMetadata_DistortionCoefficients, _impl_.s3_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::CameraMetadata_DistortionCoefficients, _impl_.s4_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::CameraMetadata_DistortionCoefficients, _impl_.k1_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::CameraMetadata_DistortionCoefficients, _impl_.k2_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::CameraMetadata_DistortionCoefficients, _impl_.k3_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::CameraMetadata_DistortionCoefficients, _impl_.k4_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::CameraMetadata_DistortionCoefficients, _impl_.k5_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::CameraMetadata_DistortionCoefficients, _impl_.k6_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::CameraMetadata, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::CameraMetadata, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::CameraMetadata, _impl_.sensor_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::CameraMetadata, _impl_.projection_matrix_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::CameraMetadata, _impl_.intrinsic_matrix_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::CameraMetadata, _impl_.translation_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::CameraMetadata, _impl_.rotation_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::CameraMetadata, _impl_.scene_center_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::CameraMetadata, _impl_.distortion_coefficients_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::CameraMetadata, _impl_.width_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::CameraMetadata, _impl_.height_),
    6,
    0,
    1,
    2,
    3,
    4,
    5,
    7,
    8,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleCalibration, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleCalibration, _impl_.sensor_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleCalibration, _impl_.length_uncertainty_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleCalibration, _impl_.width_uncertainty_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleCalibration, _impl_.length_correction_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleCalibration, _impl_.width_correction_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 15, -1, sizeof(::cavnue::messages::data_warehouse::management::v1::Location)},
        { 22, 37, -1, sizeof(::cavnue::messages::data_warehouse::management::v1::Sensor)},
        { 44, -1, -1, sizeof(::cavnue::messages::data_warehouse::management::v1::CameraMetadata_DistortionCoefficients)},
        { 64, 81, -1, sizeof(::cavnue::messages::data_warehouse::management::v1::CameraMetadata)},
        { 90, -1, -1, sizeof(::cavnue::messages::data_warehouse::management::v1::VehicleCalibration)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cavnue::messages::data_warehouse::management::v1::_Location_default_instance_._instance,
    &::cavnue::messages::data_warehouse::management::v1::_Sensor_default_instance_._instance,
    &::cavnue::messages::data_warehouse::management::v1::_CameraMetadata_DistortionCoefficients_default_instance_._instance,
    &::cavnue::messages::data_warehouse::management::v1::_CameraMetadata_default_instance_._instance,
    &::cavnue::messages::data_warehouse::management::v1::_VehicleCalibration_default_instance_._instance,
};
const char descriptor_table_protodef_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n>cavnue/messages/data_warehouse/managem"
    "ent/v1/datasources.proto\022,cavnue.message"
    "s.data_warehouse.management.v1\032\'cavnue/t"
    "hird_party/bq/v1/bq_field.proto\032\'cavnue/"
    "third_party/bq/v1/bq_table.proto\032&cavnue"
    "/messages/common/v1/common.proto\032(cavnue"
    "/messages/geometry/v1/matrix.proto\032(cavn"
    "ue/messages/geometry/v1/vector.proto\032-ca"
    "vnue/messages/common/v1/field_options.pr"
    "oto\032\037google/protobuf/timestamp.proto\"\205\004\n"
    "\010Location\022\\\n\013location_id\030\001 \001(\003B6\210\265\030\001\222\265\030\n"
    "identifier\222\265\030\tdeploy_ts\222\265\030\tfolder_id\230\265\030\001"
    "\212\371+\002\010\001H\000R\nlocationId\210\001\001\022(\n\tfolder_id\030\002 \001"
    "(\003B\006\212\371+\002\010\001H\001R\010folderId\210\001\001\022(\n\tcohort_id\030\003"
    " \001(\003B\006\212\371+\002\010\001H\002R\010cohortId\210\001\001\022:\n\ncoordinat"
    "e\030\004 \001(\tB\025\220\361\004\001\212\371+\r\010\001\022\tGEOGRAPHYH\003R\ncoordi"
    "nate\210\001\001\022\033\n\002h3\030\005 \001(\003B\006\212\371+\002\010\001H\004R\002h3\210\001\001\022Q\n\t"
    "deploy_ts\030\006 \001(\0132\032.google.protobuf.Timest"
    "ampB\023\212\371+\017\010\001\022\tTIMESTAMP8\001H\005R\010deployTs\210\001\001\022"
    "+\n\nidentifier\030\007 \001(\tB\006\212\371+\002\010\001H\006R\nidentifie"
    "r\210\001\001:\017\202\371+\013\n\tLocationsB\016\n\014_location_idB\014\n"
    "\n_folder_idB\014\n\n_cohort_idB\r\n\013_coordinate"
    "B\005\n\003_h3B\014\n\n_deploy_tsB\r\n\013_identifier\"\347\003\n"
    "\006Sensor\022Z\n\tsensor_id\030\001 \001(\003B8\210\265\030\001\222\265\030\013loca"
    "tion_id\222\265\030\nidentifier\222\265\030\tdeploy_ts\230\265\030\001\212\371"
    "+\002\010\001H\000R\010sensorId\210\001\001\022,\n\013location_id\030\002 \001(\003"
    "B\006\212\371+\002\010\001H\001R\nlocationId\210\001\001\022+\n\nidentifier\030"
    "\003 \001(\tB\006\212\371+\002\010\001H\002R\nidentifier\210\001\001\022G\n\004type\030\004"
    " \001(\0162&.cavnue.messages.common.v1.Sensor."
    "TypeB\006\212\371+\002\010\001H\003R\004type\210\001\001\022Q\n\tdeploy_ts\030\005 \001"
    "(\0132\032.google.protobuf.TimestampB\023\212\371+\017\010\001\022\t"
    "TIMESTAMP8\001H\004R\010deployTs\210\001\001\022#\n\rserial_num"
    "ber\030\006 \001(\tR\014serialNumber\022\022\n\004make\030\007 \001(\tR\004m"
    "ake:\r\202\371+\t\n\007SensorsB\014\n\n_sensor_idB\016\n\014_loc"
    "ation_idB\r\n\013_identifierB\007\n\005_typeB\014\n\n_dep"
    "loy_ts\"\306\010\n\016CameraMetadata\022,\n\tsensor_id\030\001"
    " \001(\003B\n\230\265\030\001\212\371+\002\010\001H\000R\010sensorId\210\001\001\022h\n\021proje"
    "ction_matrix\030\002 \001(\0132&.cavnue.messages.geo"
    "metry.v1.Matrix34dB\016\210\361\004\005\220\361\004\002\212\371+\002\010\001H\001R\020pr"
    "ojectionMatrix\210\001\001\022W\n\020intrinsic_matrix\030\003 "
    "\001(\0132&.cavnue.messages.geometry.v1.Matrix"
    "33fB\004\210\361\004\004R\017intrinsicMatrix\022\\\n\013translatio"
    "n\030\004 \001(\0132%.cavnue.messages.geometry.v1.Ve"
    "ctor3dB\016\210\361\004\005\220\361\004\002\212\371+\002\010\001H\002R\013translation\210\001\001"
    "\022O\n\010rotation\030\005 \001(\0132&.cavnue.messages.geo"
    "metry.v1.Matrix33fB\006\212\371+\002\010\001H\003R\010rotation\210\001"
    "\001\022]\n\014scene_center\030\007 \001(\0132%.cavnue.message"
    "s.geometry.v1.Vector3dB\016\210\361\004\005\220\361\004\002\212\371+\002\010\001H\004"
    "R\013sceneCenter\210\001\001\022\214\001\n\027distortion_coeffici"
    "ents\030\010 \001(\0132S.cavnue.messages.data_wareho"
    "use.management.v1.CameraMetadata.Distort"
    "ionCoefficientsR\026distortionCoefficients\022"
    "%\n\005width\030\t \001(\rB\n\210\361\004\004\212\371+\002\010\001H\005R\005width\210\001\001\022\'"
    "\n\006height\030\n \001(\rB\n\210\361\004\004\212\371+\002\010\001H\006R\006height\210\001\001\032"
    "\330\001\n\026DistortionCoefficients\022\016\n\002p1\030\001 \001(\002R\002"
    "p1\022\016\n\002p2\030\002 \001(\002R\002p2\022\016\n\002s1\030\003 \001(\002R\002s1\022\016\n\002s2"
    "\030\004 \001(\002R\002s2\022\016\n\002s3\030\005 \001(\002R\002s3\022\016\n\002s4\030\006 \001(\002R\002"
    "s4\022\016\n\002k1\030\007 \001(\002R\002k1\022\016\n\002k2\030\010 \001(\002R\002k2\022\016\n\002k3"
    "\030\t \001(\002R\002k3\022\016\n\002k4\030\n \001(\002R\002k4\022\016\n\002k5\030\013 \001(\002R\002"
    "k5\022\016\n\002k6\030\014 \001(\002R\002k6:\024\202\371+\020\n\016CameraMetadata"
    "B\014\n\n_sensor_idB\024\n\022_projection_matrixB\016\n\014"
    "_translationB\013\n\t_rotationB\017\n\r_scene_cent"
    "erB\010\n\006_widthB\t\n\007_height\"\213\002\n\022VehicleCalib"
    "ration\022\'\n\tsensor_id\030\001 \001(\003B\n\230\265\030\001\212\371+\002\010\001R\010s"
    "ensorId\022-\n\022length_uncertainty\030\002 \003(\002R\021len"
    "gthUncertainty\022+\n\021width_uncertainty\030\003 \003("
    "\002R\020widthUncertainty\022+\n\021length_correction"
    "\030\004 \003(\002R\020lengthCorrection\022)\n\020width_correc"
    "tion\030\005 \003(\002R\017widthCorrection:\030\202\371+\024\n\022Vehic"
    "leCalibrationb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto_deps[7] =
    {
        &::descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2ffield_5foptions_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fmatrix_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fvector_2eproto,
        &::descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ffield_2eproto,
        &::descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto = {
    false,
    false,
    2781,
    descriptor_table_protodef_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto,
    "cavnue/messages/data_warehouse/management/v1/datasources.proto",
    &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto_once,
    descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto_deps,
    7,
    5,
    schemas,
    file_default_instances,
    TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto::offsets,
    file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto,
    file_level_enum_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto,
    file_level_service_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto_getter() {
  return &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto(&descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto);
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace management {
namespace v1 {
// ===================================================================

class Location::_Internal {
 public:
  using HasBits = decltype(std::declval<Location>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Location, _impl_._has_bits_);
  static void set_has_location_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_folder_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cohort_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_coordinate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_h3(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& deploy_ts(const Location* msg);
  static void set_has_deploy_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Location::_Internal::deploy_ts(const Location* msg) {
  return *msg->_impl_.deploy_ts_;
}
void Location::clear_deploy_ts() {
  if (_impl_.deploy_ts_ != nullptr) _impl_.deploy_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
Location::Location(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.management.v1.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Location* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.coordinate_) {}

    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.deploy_ts_){nullptr}
    , decltype(_impl_.location_id_) {}

    , decltype(_impl_.folder_id_) {}

    , decltype(_impl_.cohort_id_) {}

    , decltype(_impl_.h3_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.coordinate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.coordinate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.coordinate_.Set(from._internal_coordinate(), _this->GetArenaForAllocation());
  }
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.deploy_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.deploy_ts_);
  }
  ::memcpy(&_impl_.location_id_, &from._impl_.location_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.h3_) -
    reinterpret_cast<char*>(&_impl_.location_id_)) + sizeof(_impl_.h3_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.management.v1.Location)
}

inline void Location::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.coordinate_) {}

    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.deploy_ts_){nullptr}
    , decltype(_impl_.location_id_) { ::int64_t{0} }

    , decltype(_impl_.folder_id_) { ::int64_t{0} }

    , decltype(_impl_.cohort_id_) { ::int64_t{0} }

    , decltype(_impl_.h3_) { ::int64_t{0} }

  };
  _impl_.coordinate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.coordinate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.management.v1.Location)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Location::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.coordinate_.Destroy();
  _impl_.identifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.deploy_ts_;
}

void Location::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.management.v1.Location)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.coordinate_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.deploy_ts_ != nullptr);
      _impl_.deploy_ts_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&_impl_.location_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.h3_) -
        reinterpret_cast<char*>(&_impl_.location_id_)) + sizeof(_impl_.h3_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Location::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 location_id = 1 [json_name = "locationId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.derivation) = "deploy_ts", (.cavnue.messages.common.v1.derivation) = "folder_id", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_location_id(&has_bits);
          _impl_.location_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 folder_id = 2 [json_name = "folderId", (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_folder_id(&has_bits);
          _impl_.folder_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 cohort_id = 3 [json_name = "cohortId", (.gen_bq_schema.bigquery) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_cohort_id(&has_bits);
          _impl_.cohort_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string coordinate = 4 [json_name = "coordinate", (.cavnue.messages.common.v1.crs) = CRS_WGS84, (.gen_bq_schema.bigquery) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_coordinate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v1.Location.coordinate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 h3 = 5 [json_name = "h3", (.gen_bq_schema.bigquery) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_h3(&has_bits);
          _impl_.h3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .google.protobuf.Timestamp deploy_ts = 6 [json_name = "deployTs", (.gen_bq_schema.bigquery) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_deploy_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string identifier = 7 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v1.Location.identifier"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Location::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.management.v1.Location)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 location_id = 1 [json_name = "locationId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.derivation) = "deploy_ts", (.cavnue.messages.common.v1.derivation) = "folder_id", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_location_id(), target);
  }

  // optional int64 folder_id = 2 [json_name = "folderId", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_folder_id(), target);
  }

  // optional int64 cohort_id = 3 [json_name = "cohortId", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_cohort_id(), target);
  }

  // optional string coordinate = 4 [json_name = "coordinate", (.cavnue.messages.common.v1.crs) = CRS_WGS84, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_coordinate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v1.Location.coordinate");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional int64 h3 = 5 [json_name = "h3", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        5, this->_internal_h3(), target);
  }

  // optional .google.protobuf.Timestamp deploy_ts = 6 [json_name = "deployTs", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::deploy_ts(this),
        _Internal::deploy_ts(this).GetCachedSize(), target, stream);
  }

  // optional string identifier = 7 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_identifier();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v1.Location.identifier");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.management.v1.Location)
  return target;
}

::size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.management.v1.Location)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string coordinate = 4 [json_name = "coordinate", (.cavnue.messages.common.v1.crs) = CRS_WGS84, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_coordinate());
    }

    // optional string identifier = 7 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_identifier());
    }

    // optional .google.protobuf.Timestamp deploy_ts = 6 [json_name = "deployTs", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deploy_ts_);
    }

    // optional int64 location_id = 1 [json_name = "locationId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.derivation) = "deploy_ts", (.cavnue.messages.common.v1.derivation) = "folder_id", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_location_id());
    }

    // optional int64 folder_id = 2 [json_name = "folderId", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_folder_id());
    }

    // optional int64 cohort_id = 3 [json_name = "cohortId", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_cohort_id());
    }

    // optional int64 h3 = 5 [json_name = "h3", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_h3());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Location::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Location::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Location::GetClassData() const { return &_class_data_; }


void Location::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Location*>(&to_msg);
  auto& from = static_cast<const Location&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.management.v1.Location)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_coordinate(from._internal_coordinate());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_deploy_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_deploy_ts());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.location_id_ = from._impl_.location_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.folder_id_ = from._impl_.folder_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.cohort_id_ = from._impl_.cohort_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.h3_ = from._impl_.h3_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.management.v1.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.coordinate_, lhs_arena,
                                       &other->_impl_.coordinate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identifier_, lhs_arena,
                                       &other->_impl_.identifier_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Location, _impl_.h3_)
      + sizeof(Location::_impl_.h3_)
      - PROTOBUF_FIELD_OFFSET(Location, _impl_.deploy_ts_)>(
          reinterpret_cast<char*>(&_impl_.deploy_ts_),
          reinterpret_cast<char*>(&other->_impl_.deploy_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Location::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto[0]);
}
// ===================================================================

class Sensor::_Internal {
 public:
  using HasBits = decltype(std::declval<Sensor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Sensor, _impl_._has_bits_);
  static void set_has_sensor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_location_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& deploy_ts(const Sensor* msg);
  static void set_has_deploy_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Sensor::_Internal::deploy_ts(const Sensor* msg) {
  return *msg->_impl_.deploy_ts_;
}
void Sensor::clear_deploy_ts() {
  if (_impl_.deploy_ts_ != nullptr) _impl_.deploy_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Sensor::Sensor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.management.v1.Sensor)
}
Sensor::Sensor(const Sensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Sensor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.serial_number_) {}

    , decltype(_impl_.make_) {}

    , decltype(_impl_.deploy_ts_){nullptr}
    , decltype(_impl_.sensor_id_) {}

    , decltype(_impl_.location_id_) {}

    , decltype(_impl_.type_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), _this->GetArenaForAllocation());
  }
  _impl_.serial_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.serial_number_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serial_number().empty()) {
    _this->_impl_.serial_number_.Set(from._internal_serial_number(), _this->GetArenaForAllocation());
  }
  _impl_.make_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.make_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_make().empty()) {
    _this->_impl_.make_.Set(from._internal_make(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.deploy_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.deploy_ts_);
  }
  ::memcpy(&_impl_.sensor_id_, &from._impl_.sensor_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.sensor_id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.management.v1.Sensor)
}

inline void Sensor::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.serial_number_) {}

    , decltype(_impl_.make_) {}

    , decltype(_impl_.deploy_ts_){nullptr}
    , decltype(_impl_.sensor_id_) { ::int64_t{0} }

    , decltype(_impl_.location_id_) { ::int64_t{0} }

    , decltype(_impl_.type_) { 0 }

  };
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serial_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.serial_number_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.make_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.make_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Sensor::~Sensor() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.management.v1.Sensor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sensor::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identifier_.Destroy();
  _impl_.serial_number_.Destroy();
  _impl_.make_.Destroy();
  if (this != internal_default_instance()) delete _impl_.deploy_ts_;
}

void Sensor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Sensor::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.management.v1.Sensor)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.identifier_.ClearNonDefaultToEmpty();
  }
  _impl_.serial_number_.ClearToEmpty();
  _impl_.make_.ClearToEmpty();
  if (cached_has_bits & 0x00000002u) {
    ABSL_DCHECK(_impl_.deploy_ts_ != nullptr);
    _impl_.deploy_ts_->Clear();
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.sensor_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.sensor_id_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sensor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 sensor_id = 1 [json_name = "sensorId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "location_id", (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.derivation) = "deploy_ts", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_sensor_id(&has_bits);
          _impl_.sensor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 location_id = 2 [json_name = "locationId", (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_location_id(&has_bits);
          _impl_.location_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string identifier = 3 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v1.Sensor.identifier"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .cavnue.messages.common.v1.Sensor.Type type = 4 [json_name = "type", (.gen_bq_schema.bigquery) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::cavnue::messages::common::v1::Sensor_Type>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .google.protobuf.Timestamp deploy_ts = 5 [json_name = "deployTs", (.gen_bq_schema.bigquery) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_deploy_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string serial_number = 6 [json_name = "serialNumber"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_serial_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v1.Sensor.serial_number"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string make = 7 [json_name = "make"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_make();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v1.Sensor.make"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Sensor::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.management.v1.Sensor)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 sensor_id = 1 [json_name = "sensorId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "location_id", (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.derivation) = "deploy_ts", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_sensor_id(), target);
  }

  // optional int64 location_id = 2 [json_name = "locationId", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_location_id(), target);
  }

  // optional string identifier = 3 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_identifier();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v1.Sensor.identifier");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional .cavnue.messages.common.v1.Sensor.Type type = 4 [json_name = "type", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_type(), target);
  }

  // optional .google.protobuf.Timestamp deploy_ts = 5 [json_name = "deployTs", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::deploy_ts(this),
        _Internal::deploy_ts(this).GetCachedSize(), target, stream);
  }

  // string serial_number = 6 [json_name = "serialNumber"];
  if (!this->_internal_serial_number().empty()) {
    const std::string& _s = this->_internal_serial_number();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v1.Sensor.serial_number");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string make = 7 [json_name = "make"];
  if (!this->_internal_make().empty()) {
    const std::string& _s = this->_internal_make();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v1.Sensor.make");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.management.v1.Sensor)
  return target;
}

::size_t Sensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.management.v1.Sensor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string identifier = 3 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_identifier());
  }

  // string serial_number = 6 [json_name = "serialNumber"];
  if (!this->_internal_serial_number().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_serial_number());
  }

  // string make = 7 [json_name = "make"];
  if (!this->_internal_make().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_make());
  }

  if (cached_has_bits & 0x0000001eu) {
    // optional .google.protobuf.Timestamp deploy_ts = 5 [json_name = "deployTs", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deploy_ts_);
    }

    // optional int64 sensor_id = 1 [json_name = "sensorId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "location_id", (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.derivation) = "deploy_ts", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_sensor_id());
    }

    // optional int64 location_id = 2 [json_name = "locationId", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_location_id());
    }

    // optional .cavnue.messages.common.v1.Sensor.Type type = 4 [json_name = "type", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sensor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Sensor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sensor::GetClassData() const { return &_class_data_; }


void Sensor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Sensor*>(&to_msg);
  auto& from = static_cast<const Sensor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.management.v1.Sensor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_identifier(from._internal_identifier());
  }
  if (!from._internal_serial_number().empty()) {
    _this->_internal_set_serial_number(from._internal_serial_number());
  }
  if (!from._internal_make().empty()) {
    _this->_internal_set_make(from._internal_make());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_deploy_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_deploy_ts());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.sensor_id_ = from._impl_.sensor_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.location_id_ = from._impl_.location_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sensor::CopyFrom(const Sensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.management.v1.Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sensor::IsInitialized() const {
  return true;
}

void Sensor::InternalSwap(Sensor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identifier_, lhs_arena,
                                       &other->_impl_.identifier_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.serial_number_, lhs_arena,
                                       &other->_impl_.serial_number_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.make_, lhs_arena,
                                       &other->_impl_.make_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sensor, _impl_.type_)
      + sizeof(Sensor::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Sensor, _impl_.deploy_ts_)>(
          reinterpret_cast<char*>(&_impl_.deploy_ts_),
          reinterpret_cast<char*>(&other->_impl_.deploy_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sensor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto[1]);
}
// ===================================================================

class CameraMetadata_DistortionCoefficients::_Internal {
 public:
};

CameraMetadata_DistortionCoefficients::CameraMetadata_DistortionCoefficients(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.management.v1.CameraMetadata.DistortionCoefficients)
}
CameraMetadata_DistortionCoefficients::CameraMetadata_DistortionCoefficients(const CameraMetadata_DistortionCoefficients& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.management.v1.CameraMetadata.DistortionCoefficients)
}

inline void CameraMetadata_DistortionCoefficients::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.p1_) { 0 }

    , decltype(_impl_.p2_) { 0 }

    , decltype(_impl_.s1_) { 0 }

    , decltype(_impl_.s2_) { 0 }

    , decltype(_impl_.s3_) { 0 }

    , decltype(_impl_.s4_) { 0 }

    , decltype(_impl_.k1_) { 0 }

    , decltype(_impl_.k2_) { 0 }

    , decltype(_impl_.k3_) { 0 }

    , decltype(_impl_.k4_) { 0 }

    , decltype(_impl_.k5_) { 0 }

    , decltype(_impl_.k6_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CameraMetadata_DistortionCoefficients::~CameraMetadata_DistortionCoefficients() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.management.v1.CameraMetadata.DistortionCoefficients)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CameraMetadata_DistortionCoefficients::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void CameraMetadata_DistortionCoefficients::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CameraMetadata_DistortionCoefficients::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.management.v1.CameraMetadata.DistortionCoefficients)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.p1_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.k6_) -
      reinterpret_cast<char*>(&_impl_.p1_)) + sizeof(_impl_.k6_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraMetadata_DistortionCoefficients::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float p1 = 1 [json_name = "p1"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 13)) {
          _impl_.p1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float p2 = 2 [json_name = "p2"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 21)) {
          _impl_.p2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float s1 = 3 [json_name = "s1"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 29)) {
          _impl_.s1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float s2 = 4 [json_name = "s2"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 37)) {
          _impl_.s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float s3 = 5 [json_name = "s3"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 45)) {
          _impl_.s3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float s4 = 6 [json_name = "s4"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 53)) {
          _impl_.s4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float k1 = 7 [json_name = "k1"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 61)) {
          _impl_.k1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float k2 = 8 [json_name = "k2"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 69)) {
          _impl_.k2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float k3 = 9 [json_name = "k3"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 77)) {
          _impl_.k3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float k4 = 10 [json_name = "k4"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 85)) {
          _impl_.k4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float k5 = 11 [json_name = "k5"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 93)) {
          _impl_.k5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float k6 = 12 [json_name = "k6"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 101)) {
          _impl_.k6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CameraMetadata_DistortionCoefficients::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.management.v1.CameraMetadata.DistortionCoefficients)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float p1 = 1 [json_name = "p1"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_p1 = this->_internal_p1();
  ::uint32_t raw_p1;
  memcpy(&raw_p1, &tmp_p1, sizeof(tmp_p1));
  if (raw_p1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_p1(), target);
  }

  // float p2 = 2 [json_name = "p2"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_p2 = this->_internal_p2();
  ::uint32_t raw_p2;
  memcpy(&raw_p2, &tmp_p2, sizeof(tmp_p2));
  if (raw_p2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_p2(), target);
  }

  // float s1 = 3 [json_name = "s1"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_s1 = this->_internal_s1();
  ::uint32_t raw_s1;
  memcpy(&raw_s1, &tmp_s1, sizeof(tmp_s1));
  if (raw_s1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_s1(), target);
  }

  // float s2 = 4 [json_name = "s2"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_s2 = this->_internal_s2();
  ::uint32_t raw_s2;
  memcpy(&raw_s2, &tmp_s2, sizeof(tmp_s2));
  if (raw_s2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_s2(), target);
  }

  // float s3 = 5 [json_name = "s3"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_s3 = this->_internal_s3();
  ::uint32_t raw_s3;
  memcpy(&raw_s3, &tmp_s3, sizeof(tmp_s3));
  if (raw_s3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_s3(), target);
  }

  // float s4 = 6 [json_name = "s4"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_s4 = this->_internal_s4();
  ::uint32_t raw_s4;
  memcpy(&raw_s4, &tmp_s4, sizeof(tmp_s4));
  if (raw_s4 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_s4(), target);
  }

  // float k1 = 7 [json_name = "k1"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_k1 = this->_internal_k1();
  ::uint32_t raw_k1;
  memcpy(&raw_k1, &tmp_k1, sizeof(tmp_k1));
  if (raw_k1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_k1(), target);
  }

  // float k2 = 8 [json_name = "k2"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_k2 = this->_internal_k2();
  ::uint32_t raw_k2;
  memcpy(&raw_k2, &tmp_k2, sizeof(tmp_k2));
  if (raw_k2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        8, this->_internal_k2(), target);
  }

  // float k3 = 9 [json_name = "k3"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_k3 = this->_internal_k3();
  ::uint32_t raw_k3;
  memcpy(&raw_k3, &tmp_k3, sizeof(tmp_k3));
  if (raw_k3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        9, this->_internal_k3(), target);
  }

  // float k4 = 10 [json_name = "k4"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_k4 = this->_internal_k4();
  ::uint32_t raw_k4;
  memcpy(&raw_k4, &tmp_k4, sizeof(tmp_k4));
  if (raw_k4 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        10, this->_internal_k4(), target);
  }

  // float k5 = 11 [json_name = "k5"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_k5 = this->_internal_k5();
  ::uint32_t raw_k5;
  memcpy(&raw_k5, &tmp_k5, sizeof(tmp_k5));
  if (raw_k5 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        11, this->_internal_k5(), target);
  }

  // float k6 = 12 [json_name = "k6"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_k6 = this->_internal_k6();
  ::uint32_t raw_k6;
  memcpy(&raw_k6, &tmp_k6, sizeof(tmp_k6));
  if (raw_k6 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        12, this->_internal_k6(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.management.v1.CameraMetadata.DistortionCoefficients)
  return target;
}

::size_t CameraMetadata_DistortionCoefficients::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.management.v1.CameraMetadata.DistortionCoefficients)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float p1 = 1 [json_name = "p1"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_p1 = this->_internal_p1();
  ::uint32_t raw_p1;
  memcpy(&raw_p1, &tmp_p1, sizeof(tmp_p1));
  if (raw_p1 != 0) {
    total_size += 5;
  }

  // float p2 = 2 [json_name = "p2"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_p2 = this->_internal_p2();
  ::uint32_t raw_p2;
  memcpy(&raw_p2, &tmp_p2, sizeof(tmp_p2));
  if (raw_p2 != 0) {
    total_size += 5;
  }

  // float s1 = 3 [json_name = "s1"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_s1 = this->_internal_s1();
  ::uint32_t raw_s1;
  memcpy(&raw_s1, &tmp_s1, sizeof(tmp_s1));
  if (raw_s1 != 0) {
    total_size += 5;
  }

  // float s2 = 4 [json_name = "s2"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_s2 = this->_internal_s2();
  ::uint32_t raw_s2;
  memcpy(&raw_s2, &tmp_s2, sizeof(tmp_s2));
  if (raw_s2 != 0) {
    total_size += 5;
  }

  // float s3 = 5 [json_name = "s3"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_s3 = this->_internal_s3();
  ::uint32_t raw_s3;
  memcpy(&raw_s3, &tmp_s3, sizeof(tmp_s3));
  if (raw_s3 != 0) {
    total_size += 5;
  }

  // float s4 = 6 [json_name = "s4"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_s4 = this->_internal_s4();
  ::uint32_t raw_s4;
  memcpy(&raw_s4, &tmp_s4, sizeof(tmp_s4));
  if (raw_s4 != 0) {
    total_size += 5;
  }

  // float k1 = 7 [json_name = "k1"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_k1 = this->_internal_k1();
  ::uint32_t raw_k1;
  memcpy(&raw_k1, &tmp_k1, sizeof(tmp_k1));
  if (raw_k1 != 0) {
    total_size += 5;
  }

  // float k2 = 8 [json_name = "k2"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_k2 = this->_internal_k2();
  ::uint32_t raw_k2;
  memcpy(&raw_k2, &tmp_k2, sizeof(tmp_k2));
  if (raw_k2 != 0) {
    total_size += 5;
  }

  // float k3 = 9 [json_name = "k3"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_k3 = this->_internal_k3();
  ::uint32_t raw_k3;
  memcpy(&raw_k3, &tmp_k3, sizeof(tmp_k3));
  if (raw_k3 != 0) {
    total_size += 5;
  }

  // float k4 = 10 [json_name = "k4"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_k4 = this->_internal_k4();
  ::uint32_t raw_k4;
  memcpy(&raw_k4, &tmp_k4, sizeof(tmp_k4));
  if (raw_k4 != 0) {
    total_size += 5;
  }

  // float k5 = 11 [json_name = "k5"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_k5 = this->_internal_k5();
  ::uint32_t raw_k5;
  memcpy(&raw_k5, &tmp_k5, sizeof(tmp_k5));
  if (raw_k5 != 0) {
    total_size += 5;
  }

  // float k6 = 12 [json_name = "k6"];
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_k6 = this->_internal_k6();
  ::uint32_t raw_k6;
  memcpy(&raw_k6, &tmp_k6, sizeof(tmp_k6));
  if (raw_k6 != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraMetadata_DistortionCoefficients::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CameraMetadata_DistortionCoefficients::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraMetadata_DistortionCoefficients::GetClassData() const { return &_class_data_; }


void CameraMetadata_DistortionCoefficients::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CameraMetadata_DistortionCoefficients*>(&to_msg);
  auto& from = static_cast<const CameraMetadata_DistortionCoefficients&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.management.v1.CameraMetadata.DistortionCoefficients)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_p1 = from._internal_p1();
  ::uint32_t raw_p1;
  memcpy(&raw_p1, &tmp_p1, sizeof(tmp_p1));
  if (raw_p1 != 0) {
    _this->_internal_set_p1(from._internal_p1());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_p2 = from._internal_p2();
  ::uint32_t raw_p2;
  memcpy(&raw_p2, &tmp_p2, sizeof(tmp_p2));
  if (raw_p2 != 0) {
    _this->_internal_set_p2(from._internal_p2());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_s1 = from._internal_s1();
  ::uint32_t raw_s1;
  memcpy(&raw_s1, &tmp_s1, sizeof(tmp_s1));
  if (raw_s1 != 0) {
    _this->_internal_set_s1(from._internal_s1());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_s2 = from._internal_s2();
  ::uint32_t raw_s2;
  memcpy(&raw_s2, &tmp_s2, sizeof(tmp_s2));
  if (raw_s2 != 0) {
    _this->_internal_set_s2(from._internal_s2());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_s3 = from._internal_s3();
  ::uint32_t raw_s3;
  memcpy(&raw_s3, &tmp_s3, sizeof(tmp_s3));
  if (raw_s3 != 0) {
    _this->_internal_set_s3(from._internal_s3());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_s4 = from._internal_s4();
  ::uint32_t raw_s4;
  memcpy(&raw_s4, &tmp_s4, sizeof(tmp_s4));
  if (raw_s4 != 0) {
    _this->_internal_set_s4(from._internal_s4());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_k1 = from._internal_k1();
  ::uint32_t raw_k1;
  memcpy(&raw_k1, &tmp_k1, sizeof(tmp_k1));
  if (raw_k1 != 0) {
    _this->_internal_set_k1(from._internal_k1());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_k2 = from._internal_k2();
  ::uint32_t raw_k2;
  memcpy(&raw_k2, &tmp_k2, sizeof(tmp_k2));
  if (raw_k2 != 0) {
    _this->_internal_set_k2(from._internal_k2());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_k3 = from._internal_k3();
  ::uint32_t raw_k3;
  memcpy(&raw_k3, &tmp_k3, sizeof(tmp_k3));
  if (raw_k3 != 0) {
    _this->_internal_set_k3(from._internal_k3());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_k4 = from._internal_k4();
  ::uint32_t raw_k4;
  memcpy(&raw_k4, &tmp_k4, sizeof(tmp_k4));
  if (raw_k4 != 0) {
    _this->_internal_set_k4(from._internal_k4());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_k5 = from._internal_k5();
  ::uint32_t raw_k5;
  memcpy(&raw_k5, &tmp_k5, sizeof(tmp_k5));
  if (raw_k5 != 0) {
    _this->_internal_set_k5(from._internal_k5());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_k6 = from._internal_k6();
  ::uint32_t raw_k6;
  memcpy(&raw_k6, &tmp_k6, sizeof(tmp_k6));
  if (raw_k6 != 0) {
    _this->_internal_set_k6(from._internal_k6());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraMetadata_DistortionCoefficients::CopyFrom(const CameraMetadata_DistortionCoefficients& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.management.v1.CameraMetadata.DistortionCoefficients)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraMetadata_DistortionCoefficients::IsInitialized() const {
  return true;
}

void CameraMetadata_DistortionCoefficients::InternalSwap(CameraMetadata_DistortionCoefficients* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraMetadata_DistortionCoefficients, _impl_.k6_)
      + sizeof(CameraMetadata_DistortionCoefficients::_impl_.k6_)
      - PROTOBUF_FIELD_OFFSET(CameraMetadata_DistortionCoefficients, _impl_.p1_)>(
          reinterpret_cast<char*>(&_impl_.p1_),
          reinterpret_cast<char*>(&other->_impl_.p1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraMetadata_DistortionCoefficients::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto[2]);
}
// ===================================================================

class CameraMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraMetadata>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CameraMetadata, _impl_._has_bits_);
  static void set_has_sensor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::cavnue::messages::geometry::v1::Matrix34d& projection_matrix(const CameraMetadata* msg);
  static void set_has_projection_matrix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cavnue::messages::geometry::v1::Matrix33f& intrinsic_matrix(const CameraMetadata* msg);
  static void set_has_intrinsic_matrix(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::cavnue::messages::geometry::v1::Vector3d& translation(const CameraMetadata* msg);
  static void set_has_translation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::cavnue::messages::geometry::v1::Matrix33f& rotation(const CameraMetadata* msg);
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::cavnue::messages::geometry::v1::Vector3d& scene_center(const CameraMetadata* msg);
  static void set_has_scene_center(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::cavnue::messages::data_warehouse::management::v1::CameraMetadata_DistortionCoefficients& distortion_coefficients(const CameraMetadata* msg);
  static void set_has_distortion_coefficients(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::cavnue::messages::geometry::v1::Matrix34d&
CameraMetadata::_Internal::projection_matrix(const CameraMetadata* msg) {
  return *msg->_impl_.projection_matrix_;
}
const ::cavnue::messages::geometry::v1::Matrix33f&
CameraMetadata::_Internal::intrinsic_matrix(const CameraMetadata* msg) {
  return *msg->_impl_.intrinsic_matrix_;
}
const ::cavnue::messages::geometry::v1::Vector3d&
CameraMetadata::_Internal::translation(const CameraMetadata* msg) {
  return *msg->_impl_.translation_;
}
const ::cavnue::messages::geometry::v1::Matrix33f&
CameraMetadata::_Internal::rotation(const CameraMetadata* msg) {
  return *msg->_impl_.rotation_;
}
const ::cavnue::messages::geometry::v1::Vector3d&
CameraMetadata::_Internal::scene_center(const CameraMetadata* msg) {
  return *msg->_impl_.scene_center_;
}
const ::cavnue::messages::data_warehouse::management::v1::CameraMetadata_DistortionCoefficients&
CameraMetadata::_Internal::distortion_coefficients(const CameraMetadata* msg) {
  return *msg->_impl_.distortion_coefficients_;
}
void CameraMetadata::clear_projection_matrix() {
  if (_impl_.projection_matrix_ != nullptr) _impl_.projection_matrix_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CameraMetadata::clear_intrinsic_matrix() {
  if (_impl_.intrinsic_matrix_ != nullptr) _impl_.intrinsic_matrix_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CameraMetadata::clear_translation() {
  if (_impl_.translation_ != nullptr) _impl_.translation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CameraMetadata::clear_rotation() {
  if (_impl_.rotation_ != nullptr) _impl_.rotation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CameraMetadata::clear_scene_center() {
  if (_impl_.scene_center_ != nullptr) _impl_.scene_center_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
CameraMetadata::CameraMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.management.v1.CameraMetadata)
}
CameraMetadata::CameraMetadata(const CameraMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CameraMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.projection_matrix_){nullptr}
    , decltype(_impl_.intrinsic_matrix_){nullptr}
    , decltype(_impl_.translation_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.scene_center_){nullptr}
    , decltype(_impl_.distortion_coefficients_){nullptr}
    , decltype(_impl_.sensor_id_) {}

    , decltype(_impl_.width_) {}

    , decltype(_impl_.height_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.projection_matrix_ = new ::cavnue::messages::geometry::v1::Matrix34d(*from._impl_.projection_matrix_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.intrinsic_matrix_ = new ::cavnue::messages::geometry::v1::Matrix33f(*from._impl_.intrinsic_matrix_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.translation_ = new ::cavnue::messages::geometry::v1::Vector3d(*from._impl_.translation_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.rotation_ = new ::cavnue::messages::geometry::v1::Matrix33f(*from._impl_.rotation_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.scene_center_ = new ::cavnue::messages::geometry::v1::Vector3d(*from._impl_.scene_center_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
    _this->_impl_.distortion_coefficients_ = new ::cavnue::messages::data_warehouse::management::v1::CameraMetadata_DistortionCoefficients(*from._impl_.distortion_coefficients_);
  }
  ::memcpy(&_impl_.sensor_id_, &from._impl_.sensor_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.sensor_id_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.management.v1.CameraMetadata)
}

inline void CameraMetadata::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.projection_matrix_){nullptr}
    , decltype(_impl_.intrinsic_matrix_){nullptr}
    , decltype(_impl_.translation_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.scene_center_){nullptr}
    , decltype(_impl_.distortion_coefficients_){nullptr}
    , decltype(_impl_.sensor_id_) { ::int64_t{0} }

    , decltype(_impl_.width_) { 0u }

    , decltype(_impl_.height_) { 0u }

  };
}

CameraMetadata::~CameraMetadata() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.management.v1.CameraMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CameraMetadata::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.projection_matrix_;
  if (this != internal_default_instance()) delete _impl_.intrinsic_matrix_;
  if (this != internal_default_instance()) delete _impl_.translation_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
  if (this != internal_default_instance()) delete _impl_.scene_center_;
  if (this != internal_default_instance()) delete _impl_.distortion_coefficients_;
}

void CameraMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CameraMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.management.v1.CameraMetadata)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.projection_matrix_ != nullptr);
      _impl_.projection_matrix_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.intrinsic_matrix_ != nullptr);
      _impl_.intrinsic_matrix_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.translation_ != nullptr);
      _impl_.translation_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.rotation_ != nullptr);
      _impl_.rotation_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.scene_center_ != nullptr);
      _impl_.scene_center_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.distortion_coefficients_ != nullptr);
      _impl_.distortion_coefficients_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.sensor_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.width_) -
        reinterpret_cast<char*>(&_impl_.sensor_id_)) + sizeof(_impl_.width_));
  }
  _impl_.height_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 sensor_id = 1 [json_name = "sensorId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_sensor_id(&has_bits);
          _impl_.sensor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .cavnue.messages.geometry.v1.Matrix34d projection_matrix = 2 [json_name = "projectionMatrix", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_UTM, (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_projection_matrix(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.geometry.v1.Matrix33f intrinsic_matrix = 3 [json_name = "intrinsicMatrix", (.cavnue.messages.common.v1.units) = UNITS_PIXELS];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_intrinsic_matrix(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .cavnue.messages.geometry.v1.Vector3d translation = 4 [json_name = "translation", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_UTM, (.gen_bq_schema.bigquery) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .cavnue.messages.geometry.v1.Matrix33f rotation = 5 [json_name = "rotation", (.gen_bq_schema.bigquery) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .cavnue.messages.geometry.v1.Vector3d scene_center = 7 [json_name = "sceneCenter", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_UTM, (.gen_bq_schema.bigquery) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_scene_center(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.data_warehouse.management.v1.CameraMetadata.DistortionCoefficients distortion_coefficients = 8 [json_name = "distortionCoefficients"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_distortion_coefficients(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 width = 9 [json_name = "width", (.cavnue.messages.common.v1.units) = UNITS_PIXELS, (.gen_bq_schema.bigquery) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 height = 10 [json_name = "height", (.cavnue.messages.common.v1.units) = UNITS_PIXELS, (.gen_bq_schema.bigquery) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CameraMetadata::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.management.v1.CameraMetadata)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 sensor_id = 1 [json_name = "sensorId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_sensor_id(), target);
  }

  // optional .cavnue.messages.geometry.v1.Matrix34d projection_matrix = 2 [json_name = "projectionMatrix", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_UTM, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::projection_matrix(this),
        _Internal::projection_matrix(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.geometry.v1.Matrix33f intrinsic_matrix = 3 [json_name = "intrinsicMatrix", (.cavnue.messages.common.v1.units) = UNITS_PIXELS];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::intrinsic_matrix(this),
        _Internal::intrinsic_matrix(this).GetCachedSize(), target, stream);
  }

  // optional .cavnue.messages.geometry.v1.Vector3d translation = 4 [json_name = "translation", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_UTM, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::translation(this),
        _Internal::translation(this).GetCachedSize(), target, stream);
  }

  // optional .cavnue.messages.geometry.v1.Matrix33f rotation = 5 [json_name = "rotation", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  // optional .cavnue.messages.geometry.v1.Vector3d scene_center = 7 [json_name = "sceneCenter", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_UTM, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::scene_center(this),
        _Internal::scene_center(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.data_warehouse.management.v1.CameraMetadata.DistortionCoefficients distortion_coefficients = 8 [json_name = "distortionCoefficients"];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::distortion_coefficients(this),
        _Internal::distortion_coefficients(this).GetCachedSize(), target, stream);
  }

  // optional uint32 width = 9 [json_name = "width", (.cavnue.messages.common.v1.units) = UNITS_PIXELS, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_width(), target);
  }

  // optional uint32 height = 10 [json_name = "height", (.cavnue.messages.common.v1.units) = UNITS_PIXELS, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.management.v1.CameraMetadata)
  return target;
}

::size_t CameraMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.management.v1.CameraMetadata)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .cavnue.messages.geometry.v1.Matrix34d projection_matrix = 2 [json_name = "projectionMatrix", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_UTM, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.projection_matrix_);
    }

    // .cavnue.messages.geometry.v1.Matrix33f intrinsic_matrix = 3 [json_name = "intrinsicMatrix", (.cavnue.messages.common.v1.units) = UNITS_PIXELS];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.intrinsic_matrix_);
    }

    // optional .cavnue.messages.geometry.v1.Vector3d translation = 4 [json_name = "translation", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_UTM, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.translation_);
    }

    // optional .cavnue.messages.geometry.v1.Matrix33f rotation = 5 [json_name = "rotation", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rotation_);
    }

    // optional .cavnue.messages.geometry.v1.Vector3d scene_center = 7 [json_name = "sceneCenter", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_UTM, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.scene_center_);
    }

    // .cavnue.messages.data_warehouse.management.v1.CameraMetadata.DistortionCoefficients distortion_coefficients = 8 [json_name = "distortionCoefficients"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.distortion_coefficients_);
    }

    // optional int64 sensor_id = 1 [json_name = "sensorId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_sensor_id());
    }

    // optional uint32 width = 9 [json_name = "width", (.cavnue.messages.common.v1.units) = UNITS_PIXELS, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_width());
    }

  }
  // optional uint32 height = 10 [json_name = "height", (.cavnue.messages.common.v1.units) = UNITS_PIXELS, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CameraMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraMetadata::GetClassData() const { return &_class_data_; }


void CameraMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CameraMetadata*>(&to_msg);
  auto& from = static_cast<const CameraMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.management.v1.CameraMetadata)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_projection_matrix()->::cavnue::messages::geometry::v1::Matrix34d::MergeFrom(
          from._internal_projection_matrix());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_intrinsic_matrix()->::cavnue::messages::geometry::v1::Matrix33f::MergeFrom(
          from._internal_intrinsic_matrix());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_translation()->::cavnue::messages::geometry::v1::Vector3d::MergeFrom(
          from._internal_translation());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_rotation()->::cavnue::messages::geometry::v1::Matrix33f::MergeFrom(
          from._internal_rotation());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_scene_center()->::cavnue::messages::geometry::v1::Vector3d::MergeFrom(
          from._internal_scene_center());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_distortion_coefficients()->::cavnue::messages::data_warehouse::management::v1::CameraMetadata_DistortionCoefficients::MergeFrom(
          from._internal_distortion_coefficients());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.sensor_id_ = from._impl_.sensor_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraMetadata::CopyFrom(const CameraMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.management.v1.CameraMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraMetadata::IsInitialized() const {
  return true;
}

void CameraMetadata::InternalSwap(CameraMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraMetadata, _impl_.height_)
      + sizeof(CameraMetadata::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(CameraMetadata, _impl_.projection_matrix_)>(
          reinterpret_cast<char*>(&_impl_.projection_matrix_),
          reinterpret_cast<char*>(&other->_impl_.projection_matrix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto[3]);
}
// ===================================================================

class VehicleCalibration::_Internal {
 public:
};

VehicleCalibration::VehicleCalibration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.management.v1.VehicleCalibration)
}
VehicleCalibration::VehicleCalibration(const VehicleCalibration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VehicleCalibration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.length_uncertainty_) { from._impl_.length_uncertainty_ }

    , decltype(_impl_.width_uncertainty_) { from._impl_.width_uncertainty_ }

    , decltype(_impl_.length_correction_) { from._impl_.length_correction_ }

    , decltype(_impl_.width_correction_) { from._impl_.width_correction_ }

    , decltype(_impl_.sensor_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sensor_id_ = from._impl_.sensor_id_;
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.management.v1.VehicleCalibration)
}

inline void VehicleCalibration::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.length_uncertainty_) { arena }

    , decltype(_impl_.width_uncertainty_) { arena }

    , decltype(_impl_.length_correction_) { arena }

    , decltype(_impl_.width_correction_) { arena }

    , decltype(_impl_.sensor_id_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VehicleCalibration::~VehicleCalibration() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.management.v1.VehicleCalibration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VehicleCalibration::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.length_uncertainty_.~RepeatedField();
  _impl_.width_uncertainty_.~RepeatedField();
  _impl_.length_correction_.~RepeatedField();
  _impl_.width_correction_.~RepeatedField();
}

void VehicleCalibration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VehicleCalibration::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.management.v1.VehicleCalibration)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_length_uncertainty()->Clear();
  _internal_mutable_width_uncertainty()->Clear();
  _internal_mutable_length_correction()->Clear();
  _internal_mutable_width_correction()->Clear();
  _impl_.sensor_id_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleCalibration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 sensor_id = 1 [json_name = "sensorId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.sensor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated float length_uncertainty = 2 [json_name = "lengthUncertainty"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_length_uncertainty(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 21) {
          _internal_add_length_uncertainty(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated float width_uncertainty = 3 [json_name = "widthUncertainty"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_width_uncertainty(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 29) {
          _internal_add_width_uncertainty(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated float length_correction = 4 [json_name = "lengthCorrection"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_length_correction(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 37) {
          _internal_add_length_correction(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated float width_correction = 5 [json_name = "widthCorrection"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_width_correction(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 45) {
          _internal_add_width_correction(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* VehicleCalibration::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.management.v1.VehicleCalibration)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sensor_id = 1 [json_name = "sensorId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (this->_internal_sensor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_sensor_id(), target);
  }

  // repeated float length_uncertainty = 2 [json_name = "lengthUncertainty"];
  if (this->_internal_length_uncertainty_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_length_uncertainty(), target);
  }

  // repeated float width_uncertainty = 3 [json_name = "widthUncertainty"];
  if (this->_internal_width_uncertainty_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_width_uncertainty(), target);
  }

  // repeated float length_correction = 4 [json_name = "lengthCorrection"];
  if (this->_internal_length_correction_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_length_correction(), target);
  }

  // repeated float width_correction = 5 [json_name = "widthCorrection"];
  if (this->_internal_width_correction_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_width_correction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.management.v1.VehicleCalibration)
  return target;
}

::size_t VehicleCalibration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.management.v1.VehicleCalibration)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float length_uncertainty = 2 [json_name = "lengthUncertainty"];
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_length_uncertainty_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated float width_uncertainty = 3 [json_name = "widthUncertainty"];
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_width_uncertainty_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated float length_correction = 4 [json_name = "lengthCorrection"];
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_length_correction_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated float width_correction = 5 [json_name = "widthCorrection"];
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_width_correction_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // int64 sensor_id = 1 [json_name = "sensorId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (this->_internal_sensor_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_sensor_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleCalibration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VehicleCalibration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleCalibration::GetClassData() const { return &_class_data_; }


void VehicleCalibration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VehicleCalibration*>(&to_msg);
  auto& from = static_cast<const VehicleCalibration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.management.v1.VehicleCalibration)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.length_uncertainty_.MergeFrom(from._impl_.length_uncertainty_);
  _this->_impl_.width_uncertainty_.MergeFrom(from._impl_.width_uncertainty_);
  _this->_impl_.length_correction_.MergeFrom(from._impl_.length_correction_);
  _this->_impl_.width_correction_.MergeFrom(from._impl_.width_correction_);
  if (from._internal_sensor_id() != 0) {
    _this->_internal_set_sensor_id(from._internal_sensor_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleCalibration::CopyFrom(const VehicleCalibration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.management.v1.VehicleCalibration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleCalibration::IsInitialized() const {
  return true;
}

void VehicleCalibration::InternalSwap(VehicleCalibration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.length_uncertainty_.InternalSwap(&other->_impl_.length_uncertainty_);
  _impl_.width_uncertainty_.InternalSwap(&other->_impl_.width_uncertainty_);
  _impl_.length_correction_.InternalSwap(&other->_impl_.length_correction_);
  _impl_.width_correction_.InternalSwap(&other->_impl_.width_correction_);

  swap(_impl_.sensor_id_, other->_impl_.sensor_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleCalibration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fdatasources_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace management
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::management::v1::Location*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::management::v1::Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::management::v1::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::management::v1::Sensor*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::management::v1::Sensor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::management::v1::Sensor >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::management::v1::CameraMetadata_DistortionCoefficients*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::management::v1::CameraMetadata_DistortionCoefficients >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::management::v1::CameraMetadata_DistortionCoefficients >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::management::v1::CameraMetadata*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::management::v1::CameraMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::management::v1::CameraMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::management::v1::VehicleCalibration*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::management::v1::VehicleCalibration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::management::v1::VehicleCalibration >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

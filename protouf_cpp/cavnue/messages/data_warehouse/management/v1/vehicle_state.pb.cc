// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/data_warehouse/management/v1/vehicle_state.proto

#include "cavnue/messages/data_warehouse/management/v1/vehicle_state.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace management {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR VehicleState::VehicleState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.asset_role_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.coordinate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.ts_)*/nullptr
  , /*decltype(_impl_.run_ts_)*/nullptr
  , /*decltype(_impl_.uuid_)*/ ::int64_t{0}

  , /*decltype(_impl_.test_run_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.test_artifact_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.cohort_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.heading_)*/ 0

  , /*decltype(_impl_.velocity_quality_)*/ 0

  , /*decltype(_impl_.longitudinal_velocity_)*/ 0

  , /*decltype(_impl_.lateral_velocity_)*/ 0

  , /*decltype(_impl_.vertical_velocity_)*/ 0

  , /*decltype(_impl_.longitudinal_acceleration_)*/ 0

  , /*decltype(_impl_.lateral_acceleration_)*/ 0

  , /*decltype(_impl_.x_pos_)*/ 0

  , /*decltype(_impl_.y_pos_)*/ 0

  , /*decltype(_impl_.rms_hpos_)*/ 0

  , /*decltype(_impl_.rms_vpos_)*/ 0

  , /*decltype(_impl_.rms_hvel_)*/ 0

  , /*decltype(_impl_.rms_vvel_)*/ 0

  , /*decltype(_impl_.true_heading_)*/ 0

  , /*decltype(_impl_.pitchrate_)*/ 0

  , /*decltype(_impl_.rollrate_)*/ 0

  , /*decltype(_impl_.yawrate_)*/ 0

  , /*decltype(_impl_.height_)*/ 0

  , /*decltype(_impl_.dataset_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.test_asset_id_)*/ ::int64_t{0}
} {}
struct VehicleStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleStateDefaultTypeInternal() {}
  union {
    VehicleState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleStateDefaultTypeInternal _VehicleState_default_instance_;
}  // namespace v1
}  // namespace management
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
static ::_pb::Metadata file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fvehicle_5fstate_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fvehicle_5fstate_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fvehicle_5fstate_2eproto = nullptr;
const ::uint32_t TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fvehicle_5fstate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleState, _impl_.uuid_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleState, _impl_.test_run_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleState, _impl_.test_artifact_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleState, _impl_.cohort_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleState, _impl_.ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleState, _impl_.asset_role_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleState, _impl_.heading_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleState, _impl_.coordinate_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleState, _impl_.velocity_quality_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleState, _impl_.longitudinal_velocity_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleState, _impl_.lateral_velocity_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleState, _impl_.vertical_velocity_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleState, _impl_.longitudinal_acceleration_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleState, _impl_.lateral_acceleration_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleState, _impl_.x_pos_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleState, _impl_.y_pos_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleState, _impl_.rms_hpos_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleState, _impl_.rms_vpos_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleState, _impl_.rms_hvel_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleState, _impl_.rms_vvel_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleState, _impl_.true_heading_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleState, _impl_.pitchrate_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleState, _impl_.rollrate_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleState, _impl_.yawrate_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleState, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleState, _impl_.dataset_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleState, _impl_.run_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::VehicleState, _impl_.test_asset_id_),
    3,
    4,
    5,
    6,
    1,
    ~0u,
    7,
    0,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    ~0u,
    2,
    25,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 36, -1, sizeof(::cavnue::messages::data_warehouse::management::v1::VehicleState)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cavnue::messages::data_warehouse::management::v1::_VehicleState_default_instance_._instance,
};
const char descriptor_table_protodef_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fvehicle_5fstate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n@cavnue/messages/data_warehouse/managem"
    "ent/v1/vehicle_state.proto\022,cavnue.messa"
    "ges.data_warehouse.management.v1\032\'cavnue"
    "/third_party/bq/v1/bq_field.proto\032\'cavnu"
    "e/third_party/bq/v1/bq_table.proto\032-cavn"
    "ue/messages/common/v1/field_options.prot"
    "o\032\037google/protobuf/timestamp.proto\"\305\016\n\014V"
    "ehicleState\022#\n\004uuid\030\001 \001(\003B\n\210\265\030\001\212\371+\002\010\001H\000R"
    "\004uuid\210\001\001\0221\n\013test_run_id\030\002 \001(\003B\014\230\265\030\001\212\371+\004\010"
    "\001@\001H\001R\ttestRunId\210\001\001\0227\n\020test_artifact_id\030"
    "\003 \001(\003B\010\212\371+\004\010\001@\001H\002R\016testArtifactId\210\001\001\022*\n\t"
    "cohort_id\030\004 \001(\003B\010\212\371+\004\010\001@\001H\003R\010cohortId\210\001\001"
    "\022F\n\002ts\030\005 \001(\0132\032.google.protobuf.Timestamp"
    "B\025\230\265\030\001\212\371+\r\010\001\022\tTIMESTAMPH\004R\002ts\210\001\001\022\035\n\nasse"
    "t_role\030\006 \001(\tR\tassetRole\022-\n\007heading\030\007 \001(\002"
    "B\016\210\361\004\n\220\361\004\004\212\371+\002\010\001H\005R\007heading\210\001\001\022:\n\ncoordi"
    "nate\030\010 \001(\tB\025\220\361\004\001\212\371+\r\010\001\022\tGEOGRAPHYH\006R\ncoo"
    "rdinate\210\001\001\0224\n\020velocity_quality\030\t \001(\002B\004\212\371"
    "+\000H\007R\017velocityQuality\210\001\001\022D\n\025longitudinal"
    "_velocity\030\n \001(\002B\n\210\361\004\001\212\371+\002\010\001H\010R\024longitudi"
    "nalVelocity\210\001\001\022:\n\020lateral_velocity\030\013 \001(\002"
    "B\n\210\361\004\001\212\371+\002\010\001H\tR\017lateralVelocity\210\001\001\022<\n\021ve"
    "rtical_velocity\030\014 \001(\002B\n\210\361\004\001\212\371+\002\010\001H\nR\020ver"
    "ticalVelocity\210\001\001\022L\n\031longitudinal_acceler"
    "ation\030\r \001(\002B\n\210\361\004\002\212\371+\002\010\001H\013R\030longitudinalA"
    "cceleration\210\001\001\022B\n\024lateral_acceleration\030\016"
    " \001(\002B\n\210\361\004\002\212\371+\002\010\001H\014R\023lateralAcceleration\210"
    "\001\001\022\"\n\005x_pos\030\017 \001(\002B\010\210\361\004\005\212\371+\000H\rR\004xPos\210\001\001\022\""
    "\n\005y_pos\030\020 \001(\002B\010\210\361\004\005\212\371+\000H\016R\004yPos\210\001\001\022$\n\010rm"
    "s_hpos\030\021 \001(\002B\004\212\371+\000H\017R\007rmsHpos\210\001\001\022$\n\010rms_"
    "vpos\030\022 \001(\002B\004\212\371+\000H\020R\007rmsVpos\210\001\001\022&\n\010rms_hv"
    "el\030\023 \001(\002B\006\212\371+\002\010\001H\021R\007rmsHvel\210\001\001\022&\n\010rms_vv"
    "el\030\024 \001(\002B\006\212\371+\002\010\001H\022R\007rmsVvel\210\001\001\0222\n\014true_h"
    "eading\030\025 \001(\002B\n\210\361\004\n\212\371+\002\010\001H\023R\013trueHeading\210"
    "\001\001\022-\n\tpitchrate\030\026 \001(\002B\n\210\361\004\016\212\371+\002\010\001H\024R\tpit"
    "chrate\210\001\001\022+\n\010rollrate\030\027 \001(\002B\n\210\361\004\016\212\371+\002\010\001H"
    "\025R\010rollrate\210\001\001\022)\n\007yawrate\030\030 \001(\002B\n\210\361\004\016\212\371+"
    "\002\010\001H\026R\007yawrate\210\001\001\022\'\n\006height\030\031 \001(\002B\n\210\361\004\005\212"
    "\371+\002\010\001H\027R\006height\210\001\001\022%\n\ndataset_id\030\032 \001(\003B\006"
    "\212\371+\002@\001R\tdatasetId\022O\n\006run_ts\030\033 \001(\0132\032.goog"
    "le.protobuf.TimestampB\027\230\265\030\001\212\371+\017\010\001\022\tTIMES"
    "TAMP8\001H\030R\005runTs\210\001\001\0223\n\rtest_asset_id\030\034 \001("
    "\003B\n\230\265\030\001\212\371+\002\010\001H\031R\013testAssetId\210\001\001:\022\202\371+\016\n\014V"
    "ehicleStateB\007\n\005_uuidB\016\n\014_test_run_idB\023\n\021"
    "_test_artifact_idB\014\n\n_cohort_idB\005\n\003_tsB\n"
    "\n\010_headingB\r\n\013_coordinateB\023\n\021_velocity_q"
    "ualityB\030\n\026_longitudinal_velocityB\023\n\021_lat"
    "eral_velocityB\024\n\022_vertical_velocityB\034\n\032_"
    "longitudinal_accelerationB\027\n\025_lateral_ac"
    "celerationB\010\n\006_x_posB\010\n\006_y_posB\013\n\t_rms_h"
    "posB\013\n\t_rms_vposB\013\n\t_rms_hvelB\013\n\t_rms_vv"
    "elB\017\n\r_true_headingB\014\n\n_pitchrateB\013\n\t_ro"
    "llrateB\n\n\010_yawrateB\t\n\007_heightB\t\n\007_run_ts"
    "B\020\n\016_test_asset_idb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fvehicle_5fstate_2eproto_deps[4] =
    {
        &::descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2ffield_5foptions_2eproto,
        &::descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ffield_2eproto,
        &::descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fvehicle_5fstate_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fvehicle_5fstate_2eproto = {
    false,
    false,
    2146,
    descriptor_table_protodef_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fvehicle_5fstate_2eproto,
    "cavnue/messages/data_warehouse/management/v1/vehicle_state.proto",
    &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fvehicle_5fstate_2eproto_once,
    descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fvehicle_5fstate_2eproto_deps,
    4,
    1,
    schemas,
    file_default_instances,
    TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fvehicle_5fstate_2eproto::offsets,
    file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fvehicle_5fstate_2eproto,
    file_level_enum_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fvehicle_5fstate_2eproto,
    file_level_service_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fvehicle_5fstate_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fvehicle_5fstate_2eproto_getter() {
  return &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fvehicle_5fstate_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fvehicle_5fstate_2eproto(&descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fvehicle_5fstate_2eproto);
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace management {
namespace v1 {
// ===================================================================

class VehicleState::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VehicleState, _impl_._has_bits_);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_test_run_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_test_artifact_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cohort_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts(const VehicleState* msg);
  static void set_has_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_coordinate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_velocity_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_longitudinal_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_lateral_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_vertical_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_longitudinal_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_lateral_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_x_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_y_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_rms_hpos(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_rms_vpos(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_rms_hvel(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_rms_vvel(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_true_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_pitchrate(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_rollrate(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_yawrate(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& run_ts(const VehicleState* msg);
  static void set_has_run_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_test_asset_id(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
VehicleState::_Internal::ts(const VehicleState* msg) {
  return *msg->_impl_.ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
VehicleState::_Internal::run_ts(const VehicleState* msg) {
  return *msg->_impl_.run_ts_;
}
void VehicleState::clear_ts() {
  if (_impl_.ts_ != nullptr) _impl_.ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void VehicleState::clear_run_ts() {
  if (_impl_.run_ts_ != nullptr) _impl_.run_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
VehicleState::VehicleState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.management.v1.VehicleState)
}
VehicleState::VehicleState(const VehicleState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VehicleState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.asset_role_) {}

    , decltype(_impl_.coordinate_) {}

    , decltype(_impl_.ts_){nullptr}
    , decltype(_impl_.run_ts_){nullptr}
    , decltype(_impl_.uuid_) {}

    , decltype(_impl_.test_run_id_) {}

    , decltype(_impl_.test_artifact_id_) {}

    , decltype(_impl_.cohort_id_) {}

    , decltype(_impl_.heading_) {}

    , decltype(_impl_.velocity_quality_) {}

    , decltype(_impl_.longitudinal_velocity_) {}

    , decltype(_impl_.lateral_velocity_) {}

    , decltype(_impl_.vertical_velocity_) {}

    , decltype(_impl_.longitudinal_acceleration_) {}

    , decltype(_impl_.lateral_acceleration_) {}

    , decltype(_impl_.x_pos_) {}

    , decltype(_impl_.y_pos_) {}

    , decltype(_impl_.rms_hpos_) {}

    , decltype(_impl_.rms_vpos_) {}

    , decltype(_impl_.rms_hvel_) {}

    , decltype(_impl_.rms_vvel_) {}

    , decltype(_impl_.true_heading_) {}

    , decltype(_impl_.pitchrate_) {}

    , decltype(_impl_.rollrate_) {}

    , decltype(_impl_.yawrate_) {}

    , decltype(_impl_.height_) {}

    , decltype(_impl_.dataset_id_) {}

    , decltype(_impl_.test_asset_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.asset_role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.asset_role_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_asset_role().empty()) {
    _this->_impl_.asset_role_.Set(from._internal_asset_role(), _this->GetArenaForAllocation());
  }
  _impl_.coordinate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.coordinate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.coordinate_.Set(from._internal_coordinate(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.ts_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.run_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.run_ts_);
  }
  ::memcpy(&_impl_.uuid_, &from._impl_.uuid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.test_asset_id_) -
    reinterpret_cast<char*>(&_impl_.uuid_)) + sizeof(_impl_.test_asset_id_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.management.v1.VehicleState)
}

inline void VehicleState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.asset_role_) {}

    , decltype(_impl_.coordinate_) {}

    , decltype(_impl_.ts_){nullptr}
    , decltype(_impl_.run_ts_){nullptr}
    , decltype(_impl_.uuid_) { ::int64_t{0} }

    , decltype(_impl_.test_run_id_) { ::int64_t{0} }

    , decltype(_impl_.test_artifact_id_) { ::int64_t{0} }

    , decltype(_impl_.cohort_id_) { ::int64_t{0} }

    , decltype(_impl_.heading_) { 0 }

    , decltype(_impl_.velocity_quality_) { 0 }

    , decltype(_impl_.longitudinal_velocity_) { 0 }

    , decltype(_impl_.lateral_velocity_) { 0 }

    , decltype(_impl_.vertical_velocity_) { 0 }

    , decltype(_impl_.longitudinal_acceleration_) { 0 }

    , decltype(_impl_.lateral_acceleration_) { 0 }

    , decltype(_impl_.x_pos_) { 0 }

    , decltype(_impl_.y_pos_) { 0 }

    , decltype(_impl_.rms_hpos_) { 0 }

    , decltype(_impl_.rms_vpos_) { 0 }

    , decltype(_impl_.rms_hvel_) { 0 }

    , decltype(_impl_.rms_vvel_) { 0 }

    , decltype(_impl_.true_heading_) { 0 }

    , decltype(_impl_.pitchrate_) { 0 }

    , decltype(_impl_.rollrate_) { 0 }

    , decltype(_impl_.yawrate_) { 0 }

    , decltype(_impl_.height_) { 0 }

    , decltype(_impl_.dataset_id_) { ::int64_t{0} }

    , decltype(_impl_.test_asset_id_) { ::int64_t{0} }

  };
  _impl_.asset_role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.asset_role_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.coordinate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.coordinate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VehicleState::~VehicleState() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.management.v1.VehicleState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VehicleState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.asset_role_.Destroy();
  _impl_.coordinate_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ts_;
  if (this != internal_default_instance()) delete _impl_.run_ts_;
}

void VehicleState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VehicleState::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.management.v1.VehicleState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.asset_role_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.coordinate_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.ts_ != nullptr);
      _impl_.ts_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.run_ts_ != nullptr);
      _impl_.run_ts_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.uuid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.heading_) -
        reinterpret_cast<char*>(&_impl_.uuid_)) + sizeof(_impl_.heading_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.velocity_quality_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.y_pos_) -
        reinterpret_cast<char*>(&_impl_.velocity_quality_)) + sizeof(_impl_.y_pos_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.rms_hpos_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.yawrate_) -
        reinterpret_cast<char*>(&_impl_.rms_hpos_)) + sizeof(_impl_.yawrate_));
  }
  _impl_.height_ = 0;
  _impl_.dataset_id_ = ::int64_t{0};
  _impl_.test_asset_id_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 uuid = 1 [json_name = "uuid", (.cavnue.messages.common.v1.autogenerated) = true, (.gen_bq_schema.bigquery) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_uuid(&has_bits);
          _impl_.uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 test_run_id = 2 [json_name = "testRunId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_test_run_id(&has_bits);
          _impl_.test_run_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 test_artifact_id = 3 [json_name = "testArtifactId", (.gen_bq_schema.bigquery) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_test_artifact_id(&has_bits);
          _impl_.test_artifact_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 cohort_id = 4 [json_name = "cohortId", (.gen_bq_schema.bigquery) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_cohort_id(&has_bits);
          _impl_.cohort_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .google.protobuf.Timestamp ts = 5 [json_name = "ts", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string asset_role = 6 [json_name = "assetRole"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_asset_role();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v1.VehicleState.asset_role"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional float heading = 7 [json_name = "heading", (.cavnue.messages.common.v1.units) = UNITS_DEGREES, (.cavnue.messages.common.v1.crs) = CRS_NED, (.gen_bq_schema.bigquery) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 61)) {
          _Internal::set_has_heading(&has_bits);
          _impl_.heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string coordinate = 8 [json_name = "coordinate", (.cavnue.messages.common.v1.crs) = CRS_WGS84, (.gen_bq_schema.bigquery) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_coordinate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v1.VehicleState.coordinate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional float velocity_quality = 9 [json_name = "velocityQuality", (.gen_bq_schema.bigquery) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 77)) {
          _Internal::set_has_velocity_quality(&has_bits);
          _impl_.velocity_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional float longitudinal_velocity = 10 [json_name = "longitudinalVelocity", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND, (.gen_bq_schema.bigquery) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 85)) {
          _Internal::set_has_longitudinal_velocity(&has_bits);
          _impl_.longitudinal_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional float lateral_velocity = 11 [json_name = "lateralVelocity", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND, (.gen_bq_schema.bigquery) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 93)) {
          _Internal::set_has_lateral_velocity(&has_bits);
          _impl_.lateral_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional float vertical_velocity = 12 [json_name = "verticalVelocity", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND, (.gen_bq_schema.bigquery) = {
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 101)) {
          _Internal::set_has_vertical_velocity(&has_bits);
          _impl_.vertical_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional float longitudinal_acceleration = 13 [json_name = "longitudinalAcceleration", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND_SQUARED, (.gen_bq_schema.bigquery) = {
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 109)) {
          _Internal::set_has_longitudinal_acceleration(&has_bits);
          _impl_.longitudinal_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional float lateral_acceleration = 14 [json_name = "lateralAcceleration", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND_SQUARED, (.gen_bq_schema.bigquery) = {
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 117)) {
          _Internal::set_has_lateral_acceleration(&has_bits);
          _impl_.lateral_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional float x_pos = 15 [json_name = "xPos", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.gen_bq_schema.bigquery) = {
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 125)) {
          _Internal::set_has_x_pos(&has_bits);
          _impl_.x_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional float y_pos = 16 [json_name = "yPos", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.gen_bq_schema.bigquery) = {
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 133)) {
          _Internal::set_has_y_pos(&has_bits);
          _impl_.y_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional float rms_hpos = 17 [json_name = "rmsHpos", (.gen_bq_schema.bigquery) = {
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 141)) {
          _Internal::set_has_rms_hpos(&has_bits);
          _impl_.rms_hpos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional float rms_vpos = 18 [json_name = "rmsVpos", (.gen_bq_schema.bigquery) = {
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 149)) {
          _Internal::set_has_rms_vpos(&has_bits);
          _impl_.rms_vpos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional float rms_hvel = 19 [json_name = "rmsHvel", (.gen_bq_schema.bigquery) = {
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 157)) {
          _Internal::set_has_rms_hvel(&has_bits);
          _impl_.rms_hvel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional float rms_vvel = 20 [json_name = "rmsVvel", (.gen_bq_schema.bigquery) = {
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 165)) {
          _Internal::set_has_rms_vvel(&has_bits);
          _impl_.rms_vvel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional float true_heading = 21 [json_name = "trueHeading", (.cavnue.messages.common.v1.units) = UNITS_DEGREES, (.gen_bq_schema.bigquery) = {
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 173)) {
          _Internal::set_has_true_heading(&has_bits);
          _impl_.true_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional float pitchrate = 22 [json_name = "pitchrate", (.cavnue.messages.common.v1.units) = UNITS_DEGREES_PER_SECOND, (.gen_bq_schema.bigquery) = {
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 181)) {
          _Internal::set_has_pitchrate(&has_bits);
          _impl_.pitchrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional float rollrate = 23 [json_name = "rollrate", (.cavnue.messages.common.v1.units) = UNITS_DEGREES_PER_SECOND, (.gen_bq_schema.bigquery) = {
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 189)) {
          _Internal::set_has_rollrate(&has_bits);
          _impl_.rollrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional float yawrate = 24 [json_name = "yawrate", (.cavnue.messages.common.v1.units) = UNITS_DEGREES_PER_SECOND, (.gen_bq_schema.bigquery) = {
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 197)) {
          _Internal::set_has_yawrate(&has_bits);
          _impl_.yawrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional float height = 25 [json_name = "height", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.gen_bq_schema.bigquery) = {
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 205)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 dataset_id = 26 [json_name = "datasetId", (.gen_bq_schema.bigquery) = {
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 208)) {
          _impl_.dataset_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .google.protobuf.Timestamp run_ts = 27 [json_name = "runTs", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 test_asset_id = 28 [json_name = "testAssetId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 224)) {
          _Internal::set_has_test_asset_id(&has_bits);
          _impl_.test_asset_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* VehicleState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.management.v1.VehicleState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 uuid = 1 [json_name = "uuid", (.cavnue.messages.common.v1.autogenerated) = true, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_uuid(), target);
  }

  // optional int64 test_run_id = 2 [json_name = "testRunId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_test_run_id(), target);
  }

  // optional int64 test_artifact_id = 3 [json_name = "testArtifactId", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_test_artifact_id(), target);
  }

  // optional int64 cohort_id = 4 [json_name = "cohortId", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_cohort_id(), target);
  }

  // optional .google.protobuf.Timestamp ts = 5 [json_name = "ts", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::ts(this),
        _Internal::ts(this).GetCachedSize(), target, stream);
  }

  // string asset_role = 6 [json_name = "assetRole"];
  if (!this->_internal_asset_role().empty()) {
    const std::string& _s = this->_internal_asset_role();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v1.VehicleState.asset_role");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // optional float heading = 7 [json_name = "heading", (.cavnue.messages.common.v1.units) = UNITS_DEGREES, (.cavnue.messages.common.v1.crs) = CRS_NED, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_heading(), target);
  }

  // optional string coordinate = 8 [json_name = "coordinate", (.cavnue.messages.common.v1.crs) = CRS_WGS84, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_coordinate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v1.VehicleState.coordinate");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // optional float velocity_quality = 9 [json_name = "velocityQuality", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        9, this->_internal_velocity_quality(), target);
  }

  // optional float longitudinal_velocity = 10 [json_name = "longitudinalVelocity", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        10, this->_internal_longitudinal_velocity(), target);
  }

  // optional float lateral_velocity = 11 [json_name = "lateralVelocity", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        11, this->_internal_lateral_velocity(), target);
  }

  // optional float vertical_velocity = 12 [json_name = "verticalVelocity", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        12, this->_internal_vertical_velocity(), target);
  }

  // optional float longitudinal_acceleration = 13 [json_name = "longitudinalAcceleration", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND_SQUARED, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        13, this->_internal_longitudinal_acceleration(), target);
  }

  // optional float lateral_acceleration = 14 [json_name = "lateralAcceleration", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND_SQUARED, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        14, this->_internal_lateral_acceleration(), target);
  }

  // optional float x_pos = 15 [json_name = "xPos", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        15, this->_internal_x_pos(), target);
  }

  // optional float y_pos = 16 [json_name = "yPos", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        16, this->_internal_y_pos(), target);
  }

  // optional float rms_hpos = 17 [json_name = "rmsHpos", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        17, this->_internal_rms_hpos(), target);
  }

  // optional float rms_vpos = 18 [json_name = "rmsVpos", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        18, this->_internal_rms_vpos(), target);
  }

  // optional float rms_hvel = 19 [json_name = "rmsHvel", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        19, this->_internal_rms_hvel(), target);
  }

  // optional float rms_vvel = 20 [json_name = "rmsVvel", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        20, this->_internal_rms_vvel(), target);
  }

  // optional float true_heading = 21 [json_name = "trueHeading", (.cavnue.messages.common.v1.units) = UNITS_DEGREES, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        21, this->_internal_true_heading(), target);
  }

  // optional float pitchrate = 22 [json_name = "pitchrate", (.cavnue.messages.common.v1.units) = UNITS_DEGREES_PER_SECOND, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        22, this->_internal_pitchrate(), target);
  }

  // optional float rollrate = 23 [json_name = "rollrate", (.cavnue.messages.common.v1.units) = UNITS_DEGREES_PER_SECOND, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        23, this->_internal_rollrate(), target);
  }

  // optional float yawrate = 24 [json_name = "yawrate", (.cavnue.messages.common.v1.units) = UNITS_DEGREES_PER_SECOND, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        24, this->_internal_yawrate(), target);
  }

  // optional float height = 25 [json_name = "height", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        25, this->_internal_height(), target);
  }

  // int64 dataset_id = 26 [json_name = "datasetId", (.gen_bq_schema.bigquery) = {
  if (this->_internal_dataset_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        26, this->_internal_dataset_id(), target);
  }

  // optional .google.protobuf.Timestamp run_ts = 27 [json_name = "runTs", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::run_ts(this),
        _Internal::run_ts(this).GetCachedSize(), target, stream);
  }

  // optional int64 test_asset_id = 28 [json_name = "testAssetId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        28, this->_internal_test_asset_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.management.v1.VehicleState)
  return target;
}

::size_t VehicleState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.management.v1.VehicleState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string asset_role = 6 [json_name = "assetRole"];
  if (!this->_internal_asset_role().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_asset_role());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string coordinate = 8 [json_name = "coordinate", (.cavnue.messages.common.v1.crs) = CRS_WGS84, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_coordinate());
    }

    // optional .google.protobuf.Timestamp ts = 5 [json_name = "ts", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ts_);
    }

    // optional .google.protobuf.Timestamp run_ts = 27 [json_name = "runTs", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.run_ts_);
    }

    // optional int64 uuid = 1 [json_name = "uuid", (.cavnue.messages.common.v1.autogenerated) = true, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_uuid());
    }

    // optional int64 test_run_id = 2 [json_name = "testRunId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_test_run_id());
    }

    // optional int64 test_artifact_id = 3 [json_name = "testArtifactId", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_test_artifact_id());
    }

    // optional int64 cohort_id = 4 [json_name = "cohortId", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_cohort_id());
    }

    // optional float heading = 7 [json_name = "heading", (.cavnue.messages.common.v1.units) = UNITS_DEGREES, (.cavnue.messages.common.v1.crs) = CRS_NED, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000080u) {
      total_size += 5;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float velocity_quality = 9 [json_name = "velocityQuality", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000100u) {
      total_size += 5;
    }

    // optional float longitudinal_velocity = 10 [json_name = "longitudinalVelocity", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000200u) {
      total_size += 5;
    }

    // optional float lateral_velocity = 11 [json_name = "lateralVelocity", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000400u) {
      total_size += 5;
    }

    // optional float vertical_velocity = 12 [json_name = "verticalVelocity", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000800u) {
      total_size += 5;
    }

    // optional float longitudinal_acceleration = 13 [json_name = "longitudinalAcceleration", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND_SQUARED, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00001000u) {
      total_size += 5;
    }

    // optional float lateral_acceleration = 14 [json_name = "lateralAcceleration", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND_SQUARED, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00002000u) {
      total_size += 5;
    }

    // optional float x_pos = 15 [json_name = "xPos", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00004000u) {
      total_size += 5;
    }

    // optional float y_pos = 16 [json_name = "yPos", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00008000u) {
      total_size += 6;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float rms_hpos = 17 [json_name = "rmsHpos", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00010000u) {
      total_size += 6;
    }

    // optional float rms_vpos = 18 [json_name = "rmsVpos", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00020000u) {
      total_size += 6;
    }

    // optional float rms_hvel = 19 [json_name = "rmsHvel", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00040000u) {
      total_size += 6;
    }

    // optional float rms_vvel = 20 [json_name = "rmsVvel", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00080000u) {
      total_size += 6;
    }

    // optional float true_heading = 21 [json_name = "trueHeading", (.cavnue.messages.common.v1.units) = UNITS_DEGREES, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00100000u) {
      total_size += 6;
    }

    // optional float pitchrate = 22 [json_name = "pitchrate", (.cavnue.messages.common.v1.units) = UNITS_DEGREES_PER_SECOND, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00200000u) {
      total_size += 6;
    }

    // optional float rollrate = 23 [json_name = "rollrate", (.cavnue.messages.common.v1.units) = UNITS_DEGREES_PER_SECOND, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00400000u) {
      total_size += 6;
    }

    // optional float yawrate = 24 [json_name = "yawrate", (.cavnue.messages.common.v1.units) = UNITS_DEGREES_PER_SECOND, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00800000u) {
      total_size += 6;
    }

  }
  // optional float height = 25 [json_name = "height", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x01000000u) {
    total_size += 6;
  }

  // int64 dataset_id = 26 [json_name = "datasetId", (.gen_bq_schema.bigquery) = {
  if (this->_internal_dataset_id() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                    this->_internal_dataset_id());
  }

  // optional int64 test_asset_id = 28 [json_name = "testAssetId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x02000000u) {
    total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                    this->_internal_test_asset_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VehicleState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleState::GetClassData() const { return &_class_data_; }


void VehicleState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VehicleState*>(&to_msg);
  auto& from = static_cast<const VehicleState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.management.v1.VehicleState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_asset_role().empty()) {
    _this->_internal_set_asset_role(from._internal_asset_role());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_coordinate(from._internal_coordinate());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_ts());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_run_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_run_ts());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.uuid_ = from._impl_.uuid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.test_run_id_ = from._impl_.test_run_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.test_artifact_id_ = from._impl_.test_artifact_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.cohort_id_ = from._impl_.cohort_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.heading_ = from._impl_.heading_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.velocity_quality_ = from._impl_.velocity_quality_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.longitudinal_velocity_ = from._impl_.longitudinal_velocity_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.lateral_velocity_ = from._impl_.lateral_velocity_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.vertical_velocity_ = from._impl_.vertical_velocity_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.longitudinal_acceleration_ = from._impl_.longitudinal_acceleration_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.lateral_acceleration_ = from._impl_.lateral_acceleration_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.x_pos_ = from._impl_.x_pos_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.y_pos_ = from._impl_.y_pos_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.rms_hpos_ = from._impl_.rms_hpos_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.rms_vpos_ = from._impl_.rms_vpos_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.rms_hvel_ = from._impl_.rms_hvel_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.rms_vvel_ = from._impl_.rms_vvel_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.true_heading_ = from._impl_.true_heading_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.pitchrate_ = from._impl_.pitchrate_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.rollrate_ = from._impl_.rollrate_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.yawrate_ = from._impl_.yawrate_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_dataset_id() != 0) {
    _this->_internal_set_dataset_id(from._internal_dataset_id());
  }
  if (cached_has_bits & 0x02000000u) {
    _this->_internal_set_test_asset_id(from._internal_test_asset_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleState::CopyFrom(const VehicleState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.management.v1.VehicleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleState::IsInitialized() const {
  return true;
}

void VehicleState::InternalSwap(VehicleState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.asset_role_, lhs_arena,
                                       &other->_impl_.asset_role_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.coordinate_, lhs_arena,
                                       &other->_impl_.coordinate_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.test_asset_id_)
      + sizeof(VehicleState::_impl_.test_asset_id_)
      - PROTOBUF_FIELD_OFFSET(VehicleState, _impl_.ts_)>(
          reinterpret_cast<char*>(&_impl_.ts_),
          reinterpret_cast<char*>(&other->_impl_.ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fvehicle_5fstate_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fvehicle_5fstate_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2fvehicle_5fstate_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace management
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::management::v1::VehicleState*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::management::v1::VehicleState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::management::v1::VehicleState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

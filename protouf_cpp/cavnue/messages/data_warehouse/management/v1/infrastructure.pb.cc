// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/data_warehouse/management/v1/infrastructure.proto

#include "cavnue/messages/data_warehouse/management/v1/infrastructure.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace management {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR Folder::Folder(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.identifier_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.folder_id_)*/ ::int64_t{0}
} {}
struct FolderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FolderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FolderDefaultTypeInternal() {}
  union {
    Folder _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FolderDefaultTypeInternal _Folder_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Project::Project(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.identifier_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.project_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.folder_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.type_)*/ 0
} {}
struct ProjectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProjectDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProjectDefaultTypeInternal() {}
  union {
    Project _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProjectDefaultTypeInternal _Project_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Cohort::Cohort(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.identifier_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.cohort_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.project_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.deployment_)*/ 0
} {}
struct CohortDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CohortDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CohortDefaultTypeInternal() {}
  union {
    Cohort _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CohortDefaultTypeInternal _Cohort_default_instance_;
}  // namespace v1
}  // namespace management
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
static ::_pb::Metadata file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto = nullptr;
const ::uint32_t TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Folder, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Folder, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Folder, _impl_.folder_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Folder, _impl_.identifier_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Project, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Project, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Project, _impl_.project_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Project, _impl_.folder_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Project, _impl_.identifier_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Project, _impl_.type_),
    1,
    2,
    0,
    3,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Cohort, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Cohort, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Cohort, _impl_.cohort_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Cohort, _impl_.project_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Cohort, _impl_.identifier_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v1::Cohort, _impl_.deployment_),
    1,
    2,
    0,
    3,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::cavnue::messages::data_warehouse::management::v1::Folder)},
        { 12, 24, -1, sizeof(::cavnue::messages::data_warehouse::management::v1::Project)},
        { 28, 40, -1, sizeof(::cavnue::messages::data_warehouse::management::v1::Cohort)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cavnue::messages::data_warehouse::management::v1::_Folder_default_instance_._instance,
    &::cavnue::messages::data_warehouse::management::v1::_Project_default_instance_._instance,
    &::cavnue::messages::data_warehouse::management::v1::_Cohort_default_instance_._instance,
};
const char descriptor_table_protodef_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\nAcavnue/messages/data_warehouse/managem"
    "ent/v1/infrastructure.proto\022,cavnue.mess"
    "ages.data_warehouse.management.v1\032\'cavnu"
    "e/third_party/bq/v1/bq_field.proto\032\'cavn"
    "ue/third_party/bq/v1/bq_table.proto\032&cav"
    "nue/messages/common/v1/common.proto\032-cav"
    "nue/messages/common/v1/field_options.pro"
    "to\"\217\001\n\006Folder\022,\n\tfolder_id\030\001 \001(\003B\n\230\265\030\001\212\371"
    "+\002\010\001H\000R\010folderId\210\001\001\022+\n\nidentifier\030\002 \001(\tB"
    "\006\212\371+\002\010\001H\001R\nidentifier\210\001\001:\r\202\371+\t\n\007FoldersB"
    "\014\n\n_folder_idB\r\n\013_identifier\"\220\003\n\007Project"
    "\022.\n\nproject_id\030\001 \001(\003B\n\230\265\030\001\212\371+\002\010\001H\000R\tproj"
    "ectId\210\001\001\022(\n\tfolder_id\030\002 \001(\003B\006\212\371+\002\010\001H\001R\010f"
    "olderId\210\001\001\022+\n\nidentifier\030\003 \001(\tB\006\212\371+\002\010\001H\002"
    "R\nidentifier\210\001\001\022[\n\004type\030\004 \001(\0162:.cavnue.m"
    "essages.data_warehouse.management.v1.Pro"
    "ject.TypeB\006\212\371+\002\010\001H\003R\004type\210\001\001\"\\\n\004Type\022\024\n\020"
    "TYPE_UNSPECIFIED\020\000\022\r\n\tTYPE_PROD\020\001\022\020\n\014TYP"
    "E_STAGING\020\002\022\014\n\010TYPE_DEV\020\003\022\017\n\013TYPE_REPLAY"
    "\020\004:\016\202\371+\n\n\010ProjectsB\r\n\013_project_idB\014\n\n_fo"
    "lder_idB\r\n\013_identifierB\007\n\005_type\"\330\002\n\006Coho"
    "rt\022L\n\tcohort_id\030\001 \001(\003B*\210\265\030\001\222\265\030\nproject_i"
    "d\222\265\030\nidentifier\230\265\030\001\212\371+\002\010\001H\000R\010cohortId\210\001\001"
    "\022*\n\nproject_id\030\002 \001(\003B\006\212\371+\002\010\001H\001R\tprojectI"
    "d\210\001\001\022+\n\nidentifier\030\003 \001(\tB\006\212\371+\002\010\001H\002R\niden"
    "tifier\210\001\001\022]\n\ndeployment\030\004 \001(\01620.cavnue.m"
    "essages.common.v1.DataSource.DeploymentB"
    "\006\212\371+\002\010\001H\003R\ndeployment\210\001\001:\r\202\371+\t\n\007CohortsB"
    "\014\n\n_cohort_idB\r\n\013_project_idB\r\n\013_identif"
    "ierB\r\n\013_deploymentb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto_deps[4] =
    {
        &::descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2ffield_5foptions_2eproto,
        &::descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ffield_2eproto,
        &::descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto,
};
static ::absl::once_flag descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto = {
    false,
    false,
    1186,
    descriptor_table_protodef_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto,
    "cavnue/messages/data_warehouse/management/v1/infrastructure.proto",
    &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto_once,
    descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto_deps,
    4,
    3,
    schemas,
    file_default_instances,
    TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto::offsets,
    file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto,
    file_level_enum_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto,
    file_level_service_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto_getter() {
  return &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto(&descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto);
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace management {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Project_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto);
  return file_level_enum_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto[0];
}
bool Project_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Project_Type Project::TYPE_UNSPECIFIED;
constexpr Project_Type Project::TYPE_PROD;
constexpr Project_Type Project::TYPE_STAGING;
constexpr Project_Type Project::TYPE_DEV;
constexpr Project_Type Project::TYPE_REPLAY;
constexpr Project_Type Project::Type_MIN;
constexpr Project_Type Project::Type_MAX;
constexpr int Project::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class Folder::_Internal {
 public:
  using HasBits = decltype(std::declval<Folder>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Folder, _impl_._has_bits_);
  static void set_has_folder_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Folder::Folder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.management.v1.Folder)
}
Folder::Folder(const Folder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Folder* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.folder_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), _this->GetArenaForAllocation());
  }
  _this->_impl_.folder_id_ = from._impl_.folder_id_;
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.management.v1.Folder)
}

inline void Folder::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.folder_id_) { ::int64_t{0} }

  };
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Folder::~Folder() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.management.v1.Folder)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Folder::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identifier_.Destroy();
}

void Folder::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Folder::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.management.v1.Folder)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.identifier_.ClearNonDefaultToEmpty();
  }
  _impl_.folder_id_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Folder::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 folder_id = 1 [json_name = "folderId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_folder_id(&has_bits);
          _impl_.folder_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string identifier = 2 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v1.Folder.identifier"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Folder::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.management.v1.Folder)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 folder_id = 1 [json_name = "folderId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_folder_id(), target);
  }

  // optional string identifier = 2 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_identifier();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v1.Folder.identifier");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.management.v1.Folder)
  return target;
}

::size_t Folder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.management.v1.Folder)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string identifier = 2 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_identifier());
    }

    // optional int64 folder_id = 1 [json_name = "folderId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_folder_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Folder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Folder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Folder::GetClassData() const { return &_class_data_; }


void Folder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Folder*>(&to_msg);
  auto& from = static_cast<const Folder&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.management.v1.Folder)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.folder_id_ = from._impl_.folder_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Folder::CopyFrom(const Folder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.management.v1.Folder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Folder::IsInitialized() const {
  return true;
}

void Folder::InternalSwap(Folder* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identifier_, lhs_arena,
                                       &other->_impl_.identifier_, rhs_arena);

  swap(_impl_.folder_id_, other->_impl_.folder_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Folder::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto[0]);
}
// ===================================================================

class Project::_Internal {
 public:
  using HasBits = decltype(std::declval<Project>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Project, _impl_._has_bits_);
  static void set_has_project_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_folder_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Project::Project(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.management.v1.Project)
}
Project::Project(const Project& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Project* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.project_id_) {}

    , decltype(_impl_.folder_id_) {}

    , decltype(_impl_.type_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.project_id_, &from._impl_.project_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.project_id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.management.v1.Project)
}

inline void Project::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.project_id_) { ::int64_t{0} }

    , decltype(_impl_.folder_id_) { ::int64_t{0} }

    , decltype(_impl_.type_) { 0 }

  };
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Project::~Project() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.management.v1.Project)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Project::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identifier_.Destroy();
}

void Project::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Project::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.management.v1.Project)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.identifier_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.project_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.project_id_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Project::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 project_id = 1 [json_name = "projectId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_project_id(&has_bits);
          _impl_.project_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 folder_id = 2 [json_name = "folderId", (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_folder_id(&has_bits);
          _impl_.folder_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string identifier = 3 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v1.Project.identifier"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .cavnue.messages.data_warehouse.management.v1.Project.Type type = 4 [json_name = "type", (.gen_bq_schema.bigquery) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::cavnue::messages::data_warehouse::management::v1::Project_Type>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Project::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.management.v1.Project)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 project_id = 1 [json_name = "projectId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_project_id(), target);
  }

  // optional int64 folder_id = 2 [json_name = "folderId", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_folder_id(), target);
  }

  // optional string identifier = 3 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_identifier();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v1.Project.identifier");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional .cavnue.messages.data_warehouse.management.v1.Project.Type type = 4 [json_name = "type", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.management.v1.Project)
  return target;
}

::size_t Project::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.management.v1.Project)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string identifier = 3 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_identifier());
    }

    // optional int64 project_id = 1 [json_name = "projectId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_project_id());
    }

    // optional int64 folder_id = 2 [json_name = "folderId", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_folder_id());
    }

    // optional .cavnue.messages.data_warehouse.management.v1.Project.Type type = 4 [json_name = "type", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Project::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Project::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Project::GetClassData() const { return &_class_data_; }


void Project::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Project*>(&to_msg);
  auto& from = static_cast<const Project&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.management.v1.Project)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.project_id_ = from._impl_.project_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.folder_id_ = from._impl_.folder_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Project::CopyFrom(const Project& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.management.v1.Project)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Project::IsInitialized() const {
  return true;
}

void Project::InternalSwap(Project* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identifier_, lhs_arena,
                                       &other->_impl_.identifier_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Project, _impl_.type_)
      + sizeof(Project::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Project, _impl_.project_id_)>(
          reinterpret_cast<char*>(&_impl_.project_id_),
          reinterpret_cast<char*>(&other->_impl_.project_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Project::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto[1]);
}
// ===================================================================

class Cohort::_Internal {
 public:
  using HasBits = decltype(std::declval<Cohort>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Cohort, _impl_._has_bits_);
  static void set_has_cohort_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_project_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_deployment(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Cohort::Cohort(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.management.v1.Cohort)
}
Cohort::Cohort(const Cohort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Cohort* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.cohort_id_) {}

    , decltype(_impl_.project_id_) {}

    , decltype(_impl_.deployment_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.cohort_id_, &from._impl_.cohort_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.deployment_) -
    reinterpret_cast<char*>(&_impl_.cohort_id_)) + sizeof(_impl_.deployment_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.management.v1.Cohort)
}

inline void Cohort::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.cohort_id_) { ::int64_t{0} }

    , decltype(_impl_.project_id_) { ::int64_t{0} }

    , decltype(_impl_.deployment_) { 0 }

  };
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Cohort::~Cohort() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.management.v1.Cohort)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Cohort::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identifier_.Destroy();
}

void Cohort::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Cohort::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.management.v1.Cohort)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.identifier_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.cohort_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.deployment_) -
        reinterpret_cast<char*>(&_impl_.cohort_id_)) + sizeof(_impl_.deployment_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cohort::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 cohort_id = 1 [json_name = "cohortId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "project_id", (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_cohort_id(&has_bits);
          _impl_.cohort_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 project_id = 2 [json_name = "projectId", (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_project_id(&has_bits);
          _impl_.project_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string identifier = 3 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v1.Cohort.identifier"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .cavnue.messages.common.v1.DataSource.Deployment deployment = 4 [json_name = "deployment", (.gen_bq_schema.bigquery) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_deployment(static_cast<::cavnue::messages::common::v1::DataSource_Deployment>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Cohort::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.management.v1.Cohort)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 cohort_id = 1 [json_name = "cohortId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "project_id", (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_cohort_id(), target);
  }

  // optional int64 project_id = 2 [json_name = "projectId", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_project_id(), target);
  }

  // optional string identifier = 3 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_identifier();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v1.Cohort.identifier");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional .cavnue.messages.common.v1.DataSource.Deployment deployment = 4 [json_name = "deployment", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_deployment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.management.v1.Cohort)
  return target;
}

::size_t Cohort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.management.v1.Cohort)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string identifier = 3 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_identifier());
    }

    // optional int64 cohort_id = 1 [json_name = "cohortId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "project_id", (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_cohort_id());
    }

    // optional int64 project_id = 2 [json_name = "projectId", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_project_id());
    }

    // optional .cavnue.messages.common.v1.DataSource.Deployment deployment = 4 [json_name = "deployment", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_deployment());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Cohort::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Cohort::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Cohort::GetClassData() const { return &_class_data_; }


void Cohort::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Cohort*>(&to_msg);
  auto& from = static_cast<const Cohort&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.management.v1.Cohort)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.cohort_id_ = from._impl_.cohort_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.project_id_ = from._impl_.project_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.deployment_ = from._impl_.deployment_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Cohort::CopyFrom(const Cohort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.management.v1.Cohort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cohort::IsInitialized() const {
  return true;
}

void Cohort::InternalSwap(Cohort* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identifier_, lhs_arena,
                                       &other->_impl_.identifier_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Cohort, _impl_.deployment_)
      + sizeof(Cohort::_impl_.deployment_)
      - PROTOBUF_FIELD_OFFSET(Cohort, _impl_.cohort_id_)>(
          reinterpret_cast<char*>(&_impl_.cohort_id_),
          reinterpret_cast<char*>(&other->_impl_.cohort_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Cohort::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace management
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::management::v1::Folder*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::management::v1::Folder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::management::v1::Folder >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::management::v1::Project*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::management::v1::Project >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::management::v1::Project >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::management::v1::Cohort*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::management::v1::Cohort >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::management::v1::Cohort >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/data_warehouse/management/v1/infrastructure.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "cavnue/third_party/bq/v1/bq_field.pb.h"
#include "cavnue/third_party/bq/v1/bq_table.pb.h"
#include "cavnue/messages/common/v1/common.pb.h"
#include "cavnue/messages/common/v1/field_options.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto;
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace management {
namespace v1 {
class Cohort;
struct CohortDefaultTypeInternal;
extern CohortDefaultTypeInternal _Cohort_default_instance_;
class Folder;
struct FolderDefaultTypeInternal;
extern FolderDefaultTypeInternal _Folder_default_instance_;
class Project;
struct ProjectDefaultTypeInternal;
extern ProjectDefaultTypeInternal _Project_default_instance_;
}  // namespace v1
}  // namespace management
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template <>
::cavnue::messages::data_warehouse::management::v1::Cohort* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::management::v1::Cohort>(Arena*);
template <>
::cavnue::messages::data_warehouse::management::v1::Folder* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::management::v1::Folder>(Arena*);
template <>
::cavnue::messages::data_warehouse::management::v1::Project* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::management::v1::Project>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace management {
namespace v1 {
enum Project_Type : int {
  Project_Type_TYPE_UNSPECIFIED = 0,
  Project_Type_TYPE_PROD = 1,
  Project_Type_TYPE_STAGING = 2,
  Project_Type_TYPE_DEV = 3,
  Project_Type_TYPE_REPLAY = 4,
  Project_Type_Project_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Project_Type_Project_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Project_Type_IsValid(int value);
constexpr Project_Type Project_Type_Type_MIN = static_cast<Project_Type>(0);
constexpr Project_Type Project_Type_Type_MAX = static_cast<Project_Type>(4);
constexpr int Project_Type_Type_ARRAYSIZE = 4 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
Project_Type_descriptor();
template <typename T>
const std::string& Project_Type_Name(T value) {
  static_assert(std::is_same<T, Project_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return Project_Type_Name(static_cast<Project_Type>(value));
}
template <>
inline const std::string& Project_Type_Name(Project_Type value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<Project_Type_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool Project_Type_Parse(absl::string_view name, Project_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Project_Type>(
      Project_Type_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Folder final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.data_warehouse.management.v1.Folder) */ {
 public:
  inline Folder() : Folder(nullptr) {}
  ~Folder() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Folder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Folder(const Folder& from);
  Folder(Folder&& from) noexcept
    : Folder() {
    *this = ::std::move(from);
  }

  inline Folder& operator=(const Folder& from) {
    CopyFrom(from);
    return *this;
  }
  inline Folder& operator=(Folder&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Folder& default_instance() {
    return *internal_default_instance();
  }
  static inline const Folder* internal_default_instance() {
    return reinterpret_cast<const Folder*>(
               &_Folder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Folder& a, Folder& b) {
    a.Swap(&b);
  }
  inline void Swap(Folder* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Folder* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Folder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Folder>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Folder& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Folder& from) {
    Folder::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Folder* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.data_warehouse.management.v1.Folder";
  }
  protected:
  explicit Folder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 2,
    kFolderIdFieldNumber = 1,
  };
  // optional string identifier = 2 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
  bool has_identifier() const;
  void clear_identifier() ;
  const std::string& identifier() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_identifier(Arg_&& arg, Args_... args);
  std::string* mutable_identifier();
  PROTOBUF_NODISCARD std::string* release_identifier();
  void set_allocated_identifier(std::string* ptr);

  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(
      const std::string& value);
  std::string* _internal_mutable_identifier();

  public:
  // optional int64 folder_id = 1 [json_name = "folderId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  bool has_folder_id() const;
  void clear_folder_id() ;
  ::int64_t folder_id() const;
  void set_folder_id(::int64_t value);

  private:
  ::int64_t _internal_folder_id() const;
  void _internal_set_folder_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.data_warehouse.management.v1.Folder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
    ::int64_t folder_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto;
};// -------------------------------------------------------------------

class Project final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.data_warehouse.management.v1.Project) */ {
 public:
  inline Project() : Project(nullptr) {}
  ~Project() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Project(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Project(const Project& from);
  Project(Project&& from) noexcept
    : Project() {
    *this = ::std::move(from);
  }

  inline Project& operator=(const Project& from) {
    CopyFrom(from);
    return *this;
  }
  inline Project& operator=(Project&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Project& default_instance() {
    return *internal_default_instance();
  }
  static inline const Project* internal_default_instance() {
    return reinterpret_cast<const Project*>(
               &_Project_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Project& a, Project& b) {
    a.Swap(&b);
  }
  inline void Swap(Project* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Project* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Project* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Project>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Project& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Project& from) {
    Project::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Project* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.data_warehouse.management.v1.Project";
  }
  protected:
  explicit Project(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Type = Project_Type;
  static constexpr Type TYPE_UNSPECIFIED = Project_Type_TYPE_UNSPECIFIED;
  static constexpr Type TYPE_PROD = Project_Type_TYPE_PROD;
  static constexpr Type TYPE_STAGING = Project_Type_TYPE_STAGING;
  static constexpr Type TYPE_DEV = Project_Type_TYPE_DEV;
  static constexpr Type TYPE_REPLAY = Project_Type_TYPE_REPLAY;
  static inline bool Type_IsValid(int value) {
    return Project_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = Project_Type_Type_MIN;
  static constexpr Type Type_MAX = Project_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = Project_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor() {
    return Project_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return Project_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return Project_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 3,
    kProjectIdFieldNumber = 1,
    kFolderIdFieldNumber = 2,
    kTypeFieldNumber = 4,
  };
  // optional string identifier = 3 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
  bool has_identifier() const;
  void clear_identifier() ;
  const std::string& identifier() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_identifier(Arg_&& arg, Args_... args);
  std::string* mutable_identifier();
  PROTOBUF_NODISCARD std::string* release_identifier();
  void set_allocated_identifier(std::string* ptr);

  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(
      const std::string& value);
  std::string* _internal_mutable_identifier();

  public:
  // optional int64 project_id = 1 [json_name = "projectId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  bool has_project_id() const;
  void clear_project_id() ;
  ::int64_t project_id() const;
  void set_project_id(::int64_t value);

  private:
  ::int64_t _internal_project_id() const;
  void _internal_set_project_id(::int64_t value);

  public:
  // optional int64 folder_id = 2 [json_name = "folderId", (.gen_bq_schema.bigquery) = {
  bool has_folder_id() const;
  void clear_folder_id() ;
  ::int64_t folder_id() const;
  void set_folder_id(::int64_t value);

  private:
  ::int64_t _internal_folder_id() const;
  void _internal_set_folder_id(::int64_t value);

  public:
  // optional .cavnue.messages.data_warehouse.management.v1.Project.Type type = 4 [json_name = "type", (.gen_bq_schema.bigquery) = {
  bool has_type() const;
  void clear_type() ;
  ::cavnue::messages::data_warehouse::management::v1::Project_Type type() const;
  void set_type(::cavnue::messages::data_warehouse::management::v1::Project_Type value);

  private:
  ::cavnue::messages::data_warehouse::management::v1::Project_Type _internal_type() const;
  void _internal_set_type(::cavnue::messages::data_warehouse::management::v1::Project_Type value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.data_warehouse.management.v1.Project)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
    ::int64_t project_id_;
    ::int64_t folder_id_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto;
};// -------------------------------------------------------------------

class Cohort final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.data_warehouse.management.v1.Cohort) */ {
 public:
  inline Cohort() : Cohort(nullptr) {}
  ~Cohort() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Cohort(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Cohort(const Cohort& from);
  Cohort(Cohort&& from) noexcept
    : Cohort() {
    *this = ::std::move(from);
  }

  inline Cohort& operator=(const Cohort& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cohort& operator=(Cohort&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Cohort& default_instance() {
    return *internal_default_instance();
  }
  static inline const Cohort* internal_default_instance() {
    return reinterpret_cast<const Cohort*>(
               &_Cohort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Cohort& a, Cohort& b) {
    a.Swap(&b);
  }
  inline void Swap(Cohort* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cohort* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Cohort* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Cohort>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Cohort& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Cohort& from) {
    Cohort::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cohort* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.data_warehouse.management.v1.Cohort";
  }
  protected:
  explicit Cohort(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 3,
    kCohortIdFieldNumber = 1,
    kProjectIdFieldNumber = 2,
    kDeploymentFieldNumber = 4,
  };
  // optional string identifier = 3 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
  bool has_identifier() const;
  void clear_identifier() ;
  const std::string& identifier() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_identifier(Arg_&& arg, Args_... args);
  std::string* mutable_identifier();
  PROTOBUF_NODISCARD std::string* release_identifier();
  void set_allocated_identifier(std::string* ptr);

  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(
      const std::string& value);
  std::string* _internal_mutable_identifier();

  public:
  // optional int64 cohort_id = 1 [json_name = "cohortId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "project_id", (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  bool has_cohort_id() const;
  void clear_cohort_id() ;
  ::int64_t cohort_id() const;
  void set_cohort_id(::int64_t value);

  private:
  ::int64_t _internal_cohort_id() const;
  void _internal_set_cohort_id(::int64_t value);

  public:
  // optional int64 project_id = 2 [json_name = "projectId", (.gen_bq_schema.bigquery) = {
  bool has_project_id() const;
  void clear_project_id() ;
  ::int64_t project_id() const;
  void set_project_id(::int64_t value);

  private:
  ::int64_t _internal_project_id() const;
  void _internal_set_project_id(::int64_t value);

  public:
  // optional .cavnue.messages.common.v1.DataSource.Deployment deployment = 4 [json_name = "deployment", (.gen_bq_schema.bigquery) = {
  bool has_deployment() const;
  void clear_deployment() ;
  ::cavnue::messages::common::v1::DataSource_Deployment deployment() const;
  void set_deployment(::cavnue::messages::common::v1::DataSource_Deployment value);

  private:
  ::cavnue::messages::common::v1::DataSource_Deployment _internal_deployment() const;
  void _internal_set_deployment(::cavnue::messages::common::v1::DataSource_Deployment value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.data_warehouse.management.v1.Cohort)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
    ::int64_t cohort_id_;
    ::int64_t project_id_;
    int deployment_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Folder

// optional int64 folder_id = 1 [json_name = "folderId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
inline bool Folder::has_folder_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Folder::clear_folder_id() {
  _impl_.folder_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Folder::folder_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.Folder.folder_id)
  return _internal_folder_id();
}
inline void Folder::set_folder_id(::int64_t value) {
  _internal_set_folder_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.Folder.folder_id)
}
inline ::int64_t Folder::_internal_folder_id() const {
  return _impl_.folder_id_;
}
inline void Folder::_internal_set_folder_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.folder_id_ = value;
}

// optional string identifier = 2 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
inline bool Folder::has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Folder::clear_identifier() {
  _impl_.identifier_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Folder::identifier() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.Folder.identifier)
  return _internal_identifier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Folder::set_identifier(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.identifier_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.Folder.identifier)
}
inline std::string* Folder::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v1.Folder.identifier)
  return _s;
}
inline const std::string& Folder::_internal_identifier() const {
  return _impl_.identifier_.Get();
}
inline void Folder::_internal_set_identifier(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* Folder::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.identifier_.Mutable( GetArenaForAllocation());
}
inline std::string* Folder::release_identifier() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v1.Folder.identifier)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.identifier_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Folder::set_allocated_identifier(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.identifier_.IsDefault()) {
          _impl_.identifier_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v1.Folder.identifier)
}

// -------------------------------------------------------------------

// Project

// optional int64 project_id = 1 [json_name = "projectId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
inline bool Project::has_project_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Project::clear_project_id() {
  _impl_.project_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Project::project_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.Project.project_id)
  return _internal_project_id();
}
inline void Project::set_project_id(::int64_t value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.Project.project_id)
}
inline ::int64_t Project::_internal_project_id() const {
  return _impl_.project_id_;
}
inline void Project::_internal_set_project_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.project_id_ = value;
}

// optional int64 folder_id = 2 [json_name = "folderId", (.gen_bq_schema.bigquery) = {
inline bool Project::has_folder_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Project::clear_folder_id() {
  _impl_.folder_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Project::folder_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.Project.folder_id)
  return _internal_folder_id();
}
inline void Project::set_folder_id(::int64_t value) {
  _internal_set_folder_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.Project.folder_id)
}
inline ::int64_t Project::_internal_folder_id() const {
  return _impl_.folder_id_;
}
inline void Project::_internal_set_folder_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.folder_id_ = value;
}

// optional string identifier = 3 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
inline bool Project::has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Project::clear_identifier() {
  _impl_.identifier_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Project::identifier() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.Project.identifier)
  return _internal_identifier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Project::set_identifier(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.identifier_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.Project.identifier)
}
inline std::string* Project::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v1.Project.identifier)
  return _s;
}
inline const std::string& Project::_internal_identifier() const {
  return _impl_.identifier_.Get();
}
inline void Project::_internal_set_identifier(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.identifier_.Mutable( GetArenaForAllocation());
}
inline std::string* Project::release_identifier() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v1.Project.identifier)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.identifier_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Project::set_allocated_identifier(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.identifier_.IsDefault()) {
          _impl_.identifier_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v1.Project.identifier)
}

// optional .cavnue.messages.data_warehouse.management.v1.Project.Type type = 4 [json_name = "type", (.gen_bq_schema.bigquery) = {
inline bool Project::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Project::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::cavnue::messages::data_warehouse::management::v1::Project_Type Project::type() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.Project.type)
  return _internal_type();
}
inline void Project::set_type(::cavnue::messages::data_warehouse::management::v1::Project_Type value) {
   _internal_set_type(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.Project.type)
}
inline ::cavnue::messages::data_warehouse::management::v1::Project_Type Project::_internal_type() const {
  return static_cast<::cavnue::messages::data_warehouse::management::v1::Project_Type>(_impl_.type_);
}
inline void Project::_internal_set_type(::cavnue::messages::data_warehouse::management::v1::Project_Type value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// Cohort

// optional int64 cohort_id = 1 [json_name = "cohortId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "project_id", (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
inline bool Cohort::has_cohort_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Cohort::clear_cohort_id() {
  _impl_.cohort_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Cohort::cohort_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.Cohort.cohort_id)
  return _internal_cohort_id();
}
inline void Cohort::set_cohort_id(::int64_t value) {
  _internal_set_cohort_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.Cohort.cohort_id)
}
inline ::int64_t Cohort::_internal_cohort_id() const {
  return _impl_.cohort_id_;
}
inline void Cohort::_internal_set_cohort_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cohort_id_ = value;
}

// optional int64 project_id = 2 [json_name = "projectId", (.gen_bq_schema.bigquery) = {
inline bool Cohort::has_project_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Cohort::clear_project_id() {
  _impl_.project_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Cohort::project_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.Cohort.project_id)
  return _internal_project_id();
}
inline void Cohort::set_project_id(::int64_t value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.Cohort.project_id)
}
inline ::int64_t Cohort::_internal_project_id() const {
  return _impl_.project_id_;
}
inline void Cohort::_internal_set_project_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.project_id_ = value;
}

// optional string identifier = 3 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
inline bool Cohort::has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Cohort::clear_identifier() {
  _impl_.identifier_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Cohort::identifier() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.Cohort.identifier)
  return _internal_identifier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Cohort::set_identifier(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.identifier_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.Cohort.identifier)
}
inline std::string* Cohort::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v1.Cohort.identifier)
  return _s;
}
inline const std::string& Cohort::_internal_identifier() const {
  return _impl_.identifier_.Get();
}
inline void Cohort::_internal_set_identifier(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* Cohort::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.identifier_.Mutable( GetArenaForAllocation());
}
inline std::string* Cohort::release_identifier() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v1.Cohort.identifier)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.identifier_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Cohort::set_allocated_identifier(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.identifier_.IsDefault()) {
          _impl_.identifier_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v1.Cohort.identifier)
}

// optional .cavnue.messages.common.v1.DataSource.Deployment deployment = 4 [json_name = "deployment", (.gen_bq_schema.bigquery) = {
inline bool Cohort::has_deployment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Cohort::clear_deployment() {
  _impl_.deployment_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::cavnue::messages::common::v1::DataSource_Deployment Cohort::deployment() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.Cohort.deployment)
  return _internal_deployment();
}
inline void Cohort::set_deployment(::cavnue::messages::common::v1::DataSource_Deployment value) {
   _internal_set_deployment(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.Cohort.deployment)
}
inline ::cavnue::messages::common::v1::DataSource_Deployment Cohort::_internal_deployment() const {
  return static_cast<::cavnue::messages::common::v1::DataSource_Deployment>(_impl_.deployment_);
}
inline void Cohort::_internal_set_deployment(::cavnue::messages::common::v1::DataSource_Deployment value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.deployment_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace management
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::cavnue::messages::data_warehouse::management::v1::Project_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::cavnue::messages::data_warehouse::management::v1::Project_Type>() {
  return ::cavnue::messages::data_warehouse::management::v1::Project_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2finfrastructure_2eproto_2epb_2eh

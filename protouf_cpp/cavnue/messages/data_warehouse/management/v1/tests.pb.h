// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/data_warehouse/management/v1/tests.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2ftests_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2ftests_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cavnue/third_party/bq/v1/bq_field.pb.h"
#include "cavnue/third_party/bq/v1/bq_table.pb.h"
#include "cavnue/messages/common/v1/field_options.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2ftests_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2ftests_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2ftests_2eproto;
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace management {
namespace v1 {
class Test;
struct TestDefaultTypeInternal;
extern TestDefaultTypeInternal _Test_default_instance_;
class TestArtifact;
struct TestArtifactDefaultTypeInternal;
extern TestArtifactDefaultTypeInternal _TestArtifact_default_instance_;
class TestArtifactType;
struct TestArtifactTypeDefaultTypeInternal;
extern TestArtifactTypeDefaultTypeInternal _TestArtifactType_default_instance_;
class TestAsset;
struct TestAssetDefaultTypeInternal;
extern TestAssetDefaultTypeInternal _TestAsset_default_instance_;
class TestRun;
struct TestRunDefaultTypeInternal;
extern TestRunDefaultTypeInternal _TestRun_default_instance_;
class Test_TestDefinition;
struct Test_TestDefinitionDefaultTypeInternal;
extern Test_TestDefinitionDefaultTypeInternal _Test_TestDefinition_default_instance_;
}  // namespace v1
}  // namespace management
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template <>
::cavnue::messages::data_warehouse::management::v1::Test* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::management::v1::Test>(Arena*);
template <>
::cavnue::messages::data_warehouse::management::v1::TestArtifact* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::management::v1::TestArtifact>(Arena*);
template <>
::cavnue::messages::data_warehouse::management::v1::TestArtifactType* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::management::v1::TestArtifactType>(Arena*);
template <>
::cavnue::messages::data_warehouse::management::v1::TestAsset* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::management::v1::TestAsset>(Arena*);
template <>
::cavnue::messages::data_warehouse::management::v1::TestRun* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::management::v1::TestRun>(Arena*);
template <>
::cavnue::messages::data_warehouse::management::v1::Test_TestDefinition* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::management::v1::Test_TestDefinition>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace management {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class Test_TestDefinition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.data_warehouse.management.v1.Test.TestDefinition) */ {
 public:
  inline Test_TestDefinition() : Test_TestDefinition(nullptr) {}
  ~Test_TestDefinition() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Test_TestDefinition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Test_TestDefinition(const Test_TestDefinition& from);
  Test_TestDefinition(Test_TestDefinition&& from) noexcept
    : Test_TestDefinition() {
    *this = ::std::move(from);
  }

  inline Test_TestDefinition& operator=(const Test_TestDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline Test_TestDefinition& operator=(Test_TestDefinition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Test_TestDefinition& default_instance() {
    return *internal_default_instance();
  }
  static inline const Test_TestDefinition* internal_default_instance() {
    return reinterpret_cast<const Test_TestDefinition*>(
               &_Test_TestDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Test_TestDefinition& a, Test_TestDefinition& b) {
    a.Swap(&b);
  }
  inline void Swap(Test_TestDefinition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Test_TestDefinition* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Test_TestDefinition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Test_TestDefinition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Test_TestDefinition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Test_TestDefinition& from) {
    Test_TestDefinition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Test_TestDefinition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.data_warehouse.management.v1.Test.TestDefinition";
  }
  protected:
  explicit Test_TestDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHvFieldNumber = 1,
    kTv1FieldNumber = 2,
    kTv2FieldNumber = 3,
    kSvFieldNumber = 4,
  };
  // optional bool hv = 1 [json_name = "hv", (.gen_bq_schema.bigquery) = {
  bool has_hv() const;
  void clear_hv() ;
  bool hv() const;
  void set_hv(bool value);

  private:
  bool _internal_hv() const;
  void _internal_set_hv(bool value);

  public:
  // optional bool tv1 = 2 [json_name = "tv1", (.gen_bq_schema.bigquery) = {
  bool has_tv1() const;
  void clear_tv1() ;
  bool tv1() const;
  void set_tv1(bool value);

  private:
  bool _internal_tv1() const;
  void _internal_set_tv1(bool value);

  public:
  // optional bool tv2 = 3 [json_name = "tv2", (.gen_bq_schema.bigquery) = {
  bool has_tv2() const;
  void clear_tv2() ;
  bool tv2() const;
  void set_tv2(bool value);

  private:
  bool _internal_tv2() const;
  void _internal_set_tv2(bool value);

  public:
  // optional bool sv = 4 [json_name = "sv", (.gen_bq_schema.bigquery) = {
  bool has_sv() const;
  void clear_sv() ;
  bool sv() const;
  void set_sv(bool value);

  private:
  bool _internal_sv() const;
  void _internal_set_sv(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.data_warehouse.management.v1.Test.TestDefinition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool hv_;
    bool tv1_;
    bool tv2_;
    bool sv_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2ftests_2eproto;
};// -------------------------------------------------------------------

class Test final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.data_warehouse.management.v1.Test) */ {
 public:
  inline Test() : Test(nullptr) {}
  ~Test() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Test(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Test(const Test& from);
  Test(Test&& from) noexcept
    : Test() {
    *this = ::std::move(from);
  }

  inline Test& operator=(const Test& from) {
    CopyFrom(from);
    return *this;
  }
  inline Test& operator=(Test&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Test& default_instance() {
    return *internal_default_instance();
  }
  static inline const Test* internal_default_instance() {
    return reinterpret_cast<const Test*>(
               &_Test_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Test& a, Test& b) {
    a.Swap(&b);
  }
  inline void Swap(Test* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Test* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Test* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Test>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Test& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Test& from) {
    Test::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Test* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.data_warehouse.management.v1.Test";
  }
  protected:
  explicit Test(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Test_TestDefinition TestDefinition;

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 2,
    kDefinitionFieldNumber = 3,
    kTestIdFieldNumber = 1,
  };
  // optional string identifier = 2 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
  bool has_identifier() const;
  void clear_identifier() ;
  const std::string& identifier() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_identifier(Arg_&& arg, Args_... args);
  std::string* mutable_identifier();
  PROTOBUF_NODISCARD std::string* release_identifier();
  void set_allocated_identifier(std::string* ptr);

  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(
      const std::string& value);
  std::string* _internal_mutable_identifier();

  public:
  // optional .cavnue.messages.data_warehouse.management.v1.Test.TestDefinition definition = 3 [json_name = "definition", (.gen_bq_schema.bigquery) = {
  bool has_definition() const;
  void clear_definition() ;
  const ::cavnue::messages::data_warehouse::management::v1::Test_TestDefinition& definition() const;
  PROTOBUF_NODISCARD ::cavnue::messages::data_warehouse::management::v1::Test_TestDefinition* release_definition();
  ::cavnue::messages::data_warehouse::management::v1::Test_TestDefinition* mutable_definition();
  void set_allocated_definition(::cavnue::messages::data_warehouse::management::v1::Test_TestDefinition* definition);
  private:
  const ::cavnue::messages::data_warehouse::management::v1::Test_TestDefinition& _internal_definition() const;
  ::cavnue::messages::data_warehouse::management::v1::Test_TestDefinition* _internal_mutable_definition();
  public:
  void unsafe_arena_set_allocated_definition(
      ::cavnue::messages::data_warehouse::management::v1::Test_TestDefinition* definition);
  ::cavnue::messages::data_warehouse::management::v1::Test_TestDefinition* unsafe_arena_release_definition();
  // optional int64 test_id = 1 [json_name = "testId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  bool has_test_id() const;
  void clear_test_id() ;
  ::int64_t test_id() const;
  void set_test_id(::int64_t value);

  private:
  ::int64_t _internal_test_id() const;
  void _internal_set_test_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.data_warehouse.management.v1.Test)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
    ::cavnue::messages::data_warehouse::management::v1::Test_TestDefinition* definition_;
    ::int64_t test_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2ftests_2eproto;
};// -------------------------------------------------------------------

class TestRun final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.data_warehouse.management.v1.TestRun) */ {
 public:
  inline TestRun() : TestRun(nullptr) {}
  ~TestRun() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TestRun(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestRun(const TestRun& from);
  TestRun(TestRun&& from) noexcept
    : TestRun() {
    *this = ::std::move(from);
  }

  inline TestRun& operator=(const TestRun& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestRun& operator=(TestRun&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestRun& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestRun* internal_default_instance() {
    return reinterpret_cast<const TestRun*>(
               &_TestRun_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TestRun& a, TestRun& b) {
    a.Swap(&b);
  }
  inline void Swap(TestRun* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestRun* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestRun* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestRun>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestRun& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestRun& from) {
    TestRun::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestRun* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.data_warehouse.management.v1.TestRun";
  }
  protected:
  explicit TestRun(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 10,
    kTsFieldNumber = 4,
    kTestRunIdFieldNumber = 1,
    kTestIdFieldNumber = 2,
    kCohortIdFieldNumber = 3,
    kDurationFieldNumber = 5,
    kHvFieldNumber = 6,
    kTv1FieldNumber = 7,
    kTv2FieldNumber = 8,
    kSvFieldNumber = 9,
  };
  // string identifier = 10 [json_name = "identifier"];
  void clear_identifier() ;
  const std::string& identifier() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_identifier(Arg_&& arg, Args_... args);
  std::string* mutable_identifier();
  PROTOBUF_NODISCARD std::string* release_identifier();
  void set_allocated_identifier(std::string* ptr);

  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(
      const std::string& value);
  std::string* _internal_mutable_identifier();

  public:
  // optional .google.protobuf.Timestamp ts = 4 [json_name = "ts", (.gen_bq_schema.bigquery) = {
  bool has_ts() const;
  void clear_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_ts();
  void set_allocated_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_ts();
  public:
  void unsafe_arena_set_allocated_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_ts();
  // optional int64 test_run_id = 1 [json_name = "testRunId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "test_id", (.cavnue.messages.common.v1.derivation) = "ts", (.cavnue.messages.common.v1.derivation) = "cohort_id", (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  bool has_test_run_id() const;
  void clear_test_run_id() ;
  ::int64_t test_run_id() const;
  void set_test_run_id(::int64_t value);

  private:
  ::int64_t _internal_test_run_id() const;
  void _internal_set_test_run_id(::int64_t value);

  public:
  // optional int64 test_id = 2 [json_name = "testId", (.gen_bq_schema.bigquery) = {
  bool has_test_id() const;
  void clear_test_id() ;
  ::int64_t test_id() const;
  void set_test_id(::int64_t value);

  private:
  ::int64_t _internal_test_id() const;
  void _internal_set_test_id(::int64_t value);

  public:
  // optional int64 cohort_id = 3 [json_name = "cohortId", (.gen_bq_schema.bigquery) = {
  bool has_cohort_id() const;
  void clear_cohort_id() ;
  ::int64_t cohort_id() const;
  void set_cohort_id(::int64_t value);

  private:
  ::int64_t _internal_cohort_id() const;
  void _internal_set_cohort_id(::int64_t value);

  public:
  // optional int64 duration = 5 [json_name = "duration", (.gen_bq_schema.bigquery) = {
  bool has_duration() const;
  void clear_duration() ;
  ::int64_t duration() const;
  void set_duration(::int64_t value);

  private:
  ::int64_t _internal_duration() const;
  void _internal_set_duration(::int64_t value);

  public:
  // int64 hv = 6 [json_name = "hv"];
  void clear_hv() ;
  ::int64_t hv() const;
  void set_hv(::int64_t value);

  private:
  ::int64_t _internal_hv() const;
  void _internal_set_hv(::int64_t value);

  public:
  // int64 tv1 = 7 [json_name = "tv1"];
  void clear_tv1() ;
  ::int64_t tv1() const;
  void set_tv1(::int64_t value);

  private:
  ::int64_t _internal_tv1() const;
  void _internal_set_tv1(::int64_t value);

  public:
  // int64 tv2 = 8 [json_name = "tv2"];
  void clear_tv2() ;
  ::int64_t tv2() const;
  void set_tv2(::int64_t value);

  private:
  ::int64_t _internal_tv2() const;
  void _internal_set_tv2(::int64_t value);

  public:
  // int64 sv = 9 [json_name = "sv"];
  void clear_sv() ;
  ::int64_t sv() const;
  void set_sv(::int64_t value);

  private:
  ::int64_t _internal_sv() const;
  void _internal_set_sv(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.data_warehouse.management.v1.TestRun)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_;
    ::int64_t test_run_id_;
    ::int64_t test_id_;
    ::int64_t cohort_id_;
    ::int64_t duration_;
    ::int64_t hv_;
    ::int64_t tv1_;
    ::int64_t tv2_;
    ::int64_t sv_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2ftests_2eproto;
};// -------------------------------------------------------------------

class TestArtifact final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.data_warehouse.management.v1.TestArtifact) */ {
 public:
  inline TestArtifact() : TestArtifact(nullptr) {}
  ~TestArtifact() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TestArtifact(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestArtifact(const TestArtifact& from);
  TestArtifact(TestArtifact&& from) noexcept
    : TestArtifact() {
    *this = ::std::move(from);
  }

  inline TestArtifact& operator=(const TestArtifact& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestArtifact& operator=(TestArtifact&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestArtifact& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestArtifact* internal_default_instance() {
    return reinterpret_cast<const TestArtifact*>(
               &_TestArtifact_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TestArtifact& a, TestArtifact& b) {
    a.Swap(&b);
  }
  inline void Swap(TestArtifact* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestArtifact* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestArtifact* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestArtifact>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestArtifact& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestArtifact& from) {
    TestArtifact::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestArtifact* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.data_warehouse.management.v1.TestArtifact";
  }
  protected:
  explicit TestArtifact(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestAssetIdFieldNumber = 3,
    kAssetRoleFieldNumber = 4,
    kUriFieldNumber = 6,
    kTestArtifactIdFieldNumber = 1,
    kTestRunIdFieldNumber = 2,
    kTestArtifactTypeIdFieldNumber = 5,
  };
  // repeated int64 test_asset_id = 3 [json_name = "testAssetId"];
  int test_asset_id_size() const;
  private:
  int _internal_test_asset_id_size() const;

  public:
  void clear_test_asset_id() ;
  ::int64_t test_asset_id(int index) const;
  void set_test_asset_id(int index, ::int64_t value);
  void add_test_asset_id(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& test_asset_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* mutable_test_asset_id();

  private:
  ::int64_t _internal_test_asset_id(int index) const;
  void _internal_add_test_asset_id(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& _internal_test_asset_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* _internal_mutable_test_asset_id();

  public:
  // repeated string asset_role = 4 [json_name = "assetRole"];
  int asset_role_size() const;
  private:
  int _internal_asset_role_size() const;

  public:
  void clear_asset_role() ;
  const std::string& asset_role(int index) const;
  std::string* mutable_asset_role(int index);
  void set_asset_role(int index, const std::string& value);
  void set_asset_role(int index, std::string&& value);
  void set_asset_role(int index, const char* value);
  void set_asset_role(int index, const char* value, std::size_t size);
  void set_asset_role(int index, absl::string_view value);
  std::string* add_asset_role();
  void add_asset_role(const std::string& value);
  void add_asset_role(std::string&& value);
  void add_asset_role(const char* value);
  void add_asset_role(const char* value, std::size_t size);
  void add_asset_role(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& asset_role() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_asset_role();

  private:
  const std::string& _internal_asset_role(int index) const;
  std::string* _internal_add_asset_role();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_asset_role() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_asset_role();

  public:
  // optional string uri = 6 [json_name = "uri", (.gen_bq_schema.bigquery) = {
  bool has_uri() const;
  void clear_uri() ;
  const std::string& uri() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uri(Arg_&& arg, Args_... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* ptr);

  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(
      const std::string& value);
  std::string* _internal_mutable_uri();

  public:
  // optional int64 test_artifact_id = 1 [json_name = "testArtifactId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "uri", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  bool has_test_artifact_id() const;
  void clear_test_artifact_id() ;
  ::int64_t test_artifact_id() const;
  void set_test_artifact_id(::int64_t value);

  private:
  ::int64_t _internal_test_artifact_id() const;
  void _internal_set_test_artifact_id(::int64_t value);

  public:
  // optional int64 test_run_id = 2 [json_name = "testRunId", (.gen_bq_schema.bigquery) = {
  bool has_test_run_id() const;
  void clear_test_run_id() ;
  ::int64_t test_run_id() const;
  void set_test_run_id(::int64_t value);

  private:
  ::int64_t _internal_test_run_id() const;
  void _internal_set_test_run_id(::int64_t value);

  public:
  // optional int64 test_artifact_type_id = 5 [json_name = "testArtifactTypeId", (.gen_bq_schema.bigquery) = {
  bool has_test_artifact_type_id() const;
  void clear_test_artifact_type_id() ;
  ::int64_t test_artifact_type_id() const;
  void set_test_artifact_type_id(::int64_t value);

  private:
  ::int64_t _internal_test_artifact_type_id() const;
  void _internal_set_test_artifact_type_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.data_warehouse.management.v1.TestArtifact)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t> test_asset_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _test_asset_id_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> asset_role_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
    ::int64_t test_artifact_id_;
    ::int64_t test_run_id_;
    ::int64_t test_artifact_type_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2ftests_2eproto;
};// -------------------------------------------------------------------

class TestAsset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.data_warehouse.management.v1.TestAsset) */ {
 public:
  inline TestAsset() : TestAsset(nullptr) {}
  ~TestAsset() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TestAsset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestAsset(const TestAsset& from);
  TestAsset(TestAsset&& from) noexcept
    : TestAsset() {
    *this = ::std::move(from);
  }

  inline TestAsset& operator=(const TestAsset& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestAsset& operator=(TestAsset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestAsset& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestAsset* internal_default_instance() {
    return reinterpret_cast<const TestAsset*>(
               &_TestAsset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TestAsset& a, TestAsset& b) {
    a.Swap(&b);
  }
  inline void Swap(TestAsset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestAsset* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestAsset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestAsset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestAsset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestAsset& from) {
    TestAsset::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestAsset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.data_warehouse.management.v1.TestAsset";
  }
  protected:
  explicit TestAsset(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 2,
    kTestAssetIdFieldNumber = 1,
    kVersionFieldNumber = 3,
  };
  // optional string identifier = 2 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
  bool has_identifier() const;
  void clear_identifier() ;
  const std::string& identifier() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_identifier(Arg_&& arg, Args_... args);
  std::string* mutable_identifier();
  PROTOBUF_NODISCARD std::string* release_identifier();
  void set_allocated_identifier(std::string* ptr);

  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(
      const std::string& value);
  std::string* _internal_mutable_identifier();

  public:
  // optional int64 test_asset_id = 1 [json_name = "testAssetId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.derivation) = "version", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  bool has_test_asset_id() const;
  void clear_test_asset_id() ;
  ::int64_t test_asset_id() const;
  void set_test_asset_id(::int64_t value);

  private:
  ::int64_t _internal_test_asset_id() const;
  void _internal_set_test_asset_id(::int64_t value);

  public:
  // optional int64 version = 3 [json_name = "version", (.gen_bq_schema.bigquery) = {
  bool has_version() const;
  void clear_version() ;
  ::int64_t version() const;
  void set_version(::int64_t value);

  private:
  ::int64_t _internal_version() const;
  void _internal_set_version(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.data_warehouse.management.v1.TestAsset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
    ::int64_t test_asset_id_;
    ::int64_t version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2ftests_2eproto;
};// -------------------------------------------------------------------

class TestArtifactType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.data_warehouse.management.v1.TestArtifactType) */ {
 public:
  inline TestArtifactType() : TestArtifactType(nullptr) {}
  ~TestArtifactType() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TestArtifactType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestArtifactType(const TestArtifactType& from);
  TestArtifactType(TestArtifactType&& from) noexcept
    : TestArtifactType() {
    *this = ::std::move(from);
  }

  inline TestArtifactType& operator=(const TestArtifactType& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestArtifactType& operator=(TestArtifactType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestArtifactType& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestArtifactType* internal_default_instance() {
    return reinterpret_cast<const TestArtifactType*>(
               &_TestArtifactType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TestArtifactType& a, TestArtifactType& b) {
    a.Swap(&b);
  }
  inline void Swap(TestArtifactType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestArtifactType* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestArtifactType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestArtifactType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestArtifactType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestArtifactType& from) {
    TestArtifactType::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestArtifactType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.data_warehouse.management.v1.TestArtifactType";
  }
  protected:
  explicit TestArtifactType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 2,
    kTestArtifactTypeIdFieldNumber = 1,
    kVersionFieldNumber = 3,
  };
  // optional string identifier = 2 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
  bool has_identifier() const;
  void clear_identifier() ;
  const std::string& identifier() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_identifier(Arg_&& arg, Args_... args);
  std::string* mutable_identifier();
  PROTOBUF_NODISCARD std::string* release_identifier();
  void set_allocated_identifier(std::string* ptr);

  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(
      const std::string& value);
  std::string* _internal_mutable_identifier();

  public:
  // optional int64 test_artifact_type_id = 1 [json_name = "testArtifactTypeId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.derivation) = "version", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  bool has_test_artifact_type_id() const;
  void clear_test_artifact_type_id() ;
  ::int64_t test_artifact_type_id() const;
  void set_test_artifact_type_id(::int64_t value);

  private:
  ::int64_t _internal_test_artifact_type_id() const;
  void _internal_set_test_artifact_type_id(::int64_t value);

  public:
  // optional int64 version = 3 [json_name = "version", (.gen_bq_schema.bigquery) = {
  bool has_version() const;
  void clear_version() ;
  ::int64_t version() const;
  void set_version(::int64_t value);

  private:
  ::int64_t _internal_version() const;
  void _internal_set_version(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.data_warehouse.management.v1.TestArtifactType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
    ::int64_t test_artifact_type_id_;
    ::int64_t version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2ftests_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Test_TestDefinition

// optional bool hv = 1 [json_name = "hv", (.gen_bq_schema.bigquery) = {
inline bool Test_TestDefinition::has_hv() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Test_TestDefinition::clear_hv() {
  _impl_.hv_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool Test_TestDefinition::hv() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.Test.TestDefinition.hv)
  return _internal_hv();
}
inline void Test_TestDefinition::set_hv(bool value) {
  _internal_set_hv(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.Test.TestDefinition.hv)
}
inline bool Test_TestDefinition::_internal_hv() const {
  return _impl_.hv_;
}
inline void Test_TestDefinition::_internal_set_hv(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hv_ = value;
}

// optional bool tv1 = 2 [json_name = "tv1", (.gen_bq_schema.bigquery) = {
inline bool Test_TestDefinition::has_tv1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Test_TestDefinition::clear_tv1() {
  _impl_.tv1_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool Test_TestDefinition::tv1() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.Test.TestDefinition.tv1)
  return _internal_tv1();
}
inline void Test_TestDefinition::set_tv1(bool value) {
  _internal_set_tv1(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.Test.TestDefinition.tv1)
}
inline bool Test_TestDefinition::_internal_tv1() const {
  return _impl_.tv1_;
}
inline void Test_TestDefinition::_internal_set_tv1(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.tv1_ = value;
}

// optional bool tv2 = 3 [json_name = "tv2", (.gen_bq_schema.bigquery) = {
inline bool Test_TestDefinition::has_tv2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Test_TestDefinition::clear_tv2() {
  _impl_.tv2_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool Test_TestDefinition::tv2() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.Test.TestDefinition.tv2)
  return _internal_tv2();
}
inline void Test_TestDefinition::set_tv2(bool value) {
  _internal_set_tv2(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.Test.TestDefinition.tv2)
}
inline bool Test_TestDefinition::_internal_tv2() const {
  return _impl_.tv2_;
}
inline void Test_TestDefinition::_internal_set_tv2(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.tv2_ = value;
}

// optional bool sv = 4 [json_name = "sv", (.gen_bq_schema.bigquery) = {
inline bool Test_TestDefinition::has_sv() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Test_TestDefinition::clear_sv() {
  _impl_.sv_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool Test_TestDefinition::sv() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.Test.TestDefinition.sv)
  return _internal_sv();
}
inline void Test_TestDefinition::set_sv(bool value) {
  _internal_set_sv(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.Test.TestDefinition.sv)
}
inline bool Test_TestDefinition::_internal_sv() const {
  return _impl_.sv_;
}
inline void Test_TestDefinition::_internal_set_sv(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.sv_ = value;
}

// -------------------------------------------------------------------

// Test

// optional int64 test_id = 1 [json_name = "testId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
inline bool Test::has_test_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Test::clear_test_id() {
  _impl_.test_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Test::test_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.Test.test_id)
  return _internal_test_id();
}
inline void Test::set_test_id(::int64_t value) {
  _internal_set_test_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.Test.test_id)
}
inline ::int64_t Test::_internal_test_id() const {
  return _impl_.test_id_;
}
inline void Test::_internal_set_test_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.test_id_ = value;
}

// optional string identifier = 2 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
inline bool Test::has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Test::clear_identifier() {
  _impl_.identifier_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Test::identifier() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.Test.identifier)
  return _internal_identifier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Test::set_identifier(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.identifier_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.Test.identifier)
}
inline std::string* Test::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v1.Test.identifier)
  return _s;
}
inline const std::string& Test::_internal_identifier() const {
  return _impl_.identifier_.Get();
}
inline void Test::_internal_set_identifier(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* Test::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.identifier_.Mutable( GetArenaForAllocation());
}
inline std::string* Test::release_identifier() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v1.Test.identifier)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.identifier_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Test::set_allocated_identifier(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.identifier_.IsDefault()) {
          _impl_.identifier_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v1.Test.identifier)
}

// optional .cavnue.messages.data_warehouse.management.v1.Test.TestDefinition definition = 3 [json_name = "definition", (.gen_bq_schema.bigquery) = {
inline bool Test::has_definition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.definition_ != nullptr);
  return value;
}
inline void Test::clear_definition() {
  if (_impl_.definition_ != nullptr) _impl_.definition_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::cavnue::messages::data_warehouse::management::v1::Test_TestDefinition& Test::_internal_definition() const {
  const ::cavnue::messages::data_warehouse::management::v1::Test_TestDefinition* p = _impl_.definition_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::data_warehouse::management::v1::Test_TestDefinition&>(
      ::cavnue::messages::data_warehouse::management::v1::_Test_TestDefinition_default_instance_);
}
inline const ::cavnue::messages::data_warehouse::management::v1::Test_TestDefinition& Test::definition() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.Test.definition)
  return _internal_definition();
}
inline void Test::unsafe_arena_set_allocated_definition(
    ::cavnue::messages::data_warehouse::management::v1::Test_TestDefinition* definition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.definition_);
  }
  _impl_.definition_ = definition;
  if (definition) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.data_warehouse.management.v1.Test.definition)
}
inline ::cavnue::messages::data_warehouse::management::v1::Test_TestDefinition* Test::release_definition() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::data_warehouse::management::v1::Test_TestDefinition* temp = _impl_.definition_;
  _impl_.definition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::data_warehouse::management::v1::Test_TestDefinition* Test::unsafe_arena_release_definition() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v1.Test.definition)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::data_warehouse::management::v1::Test_TestDefinition* temp = _impl_.definition_;
  _impl_.definition_ = nullptr;
  return temp;
}
inline ::cavnue::messages::data_warehouse::management::v1::Test_TestDefinition* Test::_internal_mutable_definition() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.definition_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::data_warehouse::management::v1::Test_TestDefinition>(GetArenaForAllocation());
    _impl_.definition_ = p;
  }
  return _impl_.definition_;
}
inline ::cavnue::messages::data_warehouse::management::v1::Test_TestDefinition* Test::mutable_definition() {
  ::cavnue::messages::data_warehouse::management::v1::Test_TestDefinition* _msg = _internal_mutable_definition();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v1.Test.definition)
  return _msg;
}
inline void Test::set_allocated_definition(::cavnue::messages::data_warehouse::management::v1::Test_TestDefinition* definition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.definition_;
  }
  if (definition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(definition);
    if (message_arena != submessage_arena) {
      definition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, definition, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.definition_ = definition;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v1.Test.definition)
}

// -------------------------------------------------------------------

// TestRun

// optional int64 test_run_id = 1 [json_name = "testRunId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "test_id", (.cavnue.messages.common.v1.derivation) = "ts", (.cavnue.messages.common.v1.derivation) = "cohort_id", (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
inline bool TestRun::has_test_run_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TestRun::clear_test_run_id() {
  _impl_.test_run_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t TestRun::test_run_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.TestRun.test_run_id)
  return _internal_test_run_id();
}
inline void TestRun::set_test_run_id(::int64_t value) {
  _internal_set_test_run_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.TestRun.test_run_id)
}
inline ::int64_t TestRun::_internal_test_run_id() const {
  return _impl_.test_run_id_;
}
inline void TestRun::_internal_set_test_run_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.test_run_id_ = value;
}

// optional int64 test_id = 2 [json_name = "testId", (.gen_bq_schema.bigquery) = {
inline bool TestRun::has_test_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TestRun::clear_test_id() {
  _impl_.test_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t TestRun::test_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.TestRun.test_id)
  return _internal_test_id();
}
inline void TestRun::set_test_id(::int64_t value) {
  _internal_set_test_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.TestRun.test_id)
}
inline ::int64_t TestRun::_internal_test_id() const {
  return _impl_.test_id_;
}
inline void TestRun::_internal_set_test_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.test_id_ = value;
}

// optional int64 cohort_id = 3 [json_name = "cohortId", (.gen_bq_schema.bigquery) = {
inline bool TestRun::has_cohort_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void TestRun::clear_cohort_id() {
  _impl_.cohort_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t TestRun::cohort_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.TestRun.cohort_id)
  return _internal_cohort_id();
}
inline void TestRun::set_cohort_id(::int64_t value) {
  _internal_set_cohort_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.TestRun.cohort_id)
}
inline ::int64_t TestRun::_internal_cohort_id() const {
  return _impl_.cohort_id_;
}
inline void TestRun::_internal_set_cohort_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.cohort_id_ = value;
}

// optional .google.protobuf.Timestamp ts = 4 [json_name = "ts", (.gen_bq_schema.bigquery) = {
inline bool TestRun::has_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TestRun::_internal_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TestRun::ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.TestRun.ts)
  return _internal_ts();
}
inline void TestRun::unsafe_arena_set_allocated_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_);
  }
  _impl_.ts_ = ts;
  if (ts) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.data_warehouse.management.v1.TestRun.ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TestRun::release_ts() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_;
  _impl_.ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TestRun::unsafe_arena_release_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v1.TestRun.ts)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_;
  _impl_.ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TestRun::_internal_mutable_ts() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.ts_ = p;
  }
  return _impl_.ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TestRun::mutable_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v1.TestRun.ts)
  return _msg;
}
inline void TestRun::set_allocated_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_);
  }
  if (ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts));
    if (message_arena != submessage_arena) {
      ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ts_ = ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v1.TestRun.ts)
}

// optional int64 duration = 5 [json_name = "duration", (.gen_bq_schema.bigquery) = {
inline bool TestRun::has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void TestRun::clear_duration() {
  _impl_.duration_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t TestRun::duration() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.TestRun.duration)
  return _internal_duration();
}
inline void TestRun::set_duration(::int64_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.TestRun.duration)
}
inline ::int64_t TestRun::_internal_duration() const {
  return _impl_.duration_;
}
inline void TestRun::_internal_set_duration(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.duration_ = value;
}

// int64 hv = 6 [json_name = "hv"];
inline void TestRun::clear_hv() {
  _impl_.hv_ = ::int64_t{0};
}
inline ::int64_t TestRun::hv() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.TestRun.hv)
  return _internal_hv();
}
inline void TestRun::set_hv(::int64_t value) {
  _internal_set_hv(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.TestRun.hv)
}
inline ::int64_t TestRun::_internal_hv() const {
  return _impl_.hv_;
}
inline void TestRun::_internal_set_hv(::int64_t value) {
  ;
  _impl_.hv_ = value;
}

// int64 tv1 = 7 [json_name = "tv1"];
inline void TestRun::clear_tv1() {
  _impl_.tv1_ = ::int64_t{0};
}
inline ::int64_t TestRun::tv1() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.TestRun.tv1)
  return _internal_tv1();
}
inline void TestRun::set_tv1(::int64_t value) {
  _internal_set_tv1(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.TestRun.tv1)
}
inline ::int64_t TestRun::_internal_tv1() const {
  return _impl_.tv1_;
}
inline void TestRun::_internal_set_tv1(::int64_t value) {
  ;
  _impl_.tv1_ = value;
}

// int64 tv2 = 8 [json_name = "tv2"];
inline void TestRun::clear_tv2() {
  _impl_.tv2_ = ::int64_t{0};
}
inline ::int64_t TestRun::tv2() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.TestRun.tv2)
  return _internal_tv2();
}
inline void TestRun::set_tv2(::int64_t value) {
  _internal_set_tv2(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.TestRun.tv2)
}
inline ::int64_t TestRun::_internal_tv2() const {
  return _impl_.tv2_;
}
inline void TestRun::_internal_set_tv2(::int64_t value) {
  ;
  _impl_.tv2_ = value;
}

// int64 sv = 9 [json_name = "sv"];
inline void TestRun::clear_sv() {
  _impl_.sv_ = ::int64_t{0};
}
inline ::int64_t TestRun::sv() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.TestRun.sv)
  return _internal_sv();
}
inline void TestRun::set_sv(::int64_t value) {
  _internal_set_sv(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.TestRun.sv)
}
inline ::int64_t TestRun::_internal_sv() const {
  return _impl_.sv_;
}
inline void TestRun::_internal_set_sv(::int64_t value) {
  ;
  _impl_.sv_ = value;
}

// string identifier = 10 [json_name = "identifier"];
inline void TestRun::clear_identifier() {
  _impl_.identifier_.ClearToEmpty();
}
inline const std::string& TestRun::identifier() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.TestRun.identifier)
  return _internal_identifier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TestRun::set_identifier(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.identifier_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.TestRun.identifier)
}
inline std::string* TestRun::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v1.TestRun.identifier)
  return _s;
}
inline const std::string& TestRun::_internal_identifier() const {
  return _impl_.identifier_.Get();
}
inline void TestRun::_internal_set_identifier(const std::string& value) {
  ;


  _impl_.identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* TestRun::_internal_mutable_identifier() {
  ;
  return _impl_.identifier_.Mutable( GetArenaForAllocation());
}
inline std::string* TestRun::release_identifier() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v1.TestRun.identifier)
  return _impl_.identifier_.Release();
}
inline void TestRun::set_allocated_identifier(std::string* value) {
  _impl_.identifier_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.identifier_.IsDefault()) {
          _impl_.identifier_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v1.TestRun.identifier)
}

// -------------------------------------------------------------------

// TestArtifact

// optional int64 test_artifact_id = 1 [json_name = "testArtifactId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "uri", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
inline bool TestArtifact::has_test_artifact_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TestArtifact::clear_test_artifact_id() {
  _impl_.test_artifact_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t TestArtifact::test_artifact_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.TestArtifact.test_artifact_id)
  return _internal_test_artifact_id();
}
inline void TestArtifact::set_test_artifact_id(::int64_t value) {
  _internal_set_test_artifact_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.TestArtifact.test_artifact_id)
}
inline ::int64_t TestArtifact::_internal_test_artifact_id() const {
  return _impl_.test_artifact_id_;
}
inline void TestArtifact::_internal_set_test_artifact_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.test_artifact_id_ = value;
}

// optional int64 test_run_id = 2 [json_name = "testRunId", (.gen_bq_schema.bigquery) = {
inline bool TestArtifact::has_test_run_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TestArtifact::clear_test_run_id() {
  _impl_.test_run_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t TestArtifact::test_run_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.TestArtifact.test_run_id)
  return _internal_test_run_id();
}
inline void TestArtifact::set_test_run_id(::int64_t value) {
  _internal_set_test_run_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.TestArtifact.test_run_id)
}
inline ::int64_t TestArtifact::_internal_test_run_id() const {
  return _impl_.test_run_id_;
}
inline void TestArtifact::_internal_set_test_run_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.test_run_id_ = value;
}

// repeated int64 test_asset_id = 3 [json_name = "testAssetId"];
inline int TestArtifact::_internal_test_asset_id_size() const {
  return _impl_.test_asset_id_.size();
}
inline int TestArtifact::test_asset_id_size() const {
  return _internal_test_asset_id_size();
}
inline void TestArtifact::clear_test_asset_id() {
  _internal_mutable_test_asset_id()->Clear();
}
inline ::int64_t TestArtifact::test_asset_id(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.TestArtifact.test_asset_id)
  return _internal_test_asset_id(index);
}
inline void TestArtifact::set_test_asset_id(int index, ::int64_t value) {
  _internal_mutable_test_asset_id()->Set(index, value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.TestArtifact.test_asset_id)
}
inline void TestArtifact::add_test_asset_id(::int64_t value) {
  _internal_add_test_asset_id(value);
  // @@protoc_insertion_point(field_add:cavnue.messages.data_warehouse.management.v1.TestArtifact.test_asset_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& TestArtifact::test_asset_id() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.data_warehouse.management.v1.TestArtifact.test_asset_id)
  return _internal_test_asset_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* TestArtifact::mutable_test_asset_id() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.data_warehouse.management.v1.TestArtifact.test_asset_id)
  return _internal_mutable_test_asset_id();
}

inline ::int64_t TestArtifact::_internal_test_asset_id(int index) const {
  return _internal_test_asset_id().Get(index);
}
inline void TestArtifact::_internal_add_test_asset_id(::int64_t value) {
  _internal_mutable_test_asset_id()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& TestArtifact::_internal_test_asset_id() const {
  return _impl_.test_asset_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* TestArtifact::_internal_mutable_test_asset_id() {
  return &_impl_.test_asset_id_;
}

// repeated string asset_role = 4 [json_name = "assetRole"];
inline int TestArtifact::_internal_asset_role_size() const {
  return _impl_.asset_role_.size();
}
inline int TestArtifact::asset_role_size() const {
  return _internal_asset_role_size();
}
inline void TestArtifact::clear_asset_role() {
  _internal_mutable_asset_role()->Clear();
}
inline std::string* TestArtifact::add_asset_role() {
  std::string* _s = _internal_add_asset_role();
  // @@protoc_insertion_point(field_add_mutable:cavnue.messages.data_warehouse.management.v1.TestArtifact.asset_role)
  return _s;
}
inline const std::string& TestArtifact::asset_role(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.TestArtifact.asset_role)
  return _internal_asset_role(index);
}
inline std::string* TestArtifact::mutable_asset_role(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v1.TestArtifact.asset_role)
  return _internal_mutable_asset_role()->Mutable(index);
}
inline void TestArtifact::set_asset_role(int index, const std::string& value) {
  _internal_mutable_asset_role()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.TestArtifact.asset_role)
}
inline void TestArtifact::set_asset_role(int index, std::string&& value) {
  _internal_mutable_asset_role()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.TestArtifact.asset_role)
}
inline void TestArtifact::set_asset_role(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_asset_role()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cavnue.messages.data_warehouse.management.v1.TestArtifact.asset_role)
}
inline void TestArtifact::set_asset_role(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_asset_role()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cavnue.messages.data_warehouse.management.v1.TestArtifact.asset_role)
}
inline void TestArtifact::set_asset_role(int index, absl::string_view value) {
  _internal_mutable_asset_role()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:cavnue.messages.data_warehouse.management.v1.TestArtifact.asset_role)
}
inline void TestArtifact::add_asset_role(const std::string& value) {
  _internal_mutable_asset_role()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:cavnue.messages.data_warehouse.management.v1.TestArtifact.asset_role)
}
inline void TestArtifact::add_asset_role(std::string&& value) {
  _internal_mutable_asset_role()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:cavnue.messages.data_warehouse.management.v1.TestArtifact.asset_role)
}
inline void TestArtifact::add_asset_role(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_asset_role()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cavnue.messages.data_warehouse.management.v1.TestArtifact.asset_role)
}
inline void TestArtifact::add_asset_role(const char* value, std::size_t size) {
  _internal_mutable_asset_role()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cavnue.messages.data_warehouse.management.v1.TestArtifact.asset_role)
}
inline void TestArtifact::add_asset_role(absl::string_view value) {
  _internal_mutable_asset_role()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:cavnue.messages.data_warehouse.management.v1.TestArtifact.asset_role)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestArtifact::asset_role() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.data_warehouse.management.v1.TestArtifact.asset_role)
  return _internal_asset_role();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* TestArtifact::mutable_asset_role() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.data_warehouse.management.v1.TestArtifact.asset_role)
  return _internal_mutable_asset_role();
}
inline const std::string& TestArtifact::_internal_asset_role(int index) const {
  return _internal_asset_role().Get(index);
}
inline std::string* TestArtifact::_internal_add_asset_role() {
  return _internal_mutable_asset_role()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestArtifact::_internal_asset_role() const {
  return _impl_.asset_role_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestArtifact::_internal_mutable_asset_role() {
  return &_impl_.asset_role_;
}

// optional int64 test_artifact_type_id = 5 [json_name = "testArtifactTypeId", (.gen_bq_schema.bigquery) = {
inline bool TestArtifact::has_test_artifact_type_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void TestArtifact::clear_test_artifact_type_id() {
  _impl_.test_artifact_type_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t TestArtifact::test_artifact_type_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.TestArtifact.test_artifact_type_id)
  return _internal_test_artifact_type_id();
}
inline void TestArtifact::set_test_artifact_type_id(::int64_t value) {
  _internal_set_test_artifact_type_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.TestArtifact.test_artifact_type_id)
}
inline ::int64_t TestArtifact::_internal_test_artifact_type_id() const {
  return _impl_.test_artifact_type_id_;
}
inline void TestArtifact::_internal_set_test_artifact_type_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.test_artifact_type_id_ = value;
}

// optional string uri = 6 [json_name = "uri", (.gen_bq_schema.bigquery) = {
inline bool TestArtifact::has_uri() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TestArtifact::clear_uri() {
  _impl_.uri_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestArtifact::uri() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.TestArtifact.uri)
  return _internal_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TestArtifact::set_uri(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.uri_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.TestArtifact.uri)
}
inline std::string* TestArtifact::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v1.TestArtifact.uri)
  return _s;
}
inline const std::string& TestArtifact::_internal_uri() const {
  return _impl_.uri_.Get();
}
inline void TestArtifact::_internal_set_uri(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* TestArtifact::_internal_mutable_uri() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.uri_.Mutable( GetArenaForAllocation());
}
inline std::string* TestArtifact::release_uri() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v1.TestArtifact.uri)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.uri_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uri_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TestArtifact::set_allocated_uri(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.uri_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uri_.IsDefault()) {
          _impl_.uri_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v1.TestArtifact.uri)
}

// -------------------------------------------------------------------

// TestAsset

// optional int64 test_asset_id = 1 [json_name = "testAssetId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.derivation) = "version", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
inline bool TestAsset::has_test_asset_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TestAsset::clear_test_asset_id() {
  _impl_.test_asset_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t TestAsset::test_asset_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.TestAsset.test_asset_id)
  return _internal_test_asset_id();
}
inline void TestAsset::set_test_asset_id(::int64_t value) {
  _internal_set_test_asset_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.TestAsset.test_asset_id)
}
inline ::int64_t TestAsset::_internal_test_asset_id() const {
  return _impl_.test_asset_id_;
}
inline void TestAsset::_internal_set_test_asset_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.test_asset_id_ = value;
}

// optional string identifier = 2 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
inline bool TestAsset::has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TestAsset::clear_identifier() {
  _impl_.identifier_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestAsset::identifier() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.TestAsset.identifier)
  return _internal_identifier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TestAsset::set_identifier(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.identifier_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.TestAsset.identifier)
}
inline std::string* TestAsset::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v1.TestAsset.identifier)
  return _s;
}
inline const std::string& TestAsset::_internal_identifier() const {
  return _impl_.identifier_.Get();
}
inline void TestAsset::_internal_set_identifier(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* TestAsset::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.identifier_.Mutable( GetArenaForAllocation());
}
inline std::string* TestAsset::release_identifier() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v1.TestAsset.identifier)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.identifier_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TestAsset::set_allocated_identifier(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.identifier_.IsDefault()) {
          _impl_.identifier_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v1.TestAsset.identifier)
}

// optional int64 version = 3 [json_name = "version", (.gen_bq_schema.bigquery) = {
inline bool TestAsset::has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TestAsset::clear_version() {
  _impl_.version_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t TestAsset::version() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.TestAsset.version)
  return _internal_version();
}
inline void TestAsset::set_version(::int64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.TestAsset.version)
}
inline ::int64_t TestAsset::_internal_version() const {
  return _impl_.version_;
}
inline void TestAsset::_internal_set_version(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.version_ = value;
}

// -------------------------------------------------------------------

// TestArtifactType

// optional int64 test_artifact_type_id = 1 [json_name = "testArtifactTypeId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.derivation) = "version", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
inline bool TestArtifactType::has_test_artifact_type_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TestArtifactType::clear_test_artifact_type_id() {
  _impl_.test_artifact_type_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t TestArtifactType::test_artifact_type_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.TestArtifactType.test_artifact_type_id)
  return _internal_test_artifact_type_id();
}
inline void TestArtifactType::set_test_artifact_type_id(::int64_t value) {
  _internal_set_test_artifact_type_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.TestArtifactType.test_artifact_type_id)
}
inline ::int64_t TestArtifactType::_internal_test_artifact_type_id() const {
  return _impl_.test_artifact_type_id_;
}
inline void TestArtifactType::_internal_set_test_artifact_type_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.test_artifact_type_id_ = value;
}

// optional string identifier = 2 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
inline bool TestArtifactType::has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TestArtifactType::clear_identifier() {
  _impl_.identifier_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestArtifactType::identifier() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.TestArtifactType.identifier)
  return _internal_identifier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TestArtifactType::set_identifier(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.identifier_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.TestArtifactType.identifier)
}
inline std::string* TestArtifactType::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v1.TestArtifactType.identifier)
  return _s;
}
inline const std::string& TestArtifactType::_internal_identifier() const {
  return _impl_.identifier_.Get();
}
inline void TestArtifactType::_internal_set_identifier(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* TestArtifactType::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.identifier_.Mutable( GetArenaForAllocation());
}
inline std::string* TestArtifactType::release_identifier() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v1.TestArtifactType.identifier)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.identifier_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TestArtifactType::set_allocated_identifier(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.identifier_.IsDefault()) {
          _impl_.identifier_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v1.TestArtifactType.identifier)
}

// optional int64 version = 3 [json_name = "version", (.gen_bq_schema.bigquery) = {
inline bool TestArtifactType::has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TestArtifactType::clear_version() {
  _impl_.version_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t TestArtifactType::version() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v1.TestArtifactType.version)
  return _internal_version();
}
inline void TestArtifactType::set_version(::int64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v1.TestArtifactType.version)
}
inline ::int64_t TestArtifactType::_internal_version() const {
  return _impl_.version_;
}
inline void TestArtifactType::_internal_set_version(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.version_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace management
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv1_2ftests_2eproto_2epb_2eh

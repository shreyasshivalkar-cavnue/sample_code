// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/data_warehouse/management/v2/vehicle_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fvehicle_5fstate_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fvehicle_5fstate_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cavnue/third_party/bq/v1/bq_field.pb.h"
#include "cavnue/third_party/bq/v1/bq_table.pb.h"
#include "cavnue/messages/common/v1/field_options.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fvehicle_5fstate_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fvehicle_5fstate_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fvehicle_5fstate_2eproto;
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace management {
namespace v2 {
class VehicleState;
struct VehicleStateDefaultTypeInternal;
extern VehicleStateDefaultTypeInternal _VehicleState_default_instance_;
}  // namespace v2
}  // namespace management
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template <>
::cavnue::messages::data_warehouse::management::v2::VehicleState* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::management::v2::VehicleState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace management {
namespace v2 {

// ===================================================================


// -------------------------------------------------------------------

class VehicleState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.data_warehouse.management.v2.VehicleState) */ {
 public:
  inline VehicleState() : VehicleState(nullptr) {}
  ~VehicleState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VehicleState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VehicleState(const VehicleState& from);
  VehicleState(VehicleState&& from) noexcept
    : VehicleState() {
    *this = ::std::move(from);
  }

  inline VehicleState& operator=(const VehicleState& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleState& operator=(VehicleState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleState& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleState* internal_default_instance() {
    return reinterpret_cast<const VehicleState*>(
               &_VehicleState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VehicleState& a, VehicleState& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VehicleState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VehicleState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VehicleState& from) {
    VehicleState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.data_warehouse.management.v2.VehicleState";
  }
  protected:
  explicit VehicleState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetRoleFieldNumber = 6,
    kCoordinateFieldNumber = 8,
    kTsFieldNumber = 5,
    kRunTsFieldNumber = 27,
    kUuidFieldNumber = 1,
    kTestRunIdFieldNumber = 2,
    kTestArtifactIdFieldNumber = 3,
    kCohortIdFieldNumber = 4,
    kHeadingFieldNumber = 7,
    kVelocityQualityFieldNumber = 9,
    kLongitudinalVelocityFieldNumber = 10,
    kLateralVelocityFieldNumber = 11,
    kVerticalVelocityFieldNumber = 12,
    kLongitudinalAccelerationFieldNumber = 13,
    kLateralAccelerationFieldNumber = 14,
    kXPosFieldNumber = 15,
    kYPosFieldNumber = 16,
    kRmsHposFieldNumber = 17,
    kRmsVposFieldNumber = 18,
    kRmsHvelFieldNumber = 19,
    kRmsVvelFieldNumber = 20,
    kTrueHeadingFieldNumber = 21,
    kPitchrateFieldNumber = 22,
    kRollrateFieldNumber = 23,
    kYawrateFieldNumber = 24,
    kHeightFieldNumber = 25,
    kDatasetIdFieldNumber = 26,
    kTestAssetIdFieldNumber = 28,
  };
  // string asset_role = 6 [json_name = "assetRole"];
  void clear_asset_role() ;
  const std::string& asset_role() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_asset_role(Arg_&& arg, Args_... args);
  std::string* mutable_asset_role();
  PROTOBUF_NODISCARD std::string* release_asset_role();
  void set_allocated_asset_role(std::string* ptr);

  private:
  const std::string& _internal_asset_role() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asset_role(
      const std::string& value);
  std::string* _internal_mutable_asset_role();

  public:
  // optional string coordinate = 8 [json_name = "coordinate", (.cavnue.messages.common.v1.crs) = CRS_WGS84, (.gen_bq_schema.bigquery) = {
  bool has_coordinate() const;
  void clear_coordinate() ;
  const std::string& coordinate() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_coordinate(Arg_&& arg, Args_... args);
  std::string* mutable_coordinate();
  PROTOBUF_NODISCARD std::string* release_coordinate();
  void set_allocated_coordinate(std::string* ptr);

  private:
  const std::string& _internal_coordinate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_coordinate(
      const std::string& value);
  std::string* _internal_mutable_coordinate();

  public:
  // optional .google.protobuf.Timestamp ts = 5 [json_name = "ts", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  bool has_ts() const;
  void clear_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_ts();
  void set_allocated_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_ts();
  public:
  void unsafe_arena_set_allocated_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_ts();
  // optional .google.protobuf.Timestamp run_ts = 27 [json_name = "runTs", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  bool has_run_ts() const;
  void clear_run_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& run_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_run_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_run_ts();
  void set_allocated_run_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* run_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_run_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_run_ts();
  public:
  void unsafe_arena_set_allocated_run_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* run_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_run_ts();
  // optional int64 uuid = 1 [json_name = "uuid", (.cavnue.messages.common.v1.autogenerated) = true, (.gen_bq_schema.bigquery) = {
  bool has_uuid() const;
  void clear_uuid() ;
  ::int64_t uuid() const;
  void set_uuid(::int64_t value);

  private:
  ::int64_t _internal_uuid() const;
  void _internal_set_uuid(::int64_t value);

  public:
  // optional int64 test_run_id = 2 [json_name = "testRunId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  bool has_test_run_id() const;
  void clear_test_run_id() ;
  ::int64_t test_run_id() const;
  void set_test_run_id(::int64_t value);

  private:
  ::int64_t _internal_test_run_id() const;
  void _internal_set_test_run_id(::int64_t value);

  public:
  // optional int64 test_artifact_id = 3 [json_name = "testArtifactId", (.gen_bq_schema.bigquery) = {
  bool has_test_artifact_id() const;
  void clear_test_artifact_id() ;
  ::int64_t test_artifact_id() const;
  void set_test_artifact_id(::int64_t value);

  private:
  ::int64_t _internal_test_artifact_id() const;
  void _internal_set_test_artifact_id(::int64_t value);

  public:
  // optional int64 cohort_id = 4 [json_name = "cohortId", (.gen_bq_schema.bigquery) = {
  bool has_cohort_id() const;
  void clear_cohort_id() ;
  ::int64_t cohort_id() const;
  void set_cohort_id(::int64_t value);

  private:
  ::int64_t _internal_cohort_id() const;
  void _internal_set_cohort_id(::int64_t value);

  public:
  // optional float heading = 7 [json_name = "heading", (.cavnue.messages.common.v1.units) = UNITS_DEGREES, (.cavnue.messages.common.v1.crs) = CRS_NED, (.gen_bq_schema.bigquery) = {
  bool has_heading() const;
  void clear_heading() ;
  float heading() const;
  void set_heading(float value);

  private:
  float _internal_heading() const;
  void _internal_set_heading(float value);

  public:
  // optional float velocity_quality = 9 [json_name = "velocityQuality", (.gen_bq_schema.bigquery) = {
  bool has_velocity_quality() const;
  void clear_velocity_quality() ;
  float velocity_quality() const;
  void set_velocity_quality(float value);

  private:
  float _internal_velocity_quality() const;
  void _internal_set_velocity_quality(float value);

  public:
  // optional float longitudinal_velocity = 10 [json_name = "longitudinalVelocity", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND, (.gen_bq_schema.bigquery) = {
  bool has_longitudinal_velocity() const;
  void clear_longitudinal_velocity() ;
  float longitudinal_velocity() const;
  void set_longitudinal_velocity(float value);

  private:
  float _internal_longitudinal_velocity() const;
  void _internal_set_longitudinal_velocity(float value);

  public:
  // optional float lateral_velocity = 11 [json_name = "lateralVelocity", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND, (.gen_bq_schema.bigquery) = {
  bool has_lateral_velocity() const;
  void clear_lateral_velocity() ;
  float lateral_velocity() const;
  void set_lateral_velocity(float value);

  private:
  float _internal_lateral_velocity() const;
  void _internal_set_lateral_velocity(float value);

  public:
  // optional float vertical_velocity = 12 [json_name = "verticalVelocity", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND, (.gen_bq_schema.bigquery) = {
  bool has_vertical_velocity() const;
  void clear_vertical_velocity() ;
  float vertical_velocity() const;
  void set_vertical_velocity(float value);

  private:
  float _internal_vertical_velocity() const;
  void _internal_set_vertical_velocity(float value);

  public:
  // optional float longitudinal_acceleration = 13 [json_name = "longitudinalAcceleration", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND_SQUARED, (.gen_bq_schema.bigquery) = {
  bool has_longitudinal_acceleration() const;
  void clear_longitudinal_acceleration() ;
  float longitudinal_acceleration() const;
  void set_longitudinal_acceleration(float value);

  private:
  float _internal_longitudinal_acceleration() const;
  void _internal_set_longitudinal_acceleration(float value);

  public:
  // optional float lateral_acceleration = 14 [json_name = "lateralAcceleration", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND_SQUARED, (.gen_bq_schema.bigquery) = {
  bool has_lateral_acceleration() const;
  void clear_lateral_acceleration() ;
  float lateral_acceleration() const;
  void set_lateral_acceleration(float value);

  private:
  float _internal_lateral_acceleration() const;
  void _internal_set_lateral_acceleration(float value);

  public:
  // optional float x_pos = 15 [json_name = "xPos", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.gen_bq_schema.bigquery) = {
  bool has_x_pos() const;
  void clear_x_pos() ;
  float x_pos() const;
  void set_x_pos(float value);

  private:
  float _internal_x_pos() const;
  void _internal_set_x_pos(float value);

  public:
  // optional float y_pos = 16 [json_name = "yPos", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.gen_bq_schema.bigquery) = {
  bool has_y_pos() const;
  void clear_y_pos() ;
  float y_pos() const;
  void set_y_pos(float value);

  private:
  float _internal_y_pos() const;
  void _internal_set_y_pos(float value);

  public:
  // optional float rms_hpos = 17 [json_name = "rmsHpos", (.gen_bq_schema.bigquery) = {
  bool has_rms_hpos() const;
  void clear_rms_hpos() ;
  float rms_hpos() const;
  void set_rms_hpos(float value);

  private:
  float _internal_rms_hpos() const;
  void _internal_set_rms_hpos(float value);

  public:
  // optional float rms_vpos = 18 [json_name = "rmsVpos", (.gen_bq_schema.bigquery) = {
  bool has_rms_vpos() const;
  void clear_rms_vpos() ;
  float rms_vpos() const;
  void set_rms_vpos(float value);

  private:
  float _internal_rms_vpos() const;
  void _internal_set_rms_vpos(float value);

  public:
  // optional float rms_hvel = 19 [json_name = "rmsHvel", (.gen_bq_schema.bigquery) = {
  bool has_rms_hvel() const;
  void clear_rms_hvel() ;
  float rms_hvel() const;
  void set_rms_hvel(float value);

  private:
  float _internal_rms_hvel() const;
  void _internal_set_rms_hvel(float value);

  public:
  // optional float rms_vvel = 20 [json_name = "rmsVvel", (.gen_bq_schema.bigquery) = {
  bool has_rms_vvel() const;
  void clear_rms_vvel() ;
  float rms_vvel() const;
  void set_rms_vvel(float value);

  private:
  float _internal_rms_vvel() const;
  void _internal_set_rms_vvel(float value);

  public:
  // optional float true_heading = 21 [json_name = "trueHeading", (.cavnue.messages.common.v1.units) = UNITS_DEGREES, (.gen_bq_schema.bigquery) = {
  bool has_true_heading() const;
  void clear_true_heading() ;
  float true_heading() const;
  void set_true_heading(float value);

  private:
  float _internal_true_heading() const;
  void _internal_set_true_heading(float value);

  public:
  // optional float pitchrate = 22 [json_name = "pitchrate", (.cavnue.messages.common.v1.units) = UNITS_DEGREES_PER_SECOND, (.gen_bq_schema.bigquery) = {
  bool has_pitchrate() const;
  void clear_pitchrate() ;
  float pitchrate() const;
  void set_pitchrate(float value);

  private:
  float _internal_pitchrate() const;
  void _internal_set_pitchrate(float value);

  public:
  // optional float rollrate = 23 [json_name = "rollrate", (.cavnue.messages.common.v1.units) = UNITS_DEGREES_PER_SECOND, (.gen_bq_schema.bigquery) = {
  bool has_rollrate() const;
  void clear_rollrate() ;
  float rollrate() const;
  void set_rollrate(float value);

  private:
  float _internal_rollrate() const;
  void _internal_set_rollrate(float value);

  public:
  // optional float yawrate = 24 [json_name = "yawrate", (.cavnue.messages.common.v1.units) = UNITS_DEGREES_PER_SECOND, (.gen_bq_schema.bigquery) = {
  bool has_yawrate() const;
  void clear_yawrate() ;
  float yawrate() const;
  void set_yawrate(float value);

  private:
  float _internal_yawrate() const;
  void _internal_set_yawrate(float value);

  public:
  // optional float height = 25 [json_name = "height", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.gen_bq_schema.bigquery) = {
  bool has_height() const;
  void clear_height() ;
  float height() const;
  void set_height(float value);

  private:
  float _internal_height() const;
  void _internal_set_height(float value);

  public:
  // int64 dataset_id = 26 [json_name = "datasetId", (.gen_bq_schema.bigquery) = {
  void clear_dataset_id() ;
  ::int64_t dataset_id() const;
  void set_dataset_id(::int64_t value);

  private:
  ::int64_t _internal_dataset_id() const;
  void _internal_set_dataset_id(::int64_t value);

  public:
  // optional int64 test_asset_id = 28 [json_name = "testAssetId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  bool has_test_asset_id() const;
  void clear_test_asset_id() ;
  ::int64_t test_asset_id() const;
  void set_test_asset_id(::int64_t value);

  private:
  ::int64_t _internal_test_asset_id() const;
  void _internal_set_test_asset_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.data_warehouse.management.v2.VehicleState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_role_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coordinate_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* run_ts_;
    ::int64_t uuid_;
    ::int64_t test_run_id_;
    ::int64_t test_artifact_id_;
    ::int64_t cohort_id_;
    float heading_;
    float velocity_quality_;
    float longitudinal_velocity_;
    float lateral_velocity_;
    float vertical_velocity_;
    float longitudinal_acceleration_;
    float lateral_acceleration_;
    float x_pos_;
    float y_pos_;
    float rms_hpos_;
    float rms_vpos_;
    float rms_hvel_;
    float rms_vvel_;
    float true_heading_;
    float pitchrate_;
    float rollrate_;
    float yawrate_;
    float height_;
    ::int64_t dataset_id_;
    ::int64_t test_asset_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fvehicle_5fstate_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// VehicleState

// optional int64 uuid = 1 [json_name = "uuid", (.cavnue.messages.common.v1.autogenerated) = true, (.gen_bq_schema.bigquery) = {
inline bool VehicleState::has_uuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void VehicleState::clear_uuid() {
  _impl_.uuid_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t VehicleState::uuid() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleState.uuid)
  return _internal_uuid();
}
inline void VehicleState::set_uuid(::int64_t value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.VehicleState.uuid)
}
inline ::int64_t VehicleState::_internal_uuid() const {
  return _impl_.uuid_;
}
inline void VehicleState::_internal_set_uuid(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.uuid_ = value;
}

// optional int64 test_run_id = 2 [json_name = "testRunId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
inline bool VehicleState::has_test_run_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void VehicleState::clear_test_run_id() {
  _impl_.test_run_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t VehicleState::test_run_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleState.test_run_id)
  return _internal_test_run_id();
}
inline void VehicleState::set_test_run_id(::int64_t value) {
  _internal_set_test_run_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.VehicleState.test_run_id)
}
inline ::int64_t VehicleState::_internal_test_run_id() const {
  return _impl_.test_run_id_;
}
inline void VehicleState::_internal_set_test_run_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.test_run_id_ = value;
}

// optional int64 test_artifact_id = 3 [json_name = "testArtifactId", (.gen_bq_schema.bigquery) = {
inline bool VehicleState::has_test_artifact_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void VehicleState::clear_test_artifact_id() {
  _impl_.test_artifact_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t VehicleState::test_artifact_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleState.test_artifact_id)
  return _internal_test_artifact_id();
}
inline void VehicleState::set_test_artifact_id(::int64_t value) {
  _internal_set_test_artifact_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.VehicleState.test_artifact_id)
}
inline ::int64_t VehicleState::_internal_test_artifact_id() const {
  return _impl_.test_artifact_id_;
}
inline void VehicleState::_internal_set_test_artifact_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.test_artifact_id_ = value;
}

// optional int64 cohort_id = 4 [json_name = "cohortId", (.gen_bq_schema.bigquery) = {
inline bool VehicleState::has_cohort_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void VehicleState::clear_cohort_id() {
  _impl_.cohort_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t VehicleState::cohort_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleState.cohort_id)
  return _internal_cohort_id();
}
inline void VehicleState::set_cohort_id(::int64_t value) {
  _internal_set_cohort_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.VehicleState.cohort_id)
}
inline ::int64_t VehicleState::_internal_cohort_id() const {
  return _impl_.cohort_id_;
}
inline void VehicleState::_internal_set_cohort_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.cohort_id_ = value;
}

// optional .google.protobuf.Timestamp ts = 5 [json_name = "ts", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
inline bool VehicleState::has_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& VehicleState::_internal_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& VehicleState::ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleState.ts)
  return _internal_ts();
}
inline void VehicleState::unsafe_arena_set_allocated_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_);
  }
  _impl_.ts_ = ts;
  if (ts) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.data_warehouse.management.v2.VehicleState.ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* VehicleState::release_ts() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_;
  _impl_.ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* VehicleState::unsafe_arena_release_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v2.VehicleState.ts)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_;
  _impl_.ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* VehicleState::_internal_mutable_ts() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.ts_ = p;
  }
  return _impl_.ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* VehicleState::mutable_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.VehicleState.ts)
  return _msg;
}
inline void VehicleState::set_allocated_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_);
  }
  if (ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts));
    if (message_arena != submessage_arena) {
      ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.ts_ = ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v2.VehicleState.ts)
}

// string asset_role = 6 [json_name = "assetRole"];
inline void VehicleState::clear_asset_role() {
  _impl_.asset_role_.ClearToEmpty();
}
inline const std::string& VehicleState::asset_role() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleState.asset_role)
  return _internal_asset_role();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VehicleState::set_asset_role(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.asset_role_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.VehicleState.asset_role)
}
inline std::string* VehicleState::mutable_asset_role() {
  std::string* _s = _internal_mutable_asset_role();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.VehicleState.asset_role)
  return _s;
}
inline const std::string& VehicleState::_internal_asset_role() const {
  return _impl_.asset_role_.Get();
}
inline void VehicleState::_internal_set_asset_role(const std::string& value) {
  ;


  _impl_.asset_role_.Set(value, GetArenaForAllocation());
}
inline std::string* VehicleState::_internal_mutable_asset_role() {
  ;
  return _impl_.asset_role_.Mutable( GetArenaForAllocation());
}
inline std::string* VehicleState::release_asset_role() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v2.VehicleState.asset_role)
  return _impl_.asset_role_.Release();
}
inline void VehicleState::set_allocated_asset_role(std::string* value) {
  _impl_.asset_role_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.asset_role_.IsDefault()) {
          _impl_.asset_role_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v2.VehicleState.asset_role)
}

// optional float heading = 7 [json_name = "heading", (.cavnue.messages.common.v1.units) = UNITS_DEGREES, (.cavnue.messages.common.v1.crs) = CRS_NED, (.gen_bq_schema.bigquery) = {
inline bool VehicleState::has_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void VehicleState::clear_heading() {
  _impl_.heading_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float VehicleState::heading() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleState.heading)
  return _internal_heading();
}
inline void VehicleState::set_heading(float value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.VehicleState.heading)
}
inline float VehicleState::_internal_heading() const {
  return _impl_.heading_;
}
inline void VehicleState::_internal_set_heading(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.heading_ = value;
}

// optional string coordinate = 8 [json_name = "coordinate", (.cavnue.messages.common.v1.crs) = CRS_WGS84, (.gen_bq_schema.bigquery) = {
inline bool VehicleState::has_coordinate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void VehicleState::clear_coordinate() {
  _impl_.coordinate_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VehicleState::coordinate() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleState.coordinate)
  return _internal_coordinate();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VehicleState::set_coordinate(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.coordinate_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.VehicleState.coordinate)
}
inline std::string* VehicleState::mutable_coordinate() {
  std::string* _s = _internal_mutable_coordinate();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.VehicleState.coordinate)
  return _s;
}
inline const std::string& VehicleState::_internal_coordinate() const {
  return _impl_.coordinate_.Get();
}
inline void VehicleState::_internal_set_coordinate(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.coordinate_.Set(value, GetArenaForAllocation());
}
inline std::string* VehicleState::_internal_mutable_coordinate() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.coordinate_.Mutable( GetArenaForAllocation());
}
inline std::string* VehicleState::release_coordinate() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v2.VehicleState.coordinate)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.coordinate_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.coordinate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void VehicleState::set_allocated_coordinate(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.coordinate_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.coordinate_.IsDefault()) {
          _impl_.coordinate_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v2.VehicleState.coordinate)
}

// optional float velocity_quality = 9 [json_name = "velocityQuality", (.gen_bq_schema.bigquery) = {
inline bool VehicleState::has_velocity_quality() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void VehicleState::clear_velocity_quality() {
  _impl_.velocity_quality_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float VehicleState::velocity_quality() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleState.velocity_quality)
  return _internal_velocity_quality();
}
inline void VehicleState::set_velocity_quality(float value) {
  _internal_set_velocity_quality(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.VehicleState.velocity_quality)
}
inline float VehicleState::_internal_velocity_quality() const {
  return _impl_.velocity_quality_;
}
inline void VehicleState::_internal_set_velocity_quality(float value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.velocity_quality_ = value;
}

// optional float longitudinal_velocity = 10 [json_name = "longitudinalVelocity", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND, (.gen_bq_schema.bigquery) = {
inline bool VehicleState::has_longitudinal_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void VehicleState::clear_longitudinal_velocity() {
  _impl_.longitudinal_velocity_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float VehicleState::longitudinal_velocity() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleState.longitudinal_velocity)
  return _internal_longitudinal_velocity();
}
inline void VehicleState::set_longitudinal_velocity(float value) {
  _internal_set_longitudinal_velocity(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.VehicleState.longitudinal_velocity)
}
inline float VehicleState::_internal_longitudinal_velocity() const {
  return _impl_.longitudinal_velocity_;
}
inline void VehicleState::_internal_set_longitudinal_velocity(float value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.longitudinal_velocity_ = value;
}

// optional float lateral_velocity = 11 [json_name = "lateralVelocity", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND, (.gen_bq_schema.bigquery) = {
inline bool VehicleState::has_lateral_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void VehicleState::clear_lateral_velocity() {
  _impl_.lateral_velocity_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float VehicleState::lateral_velocity() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleState.lateral_velocity)
  return _internal_lateral_velocity();
}
inline void VehicleState::set_lateral_velocity(float value) {
  _internal_set_lateral_velocity(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.VehicleState.lateral_velocity)
}
inline float VehicleState::_internal_lateral_velocity() const {
  return _impl_.lateral_velocity_;
}
inline void VehicleState::_internal_set_lateral_velocity(float value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.lateral_velocity_ = value;
}

// optional float vertical_velocity = 12 [json_name = "verticalVelocity", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND, (.gen_bq_schema.bigquery) = {
inline bool VehicleState::has_vertical_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void VehicleState::clear_vertical_velocity() {
  _impl_.vertical_velocity_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float VehicleState::vertical_velocity() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleState.vertical_velocity)
  return _internal_vertical_velocity();
}
inline void VehicleState::set_vertical_velocity(float value) {
  _internal_set_vertical_velocity(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.VehicleState.vertical_velocity)
}
inline float VehicleState::_internal_vertical_velocity() const {
  return _impl_.vertical_velocity_;
}
inline void VehicleState::_internal_set_vertical_velocity(float value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.vertical_velocity_ = value;
}

// optional float longitudinal_acceleration = 13 [json_name = "longitudinalAcceleration", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND_SQUARED, (.gen_bq_schema.bigquery) = {
inline bool VehicleState::has_longitudinal_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void VehicleState::clear_longitudinal_acceleration() {
  _impl_.longitudinal_acceleration_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float VehicleState::longitudinal_acceleration() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleState.longitudinal_acceleration)
  return _internal_longitudinal_acceleration();
}
inline void VehicleState::set_longitudinal_acceleration(float value) {
  _internal_set_longitudinal_acceleration(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.VehicleState.longitudinal_acceleration)
}
inline float VehicleState::_internal_longitudinal_acceleration() const {
  return _impl_.longitudinal_acceleration_;
}
inline void VehicleState::_internal_set_longitudinal_acceleration(float value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.longitudinal_acceleration_ = value;
}

// optional float lateral_acceleration = 14 [json_name = "lateralAcceleration", (.cavnue.messages.common.v1.units) = UNITS_METERS_PER_SECOND_SQUARED, (.gen_bq_schema.bigquery) = {
inline bool VehicleState::has_lateral_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void VehicleState::clear_lateral_acceleration() {
  _impl_.lateral_acceleration_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline float VehicleState::lateral_acceleration() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleState.lateral_acceleration)
  return _internal_lateral_acceleration();
}
inline void VehicleState::set_lateral_acceleration(float value) {
  _internal_set_lateral_acceleration(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.VehicleState.lateral_acceleration)
}
inline float VehicleState::_internal_lateral_acceleration() const {
  return _impl_.lateral_acceleration_;
}
inline void VehicleState::_internal_set_lateral_acceleration(float value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.lateral_acceleration_ = value;
}

// optional float x_pos = 15 [json_name = "xPos", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.gen_bq_schema.bigquery) = {
inline bool VehicleState::has_x_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void VehicleState::clear_x_pos() {
  _impl_.x_pos_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline float VehicleState::x_pos() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleState.x_pos)
  return _internal_x_pos();
}
inline void VehicleState::set_x_pos(float value) {
  _internal_set_x_pos(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.VehicleState.x_pos)
}
inline float VehicleState::_internal_x_pos() const {
  return _impl_.x_pos_;
}
inline void VehicleState::_internal_set_x_pos(float value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.x_pos_ = value;
}

// optional float y_pos = 16 [json_name = "yPos", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.gen_bq_schema.bigquery) = {
inline bool VehicleState::has_y_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void VehicleState::clear_y_pos() {
  _impl_.y_pos_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline float VehicleState::y_pos() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleState.y_pos)
  return _internal_y_pos();
}
inline void VehicleState::set_y_pos(float value) {
  _internal_set_y_pos(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.VehicleState.y_pos)
}
inline float VehicleState::_internal_y_pos() const {
  return _impl_.y_pos_;
}
inline void VehicleState::_internal_set_y_pos(float value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.y_pos_ = value;
}

// optional float rms_hpos = 17 [json_name = "rmsHpos", (.gen_bq_schema.bigquery) = {
inline bool VehicleState::has_rms_hpos() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void VehicleState::clear_rms_hpos() {
  _impl_.rms_hpos_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline float VehicleState::rms_hpos() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleState.rms_hpos)
  return _internal_rms_hpos();
}
inline void VehicleState::set_rms_hpos(float value) {
  _internal_set_rms_hpos(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.VehicleState.rms_hpos)
}
inline float VehicleState::_internal_rms_hpos() const {
  return _impl_.rms_hpos_;
}
inline void VehicleState::_internal_set_rms_hpos(float value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.rms_hpos_ = value;
}

// optional float rms_vpos = 18 [json_name = "rmsVpos", (.gen_bq_schema.bigquery) = {
inline bool VehicleState::has_rms_vpos() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void VehicleState::clear_rms_vpos() {
  _impl_.rms_vpos_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline float VehicleState::rms_vpos() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleState.rms_vpos)
  return _internal_rms_vpos();
}
inline void VehicleState::set_rms_vpos(float value) {
  _internal_set_rms_vpos(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.VehicleState.rms_vpos)
}
inline float VehicleState::_internal_rms_vpos() const {
  return _impl_.rms_vpos_;
}
inline void VehicleState::_internal_set_rms_vpos(float value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.rms_vpos_ = value;
}

// optional float rms_hvel = 19 [json_name = "rmsHvel", (.gen_bq_schema.bigquery) = {
inline bool VehicleState::has_rms_hvel() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void VehicleState::clear_rms_hvel() {
  _impl_.rms_hvel_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline float VehicleState::rms_hvel() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleState.rms_hvel)
  return _internal_rms_hvel();
}
inline void VehicleState::set_rms_hvel(float value) {
  _internal_set_rms_hvel(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.VehicleState.rms_hvel)
}
inline float VehicleState::_internal_rms_hvel() const {
  return _impl_.rms_hvel_;
}
inline void VehicleState::_internal_set_rms_hvel(float value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.rms_hvel_ = value;
}

// optional float rms_vvel = 20 [json_name = "rmsVvel", (.gen_bq_schema.bigquery) = {
inline bool VehicleState::has_rms_vvel() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void VehicleState::clear_rms_vvel() {
  _impl_.rms_vvel_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline float VehicleState::rms_vvel() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleState.rms_vvel)
  return _internal_rms_vvel();
}
inline void VehicleState::set_rms_vvel(float value) {
  _internal_set_rms_vvel(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.VehicleState.rms_vvel)
}
inline float VehicleState::_internal_rms_vvel() const {
  return _impl_.rms_vvel_;
}
inline void VehicleState::_internal_set_rms_vvel(float value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.rms_vvel_ = value;
}

// optional float true_heading = 21 [json_name = "trueHeading", (.cavnue.messages.common.v1.units) = UNITS_DEGREES, (.gen_bq_schema.bigquery) = {
inline bool VehicleState::has_true_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void VehicleState::clear_true_heading() {
  _impl_.true_heading_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline float VehicleState::true_heading() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleState.true_heading)
  return _internal_true_heading();
}
inline void VehicleState::set_true_heading(float value) {
  _internal_set_true_heading(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.VehicleState.true_heading)
}
inline float VehicleState::_internal_true_heading() const {
  return _impl_.true_heading_;
}
inline void VehicleState::_internal_set_true_heading(float value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.true_heading_ = value;
}

// optional float pitchrate = 22 [json_name = "pitchrate", (.cavnue.messages.common.v1.units) = UNITS_DEGREES_PER_SECOND, (.gen_bq_schema.bigquery) = {
inline bool VehicleState::has_pitchrate() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void VehicleState::clear_pitchrate() {
  _impl_.pitchrate_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline float VehicleState::pitchrate() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleState.pitchrate)
  return _internal_pitchrate();
}
inline void VehicleState::set_pitchrate(float value) {
  _internal_set_pitchrate(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.VehicleState.pitchrate)
}
inline float VehicleState::_internal_pitchrate() const {
  return _impl_.pitchrate_;
}
inline void VehicleState::_internal_set_pitchrate(float value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.pitchrate_ = value;
}

// optional float rollrate = 23 [json_name = "rollrate", (.cavnue.messages.common.v1.units) = UNITS_DEGREES_PER_SECOND, (.gen_bq_schema.bigquery) = {
inline bool VehicleState::has_rollrate() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void VehicleState::clear_rollrate() {
  _impl_.rollrate_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline float VehicleState::rollrate() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleState.rollrate)
  return _internal_rollrate();
}
inline void VehicleState::set_rollrate(float value) {
  _internal_set_rollrate(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.VehicleState.rollrate)
}
inline float VehicleState::_internal_rollrate() const {
  return _impl_.rollrate_;
}
inline void VehicleState::_internal_set_rollrate(float value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.rollrate_ = value;
}

// optional float yawrate = 24 [json_name = "yawrate", (.cavnue.messages.common.v1.units) = UNITS_DEGREES_PER_SECOND, (.gen_bq_schema.bigquery) = {
inline bool VehicleState::has_yawrate() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void VehicleState::clear_yawrate() {
  _impl_.yawrate_ = 0;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline float VehicleState::yawrate() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleState.yawrate)
  return _internal_yawrate();
}
inline void VehicleState::set_yawrate(float value) {
  _internal_set_yawrate(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.VehicleState.yawrate)
}
inline float VehicleState::_internal_yawrate() const {
  return _impl_.yawrate_;
}
inline void VehicleState::_internal_set_yawrate(float value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.yawrate_ = value;
}

// optional float height = 25 [json_name = "height", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.gen_bq_schema.bigquery) = {
inline bool VehicleState::has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void VehicleState::clear_height() {
  _impl_.height_ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline float VehicleState::height() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleState.height)
  return _internal_height();
}
inline void VehicleState::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.VehicleState.height)
}
inline float VehicleState::_internal_height() const {
  return _impl_.height_;
}
inline void VehicleState::_internal_set_height(float value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.height_ = value;
}

// int64 dataset_id = 26 [json_name = "datasetId", (.gen_bq_schema.bigquery) = {
inline void VehicleState::clear_dataset_id() {
  _impl_.dataset_id_ = ::int64_t{0};
}
inline ::int64_t VehicleState::dataset_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleState.dataset_id)
  return _internal_dataset_id();
}
inline void VehicleState::set_dataset_id(::int64_t value) {
  _internal_set_dataset_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.VehicleState.dataset_id)
}
inline ::int64_t VehicleState::_internal_dataset_id() const {
  return _impl_.dataset_id_;
}
inline void VehicleState::_internal_set_dataset_id(::int64_t value) {
  ;
  _impl_.dataset_id_ = value;
}

// optional .google.protobuf.Timestamp run_ts = 27 [json_name = "runTs", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
inline bool VehicleState::has_run_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.run_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& VehicleState::_internal_run_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.run_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& VehicleState::run_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleState.run_ts)
  return _internal_run_ts();
}
inline void VehicleState::unsafe_arena_set_allocated_run_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* run_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.run_ts_);
  }
  _impl_.run_ts_ = run_ts;
  if (run_ts) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.data_warehouse.management.v2.VehicleState.run_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* VehicleState::release_run_ts() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.run_ts_;
  _impl_.run_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* VehicleState::unsafe_arena_release_run_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v2.VehicleState.run_ts)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.run_ts_;
  _impl_.run_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* VehicleState::_internal_mutable_run_ts() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.run_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.run_ts_ = p;
  }
  return _impl_.run_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* VehicleState::mutable_run_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_run_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.VehicleState.run_ts)
  return _msg;
}
inline void VehicleState::set_allocated_run_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* run_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.run_ts_);
  }
  if (run_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_ts));
    if (message_arena != submessage_arena) {
      run_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.run_ts_ = run_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v2.VehicleState.run_ts)
}

// optional int64 test_asset_id = 28 [json_name = "testAssetId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
inline bool VehicleState::has_test_asset_id() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void VehicleState::clear_test_asset_id() {
  _impl_.test_asset_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline ::int64_t VehicleState::test_asset_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleState.test_asset_id)
  return _internal_test_asset_id();
}
inline void VehicleState::set_test_asset_id(::int64_t value) {
  _internal_set_test_asset_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.VehicleState.test_asset_id)
}
inline ::int64_t VehicleState::_internal_test_asset_id() const {
  return _impl_.test_asset_id_;
}
inline void VehicleState::_internal_set_test_asset_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.test_asset_id_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace management
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fvehicle_5fstate_2eproto_2epb_2eh

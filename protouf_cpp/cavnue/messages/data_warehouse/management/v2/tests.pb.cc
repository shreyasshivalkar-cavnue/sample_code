// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/data_warehouse/management/v2/tests.proto

#include "cavnue/messages/data_warehouse/management/v2/tests.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace management {
namespace v2 {
template <typename>
PROTOBUF_CONSTEXPR Test_TestDefinition::Test_TestDefinition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hv_)*/ false

  , /*decltype(_impl_.tv1_)*/ false

  , /*decltype(_impl_.tv2_)*/ false

  , /*decltype(_impl_.sv_)*/ false
} {}
struct Test_TestDefinitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Test_TestDefinitionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Test_TestDefinitionDefaultTypeInternal() {}
  union {
    Test_TestDefinition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Test_TestDefinitionDefaultTypeInternal _Test_TestDefinition_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Test::Test(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.identifier_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.definition_)*/nullptr
  , /*decltype(_impl_.test_id_)*/ ::int64_t{0}
} {}
struct TestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestDefaultTypeInternal() {}
  union {
    Test _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestDefaultTypeInternal _Test_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TestRun::TestRun(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.identifier_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.ts_)*/nullptr
  , /*decltype(_impl_.test_run_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.test_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.cohort_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.duration_)*/ ::int64_t{0}

  , /*decltype(_impl_.hv_)*/ ::int64_t{0}

  , /*decltype(_impl_.tv1_)*/ ::int64_t{0}

  , /*decltype(_impl_.tv2_)*/ ::int64_t{0}

  , /*decltype(_impl_.sv_)*/ ::int64_t{0}
} {}
struct TestRunDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRunDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRunDefaultTypeInternal() {}
  union {
    TestRun _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRunDefaultTypeInternal _TestRun_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TestArtifact::TestArtifact(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.test_asset_id_)*/ {}
  ,/* _impl_._test_asset_id_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.asset_role_)*/{}
  , /*decltype(_impl_.uri_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.test_artifact_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.test_run_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.test_artifact_type_id_)*/ ::int64_t{0}
} {}
struct TestArtifactDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestArtifactDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestArtifactDefaultTypeInternal() {}
  union {
    TestArtifact _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestArtifactDefaultTypeInternal _TestArtifact_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TestAsset::TestAsset(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.identifier_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.test_asset_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.version_)*/ ::int64_t{0}
} {}
struct TestAssetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAssetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAssetDefaultTypeInternal() {}
  union {
    TestAsset _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAssetDefaultTypeInternal _TestAsset_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TestArtifactType::TestArtifactType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.identifier_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.test_artifact_type_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.version_)*/ ::int64_t{0}
} {}
struct TestArtifactTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestArtifactTypeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestArtifactTypeDefaultTypeInternal() {}
  union {
    TestArtifactType _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestArtifactTypeDefaultTypeInternal _TestArtifactType_default_instance_;
}  // namespace v2
}  // namespace management
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
static ::_pb::Metadata file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto[6];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto = nullptr;
const ::uint32_t TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Test_TestDefinition, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Test_TestDefinition, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Test_TestDefinition, _impl_.hv_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Test_TestDefinition, _impl_.tv1_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Test_TestDefinition, _impl_.tv2_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Test_TestDefinition, _impl_.sv_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Test, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Test, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Test, _impl_.test_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Test, _impl_.identifier_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Test, _impl_.definition_),
    2,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::TestRun, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::TestRun, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::TestRun, _impl_.test_run_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::TestRun, _impl_.test_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::TestRun, _impl_.cohort_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::TestRun, _impl_.ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::TestRun, _impl_.duration_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::TestRun, _impl_.hv_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::TestRun, _impl_.tv1_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::TestRun, _impl_.tv2_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::TestRun, _impl_.sv_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::TestRun, _impl_.identifier_),
    1,
    2,
    3,
    0,
    4,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::TestArtifact, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::TestArtifact, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::TestArtifact, _impl_.test_artifact_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::TestArtifact, _impl_.test_run_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::TestArtifact, _impl_.test_asset_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::TestArtifact, _impl_.asset_role_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::TestArtifact, _impl_.test_artifact_type_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::TestArtifact, _impl_.uri_),
    1,
    2,
    ~0u,
    ~0u,
    3,
    0,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::TestAsset, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::TestAsset, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::TestAsset, _impl_.test_asset_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::TestAsset, _impl_.identifier_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::TestAsset, _impl_.version_),
    1,
    0,
    2,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::TestArtifactType, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::TestArtifactType, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::TestArtifactType, _impl_.test_artifact_type_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::TestArtifactType, _impl_.identifier_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::TestArtifactType, _impl_.version_),
    1,
    0,
    2,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 12, -1, sizeof(::cavnue::messages::data_warehouse::management::v2::Test_TestDefinition)},
        { 16, 27, -1, sizeof(::cavnue::messages::data_warehouse::management::v2::Test)},
        { 30, 48, -1, sizeof(::cavnue::messages::data_warehouse::management::v2::TestRun)},
        { 58, 72, -1, sizeof(::cavnue::messages::data_warehouse::management::v2::TestArtifact)},
        { 78, 89, -1, sizeof(::cavnue::messages::data_warehouse::management::v2::TestAsset)},
        { 92, 103, -1, sizeof(::cavnue::messages::data_warehouse::management::v2::TestArtifactType)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cavnue::messages::data_warehouse::management::v2::_Test_TestDefinition_default_instance_._instance,
    &::cavnue::messages::data_warehouse::management::v2::_Test_default_instance_._instance,
    &::cavnue::messages::data_warehouse::management::v2::_TestRun_default_instance_._instance,
    &::cavnue::messages::data_warehouse::management::v2::_TestArtifact_default_instance_._instance,
    &::cavnue::messages::data_warehouse::management::v2::_TestAsset_default_instance_._instance,
    &::cavnue::messages::data_warehouse::management::v2::_TestArtifactType_default_instance_._instance,
};
const char descriptor_table_protodef_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n8cavnue/messages/data_warehouse/managem"
    "ent/v2/tests.proto\022,cavnue.messages.data"
    "_warehouse.management.v2\032\'cavnue/third_p"
    "arty/bq/v1/bq_field.proto\032\'cavnue/third_"
    "party/bq/v1/bq_table.proto\032-cavnue/messa"
    "ges/common/v1/field_options.proto\032\037googl"
    "e/protobuf/timestamp.proto\"\277\003\n\004Test\022:\n\007t"
    "est_id\030\001 \001(\003B\034\210\265\030\001\222\265\030\nidentifier\230\265\030\001\212\371+\002"
    "\010\001H\000R\006testId\210\001\001\022+\n\nidentifier\030\002 \001(\tB\006\212\371+"
    "\002\010\001H\001R\nidentifier\210\001\001\022n\n\ndefinition\030\003 \001(\013"
    "2A.cavnue.messages.data_warehouse.manage"
    "ment.v2.Test.TestDefinitionB\006\212\371+\002\010\001H\002R\nd"
    "efinition\210\001\001\032\246\001\n\016TestDefinition\022\033\n\002hv\030\001 "
    "\001(\010B\006\212\371+\002\010\001H\000R\002hv\210\001\001\022\035\n\003tv1\030\002 \001(\010B\006\212\371+\002\010"
    "\001H\001R\003tv1\210\001\001\022\035\n\003tv2\030\003 \001(\010B\006\212\371+\002\010\001H\002R\003tv2\210"
    "\001\001\022\033\n\002sv\030\004 \001(\010B\006\212\371+\002\010\001H\003R\002sv\210\001\001B\005\n\003_hvB\006"
    "\n\004_tv1B\006\n\004_tv2B\005\n\003_sv:\013\202\371+\007\n\005TestsB\n\n\010_t"
    "est_idB\r\n\013_identifierB\r\n\013_definition\"\337\003\n"
    "\007TestRun\022_\n\013test_run_id\030\001 \001(\003B:\210\265\030\001\222\265\030\007t"
    "est_id\222\265\030\002ts\222\265\030\tcohort_id\222\265\030\nidentifier\230"
    "\265\030\001\212\371+\002\010\001H\000R\ttestRunId\210\001\001\022&\n\007test_id\030\002 \001"
    "(\003B\010\212\371+\004\010\001@\001H\001R\006testId\210\001\001\022*\n\tcohort_id\030\003"
    " \001(\003B\010\212\371+\004\010\001@\001H\002R\010cohortId\210\001\001\022D\n\002ts\030\004 \001("
    "\0132\032.google.protobuf.TimestampB\023\212\371+\017\010\001\022\tT"
    "IMESTAMP8\001H\003R\002ts\210\001\001\022\'\n\010duration\030\005 \001(\003B\006\212"
    "\371+\002\010\001H\004R\010duration\210\001\001\022\016\n\002hv\030\006 \001(\003R\002hv\022\020\n\003"
    "tv1\030\007 \001(\003R\003tv1\022\020\n\003tv2\030\010 \001(\003R\003tv2\022\016\n\002sv\030\t"
    " \001(\003R\002sv\022\036\n\nidentifier\030\n \001(\tR\nidentifier"
    ":\016\202\371+\n\n\010TestRunsB\016\n\014_test_run_idB\n\n\010_tes"
    "t_idB\014\n\n_cohort_idB\005\n\003_tsB\013\n\t_duration\"\201"
    "\003\n\014TestArtifact\022D\n\020test_artifact_id\030\001 \001("
    "\003B\025\210\265\030\001\222\265\030\003uri\230\265\030\001\212\371+\002\010\001H\000R\016testArtifact"
    "Id\210\001\001\022-\n\013test_run_id\030\002 \001(\003B\010\212\371+\004\010\001@\001H\001R\t"
    "testRunId\210\001\001\022\"\n\rtest_asset_id\030\003 \003(\003R\013tes"
    "tAssetId\022\035\n\nasset_role\030\004 \003(\tR\tassetRole\022"
    ">\n\025test_artifact_type_id\030\005 \001(\003B\006\212\371+\002\010\001H\002"
    "R\022testArtifactTypeId\210\001\001\022\035\n\003uri\030\006 \001(\tB\006\212\371"
    "+\002\010\001H\003R\003uri\210\001\001:\023\202\371+\017\n\rTestArtifactsB\023\n\021_"
    "test_artifact_idB\016\n\014_test_run_idB\030\n\026_tes"
    "t_artifact_type_idB\006\n\004_uri\"\360\001\n\tTestAsset"
    "\022P\n\rtest_asset_id\030\001 \001(\003B\'\210\265\030\001\222\265\030\nidentif"
    "ier\222\265\030\007version\230\265\030\001\212\371+\002\010\001H\000R\013testAssetId\210"
    "\001\001\022+\n\nidentifier\030\002 \001(\tB\006\212\371+\002\010\001H\001R\nidenti"
    "fier\210\001\001\022%\n\007version\030\003 \001(\003B\006\212\371+\002\010\001H\002R\007vers"
    "ion\210\001\001:\020\202\371+\014\n\nTestAssetsB\020\n\016_test_asset_"
    "idB\r\n\013_identifierB\n\n\010_version\"\225\002\n\020TestAr"
    "tifactType\022_\n\025test_artifact_type_id\030\001 \001("
    "\003B\'\210\265\030\001\222\265\030\nidentifier\222\265\030\007version\230\265\030\001\212\371+\002"
    "\010\001H\000R\022testArtifactTypeId\210\001\001\022+\n\nidentifie"
    "r\030\002 \001(\tB\006\212\371+\002\010\001H\001R\nidentifier\210\001\001\022%\n\007vers"
    "ion\030\003 \001(\003B\006\212\371+\002\010\001H\002R\007version\210\001\001:\027\202\371+\023\n\021T"
    "estArtifactTypesB\030\n\026_test_artifact_type_"
    "idB\r\n\013_identifierB\n\n\010_versionb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto_deps[4] =
    {
        &::descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2ffield_5foptions_2eproto,
        &::descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ffield_2eproto,
        &::descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto = {
    false,
    false,
    2117,
    descriptor_table_protodef_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto,
    "cavnue/messages/data_warehouse/management/v2/tests.proto",
    &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto_once,
    descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto_deps,
    4,
    6,
    schemas,
    file_default_instances,
    TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto::offsets,
    file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto,
    file_level_enum_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto,
    file_level_service_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto_getter() {
  return &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto(&descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto);
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace management {
namespace v2 {
// ===================================================================

class Test_TestDefinition::_Internal {
 public:
  using HasBits = decltype(std::declval<Test_TestDefinition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Test_TestDefinition, _impl_._has_bits_);
  static void set_has_hv(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tv1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tv2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sv(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Test_TestDefinition::Test_TestDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.management.v2.Test.TestDefinition)
}
Test_TestDefinition::Test_TestDefinition(const Test_TestDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.management.v2.Test.TestDefinition)
}

inline void Test_TestDefinition::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hv_) { false }

    , decltype(_impl_.tv1_) { false }

    , decltype(_impl_.tv2_) { false }

    , decltype(_impl_.sv_) { false }

  };
}

Test_TestDefinition::~Test_TestDefinition() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.management.v2.Test.TestDefinition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Test_TestDefinition::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Test_TestDefinition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Test_TestDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.management.v2.Test.TestDefinition)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.hv_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.sv_) -
      reinterpret_cast<char*>(&_impl_.hv_)) + sizeof(_impl_.sv_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Test_TestDefinition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool hv = 1 [json_name = "hv", (.gen_bq_schema.bigquery) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_hv(&has_bits);
          _impl_.hv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool tv1 = 2 [json_name = "tv1", (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_tv1(&has_bits);
          _impl_.tv1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool tv2 = 3 [json_name = "tv2", (.gen_bq_schema.bigquery) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_tv2(&has_bits);
          _impl_.tv2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool sv = 4 [json_name = "sv", (.gen_bq_schema.bigquery) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_sv(&has_bits);
          _impl_.sv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Test_TestDefinition::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.management.v2.Test.TestDefinition)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool hv = 1 [json_name = "hv", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_hv(), target);
  }

  // optional bool tv1 = 2 [json_name = "tv1", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_tv1(), target);
  }

  // optional bool tv2 = 3 [json_name = "tv2", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_tv2(), target);
  }

  // optional bool sv = 4 [json_name = "sv", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_sv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.management.v2.Test.TestDefinition)
  return target;
}

::size_t Test_TestDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.management.v2.Test.TestDefinition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool hv = 1 [json_name = "hv", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 2;
    }

    // optional bool tv1 = 2 [json_name = "tv1", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

    // optional bool tv2 = 3 [json_name = "tv2", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

    // optional bool sv = 4 [json_name = "sv", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Test_TestDefinition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Test_TestDefinition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Test_TestDefinition::GetClassData() const { return &_class_data_; }


void Test_TestDefinition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Test_TestDefinition*>(&to_msg);
  auto& from = static_cast<const Test_TestDefinition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.management.v2.Test.TestDefinition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.hv_ = from._impl_.hv_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tv1_ = from._impl_.tv1_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tv2_ = from._impl_.tv2_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sv_ = from._impl_.sv_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Test_TestDefinition::CopyFrom(const Test_TestDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.management.v2.Test.TestDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test_TestDefinition::IsInitialized() const {
  return true;
}

void Test_TestDefinition::InternalSwap(Test_TestDefinition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Test_TestDefinition, _impl_.sv_)
      + sizeof(Test_TestDefinition::_impl_.sv_)
      - PROTOBUF_FIELD_OFFSET(Test_TestDefinition, _impl_.hv_)>(
          reinterpret_cast<char*>(&_impl_.hv_),
          reinterpret_cast<char*>(&other->_impl_.hv_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Test_TestDefinition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto[0]);
}
// ===================================================================

class Test::_Internal {
 public:
  using HasBits = decltype(std::declval<Test>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Test, _impl_._has_bits_);
  static void set_has_test_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cavnue::messages::data_warehouse::management::v2::Test_TestDefinition& definition(const Test* msg);
  static void set_has_definition(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::cavnue::messages::data_warehouse::management::v2::Test_TestDefinition&
Test::_Internal::definition(const Test* msg) {
  return *msg->_impl_.definition_;
}
Test::Test(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.management.v2.Test)
}
Test::Test(const Test& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Test* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.definition_){nullptr}
    , decltype(_impl_.test_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.definition_ = new ::cavnue::messages::data_warehouse::management::v2::Test_TestDefinition(*from._impl_.definition_);
  }
  _this->_impl_.test_id_ = from._impl_.test_id_;
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.management.v2.Test)
}

inline void Test::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.definition_){nullptr}
    , decltype(_impl_.test_id_) { ::int64_t{0} }

  };
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Test::~Test() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.management.v2.Test)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Test::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.definition_;
}

void Test::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Test::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.management.v2.Test)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.definition_ != nullptr);
      _impl_.definition_->Clear();
    }
  }
  _impl_.test_id_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Test::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 test_id = 1 [json_name = "testId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_test_id(&has_bits);
          _impl_.test_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string identifier = 2 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v2.Test.identifier"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .cavnue.messages.data_warehouse.management.v2.Test.TestDefinition definition = 3 [json_name = "definition", (.gen_bq_schema.bigquery) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_definition(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Test::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.management.v2.Test)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 test_id = 1 [json_name = "testId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_test_id(), target);
  }

  // optional string identifier = 2 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_identifier();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v2.Test.identifier");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional .cavnue.messages.data_warehouse.management.v2.Test.TestDefinition definition = 3 [json_name = "definition", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::definition(this),
        _Internal::definition(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.management.v2.Test)
  return target;
}

::size_t Test::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.management.v2.Test)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string identifier = 2 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_identifier());
    }

    // optional .cavnue.messages.data_warehouse.management.v2.Test.TestDefinition definition = 3 [json_name = "definition", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.definition_);
    }

    // optional int64 test_id = 1 [json_name = "testId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_test_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Test::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Test::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Test::GetClassData() const { return &_class_data_; }


void Test::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Test*>(&to_msg);
  auto& from = static_cast<const Test&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.management.v2.Test)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_definition()->::cavnue::messages::data_warehouse::management::v2::Test_TestDefinition::MergeFrom(
          from._internal_definition());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.test_id_ = from._impl_.test_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Test::CopyFrom(const Test& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.management.v2.Test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test::IsInitialized() const {
  return true;
}

void Test::InternalSwap(Test* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identifier_, lhs_arena,
                                       &other->_impl_.identifier_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Test, _impl_.test_id_)
      + sizeof(Test::_impl_.test_id_)
      - PROTOBUF_FIELD_OFFSET(Test, _impl_.definition_)>(
          reinterpret_cast<char*>(&_impl_.definition_),
          reinterpret_cast<char*>(&other->_impl_.definition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Test::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto[1]);
}
// ===================================================================

class TestRun::_Internal {
 public:
  using HasBits = decltype(std::declval<TestRun>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TestRun, _impl_._has_bits_);
  static void set_has_test_run_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_test_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cohort_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts(const TestRun* msg);
  static void set_has_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TestRun::_Internal::ts(const TestRun* msg) {
  return *msg->_impl_.ts_;
}
void TestRun::clear_ts() {
  if (_impl_.ts_ != nullptr) _impl_.ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TestRun::TestRun(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.management.v2.TestRun)
}
TestRun::TestRun(const TestRun& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestRun* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.ts_){nullptr}
    , decltype(_impl_.test_run_id_) {}

    , decltype(_impl_.test_id_) {}

    , decltype(_impl_.cohort_id_) {}

    , decltype(_impl_.duration_) {}

    , decltype(_impl_.hv_) {}

    , decltype(_impl_.tv1_) {}

    , decltype(_impl_.tv2_) {}

    , decltype(_impl_.sv_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identifier().empty()) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.ts_);
  }
  ::memcpy(&_impl_.test_run_id_, &from._impl_.test_run_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.sv_) -
    reinterpret_cast<char*>(&_impl_.test_run_id_)) + sizeof(_impl_.sv_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.management.v2.TestRun)
}

inline void TestRun::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.ts_){nullptr}
    , decltype(_impl_.test_run_id_) { ::int64_t{0} }

    , decltype(_impl_.test_id_) { ::int64_t{0} }

    , decltype(_impl_.cohort_id_) { ::int64_t{0} }

    , decltype(_impl_.duration_) { ::int64_t{0} }

    , decltype(_impl_.hv_) { ::int64_t{0} }

    , decltype(_impl_.tv1_) { ::int64_t{0} }

    , decltype(_impl_.tv2_) { ::int64_t{0} }

    , decltype(_impl_.sv_) { ::int64_t{0} }

  };
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestRun::~TestRun() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.management.v2.TestRun)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestRun::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ts_;
}

void TestRun::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestRun::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.management.v2.TestRun)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.identifier_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.ts_ != nullptr);
    _impl_.ts_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.test_run_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.duration_) -
        reinterpret_cast<char*>(&_impl_.test_run_id_)) + sizeof(_impl_.duration_));
  }
  ::memset(&_impl_.hv_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.sv_) -
      reinterpret_cast<char*>(&_impl_.hv_)) + sizeof(_impl_.sv_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestRun::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 test_run_id = 1 [json_name = "testRunId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "test_id", (.cavnue.messages.common.v1.derivation) = "ts", (.cavnue.messages.common.v1.derivation) = "cohort_id", (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_test_run_id(&has_bits);
          _impl_.test_run_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 test_id = 2 [json_name = "testId", (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_test_id(&has_bits);
          _impl_.test_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 cohort_id = 3 [json_name = "cohortId", (.gen_bq_schema.bigquery) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_cohort_id(&has_bits);
          _impl_.cohort_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .google.protobuf.Timestamp ts = 4 [json_name = "ts", (.gen_bq_schema.bigquery) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 duration = 5 [json_name = "duration", (.gen_bq_schema.bigquery) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 hv = 6 [json_name = "hv"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.hv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 tv1 = 7 [json_name = "tv1"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.tv1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 tv2 = 8 [json_name = "tv2"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.tv2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 sv = 9 [json_name = "sv"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _impl_.sv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string identifier = 10 [json_name = "identifier"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v2.TestRun.identifier"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TestRun::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.management.v2.TestRun)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 test_run_id = 1 [json_name = "testRunId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "test_id", (.cavnue.messages.common.v1.derivation) = "ts", (.cavnue.messages.common.v1.derivation) = "cohort_id", (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_test_run_id(), target);
  }

  // optional int64 test_id = 2 [json_name = "testId", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_test_id(), target);
  }

  // optional int64 cohort_id = 3 [json_name = "cohortId", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_cohort_id(), target);
  }

  // optional .google.protobuf.Timestamp ts = 4 [json_name = "ts", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::ts(this),
        _Internal::ts(this).GetCachedSize(), target, stream);
  }

  // optional int64 duration = 5 [json_name = "duration", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        5, this->_internal_duration(), target);
  }

  // int64 hv = 6 [json_name = "hv"];
  if (this->_internal_hv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        6, this->_internal_hv(), target);
  }

  // int64 tv1 = 7 [json_name = "tv1"];
  if (this->_internal_tv1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        7, this->_internal_tv1(), target);
  }

  // int64 tv2 = 8 [json_name = "tv2"];
  if (this->_internal_tv2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        8, this->_internal_tv2(), target);
  }

  // int64 sv = 9 [json_name = "sv"];
  if (this->_internal_sv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        9, this->_internal_sv(), target);
  }

  // string identifier = 10 [json_name = "identifier"];
  if (!this->_internal_identifier().empty()) {
    const std::string& _s = this->_internal_identifier();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v2.TestRun.identifier");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.management.v2.TestRun)
  return target;
}

::size_t TestRun::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.management.v2.TestRun)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string identifier = 10 [json_name = "identifier"];
  if (!this->_internal_identifier().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_identifier());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .google.protobuf.Timestamp ts = 4 [json_name = "ts", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ts_);
    }

    // optional int64 test_run_id = 1 [json_name = "testRunId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "test_id", (.cavnue.messages.common.v1.derivation) = "ts", (.cavnue.messages.common.v1.derivation) = "cohort_id", (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_test_run_id());
    }

    // optional int64 test_id = 2 [json_name = "testId", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_test_id());
    }

    // optional int64 cohort_id = 3 [json_name = "cohortId", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_cohort_id());
    }

    // optional int64 duration = 5 [json_name = "duration", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_duration());
    }

  }
  // int64 hv = 6 [json_name = "hv"];
  if (this->_internal_hv() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_hv());
  }

  // int64 tv1 = 7 [json_name = "tv1"];
  if (this->_internal_tv1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_tv1());
  }

  // int64 tv2 = 8 [json_name = "tv2"];
  if (this->_internal_tv2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_tv2());
  }

  // int64 sv = 9 [json_name = "sv"];
  if (this->_internal_sv() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_sv());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestRun::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestRun::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestRun::GetClassData() const { return &_class_data_; }


void TestRun::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestRun*>(&to_msg);
  auto& from = static_cast<const TestRun&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.management.v2.TestRun)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_identifier().empty()) {
    _this->_internal_set_identifier(from._internal_identifier());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_ts());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.test_run_id_ = from._impl_.test_run_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.test_id_ = from._impl_.test_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.cohort_id_ = from._impl_.cohort_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_hv() != 0) {
    _this->_internal_set_hv(from._internal_hv());
  }
  if (from._internal_tv1() != 0) {
    _this->_internal_set_tv1(from._internal_tv1());
  }
  if (from._internal_tv2() != 0) {
    _this->_internal_set_tv2(from._internal_tv2());
  }
  if (from._internal_sv() != 0) {
    _this->_internal_set_sv(from._internal_sv());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestRun::CopyFrom(const TestRun& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.management.v2.TestRun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRun::IsInitialized() const {
  return true;
}

void TestRun::InternalSwap(TestRun* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identifier_, lhs_arena,
                                       &other->_impl_.identifier_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestRun, _impl_.sv_)
      + sizeof(TestRun::_impl_.sv_)
      - PROTOBUF_FIELD_OFFSET(TestRun, _impl_.ts_)>(
          reinterpret_cast<char*>(&_impl_.ts_),
          reinterpret_cast<char*>(&other->_impl_.ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestRun::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto[2]);
}
// ===================================================================

class TestArtifact::_Internal {
 public:
  using HasBits = decltype(std::declval<TestArtifact>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TestArtifact, _impl_._has_bits_);
  static void set_has_test_artifact_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_test_run_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_test_artifact_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestArtifact::TestArtifact(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.management.v2.TestArtifact)
}
TestArtifact::TestArtifact(const TestArtifact& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestArtifact* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.test_asset_id_) { from._impl_.test_asset_id_ }
    ,/* _impl_._test_asset_id_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.asset_role_){from._impl_.asset_role_}
    , decltype(_impl_.uri_) {}

    , decltype(_impl_.test_artifact_id_) {}

    , decltype(_impl_.test_run_id_) {}

    , decltype(_impl_.test_artifact_type_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.uri_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.uri_.Set(from._internal_uri(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.test_artifact_id_, &from._impl_.test_artifact_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.test_artifact_type_id_) -
    reinterpret_cast<char*>(&_impl_.test_artifact_id_)) + sizeof(_impl_.test_artifact_type_id_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.management.v2.TestArtifact)
}

inline void TestArtifact::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.test_asset_id_) { arena }
    ,/* _impl_._test_asset_id_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.asset_role_){arena}
    , decltype(_impl_.uri_) {}

    , decltype(_impl_.test_artifact_id_) { ::int64_t{0} }

    , decltype(_impl_.test_run_id_) { ::int64_t{0} }

    , decltype(_impl_.test_artifact_type_id_) { ::int64_t{0} }

  };
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.uri_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestArtifact::~TestArtifact() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.management.v2.TestArtifact)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestArtifact::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.test_asset_id_.~RepeatedField();
  _internal_mutable_asset_role()->~RepeatedPtrField();
  _impl_.uri_.Destroy();
}

void TestArtifact::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestArtifact::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.management.v2.TestArtifact)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_test_asset_id()->Clear();
  _internal_mutable_asset_role()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.uri_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.test_artifact_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.test_artifact_type_id_) -
        reinterpret_cast<char*>(&_impl_.test_artifact_id_)) + sizeof(_impl_.test_artifact_type_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestArtifact::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 test_artifact_id = 1 [json_name = "testArtifactId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "uri", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_test_artifact_id(&has_bits);
          _impl_.test_artifact_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 test_run_id = 2 [json_name = "testRunId", (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_test_run_id(&has_bits);
          _impl_.test_run_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int64 test_asset_id = 3 [json_name = "testAssetId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_test_asset_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 24) {
          _internal_add_test_asset_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string asset_role = 4 [json_name = "assetRole"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_asset_role();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v2.TestArtifact.asset_role"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 test_artifact_type_id = 5 [json_name = "testArtifactTypeId", (.gen_bq_schema.bigquery) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_test_artifact_type_id(&has_bits);
          _impl_.test_artifact_type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string uri = 6 [json_name = "uri", (.gen_bq_schema.bigquery) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v2.TestArtifact.uri"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TestArtifact::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.management.v2.TestArtifact)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 test_artifact_id = 1 [json_name = "testArtifactId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "uri", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_test_artifact_id(), target);
  }

  // optional int64 test_run_id = 2 [json_name = "testRunId", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_test_run_id(), target);
  }

  // repeated int64 test_asset_id = 3 [json_name = "testAssetId"];
  {
    int byte_size = _impl_._test_asset_id_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(3, _internal_test_asset_id(),
                                                 byte_size, target);
    }
  }

  // repeated string asset_role = 4 [json_name = "assetRole"];
  for (int i = 0, n = this->_internal_asset_role_size(); i < n; ++i) {
    const auto& s = this->_internal_asset_role(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v2.TestArtifact.asset_role");
    target = stream->WriteString(4, s, target);
  }

  // optional int64 test_artifact_type_id = 5 [json_name = "testArtifactTypeId", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        5, this->_internal_test_artifact_type_id(), target);
  }

  // optional string uri = 6 [json_name = "uri", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_uri();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v2.TestArtifact.uri");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.management.v2.TestArtifact)
  return target;
}

::size_t TestArtifact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.management.v2.TestArtifact)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 test_asset_id = 3 [json_name = "testAssetId"];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_test_asset_id())
    ;
    _impl_._test_asset_id_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated string asset_role = 4 [json_name = "assetRole"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_asset_role().size());
  for (int i = 0, n = _internal_asset_role().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_asset_role().Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string uri = 6 [json_name = "uri", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_uri());
    }

    // optional int64 test_artifact_id = 1 [json_name = "testArtifactId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "uri", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_test_artifact_id());
    }

    // optional int64 test_run_id = 2 [json_name = "testRunId", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_test_run_id());
    }

    // optional int64 test_artifact_type_id = 5 [json_name = "testArtifactTypeId", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_test_artifact_type_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestArtifact::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestArtifact::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestArtifact::GetClassData() const { return &_class_data_; }


void TestArtifact::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestArtifact*>(&to_msg);
  auto& from = static_cast<const TestArtifact&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.management.v2.TestArtifact)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.test_asset_id_.MergeFrom(from._impl_.test_asset_id_);
  _this->_internal_mutable_asset_role()->MergeFrom(from._internal_asset_role());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_uri(from._internal_uri());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.test_artifact_id_ = from._impl_.test_artifact_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.test_run_id_ = from._impl_.test_run_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.test_artifact_type_id_ = from._impl_.test_artifact_type_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestArtifact::CopyFrom(const TestArtifact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.management.v2.TestArtifact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestArtifact::IsInitialized() const {
  return true;
}

void TestArtifact::InternalSwap(TestArtifact* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.test_asset_id_.InternalSwap(&other->_impl_.test_asset_id_);
  _internal_mutable_asset_role()->InternalSwap(
      other->_internal_mutable_asset_role());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uri_, lhs_arena,
                                       &other->_impl_.uri_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestArtifact, _impl_.test_artifact_type_id_)
      + sizeof(TestArtifact::_impl_.test_artifact_type_id_)
      - PROTOBUF_FIELD_OFFSET(TestArtifact, _impl_.test_artifact_id_)>(
          reinterpret_cast<char*>(&_impl_.test_artifact_id_),
          reinterpret_cast<char*>(&other->_impl_.test_artifact_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestArtifact::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto[3]);
}
// ===================================================================

class TestAsset::_Internal {
 public:
  using HasBits = decltype(std::declval<TestAsset>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TestAsset, _impl_._has_bits_);
  static void set_has_test_asset_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TestAsset::TestAsset(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.management.v2.TestAsset)
}
TestAsset::TestAsset(const TestAsset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestAsset* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.test_asset_id_) {}

    , decltype(_impl_.version_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.test_asset_id_, &from._impl_.test_asset_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.version_) -
    reinterpret_cast<char*>(&_impl_.test_asset_id_)) + sizeof(_impl_.version_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.management.v2.TestAsset)
}

inline void TestAsset::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.test_asset_id_) { ::int64_t{0} }

    , decltype(_impl_.version_) { ::int64_t{0} }

  };
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestAsset::~TestAsset() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.management.v2.TestAsset)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestAsset::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identifier_.Destroy();
}

void TestAsset::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestAsset::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.management.v2.TestAsset)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.identifier_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.test_asset_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.version_) -
        reinterpret_cast<char*>(&_impl_.test_asset_id_)) + sizeof(_impl_.version_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestAsset::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 test_asset_id = 1 [json_name = "testAssetId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.derivation) = "version", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_test_asset_id(&has_bits);
          _impl_.test_asset_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string identifier = 2 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v2.TestAsset.identifier"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 version = 3 [json_name = "version", (.gen_bq_schema.bigquery) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TestAsset::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.management.v2.TestAsset)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 test_asset_id = 1 [json_name = "testAssetId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.derivation) = "version", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_test_asset_id(), target);
  }

  // optional string identifier = 2 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_identifier();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v2.TestAsset.identifier");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional int64 version = 3 [json_name = "version", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.management.v2.TestAsset)
  return target;
}

::size_t TestAsset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.management.v2.TestAsset)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string identifier = 2 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_identifier());
    }

    // optional int64 test_asset_id = 1 [json_name = "testAssetId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.derivation) = "version", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_test_asset_id());
    }

    // optional int64 version = 3 [json_name = "version", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestAsset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestAsset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestAsset::GetClassData() const { return &_class_data_; }


void TestAsset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestAsset*>(&to_msg);
  auto& from = static_cast<const TestAsset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.management.v2.TestAsset)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.test_asset_id_ = from._impl_.test_asset_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestAsset::CopyFrom(const TestAsset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.management.v2.TestAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAsset::IsInitialized() const {
  return true;
}

void TestAsset::InternalSwap(TestAsset* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identifier_, lhs_arena,
                                       &other->_impl_.identifier_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestAsset, _impl_.version_)
      + sizeof(TestAsset::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(TestAsset, _impl_.test_asset_id_)>(
          reinterpret_cast<char*>(&_impl_.test_asset_id_),
          reinterpret_cast<char*>(&other->_impl_.test_asset_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAsset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto[4]);
}
// ===================================================================

class TestArtifactType::_Internal {
 public:
  using HasBits = decltype(std::declval<TestArtifactType>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TestArtifactType, _impl_._has_bits_);
  static void set_has_test_artifact_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TestArtifactType::TestArtifactType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.management.v2.TestArtifactType)
}
TestArtifactType::TestArtifactType(const TestArtifactType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestArtifactType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.test_artifact_type_id_) {}

    , decltype(_impl_.version_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.test_artifact_type_id_, &from._impl_.test_artifact_type_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.version_) -
    reinterpret_cast<char*>(&_impl_.test_artifact_type_id_)) + sizeof(_impl_.version_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.management.v2.TestArtifactType)
}

inline void TestArtifactType::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.test_artifact_type_id_) { ::int64_t{0} }

    , decltype(_impl_.version_) { ::int64_t{0} }

  };
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestArtifactType::~TestArtifactType() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.management.v2.TestArtifactType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestArtifactType::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identifier_.Destroy();
}

void TestArtifactType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestArtifactType::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.management.v2.TestArtifactType)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.identifier_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.test_artifact_type_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.version_) -
        reinterpret_cast<char*>(&_impl_.test_artifact_type_id_)) + sizeof(_impl_.version_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestArtifactType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 test_artifact_type_id = 1 [json_name = "testArtifactTypeId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.derivation) = "version", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_test_artifact_type_id(&has_bits);
          _impl_.test_artifact_type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string identifier = 2 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v2.TestArtifactType.identifier"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 version = 3 [json_name = "version", (.gen_bq_schema.bigquery) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TestArtifactType::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.management.v2.TestArtifactType)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 test_artifact_type_id = 1 [json_name = "testArtifactTypeId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.derivation) = "version", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_test_artifact_type_id(), target);
  }

  // optional string identifier = 2 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_identifier();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v2.TestArtifactType.identifier");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional int64 version = 3 [json_name = "version", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.management.v2.TestArtifactType)
  return target;
}

::size_t TestArtifactType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.management.v2.TestArtifactType)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string identifier = 2 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_identifier());
    }

    // optional int64 test_artifact_type_id = 1 [json_name = "testArtifactTypeId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.derivation) = "version", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_test_artifact_type_id());
    }

    // optional int64 version = 3 [json_name = "version", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestArtifactType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestArtifactType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestArtifactType::GetClassData() const { return &_class_data_; }


void TestArtifactType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestArtifactType*>(&to_msg);
  auto& from = static_cast<const TestArtifactType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.management.v2.TestArtifactType)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.test_artifact_type_id_ = from._impl_.test_artifact_type_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestArtifactType::CopyFrom(const TestArtifactType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.management.v2.TestArtifactType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestArtifactType::IsInitialized() const {
  return true;
}

void TestArtifactType::InternalSwap(TestArtifactType* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identifier_, lhs_arena,
                                       &other->_impl_.identifier_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestArtifactType, _impl_.version_)
      + sizeof(TestArtifactType::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(TestArtifactType, _impl_.test_artifact_type_id_)>(
          reinterpret_cast<char*>(&_impl_.test_artifact_type_id_),
          reinterpret_cast<char*>(&other->_impl_.test_artifact_type_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestArtifactType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2ftests_2eproto[5]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace management
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::management::v2::Test_TestDefinition*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::management::v2::Test_TestDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::management::v2::Test_TestDefinition >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::management::v2::Test*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::management::v2::Test >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::management::v2::Test >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::management::v2::TestRun*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::management::v2::TestRun >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::management::v2::TestRun >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::management::v2::TestArtifact*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::management::v2::TestArtifact >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::management::v2::TestArtifact >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::management::v2::TestAsset*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::management::v2::TestAsset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::management::v2::TestAsset >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::management::v2::TestArtifactType*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::management::v2::TestArtifactType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::management::v2::TestArtifactType >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

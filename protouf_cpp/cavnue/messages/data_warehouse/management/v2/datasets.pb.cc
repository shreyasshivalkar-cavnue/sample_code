// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/data_warehouse/management/v2/datasets.proto

#include "cavnue/messages/data_warehouse/management/v2/datasets.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace management {
namespace v2 {
template <typename>
PROTOBUF_CONSTEXPR Dataset::Dataset(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_ids_)*/ {}
  ,/* _impl_._data_ids_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.identifier_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sim_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.start_ts_)*/nullptr
  , /*decltype(_impl_.end_ts_)*/nullptr
  , /*decltype(_impl_.dataset_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.environment_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.cohort_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.type_)*/ 0
} {}
struct DatasetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DatasetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DatasetDefaultTypeInternal() {}
  union {
    Dataset _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DatasetDefaultTypeInternal _Dataset_default_instance_;
}  // namespace v2
}  // namespace management
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
static ::_pb::Metadata file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasets_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasets_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasets_2eproto = nullptr;
const ::uint32_t TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasets_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Dataset, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Dataset, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Dataset, _impl_.dataset_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Dataset, _impl_.identifier_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Dataset, _impl_.environment_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Dataset, _impl_.data_ids_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Dataset, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Dataset, _impl_.start_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Dataset, _impl_.end_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Dataset, _impl_.sim_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Dataset, _impl_.cohort_id_),
    3,
    0,
    4,
    ~0u,
    ~0u,
    1,
    2,
    ~0u,
    5,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 17, -1, sizeof(::cavnue::messages::data_warehouse::management::v2::Dataset)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cavnue::messages::data_warehouse::management::v2::_Dataset_default_instance_._instance,
};
const char descriptor_table_protodef_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasets_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n;cavnue/messages/data_warehouse/managem"
    "ent/v2/datasets.proto\022,cavnue.messages.d"
    "ata_warehouse.management.v2\032\'cavnue/thir"
    "d_party/bq/v1/bq_field.proto\032\'cavnue/thi"
    "rd_party/bq/v1/bq_table.proto\032-cavnue/me"
    "ssages/common/v1/field_options.proto\032\037go"
    "ogle/protobuf/timestamp.proto\"\312\005\n\007Datase"
    "t\022.\n\ndataset_id\030\001 \001(\003B\n\230\265\030\001\212\371+\002\010\001H\000R\tdat"
    "asetId\210\001\001\022+\n\nidentifier\030\002 \001(\tB\006\212\371+\002\010\001H\001R"
    "\nidentifier\210\001\001\0224\n\016environment_id\030\003 \001(\003B\010"
    "\212\371+\004\010\001@\001H\002R\renvironmentId\210\001\001\022\031\n\010data_ids"
    "\030\004 \003(\003R\007dataIds\022N\n\004type\030\005 \001(\0162:.cavnue.m"
    "essages.data_warehouse.management.v2.Dat"
    "aset.TypeR\004type\022M\n\010start_ts\030\006 \001(\0132\032.goog"
    "le.protobuf.TimestampB\021\212\371+\r\010\001\022\tTIMESTAMP"
    "H\003R\007startTs\210\001\001\022I\n\006end_ts\030\007 \001(\0132\032.google."
    "protobuf.TimestampB\021\212\371+\r\010\001\022\tTIMESTAMPH\004R"
    "\005endTs\210\001\001\022\025\n\006sim_id\030\010 \001(\tR\005simId\022*\n\tcoho"
    "rt_id\030\t \001(\003B\010\212\371+\004\010\001@\001H\005R\010cohortId\210\001\001\"}\n\004"
    "Type\022\024\n\020TYPE_UNSPECIFIED\020\000\022\021\n\rTYPE_SPEED"
    "ING\020\001\022\021\n\rTYPE_IMPEDING\020\002\022\023\n\017TYPE_STATION"
    "ARY\020\003\022\020\n\014TYPE_TRAFFIC\020\004\022\022\n\016TYPE_COLLISIO"
    "N\020\005:\016\202\371+\n\n\010DatasetsB\r\n\013_dataset_idB\r\n\013_i"
    "dentifierB\021\n\017_environment_idB\013\n\t_start_t"
    "sB\t\n\007_end_tsB\014\n\n_cohort_idb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasets_2eproto_deps[4] =
    {
        &::descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2ffield_5foptions_2eproto,
        &::descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ffield_2eproto,
        &::descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasets_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasets_2eproto = {
    false,
    false,
    994,
    descriptor_table_protodef_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasets_2eproto,
    "cavnue/messages/data_warehouse/management/v2/datasets.proto",
    &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasets_2eproto_once,
    descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasets_2eproto_deps,
    4,
    1,
    schemas,
    file_default_instances,
    TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasets_2eproto::offsets,
    file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasets_2eproto,
    file_level_enum_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasets_2eproto,
    file_level_service_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasets_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasets_2eproto_getter() {
  return &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasets_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasets_2eproto(&descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasets_2eproto);
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace management {
namespace v2 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dataset_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasets_2eproto);
  return file_level_enum_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasets_2eproto[0];
}
bool Dataset_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Dataset_Type Dataset::TYPE_UNSPECIFIED;
constexpr Dataset_Type Dataset::TYPE_SPEEDING;
constexpr Dataset_Type Dataset::TYPE_IMPEDING;
constexpr Dataset_Type Dataset::TYPE_STATIONARY;
constexpr Dataset_Type Dataset::TYPE_TRAFFIC;
constexpr Dataset_Type Dataset::TYPE_COLLISION;
constexpr Dataset_Type Dataset::Type_MIN;
constexpr Dataset_Type Dataset::Type_MAX;
constexpr int Dataset::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class Dataset::_Internal {
 public:
  using HasBits = decltype(std::declval<Dataset>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Dataset, _impl_._has_bits_);
  static void set_has_dataset_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_environment_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_ts(const Dataset* msg);
  static void set_has_start_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_ts(const Dataset* msg);
  static void set_has_end_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cohort_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Dataset::_Internal::start_ts(const Dataset* msg) {
  return *msg->_impl_.start_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Dataset::_Internal::end_ts(const Dataset* msg) {
  return *msg->_impl_.end_ts_;
}
void Dataset::clear_start_ts() {
  if (_impl_.start_ts_ != nullptr) _impl_.start_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Dataset::clear_end_ts() {
  if (_impl_.end_ts_ != nullptr) _impl_.end_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
Dataset::Dataset(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.management.v2.Dataset)
}
Dataset::Dataset(const Dataset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Dataset* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_ids_) { from._impl_.data_ids_ }
    ,/* _impl_._data_ids_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.sim_id_) {}

    , decltype(_impl_.start_ts_){nullptr}
    , decltype(_impl_.end_ts_){nullptr}
    , decltype(_impl_.dataset_id_) {}

    , decltype(_impl_.environment_id_) {}

    , decltype(_impl_.cohort_id_) {}

    , decltype(_impl_.type_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), _this->GetArenaForAllocation());
  }
  _impl_.sim_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sim_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sim_id().empty()) {
    _this->_impl_.sim_id_.Set(from._internal_sim_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.start_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.start_ts_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.end_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.end_ts_);
  }
  ::memcpy(&_impl_.dataset_id_, &from._impl_.dataset_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.dataset_id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.management.v2.Dataset)
}

inline void Dataset::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_ids_) { arena }
    ,/* _impl_._data_ids_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.sim_id_) {}

    , decltype(_impl_.start_ts_){nullptr}
    , decltype(_impl_.end_ts_){nullptr}
    , decltype(_impl_.dataset_id_) { ::int64_t{0} }

    , decltype(_impl_.environment_id_) { ::int64_t{0} }

    , decltype(_impl_.cohort_id_) { ::int64_t{0} }

    , decltype(_impl_.type_) { 0 }

  };
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sim_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sim_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Dataset::~Dataset() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.management.v2.Dataset)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Dataset::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_ids_.~RepeatedField();
  _impl_.identifier_.Destroy();
  _impl_.sim_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.start_ts_;
  if (this != internal_default_instance()) delete _impl_.end_ts_;
}

void Dataset::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Dataset::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.management.v2.Dataset)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_data_ids()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.identifier_.ClearNonDefaultToEmpty();
  }
  _impl_.sim_id_.ClearToEmpty();
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.start_ts_ != nullptr);
      _impl_.start_ts_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.end_ts_ != nullptr);
      _impl_.end_ts_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&_impl_.dataset_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.cohort_id_) -
        reinterpret_cast<char*>(&_impl_.dataset_id_)) + sizeof(_impl_.cohort_id_));
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dataset::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 dataset_id = 1 [json_name = "datasetId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_dataset_id(&has_bits);
          _impl_.dataset_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string identifier = 2 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v2.Dataset.identifier"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 environment_id = 3 [json_name = "environmentId", (.gen_bq_schema.bigquery) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_environment_id(&has_bits);
          _impl_.environment_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int64 data_ids = 4 [json_name = "dataIds"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_data_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 32) {
          _internal_add_data_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.data_warehouse.management.v2.Dataset.Type type = 5 [json_name = "type"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::cavnue::messages::data_warehouse::management::v2::Dataset_Type>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .google.protobuf.Timestamp start_ts = 6 [json_name = "startTs", (.gen_bq_schema.bigquery) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .google.protobuf.Timestamp end_ts = 7 [json_name = "endTs", (.gen_bq_schema.bigquery) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string sim_id = 8 [json_name = "simId"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_sim_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v2.Dataset.sim_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 cohort_id = 9 [json_name = "cohortId", (.gen_bq_schema.bigquery) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_cohort_id(&has_bits);
          _impl_.cohort_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Dataset::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.management.v2.Dataset)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 dataset_id = 1 [json_name = "datasetId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_dataset_id(), target);
  }

  // optional string identifier = 2 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_identifier();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v2.Dataset.identifier");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional int64 environment_id = 3 [json_name = "environmentId", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_environment_id(), target);
  }

  // repeated int64 data_ids = 4 [json_name = "dataIds"];
  {
    int byte_size = _impl_._data_ids_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(4, _internal_data_ids(),
                                                 byte_size, target);
    }
  }

  // .cavnue.messages.data_warehouse.management.v2.Dataset.Type type = 5 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_type(), target);
  }

  // optional .google.protobuf.Timestamp start_ts = 6 [json_name = "startTs", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::start_ts(this),
        _Internal::start_ts(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Timestamp end_ts = 7 [json_name = "endTs", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::end_ts(this),
        _Internal::end_ts(this).GetCachedSize(), target, stream);
  }

  // string sim_id = 8 [json_name = "simId"];
  if (!this->_internal_sim_id().empty()) {
    const std::string& _s = this->_internal_sim_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v2.Dataset.sim_id");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // optional int64 cohort_id = 9 [json_name = "cohortId", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        9, this->_internal_cohort_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.management.v2.Dataset)
  return target;
}

::size_t Dataset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.management.v2.Dataset)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 data_ids = 4 [json_name = "dataIds"];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_data_ids())
    ;
    _impl_._data_ids_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // optional string identifier = 2 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_identifier());
  }

  // string sim_id = 8 [json_name = "simId"];
  if (!this->_internal_sim_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sim_id());
  }

  if (cached_has_bits & 0x0000003eu) {
    // optional .google.protobuf.Timestamp start_ts = 6 [json_name = "startTs", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.start_ts_);
    }

    // optional .google.protobuf.Timestamp end_ts = 7 [json_name = "endTs", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.end_ts_);
    }

    // optional int64 dataset_id = 1 [json_name = "datasetId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_dataset_id());
    }

    // optional int64 environment_id = 3 [json_name = "environmentId", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_environment_id());
    }

    // optional int64 cohort_id = 9 [json_name = "cohortId", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_cohort_id());
    }

  }
  // .cavnue.messages.data_warehouse.management.v2.Dataset.Type type = 5 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Dataset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Dataset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Dataset::GetClassData() const { return &_class_data_; }


void Dataset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Dataset*>(&to_msg);
  auto& from = static_cast<const Dataset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.management.v2.Dataset)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_ids_.MergeFrom(from._impl_.data_ids_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_identifier(from._internal_identifier());
  }
  if (!from._internal_sim_id().empty()) {
    _this->_internal_set_sim_id(from._internal_sim_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_start_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_start_ts());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_end_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_end_ts());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.dataset_id_ = from._impl_.dataset_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.environment_id_ = from._impl_.environment_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.cohort_id_ = from._impl_.cohort_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Dataset::CopyFrom(const Dataset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.management.v2.Dataset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dataset::IsInitialized() const {
  return true;
}

void Dataset::InternalSwap(Dataset* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.data_ids_.InternalSwap(&other->_impl_.data_ids_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identifier_, lhs_arena,
                                       &other->_impl_.identifier_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sim_id_, lhs_arena,
                                       &other->_impl_.sim_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Dataset, _impl_.type_)
      + sizeof(Dataset::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Dataset, _impl_.start_ts_)>(
          reinterpret_cast<char*>(&_impl_.start_ts_),
          reinterpret_cast<char*>(&other->_impl_.start_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Dataset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasets_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasets_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasets_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace management
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::management::v2::Dataset*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::management::v2::Dataset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::management::v2::Dataset >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

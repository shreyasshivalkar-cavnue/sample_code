// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/data_warehouse/management/v2/infrastructure.proto

#include "cavnue/messages/data_warehouse/management/v2/infrastructure.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace management {
namespace v2 {
template <typename>
PROTOBUF_CONSTEXPR Organization::Organization(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.identifier_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.display_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.organization_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.active_)*/ false
} {}
struct OrganizationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrganizationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrganizationDefaultTypeInternal() {}
  union {
    Organization _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrganizationDefaultTypeInternal _Organization_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Deployment::Deployment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.identifier_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.display_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.deployment_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.organization_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.active_)*/ false
} {}
struct DeploymentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeploymentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeploymentDefaultTypeInternal() {}
  union {
    Deployment _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeploymentDefaultTypeInternal _Deployment_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Environment::Environment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.identifier_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.display_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.environment_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.deployment_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.active_)*/ false
} {}
struct EnvironmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnvironmentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnvironmentDefaultTypeInternal() {}
  union {
    Environment _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnvironmentDefaultTypeInternal _Environment_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Cohort::Cohort(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.identifier_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.display_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.cohort_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.environment_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.active_)*/ false
} {}
struct CohortDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CohortDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CohortDefaultTypeInternal() {}
  union {
    Cohort _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CohortDefaultTypeInternal _Cohort_default_instance_;
}  // namespace v2
}  // namespace management
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
static ::_pb::Metadata file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2finfrastructure_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2finfrastructure_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2finfrastructure_2eproto = nullptr;
const ::uint32_t TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2finfrastructure_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Organization, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Organization, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Organization, _impl_.organization_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Organization, _impl_.identifier_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Organization, _impl_.display_name_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Organization, _impl_.active_),
    2,
    0,
    1,
    3,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Deployment, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Deployment, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Deployment, _impl_.deployment_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Deployment, _impl_.identifier_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Deployment, _impl_.organization_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Deployment, _impl_.display_name_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Deployment, _impl_.active_),
    2,
    0,
    3,
    1,
    4,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Environment, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Environment, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Environment, _impl_.environment_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Environment, _impl_.deployment_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Environment, _impl_.identifier_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Environment, _impl_.display_name_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Environment, _impl_.active_),
    2,
    3,
    0,
    1,
    4,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Cohort, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Cohort, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Cohort, _impl_.cohort_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Cohort, _impl_.environment_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Cohort, _impl_.identifier_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Cohort, _impl_.display_name_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Cohort, _impl_.active_),
    2,
    3,
    0,
    1,
    4,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 12, -1, sizeof(::cavnue::messages::data_warehouse::management::v2::Organization)},
        { 16, 29, -1, sizeof(::cavnue::messages::data_warehouse::management::v2::Deployment)},
        { 34, 47, -1, sizeof(::cavnue::messages::data_warehouse::management::v2::Environment)},
        { 52, 65, -1, sizeof(::cavnue::messages::data_warehouse::management::v2::Cohort)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cavnue::messages::data_warehouse::management::v2::_Organization_default_instance_._instance,
    &::cavnue::messages::data_warehouse::management::v2::_Deployment_default_instance_._instance,
    &::cavnue::messages::data_warehouse::management::v2::_Environment_default_instance_._instance,
    &::cavnue::messages::data_warehouse::management::v2::_Cohort_default_instance_._instance,
};
const char descriptor_table_protodef_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2finfrastructure_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\nAcavnue/messages/data_warehouse/managem"
    "ent/v2/infrastructure.proto\022,cavnue.mess"
    "ages.data_warehouse.management.v2\032\'cavnu"
    "e/third_party/bq/v1/bq_field.proto\032\'cavn"
    "ue/third_party/bq/v1/bq_table.proto\032&cav"
    "nue/messages/common/v1/common.proto\032-cav"
    "nue/messages/common/v1/field_options.pro"
    "to\"\236\002\n\014Organization\0228\n\017organization_id\030\001"
    " \001(\003B\n\230\265\030\001\212\371+\002\010\001H\000R\016organizationId\210\001\001\022+\n"
    "\nidentifier\030\002 \001(\tB\006\212\371+\002\010\001H\001R\nidentifier\210"
    "\001\001\022.\n\014display_name\030\003 \001(\tB\006\212\371+\002\010\001H\002R\013disp"
    "layName\210\001\001\022#\n\006active\030\004 \001(\010B\006\212\371+\002\010\001H\003R\006ac"
    "tive\210\001\001:\023\202\371+\017\n\rOrganizationsB\022\n\020_organiz"
    "ation_idB\r\n\013_identifierB\017\n\r_display_name"
    "B\t\n\007_active\"\336\002\n\nDeployment\0224\n\rdeployment"
    "_id\030\001 \001(\003B\n\230\265\030\001\212\371+\002\010\001H\000R\014deploymentId\210\001\001"
    "\022+\n\nidentifier\030\002 \001(\tB\006\212\371+\002\010\001H\001R\nidentifi"
    "er\210\001\001\0224\n\017organization_id\030\003 \001(\003B\006\212\371+\002\010\001H\002"
    "R\016organizationId\210\001\001\022.\n\014display_name\030\004 \001("
    "\tB\006\212\371+\002\010\001H\003R\013displayName\210\001\001\022#\n\006active\030\005 "
    "\001(\010B\006\212\371+\002\010\001H\004R\006active\210\001\001:\021\202\371+\r\n\013Deployme"
    "ntsB\020\n\016_deployment_idB\r\n\013_identifierB\022\n\020"
    "_organization_idB\017\n\r_display_nameB\t\n\007_ac"
    "tive\"\335\002\n\013Environment\0226\n\016environment_id\030\001"
    " \001(\003B\n\230\265\030\001\212\371+\002\010\001H\000R\renvironmentId\210\001\001\0220\n\r"
    "deployment_id\030\002 \001(\003B\006\212\371+\002\010\001H\001R\014deploymen"
    "tId\210\001\001\022+\n\nidentifier\030\003 \001(\tB\006\212\371+\002\010\001H\002R\nid"
    "entifier\210\001\001\022.\n\014display_name\030\004 \001(\tB\006\212\371+\002\010"
    "\001H\003R\013displayName\210\001\001\022#\n\006active\030\005 \001(\010B\006\212\371+"
    "\002\010\001H\004R\006active\210\001\001:\022\202\371+\016\n\014EnvironmentsB\021\n\017"
    "_environment_idB\020\n\016_deployment_idB\r\n\013_id"
    "entifierB\017\n\r_display_nameB\t\n\007_active\"\353\002\n"
    "\006Cohort\022P\n\tcohort_id\030\001 \001(\003B.\210\265\030\001\222\265\030\016envi"
    "ronment_id\222\265\030\nidentifier\230\265\030\001\212\371+\002\010\001H\000R\010co"
    "hortId\210\001\001\0222\n\016environment_id\030\002 \001(\003B\006\212\371+\002\010"
    "\001H\001R\renvironmentId\210\001\001\022+\n\nidentifier\030\003 \001("
    "\tB\006\212\371+\002\010\001H\002R\nidentifier\210\001\001\022.\n\014display_na"
    "me\030\004 \001(\tB\006\212\371+\002\010\001H\003R\013displayName\210\001\001\022#\n\006ac"
    "tive\030\005 \001(\010B\006\212\371+\002\010\001H\004R\006active\210\001\001:\r\202\371+\t\n\007C"
    "ohortsB\014\n\n_cohort_idB\021\n\017_environment_idB"
    "\r\n\013_identifierB\017\n\r_display_nameB\t\n\007_acti"
    "veb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2finfrastructure_2eproto_deps[4] =
    {
        &::descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2ffield_5foptions_2eproto,
        &::descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ffield_2eproto,
        &::descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto,
};
static ::absl::once_flag descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2finfrastructure_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2finfrastructure_2eproto = {
    false,
    false,
    1650,
    descriptor_table_protodef_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2finfrastructure_2eproto,
    "cavnue/messages/data_warehouse/management/v2/infrastructure.proto",
    &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2finfrastructure_2eproto_once,
    descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2finfrastructure_2eproto_deps,
    4,
    4,
    schemas,
    file_default_instances,
    TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2finfrastructure_2eproto::offsets,
    file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2finfrastructure_2eproto,
    file_level_enum_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2finfrastructure_2eproto,
    file_level_service_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2finfrastructure_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2finfrastructure_2eproto_getter() {
  return &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2finfrastructure_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2finfrastructure_2eproto(&descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2finfrastructure_2eproto);
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace management {
namespace v2 {
// ===================================================================

class Organization::_Internal {
 public:
  using HasBits = decltype(std::declval<Organization>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Organization, _impl_._has_bits_);
  static void set_has_organization_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_display_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Organization::Organization(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.management.v2.Organization)
}
Organization::Organization(const Organization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Organization* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.display_name_) {}

    , decltype(_impl_.organization_id_) {}

    , decltype(_impl_.active_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), _this->GetArenaForAllocation());
  }
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.display_name_.Set(from._internal_display_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.organization_id_, &from._impl_.organization_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.active_) -
    reinterpret_cast<char*>(&_impl_.organization_id_)) + sizeof(_impl_.active_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.management.v2.Organization)
}

inline void Organization::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.display_name_) {}

    , decltype(_impl_.organization_id_) { ::int64_t{0} }

    , decltype(_impl_.active_) { false }

  };
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Organization::~Organization() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.management.v2.Organization)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Organization::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identifier_.Destroy();
  _impl_.display_name_.Destroy();
}

void Organization::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Organization::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.management.v2.Organization)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.display_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.organization_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.active_) -
        reinterpret_cast<char*>(&_impl_.organization_id_)) + sizeof(_impl_.active_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Organization::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 organization_id = 1 [json_name = "organizationId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_organization_id(&has_bits);
          _impl_.organization_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string identifier = 2 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v2.Organization.identifier"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string display_name = 3 [json_name = "displayName", (.gen_bq_schema.bigquery) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_display_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v2.Organization.display_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool active = 4 [json_name = "active", (.gen_bq_schema.bigquery) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_active(&has_bits);
          _impl_.active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Organization::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.management.v2.Organization)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 organization_id = 1 [json_name = "organizationId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_organization_id(), target);
  }

  // optional string identifier = 2 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_identifier();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v2.Organization.identifier");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string display_name = 3 [json_name = "displayName", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_display_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v2.Organization.display_name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional bool active = 4 [json_name = "active", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.management.v2.Organization)
  return target;
}

::size_t Organization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.management.v2.Organization)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string identifier = 2 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_identifier());
    }

    // optional string display_name = 3 [json_name = "displayName", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_display_name());
    }

    // optional int64 organization_id = 1 [json_name = "organizationId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_organization_id());
    }

    // optional bool active = 4 [json_name = "active", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Organization::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Organization::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Organization::GetClassData() const { return &_class_data_; }


void Organization::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Organization*>(&to_msg);
  auto& from = static_cast<const Organization&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.management.v2.Organization)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_display_name(from._internal_display_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.organization_id_ = from._impl_.organization_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.active_ = from._impl_.active_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Organization::CopyFrom(const Organization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.management.v2.Organization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Organization::IsInitialized() const {
  return true;
}

void Organization::InternalSwap(Organization* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identifier_, lhs_arena,
                                       &other->_impl_.identifier_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.display_name_, lhs_arena,
                                       &other->_impl_.display_name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Organization, _impl_.active_)
      + sizeof(Organization::_impl_.active_)
      - PROTOBUF_FIELD_OFFSET(Organization, _impl_.organization_id_)>(
          reinterpret_cast<char*>(&_impl_.organization_id_),
          reinterpret_cast<char*>(&other->_impl_.organization_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Organization::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2finfrastructure_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2finfrastructure_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2finfrastructure_2eproto[0]);
}
// ===================================================================

class Deployment::_Internal {
 public:
  using HasBits = decltype(std::declval<Deployment>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Deployment, _impl_._has_bits_);
  static void set_has_deployment_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_organization_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_display_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Deployment::Deployment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.management.v2.Deployment)
}
Deployment::Deployment(const Deployment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Deployment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.display_name_) {}

    , decltype(_impl_.deployment_id_) {}

    , decltype(_impl_.organization_id_) {}

    , decltype(_impl_.active_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), _this->GetArenaForAllocation());
  }
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.display_name_.Set(from._internal_display_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.deployment_id_, &from._impl_.deployment_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.active_) -
    reinterpret_cast<char*>(&_impl_.deployment_id_)) + sizeof(_impl_.active_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.management.v2.Deployment)
}

inline void Deployment::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.display_name_) {}

    , decltype(_impl_.deployment_id_) { ::int64_t{0} }

    , decltype(_impl_.organization_id_) { ::int64_t{0} }

    , decltype(_impl_.active_) { false }

  };
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Deployment::~Deployment() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.management.v2.Deployment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Deployment::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identifier_.Destroy();
  _impl_.display_name_.Destroy();
}

void Deployment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Deployment::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.management.v2.Deployment)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.display_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.deployment_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.active_) -
        reinterpret_cast<char*>(&_impl_.deployment_id_)) + sizeof(_impl_.active_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Deployment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 deployment_id = 1 [json_name = "deploymentId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_deployment_id(&has_bits);
          _impl_.deployment_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string identifier = 2 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v2.Deployment.identifier"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 organization_id = 3 [json_name = "organizationId", (.gen_bq_schema.bigquery) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_organization_id(&has_bits);
          _impl_.organization_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string display_name = 4 [json_name = "displayName", (.gen_bq_schema.bigquery) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_display_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v2.Deployment.display_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool active = 5 [json_name = "active", (.gen_bq_schema.bigquery) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_active(&has_bits);
          _impl_.active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Deployment::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.management.v2.Deployment)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 deployment_id = 1 [json_name = "deploymentId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_deployment_id(), target);
  }

  // optional string identifier = 2 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_identifier();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v2.Deployment.identifier");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional int64 organization_id = 3 [json_name = "organizationId", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_organization_id(), target);
  }

  // optional string display_name = 4 [json_name = "displayName", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_display_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v2.Deployment.display_name");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional bool active = 5 [json_name = "active", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.management.v2.Deployment)
  return target;
}

::size_t Deployment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.management.v2.Deployment)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string identifier = 2 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_identifier());
    }

    // optional string display_name = 4 [json_name = "displayName", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_display_name());
    }

    // optional int64 deployment_id = 1 [json_name = "deploymentId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_deployment_id());
    }

    // optional int64 organization_id = 3 [json_name = "organizationId", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_organization_id());
    }

    // optional bool active = 5 [json_name = "active", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Deployment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Deployment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Deployment::GetClassData() const { return &_class_data_; }


void Deployment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Deployment*>(&to_msg);
  auto& from = static_cast<const Deployment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.management.v2.Deployment)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_display_name(from._internal_display_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.deployment_id_ = from._impl_.deployment_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.organization_id_ = from._impl_.organization_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.active_ = from._impl_.active_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Deployment::CopyFrom(const Deployment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.management.v2.Deployment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Deployment::IsInitialized() const {
  return true;
}

void Deployment::InternalSwap(Deployment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identifier_, lhs_arena,
                                       &other->_impl_.identifier_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.display_name_, lhs_arena,
                                       &other->_impl_.display_name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Deployment, _impl_.active_)
      + sizeof(Deployment::_impl_.active_)
      - PROTOBUF_FIELD_OFFSET(Deployment, _impl_.deployment_id_)>(
          reinterpret_cast<char*>(&_impl_.deployment_id_),
          reinterpret_cast<char*>(&other->_impl_.deployment_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Deployment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2finfrastructure_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2finfrastructure_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2finfrastructure_2eproto[1]);
}
// ===================================================================

class Environment::_Internal {
 public:
  using HasBits = decltype(std::declval<Environment>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Environment, _impl_._has_bits_);
  static void set_has_environment_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_deployment_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_display_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Environment::Environment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.management.v2.Environment)
}
Environment::Environment(const Environment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Environment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.display_name_) {}

    , decltype(_impl_.environment_id_) {}

    , decltype(_impl_.deployment_id_) {}

    , decltype(_impl_.active_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), _this->GetArenaForAllocation());
  }
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.display_name_.Set(from._internal_display_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.environment_id_, &from._impl_.environment_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.active_) -
    reinterpret_cast<char*>(&_impl_.environment_id_)) + sizeof(_impl_.active_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.management.v2.Environment)
}

inline void Environment::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.display_name_) {}

    , decltype(_impl_.environment_id_) { ::int64_t{0} }

    , decltype(_impl_.deployment_id_) { ::int64_t{0} }

    , decltype(_impl_.active_) { false }

  };
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Environment::~Environment() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.management.v2.Environment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Environment::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identifier_.Destroy();
  _impl_.display_name_.Destroy();
}

void Environment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Environment::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.management.v2.Environment)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.display_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.environment_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.active_) -
        reinterpret_cast<char*>(&_impl_.environment_id_)) + sizeof(_impl_.active_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Environment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 environment_id = 1 [json_name = "environmentId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_environment_id(&has_bits);
          _impl_.environment_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 deployment_id = 2 [json_name = "deploymentId", (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_deployment_id(&has_bits);
          _impl_.deployment_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string identifier = 3 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v2.Environment.identifier"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string display_name = 4 [json_name = "displayName", (.gen_bq_schema.bigquery) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_display_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v2.Environment.display_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool active = 5 [json_name = "active", (.gen_bq_schema.bigquery) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_active(&has_bits);
          _impl_.active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Environment::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.management.v2.Environment)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 environment_id = 1 [json_name = "environmentId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_environment_id(), target);
  }

  // optional int64 deployment_id = 2 [json_name = "deploymentId", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_deployment_id(), target);
  }

  // optional string identifier = 3 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_identifier();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v2.Environment.identifier");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string display_name = 4 [json_name = "displayName", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_display_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v2.Environment.display_name");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional bool active = 5 [json_name = "active", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.management.v2.Environment)
  return target;
}

::size_t Environment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.management.v2.Environment)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string identifier = 3 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_identifier());
    }

    // optional string display_name = 4 [json_name = "displayName", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_display_name());
    }

    // optional int64 environment_id = 1 [json_name = "environmentId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_environment_id());
    }

    // optional int64 deployment_id = 2 [json_name = "deploymentId", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_deployment_id());
    }

    // optional bool active = 5 [json_name = "active", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Environment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Environment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Environment::GetClassData() const { return &_class_data_; }


void Environment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Environment*>(&to_msg);
  auto& from = static_cast<const Environment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.management.v2.Environment)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_display_name(from._internal_display_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.environment_id_ = from._impl_.environment_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.deployment_id_ = from._impl_.deployment_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.active_ = from._impl_.active_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Environment::CopyFrom(const Environment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.management.v2.Environment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Environment::IsInitialized() const {
  return true;
}

void Environment::InternalSwap(Environment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identifier_, lhs_arena,
                                       &other->_impl_.identifier_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.display_name_, lhs_arena,
                                       &other->_impl_.display_name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Environment, _impl_.active_)
      + sizeof(Environment::_impl_.active_)
      - PROTOBUF_FIELD_OFFSET(Environment, _impl_.environment_id_)>(
          reinterpret_cast<char*>(&_impl_.environment_id_),
          reinterpret_cast<char*>(&other->_impl_.environment_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Environment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2finfrastructure_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2finfrastructure_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2finfrastructure_2eproto[2]);
}
// ===================================================================

class Cohort::_Internal {
 public:
  using HasBits = decltype(std::declval<Cohort>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Cohort, _impl_._has_bits_);
  static void set_has_cohort_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_environment_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_display_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Cohort::Cohort(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.management.v2.Cohort)
}
Cohort::Cohort(const Cohort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Cohort* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.display_name_) {}

    , decltype(_impl_.cohort_id_) {}

    , decltype(_impl_.environment_id_) {}

    , decltype(_impl_.active_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), _this->GetArenaForAllocation());
  }
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.display_name_.Set(from._internal_display_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.cohort_id_, &from._impl_.cohort_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.active_) -
    reinterpret_cast<char*>(&_impl_.cohort_id_)) + sizeof(_impl_.active_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.management.v2.Cohort)
}

inline void Cohort::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_) {}

    , decltype(_impl_.display_name_) {}

    , decltype(_impl_.cohort_id_) { ::int64_t{0} }

    , decltype(_impl_.environment_id_) { ::int64_t{0} }

    , decltype(_impl_.active_) { false }

  };
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Cohort::~Cohort() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.management.v2.Cohort)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Cohort::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identifier_.Destroy();
  _impl_.display_name_.Destroy();
}

void Cohort::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Cohort::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.management.v2.Cohort)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.display_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.cohort_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.active_) -
        reinterpret_cast<char*>(&_impl_.cohort_id_)) + sizeof(_impl_.active_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cohort::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 cohort_id = 1 [json_name = "cohortId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "environment_id", (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_cohort_id(&has_bits);
          _impl_.cohort_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 environment_id = 2 [json_name = "environmentId", (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_environment_id(&has_bits);
          _impl_.environment_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string identifier = 3 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v2.Cohort.identifier"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string display_name = 4 [json_name = "displayName", (.gen_bq_schema.bigquery) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_display_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v2.Cohort.display_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool active = 5 [json_name = "active", (.gen_bq_schema.bigquery) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_active(&has_bits);
          _impl_.active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Cohort::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.management.v2.Cohort)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 cohort_id = 1 [json_name = "cohortId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "environment_id", (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_cohort_id(), target);
  }

  // optional int64 environment_id = 2 [json_name = "environmentId", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_environment_id(), target);
  }

  // optional string identifier = 3 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_identifier();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v2.Cohort.identifier");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string display_name = 4 [json_name = "displayName", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_display_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v2.Cohort.display_name");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional bool active = 5 [json_name = "active", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.management.v2.Cohort)
  return target;
}

::size_t Cohort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.management.v2.Cohort)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string identifier = 3 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_identifier());
    }

    // optional string display_name = 4 [json_name = "displayName", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_display_name());
    }

    // optional int64 cohort_id = 1 [json_name = "cohortId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "environment_id", (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_cohort_id());
    }

    // optional int64 environment_id = 2 [json_name = "environmentId", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_environment_id());
    }

    // optional bool active = 5 [json_name = "active", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Cohort::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Cohort::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Cohort::GetClassData() const { return &_class_data_; }


void Cohort::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Cohort*>(&to_msg);
  auto& from = static_cast<const Cohort&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.management.v2.Cohort)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_display_name(from._internal_display_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.cohort_id_ = from._impl_.cohort_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.environment_id_ = from._impl_.environment_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.active_ = from._impl_.active_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Cohort::CopyFrom(const Cohort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.management.v2.Cohort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cohort::IsInitialized() const {
  return true;
}

void Cohort::InternalSwap(Cohort* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identifier_, lhs_arena,
                                       &other->_impl_.identifier_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.display_name_, lhs_arena,
                                       &other->_impl_.display_name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Cohort, _impl_.active_)
      + sizeof(Cohort::_impl_.active_)
      - PROTOBUF_FIELD_OFFSET(Cohort, _impl_.cohort_id_)>(
          reinterpret_cast<char*>(&_impl_.cohort_id_),
          reinterpret_cast<char*>(&other->_impl_.cohort_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Cohort::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2finfrastructure_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2finfrastructure_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2finfrastructure_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace management
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::management::v2::Organization*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::management::v2::Organization >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::management::v2::Organization >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::management::v2::Deployment*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::management::v2::Deployment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::management::v2::Deployment >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::management::v2::Environment*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::management::v2::Environment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::management::v2::Environment >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::management::v2::Cohort*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::management::v2::Cohort >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::management::v2::Cohort >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

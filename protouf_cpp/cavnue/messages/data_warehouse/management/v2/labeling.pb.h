// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/data_warehouse/management/v2/labeling.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2flabeling_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2flabeling_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cavnue/third_party/bq/v1/bq_field.pb.h"
#include "cavnue/third_party/bq/v1/bq_table.pb.h"
#include "cavnue/messages/common/v1/field_options.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2flabeling_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2flabeling_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2flabeling_2eproto;
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace management {
namespace v2 {
class Scale;
struct ScaleDefaultTypeInternal;
extern ScaleDefaultTypeInternal _Scale_default_instance_;
class ScaleLog;
struct ScaleLogDefaultTypeInternal;
extern ScaleLogDefaultTypeInternal _ScaleLog_default_instance_;
class SimulationRun;
struct SimulationRunDefaultTypeInternal;
extern SimulationRunDefaultTypeInternal _SimulationRun_default_instance_;
}  // namespace v2
}  // namespace management
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template <>
::cavnue::messages::data_warehouse::management::v2::Scale* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::management::v2::Scale>(Arena*);
template <>
::cavnue::messages::data_warehouse::management::v2::ScaleLog* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::management::v2::ScaleLog>(Arena*);
template <>
::cavnue::messages::data_warehouse::management::v2::SimulationRun* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::management::v2::SimulationRun>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace management {
namespace v2 {

// ===================================================================


// -------------------------------------------------------------------

class Scale final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.data_warehouse.management.v2.Scale) */ {
 public:
  inline Scale() : Scale(nullptr) {}
  ~Scale() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Scale(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Scale(const Scale& from);
  Scale(Scale&& from) noexcept
    : Scale() {
    *this = ::std::move(from);
  }

  inline Scale& operator=(const Scale& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scale& operator=(Scale&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scale& default_instance() {
    return *internal_default_instance();
  }
  static inline const Scale* internal_default_instance() {
    return reinterpret_cast<const Scale*>(
               &_Scale_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Scale& a, Scale& b) {
    a.Swap(&b);
  }
  inline void Swap(Scale* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scale* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Scale* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Scale>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Scale& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Scale& from) {
    Scale::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scale* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.data_warehouse.management.v2.Scale";
  }
  protected:
  explicit Scale(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 4,
    kProjectFieldNumber = 5,
    kBatchIdFieldNumber = 1,
    kDataIdFieldNumber = 2,
    kTaskIdFieldNumber = 3,
  };
  // optional string identifier = 4 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
  bool has_identifier() const;
  void clear_identifier() ;
  const std::string& identifier() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_identifier(Arg_&& arg, Args_... args);
  std::string* mutable_identifier();
  PROTOBUF_NODISCARD std::string* release_identifier();
  void set_allocated_identifier(std::string* ptr);

  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(
      const std::string& value);
  std::string* _internal_mutable_identifier();

  public:
  // optional string project = 5 [json_name = "project", (.gen_bq_schema.bigquery) = {
  bool has_project() const;
  void clear_project() ;
  const std::string& project() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_project(Arg_&& arg, Args_... args);
  std::string* mutable_project();
  PROTOBUF_NODISCARD std::string* release_project();
  void set_allocated_project(std::string* ptr);

  private:
  const std::string& _internal_project() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project(
      const std::string& value);
  std::string* _internal_mutable_project();

  public:
  // optional int64 batch_id = 1 [json_name = "batchId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  bool has_batch_id() const;
  void clear_batch_id() ;
  ::int64_t batch_id() const;
  void set_batch_id(::int64_t value);

  private:
  ::int64_t _internal_batch_id() const;
  void _internal_set_batch_id(::int64_t value);

  public:
  // optional int64 data_id = 2 [json_name = "dataId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  bool has_data_id() const;
  void clear_data_id() ;
  ::int64_t data_id() const;
  void set_data_id(::int64_t value);

  private:
  ::int64_t _internal_data_id() const;
  void _internal_set_data_id(::int64_t value);

  public:
  // optional int64 task_id = 3 [json_name = "taskId", (.gen_bq_schema.bigquery) = {
  bool has_task_id() const;
  void clear_task_id() ;
  ::int64_t task_id() const;
  void set_task_id(::int64_t value);

  private:
  ::int64_t _internal_task_id() const;
  void _internal_set_task_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.data_warehouse.management.v2.Scale)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_;
    ::int64_t batch_id_;
    ::int64_t data_id_;
    ::int64_t task_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2flabeling_2eproto;
};// -------------------------------------------------------------------

class ScaleLog final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.data_warehouse.management.v2.ScaleLog) */ {
 public:
  inline ScaleLog() : ScaleLog(nullptr) {}
  ~ScaleLog() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ScaleLog(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScaleLog(const ScaleLog& from);
  ScaleLog(ScaleLog&& from) noexcept
    : ScaleLog() {
    *this = ::std::move(from);
  }

  inline ScaleLog& operator=(const ScaleLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScaleLog& operator=(ScaleLog&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScaleLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScaleLog* internal_default_instance() {
    return reinterpret_cast<const ScaleLog*>(
               &_ScaleLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ScaleLog& a, ScaleLog& b) {
    a.Swap(&b);
  }
  inline void Swap(ScaleLog* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScaleLog* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScaleLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScaleLog>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScaleLog& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScaleLog& from) {
    ScaleLog::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScaleLog* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.data_warehouse.management.v2.ScaleLog";
  }
  protected:
  explicit ScaleLog(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 5,
    kAuditTsFieldNumber = 4,
    kBatchIdFieldNumber = 1,
    kDataIdFieldNumber = 2,
    kTaskIdFieldNumber = 3,
  };
  // optional string status = 5 [json_name = "status", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  bool has_status() const;
  void clear_status() ;
  const std::string& status() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* ptr);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // optional .google.protobuf.Timestamp audit_ts = 4 [json_name = "auditTs", (.gen_bq_schema.bigquery) = {
  bool has_audit_ts() const;
  void clear_audit_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& audit_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_audit_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_audit_ts();
  void set_allocated_audit_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* audit_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_audit_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_audit_ts();
  public:
  void unsafe_arena_set_allocated_audit_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* audit_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_audit_ts();
  // optional int64 batch_id = 1 [json_name = "batchId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  bool has_batch_id() const;
  void clear_batch_id() ;
  ::int64_t batch_id() const;
  void set_batch_id(::int64_t value);

  private:
  ::int64_t _internal_batch_id() const;
  void _internal_set_batch_id(::int64_t value);

  public:
  // optional int64 data_id = 2 [json_name = "dataId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  bool has_data_id() const;
  void clear_data_id() ;
  ::int64_t data_id() const;
  void set_data_id(::int64_t value);

  private:
  ::int64_t _internal_data_id() const;
  void _internal_set_data_id(::int64_t value);

  public:
  // optional int64 task_id = 3 [json_name = "taskId", (.gen_bq_schema.bigquery) = {
  bool has_task_id() const;
  void clear_task_id() ;
  ::int64_t task_id() const;
  void set_task_id(::int64_t value);

  private:
  ::int64_t _internal_task_id() const;
  void _internal_set_task_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.data_warehouse.management.v2.ScaleLog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* audit_ts_;
    ::int64_t batch_id_;
    ::int64_t data_id_;
    ::int64_t task_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2flabeling_2eproto;
};// -------------------------------------------------------------------

class SimulationRun final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.data_warehouse.management.v2.SimulationRun) */ {
 public:
  inline SimulationRun() : SimulationRun(nullptr) {}
  ~SimulationRun() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SimulationRun(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimulationRun(const SimulationRun& from);
  SimulationRun(SimulationRun&& from) noexcept
    : SimulationRun() {
    *this = ::std::move(from);
  }

  inline SimulationRun& operator=(const SimulationRun& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationRun& operator=(SimulationRun&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimulationRun& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimulationRun* internal_default_instance() {
    return reinterpret_cast<const SimulationRun*>(
               &_SimulationRun_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SimulationRun& a, SimulationRun& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulationRun* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulationRun* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimulationRun* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimulationRun>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimulationRun& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimulationRun& from) {
    SimulationRun::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulationRun* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.data_warehouse.management.v2.SimulationRun";
  }
  protected:
  explicit SimulationRun(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSimulationIdFieldNumber = 2,
    kIdentifierFieldNumber = 3,
    kMetadataFieldNumber = 4,
    kBatchIdFieldNumber = 1,
  };
  // optional string simulation_id = 2 [json_name = "simulationId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  bool has_simulation_id() const;
  void clear_simulation_id() ;
  const std::string& simulation_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_simulation_id(Arg_&& arg, Args_... args);
  std::string* mutable_simulation_id();
  PROTOBUF_NODISCARD std::string* release_simulation_id();
  void set_allocated_simulation_id(std::string* ptr);

  private:
  const std::string& _internal_simulation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_simulation_id(
      const std::string& value);
  std::string* _internal_mutable_simulation_id();

  public:
  // optional string identifier = 3 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
  bool has_identifier() const;
  void clear_identifier() ;
  const std::string& identifier() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_identifier(Arg_&& arg, Args_... args);
  std::string* mutable_identifier();
  PROTOBUF_NODISCARD std::string* release_identifier();
  void set_allocated_identifier(std::string* ptr);

  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(
      const std::string& value);
  std::string* _internal_mutable_identifier();

  public:
  // string metadata = 4 [json_name = "metadata", (.gen_bq_schema.bigquery) = {
  void clear_metadata() ;
  const std::string& metadata() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata(Arg_&& arg, Args_... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* ptr);

  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(
      const std::string& value);
  std::string* _internal_mutable_metadata();

  public:
  // optional int64 batch_id = 1 [json_name = "batchId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  bool has_batch_id() const;
  void clear_batch_id() ;
  ::int64_t batch_id() const;
  void set_batch_id(::int64_t value);

  private:
  ::int64_t _internal_batch_id() const;
  void _internal_set_batch_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.data_warehouse.management.v2.SimulationRun)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr simulation_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
    ::int64_t batch_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2flabeling_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Scale

// optional int64 batch_id = 1 [json_name = "batchId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
inline bool Scale::has_batch_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Scale::clear_batch_id() {
  _impl_.batch_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Scale::batch_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.Scale.batch_id)
  return _internal_batch_id();
}
inline void Scale::set_batch_id(::int64_t value) {
  _internal_set_batch_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.Scale.batch_id)
}
inline ::int64_t Scale::_internal_batch_id() const {
  return _impl_.batch_id_;
}
inline void Scale::_internal_set_batch_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.batch_id_ = value;
}

// optional int64 data_id = 2 [json_name = "dataId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
inline bool Scale::has_data_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Scale::clear_data_id() {
  _impl_.data_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t Scale::data_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.Scale.data_id)
  return _internal_data_id();
}
inline void Scale::set_data_id(::int64_t value) {
  _internal_set_data_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.Scale.data_id)
}
inline ::int64_t Scale::_internal_data_id() const {
  return _impl_.data_id_;
}
inline void Scale::_internal_set_data_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.data_id_ = value;
}

// optional int64 task_id = 3 [json_name = "taskId", (.gen_bq_schema.bigquery) = {
inline bool Scale::has_task_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Scale::clear_task_id() {
  _impl_.task_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t Scale::task_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.Scale.task_id)
  return _internal_task_id();
}
inline void Scale::set_task_id(::int64_t value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.Scale.task_id)
}
inline ::int64_t Scale::_internal_task_id() const {
  return _impl_.task_id_;
}
inline void Scale::_internal_set_task_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.task_id_ = value;
}

// optional string identifier = 4 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
inline bool Scale::has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Scale::clear_identifier() {
  _impl_.identifier_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Scale::identifier() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.Scale.identifier)
  return _internal_identifier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Scale::set_identifier(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.identifier_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.Scale.identifier)
}
inline std::string* Scale::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.Scale.identifier)
  return _s;
}
inline const std::string& Scale::_internal_identifier() const {
  return _impl_.identifier_.Get();
}
inline void Scale::_internal_set_identifier(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* Scale::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.identifier_.Mutable( GetArenaForAllocation());
}
inline std::string* Scale::release_identifier() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v2.Scale.identifier)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.identifier_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Scale::set_allocated_identifier(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.identifier_.IsDefault()) {
          _impl_.identifier_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v2.Scale.identifier)
}

// optional string project = 5 [json_name = "project", (.gen_bq_schema.bigquery) = {
inline bool Scale::has_project() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Scale::clear_project() {
  _impl_.project_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Scale::project() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.Scale.project)
  return _internal_project();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Scale::set_project(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.project_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.Scale.project)
}
inline std::string* Scale::mutable_project() {
  std::string* _s = _internal_mutable_project();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.Scale.project)
  return _s;
}
inline const std::string& Scale::_internal_project() const {
  return _impl_.project_.Get();
}
inline void Scale::_internal_set_project(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.project_.Set(value, GetArenaForAllocation());
}
inline std::string* Scale::_internal_mutable_project() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.project_.Mutable( GetArenaForAllocation());
}
inline std::string* Scale::release_project() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v2.Scale.project)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.project_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.project_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Scale::set_allocated_project(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.project_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.project_.IsDefault()) {
          _impl_.project_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v2.Scale.project)
}

// -------------------------------------------------------------------

// ScaleLog

// optional int64 batch_id = 1 [json_name = "batchId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
inline bool ScaleLog::has_batch_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ScaleLog::clear_batch_id() {
  _impl_.batch_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t ScaleLog::batch_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.ScaleLog.batch_id)
  return _internal_batch_id();
}
inline void ScaleLog::set_batch_id(::int64_t value) {
  _internal_set_batch_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.ScaleLog.batch_id)
}
inline ::int64_t ScaleLog::_internal_batch_id() const {
  return _impl_.batch_id_;
}
inline void ScaleLog::_internal_set_batch_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.batch_id_ = value;
}

// optional int64 data_id = 2 [json_name = "dataId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
inline bool ScaleLog::has_data_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ScaleLog::clear_data_id() {
  _impl_.data_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t ScaleLog::data_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.ScaleLog.data_id)
  return _internal_data_id();
}
inline void ScaleLog::set_data_id(::int64_t value) {
  _internal_set_data_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.ScaleLog.data_id)
}
inline ::int64_t ScaleLog::_internal_data_id() const {
  return _impl_.data_id_;
}
inline void ScaleLog::_internal_set_data_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.data_id_ = value;
}

// optional int64 task_id = 3 [json_name = "taskId", (.gen_bq_schema.bigquery) = {
inline bool ScaleLog::has_task_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ScaleLog::clear_task_id() {
  _impl_.task_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t ScaleLog::task_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.ScaleLog.task_id)
  return _internal_task_id();
}
inline void ScaleLog::set_task_id(::int64_t value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.ScaleLog.task_id)
}
inline ::int64_t ScaleLog::_internal_task_id() const {
  return _impl_.task_id_;
}
inline void ScaleLog::_internal_set_task_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.task_id_ = value;
}

// optional .google.protobuf.Timestamp audit_ts = 4 [json_name = "auditTs", (.gen_bq_schema.bigquery) = {
inline bool ScaleLog::has_audit_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.audit_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ScaleLog::_internal_audit_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.audit_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ScaleLog::audit_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.ScaleLog.audit_ts)
  return _internal_audit_ts();
}
inline void ScaleLog::unsafe_arena_set_allocated_audit_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* audit_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.audit_ts_);
  }
  _impl_.audit_ts_ = audit_ts;
  if (audit_ts) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.data_warehouse.management.v2.ScaleLog.audit_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ScaleLog::release_audit_ts() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.audit_ts_;
  _impl_.audit_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ScaleLog::unsafe_arena_release_audit_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v2.ScaleLog.audit_ts)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.audit_ts_;
  _impl_.audit_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ScaleLog::_internal_mutable_audit_ts() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.audit_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.audit_ts_ = p;
  }
  return _impl_.audit_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ScaleLog::mutable_audit_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_audit_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.ScaleLog.audit_ts)
  return _msg;
}
inline void ScaleLog::set_allocated_audit_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* audit_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.audit_ts_);
  }
  if (audit_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audit_ts));
    if (message_arena != submessage_arena) {
      audit_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audit_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.audit_ts_ = audit_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v2.ScaleLog.audit_ts)
}

// optional string status = 5 [json_name = "status", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
inline bool ScaleLog::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ScaleLog::clear_status() {
  _impl_.status_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ScaleLog::status() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.ScaleLog.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ScaleLog::set_status(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.ScaleLog.status)
}
inline std::string* ScaleLog::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.ScaleLog.status)
  return _s;
}
inline const std::string& ScaleLog::_internal_status() const {
  return _impl_.status_.Get();
}
inline void ScaleLog::_internal_set_status(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* ScaleLog::_internal_mutable_status() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.status_.Mutable( GetArenaForAllocation());
}
inline std::string* ScaleLog::release_status() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v2.ScaleLog.status)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.status_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.status_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ScaleLog::set_allocated_status(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.status_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.status_.IsDefault()) {
          _impl_.status_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v2.ScaleLog.status)
}

// -------------------------------------------------------------------

// SimulationRun

// optional int64 batch_id = 1 [json_name = "batchId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
inline bool SimulationRun::has_batch_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SimulationRun::clear_batch_id() {
  _impl_.batch_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t SimulationRun::batch_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.SimulationRun.batch_id)
  return _internal_batch_id();
}
inline void SimulationRun::set_batch_id(::int64_t value) {
  _internal_set_batch_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.SimulationRun.batch_id)
}
inline ::int64_t SimulationRun::_internal_batch_id() const {
  return _impl_.batch_id_;
}
inline void SimulationRun::_internal_set_batch_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.batch_id_ = value;
}

// optional string simulation_id = 2 [json_name = "simulationId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
inline bool SimulationRun::has_simulation_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SimulationRun::clear_simulation_id() {
  _impl_.simulation_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SimulationRun::simulation_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.SimulationRun.simulation_id)
  return _internal_simulation_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SimulationRun::set_simulation_id(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.simulation_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.SimulationRun.simulation_id)
}
inline std::string* SimulationRun::mutable_simulation_id() {
  std::string* _s = _internal_mutable_simulation_id();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.SimulationRun.simulation_id)
  return _s;
}
inline const std::string& SimulationRun::_internal_simulation_id() const {
  return _impl_.simulation_id_.Get();
}
inline void SimulationRun::_internal_set_simulation_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.simulation_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SimulationRun::_internal_mutable_simulation_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.simulation_id_.Mutable( GetArenaForAllocation());
}
inline std::string* SimulationRun::release_simulation_id() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v2.SimulationRun.simulation_id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.simulation_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.simulation_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SimulationRun::set_allocated_simulation_id(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.simulation_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.simulation_id_.IsDefault()) {
          _impl_.simulation_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v2.SimulationRun.simulation_id)
}

// optional string identifier = 3 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
inline bool SimulationRun::has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SimulationRun::clear_identifier() {
  _impl_.identifier_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SimulationRun::identifier() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.SimulationRun.identifier)
  return _internal_identifier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SimulationRun::set_identifier(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.identifier_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.SimulationRun.identifier)
}
inline std::string* SimulationRun::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.SimulationRun.identifier)
  return _s;
}
inline const std::string& SimulationRun::_internal_identifier() const {
  return _impl_.identifier_.Get();
}
inline void SimulationRun::_internal_set_identifier(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* SimulationRun::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.identifier_.Mutable( GetArenaForAllocation());
}
inline std::string* SimulationRun::release_identifier() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v2.SimulationRun.identifier)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.identifier_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SimulationRun::set_allocated_identifier(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.identifier_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.identifier_.IsDefault()) {
          _impl_.identifier_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v2.SimulationRun.identifier)
}

// string metadata = 4 [json_name = "metadata", (.gen_bq_schema.bigquery) = {
inline void SimulationRun::clear_metadata() {
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& SimulationRun::metadata() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.SimulationRun.metadata)
  return _internal_metadata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SimulationRun::set_metadata(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.metadata_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.SimulationRun.metadata)
}
inline std::string* SimulationRun::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.SimulationRun.metadata)
  return _s;
}
inline const std::string& SimulationRun::_internal_metadata() const {
  return _impl_.metadata_.Get();
}
inline void SimulationRun::_internal_set_metadata(const std::string& value) {
  ;


  _impl_.metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* SimulationRun::_internal_mutable_metadata() {
  ;
  return _impl_.metadata_.Mutable( GetArenaForAllocation());
}
inline std::string* SimulationRun::release_metadata() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v2.SimulationRun.metadata)
  return _impl_.metadata_.Release();
}
inline void SimulationRun::set_allocated_metadata(std::string* value) {
  _impl_.metadata_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.metadata_.IsDefault()) {
          _impl_.metadata_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v2.SimulationRun.metadata)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace management
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2flabeling_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/data_warehouse/management/v2/annotations.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cavnue/third_party/bq/v1/bq_field.pb.h"
#include "cavnue/third_party/bq/v1/bq_table.pb.h"
#include "cavnue/messages/common/v1/common.pb.h"
#include "cavnue/messages/geometry/v1/bounding_box.pb.h"
#include "cavnue/messages/common/v1/field_options.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto;
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace management {
namespace v2 {
class FrameAnnotationAttributes;
struct FrameAnnotationAttributesDefaultTypeInternal;
extern FrameAnnotationAttributesDefaultTypeInternal _FrameAnnotationAttributes_default_instance_;
class FrameAnnotationBox2;
struct FrameAnnotationBox2DefaultTypeInternal;
extern FrameAnnotationBox2DefaultTypeInternal _FrameAnnotationBox2_default_instance_;
class FrameAnnotationBox3;
struct FrameAnnotationBox3DefaultTypeInternal;
extern FrameAnnotationBox3DefaultTypeInternal _FrameAnnotationBox3_default_instance_;
class FrameAnnotationSegmentation;
struct FrameAnnotationSegmentationDefaultTypeInternal;
extern FrameAnnotationSegmentationDefaultTypeInternal _FrameAnnotationSegmentation_default_instance_;
class FrameAnnotationSegmentation_MaskMap;
struct FrameAnnotationSegmentation_MaskMapDefaultTypeInternal;
extern FrameAnnotationSegmentation_MaskMapDefaultTypeInternal _FrameAnnotationSegmentation_MaskMap_default_instance_;
class Label;
struct LabelDefaultTypeInternal;
extern LabelDefaultTypeInternal _Label_default_instance_;
}  // namespace v2
}  // namespace management
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template <>
::cavnue::messages::data_warehouse::management::v2::FrameAnnotationAttributes* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::management::v2::FrameAnnotationAttributes>(Arena*);
template <>
::cavnue::messages::data_warehouse::management::v2::FrameAnnotationBox2* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::management::v2::FrameAnnotationBox2>(Arena*);
template <>
::cavnue::messages::data_warehouse::management::v2::FrameAnnotationBox3* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::management::v2::FrameAnnotationBox3>(Arena*);
template <>
::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation>(Arena*);
template <>
::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation_MaskMap* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation_MaskMap>(Arena*);
template <>
::cavnue::messages::data_warehouse::management::v2::Label* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::management::v2::Label>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace management {
namespace v2 {

// ===================================================================


// -------------------------------------------------------------------

class FrameAnnotationBox2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2) */ {
 public:
  inline FrameAnnotationBox2() : FrameAnnotationBox2(nullptr) {}
  ~FrameAnnotationBox2() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FrameAnnotationBox2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameAnnotationBox2(const FrameAnnotationBox2& from);
  FrameAnnotationBox2(FrameAnnotationBox2&& from) noexcept
    : FrameAnnotationBox2() {
    *this = ::std::move(from);
  }

  inline FrameAnnotationBox2& operator=(const FrameAnnotationBox2& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameAnnotationBox2& operator=(FrameAnnotationBox2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameAnnotationBox2& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameAnnotationBox2* internal_default_instance() {
    return reinterpret_cast<const FrameAnnotationBox2*>(
               &_FrameAnnotationBox2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FrameAnnotationBox2& a, FrameAnnotationBox2& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameAnnotationBox2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameAnnotationBox2* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameAnnotationBox2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameAnnotationBox2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrameAnnotationBox2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FrameAnnotationBox2& from) {
    FrameAnnotationBox2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameAnnotationBox2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2";
  }
  protected:
  explicit FrameAnnotationBox2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 5,
    kLabelsFieldNumber = 6,
    kActorsFieldNumber = 7,
    kTsFieldNumber = 4,
    kDataIdFieldNumber = 1,
    kBatchIdFieldNumber = 2,
    kTaskIdFieldNumber = 3,
  };
  // repeated .cavnue.messages.geometry.v1.BoundingBox2f annotations = 5 [json_name = "annotations", (.cavnue.messages.common.v1.units) = UNITS_PIXELS];
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;

  public:
  void clear_annotations() ;
  ::cavnue::messages::geometry::v1::BoundingBox2f* mutable_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::geometry::v1::BoundingBox2f >*
      mutable_annotations();
  private:
  const ::cavnue::messages::geometry::v1::BoundingBox2f& _internal_annotations(int index) const;
  ::cavnue::messages::geometry::v1::BoundingBox2f* _internal_add_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::geometry::v1::BoundingBox2f>& _internal_annotations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::geometry::v1::BoundingBox2f>* _internal_mutable_annotations();
  public:
  const ::cavnue::messages::geometry::v1::BoundingBox2f& annotations(int index) const;
  ::cavnue::messages::geometry::v1::BoundingBox2f* add_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::geometry::v1::BoundingBox2f >&
      annotations() const;
  // repeated int64 labels = 6 [json_name = "labels"];
  int labels_size() const;
  private:
  int _internal_labels_size() const;

  public:
  void clear_labels() ;
  ::int64_t labels(int index) const;
  void set_labels(int index, ::int64_t value);
  void add_labels(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* mutable_labels();

  private:
  ::int64_t _internal_labels(int index) const;
  void _internal_add_labels(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* _internal_mutable_labels();

  public:
  // repeated int64 actors = 7 [json_name = "actors"];
  int actors_size() const;
  private:
  int _internal_actors_size() const;

  public:
  void clear_actors() ;
  ::int64_t actors(int index) const;
  void set_actors(int index, ::int64_t value);
  void add_actors(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& actors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* mutable_actors();

  private:
  ::int64_t _internal_actors(int index) const;
  void _internal_add_actors(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& _internal_actors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* _internal_mutable_actors();

  public:
  // optional .google.protobuf.Timestamp ts = 4 [json_name = "ts", (.gen_bq_schema.bigquery) = {
  bool has_ts() const;
  void clear_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_ts();
  void set_allocated_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_ts();
  public:
  void unsafe_arena_set_allocated_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_ts();
  // optional int64 data_id = 1 [json_name = "dataId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  bool has_data_id() const;
  void clear_data_id() ;
  ::int64_t data_id() const;
  void set_data_id(::int64_t value);

  private:
  ::int64_t _internal_data_id() const;
  void _internal_set_data_id(::int64_t value);

  public:
  // optional int64 batch_id = 2 [json_name = "batchId", (.gen_bq_schema.bigquery) = {
  bool has_batch_id() const;
  void clear_batch_id() ;
  ::int64_t batch_id() const;
  void set_batch_id(::int64_t value);

  private:
  ::int64_t _internal_batch_id() const;
  void _internal_set_batch_id(::int64_t value);

  public:
  // optional int64 task_id = 3 [json_name = "taskId", (.gen_bq_schema.bigquery) = {
  bool has_task_id() const;
  void clear_task_id() ;
  ::int64_t task_id() const;
  void set_task_id(::int64_t value);

  private:
  ::int64_t _internal_task_id() const;
  void _internal_set_task_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::geometry::v1::BoundingBox2f > annotations_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t> labels_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _labels_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t> actors_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _actors_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_;
    ::int64_t data_id_;
    ::int64_t batch_id_;
    ::int64_t task_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto;
};// -------------------------------------------------------------------

class FrameAnnotationBox3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3) */ {
 public:
  inline FrameAnnotationBox3() : FrameAnnotationBox3(nullptr) {}
  ~FrameAnnotationBox3() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FrameAnnotationBox3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameAnnotationBox3(const FrameAnnotationBox3& from);
  FrameAnnotationBox3(FrameAnnotationBox3&& from) noexcept
    : FrameAnnotationBox3() {
    *this = ::std::move(from);
  }

  inline FrameAnnotationBox3& operator=(const FrameAnnotationBox3& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameAnnotationBox3& operator=(FrameAnnotationBox3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameAnnotationBox3& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameAnnotationBox3* internal_default_instance() {
    return reinterpret_cast<const FrameAnnotationBox3*>(
               &_FrameAnnotationBox3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FrameAnnotationBox3& a, FrameAnnotationBox3& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameAnnotationBox3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameAnnotationBox3* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameAnnotationBox3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameAnnotationBox3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrameAnnotationBox3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FrameAnnotationBox3& from) {
    FrameAnnotationBox3::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameAnnotationBox3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3";
  }
  protected:
  explicit FrameAnnotationBox3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 5,
    kLabelsFieldNumber = 6,
    kActorsFieldNumber = 7,
    kTsFieldNumber = 4,
    kDataIdFieldNumber = 1,
    kBatchIdFieldNumber = 2,
    kTaskIdFieldNumber = 3,
  };
  // repeated .cavnue.messages.geometry.v1.RotatedBoundingBox3d annotations = 5 [json_name = "annotations", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_UTM];
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;

  public:
  void clear_annotations() ;
  ::cavnue::messages::geometry::v1::RotatedBoundingBox3d* mutable_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::geometry::v1::RotatedBoundingBox3d >*
      mutable_annotations();
  private:
  const ::cavnue::messages::geometry::v1::RotatedBoundingBox3d& _internal_annotations(int index) const;
  ::cavnue::messages::geometry::v1::RotatedBoundingBox3d* _internal_add_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::geometry::v1::RotatedBoundingBox3d>& _internal_annotations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::geometry::v1::RotatedBoundingBox3d>* _internal_mutable_annotations();
  public:
  const ::cavnue::messages::geometry::v1::RotatedBoundingBox3d& annotations(int index) const;
  ::cavnue::messages::geometry::v1::RotatedBoundingBox3d* add_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::geometry::v1::RotatedBoundingBox3d >&
      annotations() const;
  // repeated int64 labels = 6 [json_name = "labels"];
  int labels_size() const;
  private:
  int _internal_labels_size() const;

  public:
  void clear_labels() ;
  ::int64_t labels(int index) const;
  void set_labels(int index, ::int64_t value);
  void add_labels(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* mutable_labels();

  private:
  ::int64_t _internal_labels(int index) const;
  void _internal_add_labels(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* _internal_mutable_labels();

  public:
  // repeated int64 actors = 7 [json_name = "actors"];
  int actors_size() const;
  private:
  int _internal_actors_size() const;

  public:
  void clear_actors() ;
  ::int64_t actors(int index) const;
  void set_actors(int index, ::int64_t value);
  void add_actors(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& actors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* mutable_actors();

  private:
  ::int64_t _internal_actors(int index) const;
  void _internal_add_actors(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& _internal_actors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* _internal_mutable_actors();

  public:
  // optional .google.protobuf.Timestamp ts = 4 [json_name = "ts", (.gen_bq_schema.bigquery) = {
  bool has_ts() const;
  void clear_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_ts();
  void set_allocated_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_ts();
  public:
  void unsafe_arena_set_allocated_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_ts();
  // optional int64 data_id = 1 [json_name = "dataId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  bool has_data_id() const;
  void clear_data_id() ;
  ::int64_t data_id() const;
  void set_data_id(::int64_t value);

  private:
  ::int64_t _internal_data_id() const;
  void _internal_set_data_id(::int64_t value);

  public:
  // optional int64 batch_id = 2 [json_name = "batchId", (.gen_bq_schema.bigquery) = {
  bool has_batch_id() const;
  void clear_batch_id() ;
  ::int64_t batch_id() const;
  void set_batch_id(::int64_t value);

  private:
  ::int64_t _internal_batch_id() const;
  void _internal_set_batch_id(::int64_t value);

  public:
  // optional int64 task_id = 3 [json_name = "taskId", (.gen_bq_schema.bigquery) = {
  bool has_task_id() const;
  void clear_task_id() ;
  ::int64_t task_id() const;
  void set_task_id(::int64_t value);

  private:
  ::int64_t _internal_task_id() const;
  void _internal_set_task_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::geometry::v1::RotatedBoundingBox3d > annotations_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t> labels_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _labels_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t> actors_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _actors_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_;
    ::int64_t data_id_;
    ::int64_t batch_id_;
    ::int64_t task_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto;
};// -------------------------------------------------------------------

class FrameAnnotationSegmentation_MaskMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.MaskMap) */ {
 public:
  inline FrameAnnotationSegmentation_MaskMap() : FrameAnnotationSegmentation_MaskMap(nullptr) {}
  ~FrameAnnotationSegmentation_MaskMap() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FrameAnnotationSegmentation_MaskMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameAnnotationSegmentation_MaskMap(const FrameAnnotationSegmentation_MaskMap& from);
  FrameAnnotationSegmentation_MaskMap(FrameAnnotationSegmentation_MaskMap&& from) noexcept
    : FrameAnnotationSegmentation_MaskMap() {
    *this = ::std::move(from);
  }

  inline FrameAnnotationSegmentation_MaskMap& operator=(const FrameAnnotationSegmentation_MaskMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameAnnotationSegmentation_MaskMap& operator=(FrameAnnotationSegmentation_MaskMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameAnnotationSegmentation_MaskMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameAnnotationSegmentation_MaskMap* internal_default_instance() {
    return reinterpret_cast<const FrameAnnotationSegmentation_MaskMap*>(
               &_FrameAnnotationSegmentation_MaskMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FrameAnnotationSegmentation_MaskMap& a, FrameAnnotationSegmentation_MaskMap& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameAnnotationSegmentation_MaskMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameAnnotationSegmentation_MaskMap* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameAnnotationSegmentation_MaskMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameAnnotationSegmentation_MaskMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrameAnnotationSegmentation_MaskMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FrameAnnotationSegmentation_MaskMap& from) {
    FrameAnnotationSegmentation_MaskMap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameAnnotationSegmentation_MaskMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.MaskMap";
  }
  protected:
  explicit FrameAnnotationSegmentation_MaskMap(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 1,
    kLabelIdFieldNumber = 2,
  };
  // optional string uri = 1 [json_name = "uri", (.gen_bq_schema.bigquery) = {
  bool has_uri() const;
  void clear_uri() ;
  const std::string& uri() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uri(Arg_&& arg, Args_... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* ptr);

  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(
      const std::string& value);
  std::string* _internal_mutable_uri();

  public:
  // optional int64 label_id = 2 [json_name = "labelId", (.gen_bq_schema.bigquery) = {
  bool has_label_id() const;
  void clear_label_id() ;
  ::int64_t label_id() const;
  void set_label_id(::int64_t value);

  private:
  ::int64_t _internal_label_id() const;
  void _internal_set_label_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.MaskMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
    ::int64_t label_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto;
};// -------------------------------------------------------------------

class FrameAnnotationSegmentation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation) */ {
 public:
  inline FrameAnnotationSegmentation() : FrameAnnotationSegmentation(nullptr) {}
  ~FrameAnnotationSegmentation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FrameAnnotationSegmentation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameAnnotationSegmentation(const FrameAnnotationSegmentation& from);
  FrameAnnotationSegmentation(FrameAnnotationSegmentation&& from) noexcept
    : FrameAnnotationSegmentation() {
    *this = ::std::move(from);
  }

  inline FrameAnnotationSegmentation& operator=(const FrameAnnotationSegmentation& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameAnnotationSegmentation& operator=(FrameAnnotationSegmentation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameAnnotationSegmentation& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameAnnotationSegmentation* internal_default_instance() {
    return reinterpret_cast<const FrameAnnotationSegmentation*>(
               &_FrameAnnotationSegmentation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FrameAnnotationSegmentation& a, FrameAnnotationSegmentation& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameAnnotationSegmentation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameAnnotationSegmentation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameAnnotationSegmentation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameAnnotationSegmentation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrameAnnotationSegmentation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FrameAnnotationSegmentation& from) {
    FrameAnnotationSegmentation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameAnnotationSegmentation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation";
  }
  protected:
  explicit FrameAnnotationSegmentation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FrameAnnotationSegmentation_MaskMap MaskMap;

  // accessors -------------------------------------------------------

  enum : int {
    kMaskMapFieldNumber = 5,
    kTsFieldNumber = 4,
    kDataIdFieldNumber = 1,
    kBatchIdFieldNumber = 2,
    kTaskIdFieldNumber = 3,
  };
  // repeated .cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.MaskMap mask_map = 5 [json_name = "maskMap"];
  int mask_map_size() const;
  private:
  int _internal_mask_map_size() const;

  public:
  void clear_mask_map() ;
  ::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation_MaskMap* mutable_mask_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation_MaskMap >*
      mutable_mask_map();
  private:
  const ::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation_MaskMap& _internal_mask_map(int index) const;
  ::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation_MaskMap* _internal_add_mask_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation_MaskMap>& _internal_mask_map() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation_MaskMap>* _internal_mutable_mask_map();
  public:
  const ::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation_MaskMap& mask_map(int index) const;
  ::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation_MaskMap* add_mask_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation_MaskMap >&
      mask_map() const;
  // optional .google.protobuf.Timestamp ts = 4 [json_name = "ts", (.gen_bq_schema.bigquery) = {
  bool has_ts() const;
  void clear_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_ts();
  void set_allocated_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_ts();
  public:
  void unsafe_arena_set_allocated_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_ts();
  // optional int64 data_id = 1 [json_name = "dataId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  bool has_data_id() const;
  void clear_data_id() ;
  ::int64_t data_id() const;
  void set_data_id(::int64_t value);

  private:
  ::int64_t _internal_data_id() const;
  void _internal_set_data_id(::int64_t value);

  public:
  // optional int64 batch_id = 2 [json_name = "batchId", (.gen_bq_schema.bigquery) = {
  bool has_batch_id() const;
  void clear_batch_id() ;
  ::int64_t batch_id() const;
  void set_batch_id(::int64_t value);

  private:
  ::int64_t _internal_batch_id() const;
  void _internal_set_batch_id(::int64_t value);

  public:
  // optional int64 task_id = 3 [json_name = "taskId", (.gen_bq_schema.bigquery) = {
  bool has_task_id() const;
  void clear_task_id() ;
  ::int64_t task_id() const;
  void set_task_id(::int64_t value);

  private:
  ::int64_t _internal_task_id() const;
  void _internal_set_task_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation_MaskMap > mask_map_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_;
    ::int64_t data_id_;
    ::int64_t batch_id_;
    ::int64_t task_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto;
};// -------------------------------------------------------------------

class FrameAnnotationAttributes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.data_warehouse.management.v2.FrameAnnotationAttributes) */ {
 public:
  inline FrameAnnotationAttributes() : FrameAnnotationAttributes(nullptr) {}
  ~FrameAnnotationAttributes() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FrameAnnotationAttributes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameAnnotationAttributes(const FrameAnnotationAttributes& from);
  FrameAnnotationAttributes(FrameAnnotationAttributes&& from) noexcept
    : FrameAnnotationAttributes() {
    *this = ::std::move(from);
  }

  inline FrameAnnotationAttributes& operator=(const FrameAnnotationAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameAnnotationAttributes& operator=(FrameAnnotationAttributes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameAnnotationAttributes& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameAnnotationAttributes* internal_default_instance() {
    return reinterpret_cast<const FrameAnnotationAttributes*>(
               &_FrameAnnotationAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FrameAnnotationAttributes& a, FrameAnnotationAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameAnnotationAttributes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameAnnotationAttributes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameAnnotationAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameAnnotationAttributes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrameAnnotationAttributes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FrameAnnotationAttributes& from) {
    FrameAnnotationAttributes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameAnnotationAttributes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.data_warehouse.management.v2.FrameAnnotationAttributes";
  }
  protected:
  explicit FrameAnnotationAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataIdFieldNumber = 1,
    kBatchIdFieldNumber = 2,
    kActorIdFieldNumber = 3,
    kWrongWayDrivingFieldNumber = 4,
    kImpedingFieldNumber = 5,
    kCollisionFieldNumber = 6,
    kSpeedingFieldNumber = 7,
    kSirenFieldNumber = 8,
  };
  // optional int64 data_id = 1 [json_name = "dataId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  bool has_data_id() const;
  void clear_data_id() ;
  ::int64_t data_id() const;
  void set_data_id(::int64_t value);

  private:
  ::int64_t _internal_data_id() const;
  void _internal_set_data_id(::int64_t value);

  public:
  // optional int64 batch_id = 2 [json_name = "batchId", (.gen_bq_schema.bigquery) = {
  bool has_batch_id() const;
  void clear_batch_id() ;
  ::int64_t batch_id() const;
  void set_batch_id(::int64_t value);

  private:
  ::int64_t _internal_batch_id() const;
  void _internal_set_batch_id(::int64_t value);

  public:
  // optional int64 actor_id = 3 [json_name = "actorId", (.gen_bq_schema.bigquery) = {
  bool has_actor_id() const;
  void clear_actor_id() ;
  ::int64_t actor_id() const;
  void set_actor_id(::int64_t value);

  private:
  ::int64_t _internal_actor_id() const;
  void _internal_set_actor_id(::int64_t value);

  public:
  // optional bool wrong_way_driving = 4 [json_name = "wrongWayDriving", (.gen_bq_schema.bigquery) = {
  bool has_wrong_way_driving() const;
  void clear_wrong_way_driving() ;
  bool wrong_way_driving() const;
  void set_wrong_way_driving(bool value);

  private:
  bool _internal_wrong_way_driving() const;
  void _internal_set_wrong_way_driving(bool value);

  public:
  // optional bool impeding = 5 [json_name = "impeding", (.gen_bq_schema.bigquery) = {
  bool has_impeding() const;
  void clear_impeding() ;
  bool impeding() const;
  void set_impeding(bool value);

  private:
  bool _internal_impeding() const;
  void _internal_set_impeding(bool value);

  public:
  // optional bool collision = 6 [json_name = "collision", (.gen_bq_schema.bigquery) = {
  bool has_collision() const;
  void clear_collision() ;
  bool collision() const;
  void set_collision(bool value);

  private:
  bool _internal_collision() const;
  void _internal_set_collision(bool value);

  public:
  // optional bool speeding = 7 [json_name = "speeding", (.gen_bq_schema.bigquery) = {
  bool has_speeding() const;
  void clear_speeding() ;
  bool speeding() const;
  void set_speeding(bool value);

  private:
  bool _internal_speeding() const;
  void _internal_set_speeding(bool value);

  public:
  // optional bool siren = 8 [json_name = "siren", (.gen_bq_schema.bigquery) = {
  bool has_siren() const;
  void clear_siren() ;
  bool siren() const;
  void set_siren(bool value);

  private:
  bool _internal_siren() const;
  void _internal_set_siren(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.data_warehouse.management.v2.FrameAnnotationAttributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t data_id_;
    ::int64_t batch_id_;
    ::int64_t actor_id_;
    bool wrong_way_driving_;
    bool impeding_;
    bool collision_;
    bool speeding_;
    bool siren_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto;
};// -------------------------------------------------------------------

class Label final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.data_warehouse.management.v2.Label) */ {
 public:
  inline Label() : Label(nullptr) {}
  ~Label() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Label(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Label(const Label& from);
  Label(Label&& from) noexcept
    : Label() {
    *this = ::std::move(from);
  }

  inline Label& operator=(const Label& from) {
    CopyFrom(from);
    return *this;
  }
  inline Label& operator=(Label&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Label& default_instance() {
    return *internal_default_instance();
  }
  static inline const Label* internal_default_instance() {
    return reinterpret_cast<const Label*>(
               &_Label_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Label& a, Label& b) {
    a.Swap(&b);
  }
  inline void Swap(Label* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Label* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Label* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Label>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Label& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Label& from) {
    Label::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Label* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.data_warehouse.management.v2.Label";
  }
  protected:
  explicit Label(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHierarchyFieldNumber = 4,
    kAnnotationTypeFieldNumber = 2,
    kLabelIdFieldNumber = 1,
    kLabelFieldNumber = 3,
  };
  // repeated string hierarchy = 4 [json_name = "hierarchy"];
  int hierarchy_size() const;
  private:
  int _internal_hierarchy_size() const;

  public:
  void clear_hierarchy() ;
  const std::string& hierarchy(int index) const;
  std::string* mutable_hierarchy(int index);
  void set_hierarchy(int index, const std::string& value);
  void set_hierarchy(int index, std::string&& value);
  void set_hierarchy(int index, const char* value);
  void set_hierarchy(int index, const char* value, std::size_t size);
  void set_hierarchy(int index, absl::string_view value);
  std::string* add_hierarchy();
  void add_hierarchy(const std::string& value);
  void add_hierarchy(std::string&& value);
  void add_hierarchy(const char* value);
  void add_hierarchy(const char* value, std::size_t size);
  void add_hierarchy(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& hierarchy() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_hierarchy();

  private:
  const std::string& _internal_hierarchy(int index) const;
  std::string* _internal_add_hierarchy();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_hierarchy() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_hierarchy();

  public:
  // optional string annotation_type = 2 [json_name = "annotationType", (.gen_bq_schema.bigquery) = {
  bool has_annotation_type() const;
  void clear_annotation_type() ;
  const std::string& annotation_type() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_annotation_type(Arg_&& arg, Args_... args);
  std::string* mutable_annotation_type();
  PROTOBUF_NODISCARD std::string* release_annotation_type();
  void set_allocated_annotation_type(std::string* ptr);

  private:
  const std::string& _internal_annotation_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_annotation_type(
      const std::string& value);
  std::string* _internal_mutable_annotation_type();

  public:
  // optional int64 label_id = 1 [json_name = "labelId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "label", (.cavnue.messages.common.v1.derivation) = "annotation_type", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  bool has_label_id() const;
  void clear_label_id() ;
  ::int64_t label_id() const;
  void set_label_id(::int64_t value);

  private:
  ::int64_t _internal_label_id() const;
  void _internal_set_label_id(::int64_t value);

  public:
  // optional .cavnue.messages.common.v1.Classification label = 3 [json_name = "label", (.gen_bq_schema.bigquery) = {
  bool has_label() const;
  void clear_label() ;
  ::cavnue::messages::common::v1::Classification label() const;
  void set_label(::cavnue::messages::common::v1::Classification value);

  private:
  ::cavnue::messages::common::v1::Classification _internal_label() const;
  void _internal_set_label(::cavnue::messages::common::v1::Classification value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.data_warehouse.management.v2.Label)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> hierarchy_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr annotation_type_;
    ::int64_t label_id_;
    int label_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// FrameAnnotationBox2

// optional int64 data_id = 1 [json_name = "dataId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
inline bool FrameAnnotationBox2::has_data_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FrameAnnotationBox2::clear_data_id() {
  _impl_.data_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t FrameAnnotationBox2::data_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2.data_id)
  return _internal_data_id();
}
inline void FrameAnnotationBox2::set_data_id(::int64_t value) {
  _internal_set_data_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2.data_id)
}
inline ::int64_t FrameAnnotationBox2::_internal_data_id() const {
  return _impl_.data_id_;
}
inline void FrameAnnotationBox2::_internal_set_data_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.data_id_ = value;
}

// optional int64 batch_id = 2 [json_name = "batchId", (.gen_bq_schema.bigquery) = {
inline bool FrameAnnotationBox2::has_batch_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void FrameAnnotationBox2::clear_batch_id() {
  _impl_.batch_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t FrameAnnotationBox2::batch_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2.batch_id)
  return _internal_batch_id();
}
inline void FrameAnnotationBox2::set_batch_id(::int64_t value) {
  _internal_set_batch_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2.batch_id)
}
inline ::int64_t FrameAnnotationBox2::_internal_batch_id() const {
  return _impl_.batch_id_;
}
inline void FrameAnnotationBox2::_internal_set_batch_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.batch_id_ = value;
}

// optional int64 task_id = 3 [json_name = "taskId", (.gen_bq_schema.bigquery) = {
inline bool FrameAnnotationBox2::has_task_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void FrameAnnotationBox2::clear_task_id() {
  _impl_.task_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t FrameAnnotationBox2::task_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2.task_id)
  return _internal_task_id();
}
inline void FrameAnnotationBox2::set_task_id(::int64_t value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2.task_id)
}
inline ::int64_t FrameAnnotationBox2::_internal_task_id() const {
  return _impl_.task_id_;
}
inline void FrameAnnotationBox2::_internal_set_task_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.task_id_ = value;
}

// optional .google.protobuf.Timestamp ts = 4 [json_name = "ts", (.gen_bq_schema.bigquery) = {
inline bool FrameAnnotationBox2::has_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& FrameAnnotationBox2::_internal_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& FrameAnnotationBox2::ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2.ts)
  return _internal_ts();
}
inline void FrameAnnotationBox2::unsafe_arena_set_allocated_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_);
  }
  _impl_.ts_ = ts;
  if (ts) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2.ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* FrameAnnotationBox2::release_ts() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_;
  _impl_.ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* FrameAnnotationBox2::unsafe_arena_release_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2.ts)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_;
  _impl_.ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* FrameAnnotationBox2::_internal_mutable_ts() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.ts_ = p;
  }
  return _impl_.ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* FrameAnnotationBox2::mutable_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2.ts)
  return _msg;
}
inline void FrameAnnotationBox2::set_allocated_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_);
  }
  if (ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts));
    if (message_arena != submessage_arena) {
      ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ts_ = ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2.ts)
}

// repeated .cavnue.messages.geometry.v1.BoundingBox2f annotations = 5 [json_name = "annotations", (.cavnue.messages.common.v1.units) = UNITS_PIXELS];
inline int FrameAnnotationBox2::_internal_annotations_size() const {
  return _impl_.annotations_.size();
}
inline int FrameAnnotationBox2::annotations_size() const {
  return _internal_annotations_size();
}
inline ::cavnue::messages::geometry::v1::BoundingBox2f* FrameAnnotationBox2::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2.annotations)
  return _internal_mutable_annotations()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::geometry::v1::BoundingBox2f >*
FrameAnnotationBox2::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2.annotations)
  return _internal_mutable_annotations();
}
inline const ::cavnue::messages::geometry::v1::BoundingBox2f& FrameAnnotationBox2::_internal_annotations(int index) const {
  return _internal_annotations().Get(index);
}
inline const ::cavnue::messages::geometry::v1::BoundingBox2f& FrameAnnotationBox2::annotations(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2.annotations)
  return _internal_annotations(index);
}
inline ::cavnue::messages::geometry::v1::BoundingBox2f* FrameAnnotationBox2::_internal_add_annotations() {
  return _internal_mutable_annotations()->Add();
}
inline ::cavnue::messages::geometry::v1::BoundingBox2f* FrameAnnotationBox2::add_annotations() {
  ::cavnue::messages::geometry::v1::BoundingBox2f* _add = _internal_add_annotations();
  // @@protoc_insertion_point(field_add:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2.annotations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::geometry::v1::BoundingBox2f >&
FrameAnnotationBox2::annotations() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2.annotations)
  return _internal_annotations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::geometry::v1::BoundingBox2f>&
FrameAnnotationBox2::_internal_annotations() const {
  return _impl_.annotations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::geometry::v1::BoundingBox2f>*
FrameAnnotationBox2::_internal_mutable_annotations() {
  return &_impl_.annotations_;
}

// repeated int64 labels = 6 [json_name = "labels"];
inline int FrameAnnotationBox2::_internal_labels_size() const {
  return _impl_.labels_.size();
}
inline int FrameAnnotationBox2::labels_size() const {
  return _internal_labels_size();
}
inline void FrameAnnotationBox2::clear_labels() {
  _internal_mutable_labels()->Clear();
}
inline ::int64_t FrameAnnotationBox2::labels(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2.labels)
  return _internal_labels(index);
}
inline void FrameAnnotationBox2::set_labels(int index, ::int64_t value) {
  _internal_mutable_labels()->Set(index, value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2.labels)
}
inline void FrameAnnotationBox2::add_labels(::int64_t value) {
  _internal_add_labels(value);
  // @@protoc_insertion_point(field_add:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2.labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& FrameAnnotationBox2::labels() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* FrameAnnotationBox2::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2.labels)
  return _internal_mutable_labels();
}

inline ::int64_t FrameAnnotationBox2::_internal_labels(int index) const {
  return _internal_labels().Get(index);
}
inline void FrameAnnotationBox2::_internal_add_labels(::int64_t value) {
  _internal_mutable_labels()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& FrameAnnotationBox2::_internal_labels() const {
  return _impl_.labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* FrameAnnotationBox2::_internal_mutable_labels() {
  return &_impl_.labels_;
}

// repeated int64 actors = 7 [json_name = "actors"];
inline int FrameAnnotationBox2::_internal_actors_size() const {
  return _impl_.actors_.size();
}
inline int FrameAnnotationBox2::actors_size() const {
  return _internal_actors_size();
}
inline void FrameAnnotationBox2::clear_actors() {
  _internal_mutable_actors()->Clear();
}
inline ::int64_t FrameAnnotationBox2::actors(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2.actors)
  return _internal_actors(index);
}
inline void FrameAnnotationBox2::set_actors(int index, ::int64_t value) {
  _internal_mutable_actors()->Set(index, value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2.actors)
}
inline void FrameAnnotationBox2::add_actors(::int64_t value) {
  _internal_add_actors(value);
  // @@protoc_insertion_point(field_add:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2.actors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& FrameAnnotationBox2::actors() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2.actors)
  return _internal_actors();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* FrameAnnotationBox2::mutable_actors() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2.actors)
  return _internal_mutable_actors();
}

inline ::int64_t FrameAnnotationBox2::_internal_actors(int index) const {
  return _internal_actors().Get(index);
}
inline void FrameAnnotationBox2::_internal_add_actors(::int64_t value) {
  _internal_mutable_actors()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& FrameAnnotationBox2::_internal_actors() const {
  return _impl_.actors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* FrameAnnotationBox2::_internal_mutable_actors() {
  return &_impl_.actors_;
}

// -------------------------------------------------------------------

// FrameAnnotationBox3

// optional int64 data_id = 1 [json_name = "dataId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
inline bool FrameAnnotationBox3::has_data_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FrameAnnotationBox3::clear_data_id() {
  _impl_.data_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t FrameAnnotationBox3::data_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3.data_id)
  return _internal_data_id();
}
inline void FrameAnnotationBox3::set_data_id(::int64_t value) {
  _internal_set_data_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3.data_id)
}
inline ::int64_t FrameAnnotationBox3::_internal_data_id() const {
  return _impl_.data_id_;
}
inline void FrameAnnotationBox3::_internal_set_data_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.data_id_ = value;
}

// optional int64 batch_id = 2 [json_name = "batchId", (.gen_bq_schema.bigquery) = {
inline bool FrameAnnotationBox3::has_batch_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void FrameAnnotationBox3::clear_batch_id() {
  _impl_.batch_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t FrameAnnotationBox3::batch_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3.batch_id)
  return _internal_batch_id();
}
inline void FrameAnnotationBox3::set_batch_id(::int64_t value) {
  _internal_set_batch_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3.batch_id)
}
inline ::int64_t FrameAnnotationBox3::_internal_batch_id() const {
  return _impl_.batch_id_;
}
inline void FrameAnnotationBox3::_internal_set_batch_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.batch_id_ = value;
}

// optional int64 task_id = 3 [json_name = "taskId", (.gen_bq_schema.bigquery) = {
inline bool FrameAnnotationBox3::has_task_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void FrameAnnotationBox3::clear_task_id() {
  _impl_.task_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t FrameAnnotationBox3::task_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3.task_id)
  return _internal_task_id();
}
inline void FrameAnnotationBox3::set_task_id(::int64_t value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3.task_id)
}
inline ::int64_t FrameAnnotationBox3::_internal_task_id() const {
  return _impl_.task_id_;
}
inline void FrameAnnotationBox3::_internal_set_task_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.task_id_ = value;
}

// optional .google.protobuf.Timestamp ts = 4 [json_name = "ts", (.gen_bq_schema.bigquery) = {
inline bool FrameAnnotationBox3::has_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& FrameAnnotationBox3::_internal_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& FrameAnnotationBox3::ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3.ts)
  return _internal_ts();
}
inline void FrameAnnotationBox3::unsafe_arena_set_allocated_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_);
  }
  _impl_.ts_ = ts;
  if (ts) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3.ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* FrameAnnotationBox3::release_ts() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_;
  _impl_.ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* FrameAnnotationBox3::unsafe_arena_release_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3.ts)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_;
  _impl_.ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* FrameAnnotationBox3::_internal_mutable_ts() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.ts_ = p;
  }
  return _impl_.ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* FrameAnnotationBox3::mutable_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3.ts)
  return _msg;
}
inline void FrameAnnotationBox3::set_allocated_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_);
  }
  if (ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts));
    if (message_arena != submessage_arena) {
      ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ts_ = ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3.ts)
}

// repeated .cavnue.messages.geometry.v1.RotatedBoundingBox3d annotations = 5 [json_name = "annotations", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_UTM];
inline int FrameAnnotationBox3::_internal_annotations_size() const {
  return _impl_.annotations_.size();
}
inline int FrameAnnotationBox3::annotations_size() const {
  return _internal_annotations_size();
}
inline ::cavnue::messages::geometry::v1::RotatedBoundingBox3d* FrameAnnotationBox3::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3.annotations)
  return _internal_mutable_annotations()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::geometry::v1::RotatedBoundingBox3d >*
FrameAnnotationBox3::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3.annotations)
  return _internal_mutable_annotations();
}
inline const ::cavnue::messages::geometry::v1::RotatedBoundingBox3d& FrameAnnotationBox3::_internal_annotations(int index) const {
  return _internal_annotations().Get(index);
}
inline const ::cavnue::messages::geometry::v1::RotatedBoundingBox3d& FrameAnnotationBox3::annotations(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3.annotations)
  return _internal_annotations(index);
}
inline ::cavnue::messages::geometry::v1::RotatedBoundingBox3d* FrameAnnotationBox3::_internal_add_annotations() {
  return _internal_mutable_annotations()->Add();
}
inline ::cavnue::messages::geometry::v1::RotatedBoundingBox3d* FrameAnnotationBox3::add_annotations() {
  ::cavnue::messages::geometry::v1::RotatedBoundingBox3d* _add = _internal_add_annotations();
  // @@protoc_insertion_point(field_add:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3.annotations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::geometry::v1::RotatedBoundingBox3d >&
FrameAnnotationBox3::annotations() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3.annotations)
  return _internal_annotations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::geometry::v1::RotatedBoundingBox3d>&
FrameAnnotationBox3::_internal_annotations() const {
  return _impl_.annotations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::geometry::v1::RotatedBoundingBox3d>*
FrameAnnotationBox3::_internal_mutable_annotations() {
  return &_impl_.annotations_;
}

// repeated int64 labels = 6 [json_name = "labels"];
inline int FrameAnnotationBox3::_internal_labels_size() const {
  return _impl_.labels_.size();
}
inline int FrameAnnotationBox3::labels_size() const {
  return _internal_labels_size();
}
inline void FrameAnnotationBox3::clear_labels() {
  _internal_mutable_labels()->Clear();
}
inline ::int64_t FrameAnnotationBox3::labels(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3.labels)
  return _internal_labels(index);
}
inline void FrameAnnotationBox3::set_labels(int index, ::int64_t value) {
  _internal_mutable_labels()->Set(index, value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3.labels)
}
inline void FrameAnnotationBox3::add_labels(::int64_t value) {
  _internal_add_labels(value);
  // @@protoc_insertion_point(field_add:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3.labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& FrameAnnotationBox3::labels() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* FrameAnnotationBox3::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3.labels)
  return _internal_mutable_labels();
}

inline ::int64_t FrameAnnotationBox3::_internal_labels(int index) const {
  return _internal_labels().Get(index);
}
inline void FrameAnnotationBox3::_internal_add_labels(::int64_t value) {
  _internal_mutable_labels()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& FrameAnnotationBox3::_internal_labels() const {
  return _impl_.labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* FrameAnnotationBox3::_internal_mutable_labels() {
  return &_impl_.labels_;
}

// repeated int64 actors = 7 [json_name = "actors"];
inline int FrameAnnotationBox3::_internal_actors_size() const {
  return _impl_.actors_.size();
}
inline int FrameAnnotationBox3::actors_size() const {
  return _internal_actors_size();
}
inline void FrameAnnotationBox3::clear_actors() {
  _internal_mutable_actors()->Clear();
}
inline ::int64_t FrameAnnotationBox3::actors(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3.actors)
  return _internal_actors(index);
}
inline void FrameAnnotationBox3::set_actors(int index, ::int64_t value) {
  _internal_mutable_actors()->Set(index, value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3.actors)
}
inline void FrameAnnotationBox3::add_actors(::int64_t value) {
  _internal_add_actors(value);
  // @@protoc_insertion_point(field_add:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3.actors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& FrameAnnotationBox3::actors() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3.actors)
  return _internal_actors();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* FrameAnnotationBox3::mutable_actors() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3.actors)
  return _internal_mutable_actors();
}

inline ::int64_t FrameAnnotationBox3::_internal_actors(int index) const {
  return _internal_actors().Get(index);
}
inline void FrameAnnotationBox3::_internal_add_actors(::int64_t value) {
  _internal_mutable_actors()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& FrameAnnotationBox3::_internal_actors() const {
  return _impl_.actors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* FrameAnnotationBox3::_internal_mutable_actors() {
  return &_impl_.actors_;
}

// -------------------------------------------------------------------

// FrameAnnotationSegmentation_MaskMap

// optional string uri = 1 [json_name = "uri", (.gen_bq_schema.bigquery) = {
inline bool FrameAnnotationSegmentation_MaskMap::has_uri() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FrameAnnotationSegmentation_MaskMap::clear_uri() {
  _impl_.uri_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FrameAnnotationSegmentation_MaskMap::uri() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.MaskMap.uri)
  return _internal_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FrameAnnotationSegmentation_MaskMap::set_uri(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.uri_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.MaskMap.uri)
}
inline std::string* FrameAnnotationSegmentation_MaskMap::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.MaskMap.uri)
  return _s;
}
inline const std::string& FrameAnnotationSegmentation_MaskMap::_internal_uri() const {
  return _impl_.uri_.Get();
}
inline void FrameAnnotationSegmentation_MaskMap::_internal_set_uri(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* FrameAnnotationSegmentation_MaskMap::_internal_mutable_uri() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.uri_.Mutable( GetArenaForAllocation());
}
inline std::string* FrameAnnotationSegmentation_MaskMap::release_uri() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.MaskMap.uri)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.uri_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uri_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void FrameAnnotationSegmentation_MaskMap::set_allocated_uri(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.uri_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uri_.IsDefault()) {
          _impl_.uri_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.MaskMap.uri)
}

// optional int64 label_id = 2 [json_name = "labelId", (.gen_bq_schema.bigquery) = {
inline bool FrameAnnotationSegmentation_MaskMap::has_label_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FrameAnnotationSegmentation_MaskMap::clear_label_id() {
  _impl_.label_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t FrameAnnotationSegmentation_MaskMap::label_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.MaskMap.label_id)
  return _internal_label_id();
}
inline void FrameAnnotationSegmentation_MaskMap::set_label_id(::int64_t value) {
  _internal_set_label_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.MaskMap.label_id)
}
inline ::int64_t FrameAnnotationSegmentation_MaskMap::_internal_label_id() const {
  return _impl_.label_id_;
}
inline void FrameAnnotationSegmentation_MaskMap::_internal_set_label_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.label_id_ = value;
}

// -------------------------------------------------------------------

// FrameAnnotationSegmentation

// optional int64 data_id = 1 [json_name = "dataId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
inline bool FrameAnnotationSegmentation::has_data_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FrameAnnotationSegmentation::clear_data_id() {
  _impl_.data_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t FrameAnnotationSegmentation::data_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.data_id)
  return _internal_data_id();
}
inline void FrameAnnotationSegmentation::set_data_id(::int64_t value) {
  _internal_set_data_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.data_id)
}
inline ::int64_t FrameAnnotationSegmentation::_internal_data_id() const {
  return _impl_.data_id_;
}
inline void FrameAnnotationSegmentation::_internal_set_data_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.data_id_ = value;
}

// optional int64 batch_id = 2 [json_name = "batchId", (.gen_bq_schema.bigquery) = {
inline bool FrameAnnotationSegmentation::has_batch_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void FrameAnnotationSegmentation::clear_batch_id() {
  _impl_.batch_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t FrameAnnotationSegmentation::batch_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.batch_id)
  return _internal_batch_id();
}
inline void FrameAnnotationSegmentation::set_batch_id(::int64_t value) {
  _internal_set_batch_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.batch_id)
}
inline ::int64_t FrameAnnotationSegmentation::_internal_batch_id() const {
  return _impl_.batch_id_;
}
inline void FrameAnnotationSegmentation::_internal_set_batch_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.batch_id_ = value;
}

// optional int64 task_id = 3 [json_name = "taskId", (.gen_bq_schema.bigquery) = {
inline bool FrameAnnotationSegmentation::has_task_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void FrameAnnotationSegmentation::clear_task_id() {
  _impl_.task_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t FrameAnnotationSegmentation::task_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.task_id)
  return _internal_task_id();
}
inline void FrameAnnotationSegmentation::set_task_id(::int64_t value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.task_id)
}
inline ::int64_t FrameAnnotationSegmentation::_internal_task_id() const {
  return _impl_.task_id_;
}
inline void FrameAnnotationSegmentation::_internal_set_task_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.task_id_ = value;
}

// optional .google.protobuf.Timestamp ts = 4 [json_name = "ts", (.gen_bq_schema.bigquery) = {
inline bool FrameAnnotationSegmentation::has_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& FrameAnnotationSegmentation::_internal_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& FrameAnnotationSegmentation::ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.ts)
  return _internal_ts();
}
inline void FrameAnnotationSegmentation::unsafe_arena_set_allocated_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_);
  }
  _impl_.ts_ = ts;
  if (ts) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* FrameAnnotationSegmentation::release_ts() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_;
  _impl_.ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* FrameAnnotationSegmentation::unsafe_arena_release_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.ts)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_;
  _impl_.ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* FrameAnnotationSegmentation::_internal_mutable_ts() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.ts_ = p;
  }
  return _impl_.ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* FrameAnnotationSegmentation::mutable_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.ts)
  return _msg;
}
inline void FrameAnnotationSegmentation::set_allocated_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_);
  }
  if (ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts));
    if (message_arena != submessage_arena) {
      ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ts_ = ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.ts)
}

// repeated .cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.MaskMap mask_map = 5 [json_name = "maskMap"];
inline int FrameAnnotationSegmentation::_internal_mask_map_size() const {
  return _impl_.mask_map_.size();
}
inline int FrameAnnotationSegmentation::mask_map_size() const {
  return _internal_mask_map_size();
}
inline void FrameAnnotationSegmentation::clear_mask_map() {
  _internal_mutable_mask_map()->Clear();
}
inline ::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation_MaskMap* FrameAnnotationSegmentation::mutable_mask_map(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.mask_map)
  return _internal_mutable_mask_map()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation_MaskMap >*
FrameAnnotationSegmentation::mutable_mask_map() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.mask_map)
  return _internal_mutable_mask_map();
}
inline const ::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation_MaskMap& FrameAnnotationSegmentation::_internal_mask_map(int index) const {
  return _internal_mask_map().Get(index);
}
inline const ::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation_MaskMap& FrameAnnotationSegmentation::mask_map(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.mask_map)
  return _internal_mask_map(index);
}
inline ::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation_MaskMap* FrameAnnotationSegmentation::_internal_add_mask_map() {
  return _internal_mutable_mask_map()->Add();
}
inline ::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation_MaskMap* FrameAnnotationSegmentation::add_mask_map() {
  ::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation_MaskMap* _add = _internal_add_mask_map();
  // @@protoc_insertion_point(field_add:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.mask_map)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation_MaskMap >&
FrameAnnotationSegmentation::mask_map() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.mask_map)
  return _internal_mask_map();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation_MaskMap>&
FrameAnnotationSegmentation::_internal_mask_map() const {
  return _impl_.mask_map_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation_MaskMap>*
FrameAnnotationSegmentation::_internal_mutable_mask_map() {
  return &_impl_.mask_map_;
}

// -------------------------------------------------------------------

// FrameAnnotationAttributes

// optional int64 data_id = 1 [json_name = "dataId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
inline bool FrameAnnotationAttributes::has_data_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FrameAnnotationAttributes::clear_data_id() {
  _impl_.data_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t FrameAnnotationAttributes::data_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.FrameAnnotationAttributes.data_id)
  return _internal_data_id();
}
inline void FrameAnnotationAttributes::set_data_id(::int64_t value) {
  _internal_set_data_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.FrameAnnotationAttributes.data_id)
}
inline ::int64_t FrameAnnotationAttributes::_internal_data_id() const {
  return _impl_.data_id_;
}
inline void FrameAnnotationAttributes::_internal_set_data_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.data_id_ = value;
}

// optional int64 batch_id = 2 [json_name = "batchId", (.gen_bq_schema.bigquery) = {
inline bool FrameAnnotationAttributes::has_batch_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FrameAnnotationAttributes::clear_batch_id() {
  _impl_.batch_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t FrameAnnotationAttributes::batch_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.FrameAnnotationAttributes.batch_id)
  return _internal_batch_id();
}
inline void FrameAnnotationAttributes::set_batch_id(::int64_t value) {
  _internal_set_batch_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.FrameAnnotationAttributes.batch_id)
}
inline ::int64_t FrameAnnotationAttributes::_internal_batch_id() const {
  return _impl_.batch_id_;
}
inline void FrameAnnotationAttributes::_internal_set_batch_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.batch_id_ = value;
}

// optional int64 actor_id = 3 [json_name = "actorId", (.gen_bq_schema.bigquery) = {
inline bool FrameAnnotationAttributes::has_actor_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void FrameAnnotationAttributes::clear_actor_id() {
  _impl_.actor_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t FrameAnnotationAttributes::actor_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.FrameAnnotationAttributes.actor_id)
  return _internal_actor_id();
}
inline void FrameAnnotationAttributes::set_actor_id(::int64_t value) {
  _internal_set_actor_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.FrameAnnotationAttributes.actor_id)
}
inline ::int64_t FrameAnnotationAttributes::_internal_actor_id() const {
  return _impl_.actor_id_;
}
inline void FrameAnnotationAttributes::_internal_set_actor_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.actor_id_ = value;
}

// optional bool wrong_way_driving = 4 [json_name = "wrongWayDriving", (.gen_bq_schema.bigquery) = {
inline bool FrameAnnotationAttributes::has_wrong_way_driving() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void FrameAnnotationAttributes::clear_wrong_way_driving() {
  _impl_.wrong_way_driving_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool FrameAnnotationAttributes::wrong_way_driving() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.FrameAnnotationAttributes.wrong_way_driving)
  return _internal_wrong_way_driving();
}
inline void FrameAnnotationAttributes::set_wrong_way_driving(bool value) {
  _internal_set_wrong_way_driving(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.FrameAnnotationAttributes.wrong_way_driving)
}
inline bool FrameAnnotationAttributes::_internal_wrong_way_driving() const {
  return _impl_.wrong_way_driving_;
}
inline void FrameAnnotationAttributes::_internal_set_wrong_way_driving(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.wrong_way_driving_ = value;
}

// optional bool impeding = 5 [json_name = "impeding", (.gen_bq_schema.bigquery) = {
inline bool FrameAnnotationAttributes::has_impeding() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void FrameAnnotationAttributes::clear_impeding() {
  _impl_.impeding_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool FrameAnnotationAttributes::impeding() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.FrameAnnotationAttributes.impeding)
  return _internal_impeding();
}
inline void FrameAnnotationAttributes::set_impeding(bool value) {
  _internal_set_impeding(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.FrameAnnotationAttributes.impeding)
}
inline bool FrameAnnotationAttributes::_internal_impeding() const {
  return _impl_.impeding_;
}
inline void FrameAnnotationAttributes::_internal_set_impeding(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.impeding_ = value;
}

// optional bool collision = 6 [json_name = "collision", (.gen_bq_schema.bigquery) = {
inline bool FrameAnnotationAttributes::has_collision() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void FrameAnnotationAttributes::clear_collision() {
  _impl_.collision_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool FrameAnnotationAttributes::collision() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.FrameAnnotationAttributes.collision)
  return _internal_collision();
}
inline void FrameAnnotationAttributes::set_collision(bool value) {
  _internal_set_collision(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.FrameAnnotationAttributes.collision)
}
inline bool FrameAnnotationAttributes::_internal_collision() const {
  return _impl_.collision_;
}
inline void FrameAnnotationAttributes::_internal_set_collision(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.collision_ = value;
}

// optional bool speeding = 7 [json_name = "speeding", (.gen_bq_schema.bigquery) = {
inline bool FrameAnnotationAttributes::has_speeding() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void FrameAnnotationAttributes::clear_speeding() {
  _impl_.speeding_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool FrameAnnotationAttributes::speeding() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.FrameAnnotationAttributes.speeding)
  return _internal_speeding();
}
inline void FrameAnnotationAttributes::set_speeding(bool value) {
  _internal_set_speeding(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.FrameAnnotationAttributes.speeding)
}
inline bool FrameAnnotationAttributes::_internal_speeding() const {
  return _impl_.speeding_;
}
inline void FrameAnnotationAttributes::_internal_set_speeding(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.speeding_ = value;
}

// optional bool siren = 8 [json_name = "siren", (.gen_bq_schema.bigquery) = {
inline bool FrameAnnotationAttributes::has_siren() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void FrameAnnotationAttributes::clear_siren() {
  _impl_.siren_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool FrameAnnotationAttributes::siren() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.FrameAnnotationAttributes.siren)
  return _internal_siren();
}
inline void FrameAnnotationAttributes::set_siren(bool value) {
  _internal_set_siren(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.FrameAnnotationAttributes.siren)
}
inline bool FrameAnnotationAttributes::_internal_siren() const {
  return _impl_.siren_;
}
inline void FrameAnnotationAttributes::_internal_set_siren(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.siren_ = value;
}

// -------------------------------------------------------------------

// Label

// optional int64 label_id = 1 [json_name = "labelId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "label", (.cavnue.messages.common.v1.derivation) = "annotation_type", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
inline bool Label::has_label_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Label::clear_label_id() {
  _impl_.label_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Label::label_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.Label.label_id)
  return _internal_label_id();
}
inline void Label::set_label_id(::int64_t value) {
  _internal_set_label_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.Label.label_id)
}
inline ::int64_t Label::_internal_label_id() const {
  return _impl_.label_id_;
}
inline void Label::_internal_set_label_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.label_id_ = value;
}

// optional string annotation_type = 2 [json_name = "annotationType", (.gen_bq_schema.bigquery) = {
inline bool Label::has_annotation_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Label::clear_annotation_type() {
  _impl_.annotation_type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Label::annotation_type() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.Label.annotation_type)
  return _internal_annotation_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Label::set_annotation_type(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.annotation_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.Label.annotation_type)
}
inline std::string* Label::mutable_annotation_type() {
  std::string* _s = _internal_mutable_annotation_type();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.Label.annotation_type)
  return _s;
}
inline const std::string& Label::_internal_annotation_type() const {
  return _impl_.annotation_type_.Get();
}
inline void Label::_internal_set_annotation_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.annotation_type_.Set(value, GetArenaForAllocation());
}
inline std::string* Label::_internal_mutable_annotation_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.annotation_type_.Mutable( GetArenaForAllocation());
}
inline std::string* Label::release_annotation_type() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v2.Label.annotation_type)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.annotation_type_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.annotation_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Label::set_allocated_annotation_type(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.annotation_type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.annotation_type_.IsDefault()) {
          _impl_.annotation_type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v2.Label.annotation_type)
}

// optional .cavnue.messages.common.v1.Classification label = 3 [json_name = "label", (.gen_bq_schema.bigquery) = {
inline bool Label::has_label() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Label::clear_label() {
  _impl_.label_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::cavnue::messages::common::v1::Classification Label::label() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.Label.label)
  return _internal_label();
}
inline void Label::set_label(::cavnue::messages::common::v1::Classification value) {
   _internal_set_label(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.Label.label)
}
inline ::cavnue::messages::common::v1::Classification Label::_internal_label() const {
  return static_cast<::cavnue::messages::common::v1::Classification>(_impl_.label_);
}
inline void Label::_internal_set_label(::cavnue::messages::common::v1::Classification value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.label_ = value;
}

// repeated string hierarchy = 4 [json_name = "hierarchy"];
inline int Label::_internal_hierarchy_size() const {
  return _impl_.hierarchy_.size();
}
inline int Label::hierarchy_size() const {
  return _internal_hierarchy_size();
}
inline void Label::clear_hierarchy() {
  _internal_mutable_hierarchy()->Clear();
}
inline std::string* Label::add_hierarchy() {
  std::string* _s = _internal_add_hierarchy();
  // @@protoc_insertion_point(field_add_mutable:cavnue.messages.data_warehouse.management.v2.Label.hierarchy)
  return _s;
}
inline const std::string& Label::hierarchy(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.Label.hierarchy)
  return _internal_hierarchy(index);
}
inline std::string* Label::mutable_hierarchy(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.Label.hierarchy)
  return _internal_mutable_hierarchy()->Mutable(index);
}
inline void Label::set_hierarchy(int index, const std::string& value) {
  _internal_mutable_hierarchy()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.Label.hierarchy)
}
inline void Label::set_hierarchy(int index, std::string&& value) {
  _internal_mutable_hierarchy()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.Label.hierarchy)
}
inline void Label::set_hierarchy(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_hierarchy()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cavnue.messages.data_warehouse.management.v2.Label.hierarchy)
}
inline void Label::set_hierarchy(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_hierarchy()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cavnue.messages.data_warehouse.management.v2.Label.hierarchy)
}
inline void Label::set_hierarchy(int index, absl::string_view value) {
  _internal_mutable_hierarchy()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:cavnue.messages.data_warehouse.management.v2.Label.hierarchy)
}
inline void Label::add_hierarchy(const std::string& value) {
  _internal_mutable_hierarchy()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:cavnue.messages.data_warehouse.management.v2.Label.hierarchy)
}
inline void Label::add_hierarchy(std::string&& value) {
  _internal_mutable_hierarchy()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:cavnue.messages.data_warehouse.management.v2.Label.hierarchy)
}
inline void Label::add_hierarchy(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_hierarchy()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cavnue.messages.data_warehouse.management.v2.Label.hierarchy)
}
inline void Label::add_hierarchy(const char* value, std::size_t size) {
  _internal_mutable_hierarchy()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cavnue.messages.data_warehouse.management.v2.Label.hierarchy)
}
inline void Label::add_hierarchy(absl::string_view value) {
  _internal_mutable_hierarchy()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:cavnue.messages.data_warehouse.management.v2.Label.hierarchy)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Label::hierarchy() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.data_warehouse.management.v2.Label.hierarchy)
  return _internal_hierarchy();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* Label::mutable_hierarchy() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.data_warehouse.management.v2.Label.hierarchy)
  return _internal_mutable_hierarchy();
}
inline const std::string& Label::_internal_hierarchy(int index) const {
  return _internal_hierarchy().Get(index);
}
inline std::string* Label::_internal_add_hierarchy() {
  return _internal_mutable_hierarchy()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Label::_internal_hierarchy() const {
  return _impl_.hierarchy_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Label::_internal_mutable_hierarchy() {
  return &_impl_.hierarchy_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace management
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/data_warehouse/management/v2/datasources.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasources_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasources_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cavnue/third_party/bq/v1/bq_field.pb.h"
#include "cavnue/third_party/bq/v1/bq_table.pb.h"
#include "cavnue/messages/common/v1/common.pb.h"
#include "cavnue/messages/geometry/v1/matrix.pb.h"
#include "cavnue/messages/geometry/v1/vector.pb.h"
#include "cavnue/messages/common/v1/field_options.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasources_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasources_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasources_2eproto;
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace management {
namespace v2 {
class CameraMetadata;
struct CameraMetadataDefaultTypeInternal;
extern CameraMetadataDefaultTypeInternal _CameraMetadata_default_instance_;
class CameraMetadata_DistortionCoefficients;
struct CameraMetadata_DistortionCoefficientsDefaultTypeInternal;
extern CameraMetadata_DistortionCoefficientsDefaultTypeInternal _CameraMetadata_DistortionCoefficients_default_instance_;
class Location;
struct LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class Sensor;
struct SensorDefaultTypeInternal;
extern SensorDefaultTypeInternal _Sensor_default_instance_;
class VehicleCalibration;
struct VehicleCalibrationDefaultTypeInternal;
extern VehicleCalibrationDefaultTypeInternal _VehicleCalibration_default_instance_;
}  // namespace v2
}  // namespace management
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template <>
::cavnue::messages::data_warehouse::management::v2::CameraMetadata* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::management::v2::CameraMetadata>(Arena*);
template <>
::cavnue::messages::data_warehouse::management::v2::CameraMetadata_DistortionCoefficients* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::management::v2::CameraMetadata_DistortionCoefficients>(Arena*);
template <>
::cavnue::messages::data_warehouse::management::v2::Location* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::management::v2::Location>(Arena*);
template <>
::cavnue::messages::data_warehouse::management::v2::Sensor* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::management::v2::Sensor>(Arena*);
template <>
::cavnue::messages::data_warehouse::management::v2::VehicleCalibration* Arena::CreateMaybeMessage<::cavnue::messages::data_warehouse::management::v2::VehicleCalibration>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace management {
namespace v2 {

// ===================================================================


// -------------------------------------------------------------------

class Location final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.data_warehouse.management.v2.Location) */ {
 public:
  inline Location() : Location(nullptr) {}
  ~Location() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Location(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Location(const Location& from);
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location& operator=(Location&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Location& default_instance() {
    return *internal_default_instance();
  }
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Location* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Location* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Location& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Location& from) {
    Location::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.data_warehouse.management.v2.Location";
  }
  protected:
  explicit Location(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordinateFieldNumber = 4,
    kIdentifierFieldNumber = 7,
    kDeployTsFieldNumber = 6,
    kLocationIdFieldNumber = 1,
    kDeploymentIdFieldNumber = 2,
    kCohortIdFieldNumber = 3,
    kH3FieldNumber = 5,
  };
  // optional string coordinate = 4 [json_name = "coordinate", (.cavnue.messages.common.v1.crs) = CRS_WGS84, (.gen_bq_schema.bigquery) = {
  bool has_coordinate() const;
  void clear_coordinate() ;
  const std::string& coordinate() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_coordinate(Arg_&& arg, Args_... args);
  std::string* mutable_coordinate();
  PROTOBUF_NODISCARD std::string* release_coordinate();
  void set_allocated_coordinate(std::string* ptr);

  private:
  const std::string& _internal_coordinate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_coordinate(
      const std::string& value);
  std::string* _internal_mutable_coordinate();

  public:
  // optional string identifier = 7 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
  bool has_identifier() const;
  void clear_identifier() ;
  const std::string& identifier() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_identifier(Arg_&& arg, Args_... args);
  std::string* mutable_identifier();
  PROTOBUF_NODISCARD std::string* release_identifier();
  void set_allocated_identifier(std::string* ptr);

  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(
      const std::string& value);
  std::string* _internal_mutable_identifier();

  public:
  // optional .google.protobuf.Timestamp deploy_ts = 6 [json_name = "deployTs", (.gen_bq_schema.bigquery) = {
  bool has_deploy_ts() const;
  void clear_deploy_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& deploy_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_deploy_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_deploy_ts();
  void set_allocated_deploy_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* deploy_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_deploy_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_deploy_ts();
  public:
  void unsafe_arena_set_allocated_deploy_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* deploy_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_deploy_ts();
  // optional int64 location_id = 1 [json_name = "locationId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.derivation) = "deploy_ts", (.cavnue.messages.common.v1.derivation) = "deployment_id", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  bool has_location_id() const;
  void clear_location_id() ;
  ::int64_t location_id() const;
  void set_location_id(::int64_t value);

  private:
  ::int64_t _internal_location_id() const;
  void _internal_set_location_id(::int64_t value);

  public:
  // optional int64 deployment_id = 2 [json_name = "deploymentId", (.gen_bq_schema.bigquery) = {
  bool has_deployment_id() const;
  void clear_deployment_id() ;
  ::int64_t deployment_id() const;
  void set_deployment_id(::int64_t value);

  private:
  ::int64_t _internal_deployment_id() const;
  void _internal_set_deployment_id(::int64_t value);

  public:
  // optional int64 cohort_id = 3 [json_name = "cohortId", (.gen_bq_schema.bigquery) = {
  bool has_cohort_id() const;
  void clear_cohort_id() ;
  ::int64_t cohort_id() const;
  void set_cohort_id(::int64_t value);

  private:
  ::int64_t _internal_cohort_id() const;
  void _internal_set_cohort_id(::int64_t value);

  public:
  // optional int64 h3 = 5 [json_name = "h3", (.gen_bq_schema.bigquery) = {
  bool has_h3() const;
  void clear_h3() ;
  ::int64_t h3() const;
  void set_h3(::int64_t value);

  private:
  ::int64_t _internal_h3() const;
  void _internal_set_h3(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.data_warehouse.management.v2.Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coordinate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* deploy_ts_;
    ::int64_t location_id_;
    ::int64_t deployment_id_;
    ::int64_t cohort_id_;
    ::int64_t h3_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasources_2eproto;
};// -------------------------------------------------------------------

class Sensor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.data_warehouse.management.v2.Sensor) */ {
 public:
  inline Sensor() : Sensor(nullptr) {}
  ~Sensor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Sensor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sensor(const Sensor& from);
  Sensor(Sensor&& from) noexcept
    : Sensor() {
    *this = ::std::move(from);
  }

  inline Sensor& operator=(const Sensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sensor& operator=(Sensor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sensor& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sensor* internal_default_instance() {
    return reinterpret_cast<const Sensor*>(
               &_Sensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Sensor& a, Sensor& b) {
    a.Swap(&b);
  }
  inline void Swap(Sensor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sensor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Sensor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sensor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Sensor& from) {
    Sensor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sensor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.data_warehouse.management.v2.Sensor";
  }
  protected:
  explicit Sensor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 3,
    kSerialNumberFieldNumber = 7,
    kMakeFieldNumber = 8,
    kDeployTsFieldNumber = 5,
    kSensorIdFieldNumber = 1,
    kLocationIdFieldNumber = 2,
    kTypeFieldNumber = 4,
    kActiveFieldNumber = 6,
  };
  // optional string identifier = 3 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
  bool has_identifier() const;
  void clear_identifier() ;
  const std::string& identifier() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_identifier(Arg_&& arg, Args_... args);
  std::string* mutable_identifier();
  PROTOBUF_NODISCARD std::string* release_identifier();
  void set_allocated_identifier(std::string* ptr);

  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(
      const std::string& value);
  std::string* _internal_mutable_identifier();

  public:
  // string serial_number = 7 [json_name = "serialNumber"];
  void clear_serial_number() ;
  const std::string& serial_number() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_serial_number(Arg_&& arg, Args_... args);
  std::string* mutable_serial_number();
  PROTOBUF_NODISCARD std::string* release_serial_number();
  void set_allocated_serial_number(std::string* ptr);

  private:
  const std::string& _internal_serial_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serial_number(
      const std::string& value);
  std::string* _internal_mutable_serial_number();

  public:
  // string make = 8 [json_name = "make"];
  void clear_make() ;
  const std::string& make() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_make(Arg_&& arg, Args_... args);
  std::string* mutable_make();
  PROTOBUF_NODISCARD std::string* release_make();
  void set_allocated_make(std::string* ptr);

  private:
  const std::string& _internal_make() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_make(
      const std::string& value);
  std::string* _internal_mutable_make();

  public:
  // optional .google.protobuf.Timestamp deploy_ts = 5 [json_name = "deployTs", (.gen_bq_schema.bigquery) = {
  bool has_deploy_ts() const;
  void clear_deploy_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& deploy_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_deploy_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_deploy_ts();
  void set_allocated_deploy_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* deploy_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_deploy_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_deploy_ts();
  public:
  void unsafe_arena_set_allocated_deploy_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* deploy_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_deploy_ts();
  // optional int64 sensor_id = 1 [json_name = "sensorId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "location_id", (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.derivation) = "deploy_ts", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  bool has_sensor_id() const;
  void clear_sensor_id() ;
  ::int64_t sensor_id() const;
  void set_sensor_id(::int64_t value);

  private:
  ::int64_t _internal_sensor_id() const;
  void _internal_set_sensor_id(::int64_t value);

  public:
  // optional int64 location_id = 2 [json_name = "locationId", (.gen_bq_schema.bigquery) = {
  bool has_location_id() const;
  void clear_location_id() ;
  ::int64_t location_id() const;
  void set_location_id(::int64_t value);

  private:
  ::int64_t _internal_location_id() const;
  void _internal_set_location_id(::int64_t value);

  public:
  // optional .cavnue.messages.common.v1.Sensor.Type type = 4 [json_name = "type", (.gen_bq_schema.bigquery) = {
  bool has_type() const;
  void clear_type() ;
  ::cavnue::messages::common::v1::Sensor_Type type() const;
  void set_type(::cavnue::messages::common::v1::Sensor_Type value);

  private:
  ::cavnue::messages::common::v1::Sensor_Type _internal_type() const;
  void _internal_set_type(::cavnue::messages::common::v1::Sensor_Type value);

  public:
  // optional bool active = 6 [json_name = "active", (.gen_bq_schema.bigquery) = {
  bool has_active() const;
  void clear_active() ;
  bool active() const;
  void set_active(bool value);

  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.data_warehouse.management.v2.Sensor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_number_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr make_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* deploy_ts_;
    ::int64_t sensor_id_;
    ::int64_t location_id_;
    int type_;
    bool active_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasources_2eproto;
};// -------------------------------------------------------------------

class CameraMetadata_DistortionCoefficients final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.data_warehouse.management.v2.CameraMetadata.DistortionCoefficients) */ {
 public:
  inline CameraMetadata_DistortionCoefficients() : CameraMetadata_DistortionCoefficients(nullptr) {}
  ~CameraMetadata_DistortionCoefficients() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CameraMetadata_DistortionCoefficients(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraMetadata_DistortionCoefficients(const CameraMetadata_DistortionCoefficients& from);
  CameraMetadata_DistortionCoefficients(CameraMetadata_DistortionCoefficients&& from) noexcept
    : CameraMetadata_DistortionCoefficients() {
    *this = ::std::move(from);
  }

  inline CameraMetadata_DistortionCoefficients& operator=(const CameraMetadata_DistortionCoefficients& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraMetadata_DistortionCoefficients& operator=(CameraMetadata_DistortionCoefficients&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraMetadata_DistortionCoefficients& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraMetadata_DistortionCoefficients* internal_default_instance() {
    return reinterpret_cast<const CameraMetadata_DistortionCoefficients*>(
               &_CameraMetadata_DistortionCoefficients_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CameraMetadata_DistortionCoefficients& a, CameraMetadata_DistortionCoefficients& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraMetadata_DistortionCoefficients* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraMetadata_DistortionCoefficients* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraMetadata_DistortionCoefficients* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraMetadata_DistortionCoefficients>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraMetadata_DistortionCoefficients& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CameraMetadata_DistortionCoefficients& from) {
    CameraMetadata_DistortionCoefficients::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraMetadata_DistortionCoefficients* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.data_warehouse.management.v2.CameraMetadata.DistortionCoefficients";
  }
  protected:
  explicit CameraMetadata_DistortionCoefficients(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kP1FieldNumber = 1,
    kP2FieldNumber = 2,
    kS1FieldNumber = 3,
    kS2FieldNumber = 4,
    kS3FieldNumber = 5,
    kS4FieldNumber = 6,
    kK1FieldNumber = 7,
    kK2FieldNumber = 8,
    kK3FieldNumber = 9,
    kK4FieldNumber = 10,
    kK5FieldNumber = 11,
    kK6FieldNumber = 12,
  };
  // float p1 = 1 [json_name = "p1"];
  void clear_p1() ;
  float p1() const;
  void set_p1(float value);

  private:
  float _internal_p1() const;
  void _internal_set_p1(float value);

  public:
  // float p2 = 2 [json_name = "p2"];
  void clear_p2() ;
  float p2() const;
  void set_p2(float value);

  private:
  float _internal_p2() const;
  void _internal_set_p2(float value);

  public:
  // float s1 = 3 [json_name = "s1"];
  void clear_s1() ;
  float s1() const;
  void set_s1(float value);

  private:
  float _internal_s1() const;
  void _internal_set_s1(float value);

  public:
  // float s2 = 4 [json_name = "s2"];
  void clear_s2() ;
  float s2() const;
  void set_s2(float value);

  private:
  float _internal_s2() const;
  void _internal_set_s2(float value);

  public:
  // float s3 = 5 [json_name = "s3"];
  void clear_s3() ;
  float s3() const;
  void set_s3(float value);

  private:
  float _internal_s3() const;
  void _internal_set_s3(float value);

  public:
  // float s4 = 6 [json_name = "s4"];
  void clear_s4() ;
  float s4() const;
  void set_s4(float value);

  private:
  float _internal_s4() const;
  void _internal_set_s4(float value);

  public:
  // float k1 = 7 [json_name = "k1"];
  void clear_k1() ;
  float k1() const;
  void set_k1(float value);

  private:
  float _internal_k1() const;
  void _internal_set_k1(float value);

  public:
  // float k2 = 8 [json_name = "k2"];
  void clear_k2() ;
  float k2() const;
  void set_k2(float value);

  private:
  float _internal_k2() const;
  void _internal_set_k2(float value);

  public:
  // float k3 = 9 [json_name = "k3"];
  void clear_k3() ;
  float k3() const;
  void set_k3(float value);

  private:
  float _internal_k3() const;
  void _internal_set_k3(float value);

  public:
  // float k4 = 10 [json_name = "k4"];
  void clear_k4() ;
  float k4() const;
  void set_k4(float value);

  private:
  float _internal_k4() const;
  void _internal_set_k4(float value);

  public:
  // float k5 = 11 [json_name = "k5"];
  void clear_k5() ;
  float k5() const;
  void set_k5(float value);

  private:
  float _internal_k5() const;
  void _internal_set_k5(float value);

  public:
  // float k6 = 12 [json_name = "k6"];
  void clear_k6() ;
  float k6() const;
  void set_k6(float value);

  private:
  float _internal_k6() const;
  void _internal_set_k6(float value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.data_warehouse.management.v2.CameraMetadata.DistortionCoefficients)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float p1_;
    float p2_;
    float s1_;
    float s2_;
    float s3_;
    float s4_;
    float k1_;
    float k2_;
    float k3_;
    float k4_;
    float k5_;
    float k6_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasources_2eproto;
};// -------------------------------------------------------------------

class CameraMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.data_warehouse.management.v2.CameraMetadata) */ {
 public:
  inline CameraMetadata() : CameraMetadata(nullptr) {}
  ~CameraMetadata() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CameraMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraMetadata(const CameraMetadata& from);
  CameraMetadata(CameraMetadata&& from) noexcept
    : CameraMetadata() {
    *this = ::std::move(from);
  }

  inline CameraMetadata& operator=(const CameraMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraMetadata& operator=(CameraMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraMetadata* internal_default_instance() {
    return reinterpret_cast<const CameraMetadata*>(
               &_CameraMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CameraMetadata& a, CameraMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CameraMetadata& from) {
    CameraMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.data_warehouse.management.v2.CameraMetadata";
  }
  protected:
  explicit CameraMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CameraMetadata_DistortionCoefficients DistortionCoefficients;

  // accessors -------------------------------------------------------

  enum : int {
    kProjectionMatrixFieldNumber = 2,
    kIntrinsicMatrixFieldNumber = 3,
    kTranslationFieldNumber = 4,
    kRotationFieldNumber = 5,
    kSceneCenterFieldNumber = 7,
    kDistortionCoefficientsFieldNumber = 8,
    kSensorIdFieldNumber = 1,
    kWidthFieldNumber = 9,
    kHeightFieldNumber = 10,
  };
  // optional .cavnue.messages.geometry.v1.Matrix34d projection_matrix = 2 [json_name = "projectionMatrix", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_UTM, (.gen_bq_schema.bigquery) = {
  bool has_projection_matrix() const;
  void clear_projection_matrix() ;
  const ::cavnue::messages::geometry::v1::Matrix34d& projection_matrix() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::Matrix34d* release_projection_matrix();
  ::cavnue::messages::geometry::v1::Matrix34d* mutable_projection_matrix();
  void set_allocated_projection_matrix(::cavnue::messages::geometry::v1::Matrix34d* projection_matrix);
  private:
  const ::cavnue::messages::geometry::v1::Matrix34d& _internal_projection_matrix() const;
  ::cavnue::messages::geometry::v1::Matrix34d* _internal_mutable_projection_matrix();
  public:
  void unsafe_arena_set_allocated_projection_matrix(
      ::cavnue::messages::geometry::v1::Matrix34d* projection_matrix);
  ::cavnue::messages::geometry::v1::Matrix34d* unsafe_arena_release_projection_matrix();
  // .cavnue.messages.geometry.v1.Matrix33f intrinsic_matrix = 3 [json_name = "intrinsicMatrix", (.cavnue.messages.common.v1.units) = UNITS_PIXELS];
  bool has_intrinsic_matrix() const;
  void clear_intrinsic_matrix() ;
  const ::cavnue::messages::geometry::v1::Matrix33f& intrinsic_matrix() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::Matrix33f* release_intrinsic_matrix();
  ::cavnue::messages::geometry::v1::Matrix33f* mutable_intrinsic_matrix();
  void set_allocated_intrinsic_matrix(::cavnue::messages::geometry::v1::Matrix33f* intrinsic_matrix);
  private:
  const ::cavnue::messages::geometry::v1::Matrix33f& _internal_intrinsic_matrix() const;
  ::cavnue::messages::geometry::v1::Matrix33f* _internal_mutable_intrinsic_matrix();
  public:
  void unsafe_arena_set_allocated_intrinsic_matrix(
      ::cavnue::messages::geometry::v1::Matrix33f* intrinsic_matrix);
  ::cavnue::messages::geometry::v1::Matrix33f* unsafe_arena_release_intrinsic_matrix();
  // optional .cavnue.messages.geometry.v1.Vector3d translation = 4 [json_name = "translation", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_UTM, (.gen_bq_schema.bigquery) = {
  bool has_translation() const;
  void clear_translation() ;
  const ::cavnue::messages::geometry::v1::Vector3d& translation() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::Vector3d* release_translation();
  ::cavnue::messages::geometry::v1::Vector3d* mutable_translation();
  void set_allocated_translation(::cavnue::messages::geometry::v1::Vector3d* translation);
  private:
  const ::cavnue::messages::geometry::v1::Vector3d& _internal_translation() const;
  ::cavnue::messages::geometry::v1::Vector3d* _internal_mutable_translation();
  public:
  void unsafe_arena_set_allocated_translation(
      ::cavnue::messages::geometry::v1::Vector3d* translation);
  ::cavnue::messages::geometry::v1::Vector3d* unsafe_arena_release_translation();
  // optional .cavnue.messages.geometry.v1.Matrix33f rotation = 5 [json_name = "rotation", (.gen_bq_schema.bigquery) = {
  bool has_rotation() const;
  void clear_rotation() ;
  const ::cavnue::messages::geometry::v1::Matrix33f& rotation() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::Matrix33f* release_rotation();
  ::cavnue::messages::geometry::v1::Matrix33f* mutable_rotation();
  void set_allocated_rotation(::cavnue::messages::geometry::v1::Matrix33f* rotation);
  private:
  const ::cavnue::messages::geometry::v1::Matrix33f& _internal_rotation() const;
  ::cavnue::messages::geometry::v1::Matrix33f* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::cavnue::messages::geometry::v1::Matrix33f* rotation);
  ::cavnue::messages::geometry::v1::Matrix33f* unsafe_arena_release_rotation();
  // optional .cavnue.messages.geometry.v1.Vector3d scene_center = 7 [json_name = "sceneCenter", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_UTM, (.gen_bq_schema.bigquery) = {
  bool has_scene_center() const;
  void clear_scene_center() ;
  const ::cavnue::messages::geometry::v1::Vector3d& scene_center() const;
  PROTOBUF_NODISCARD ::cavnue::messages::geometry::v1::Vector3d* release_scene_center();
  ::cavnue::messages::geometry::v1::Vector3d* mutable_scene_center();
  void set_allocated_scene_center(::cavnue::messages::geometry::v1::Vector3d* scene_center);
  private:
  const ::cavnue::messages::geometry::v1::Vector3d& _internal_scene_center() const;
  ::cavnue::messages::geometry::v1::Vector3d* _internal_mutable_scene_center();
  public:
  void unsafe_arena_set_allocated_scene_center(
      ::cavnue::messages::geometry::v1::Vector3d* scene_center);
  ::cavnue::messages::geometry::v1::Vector3d* unsafe_arena_release_scene_center();
  // .cavnue.messages.data_warehouse.management.v2.CameraMetadata.DistortionCoefficients distortion_coefficients = 8 [json_name = "distortionCoefficients"];
  bool has_distortion_coefficients() const;
  void clear_distortion_coefficients() ;
  const ::cavnue::messages::data_warehouse::management::v2::CameraMetadata_DistortionCoefficients& distortion_coefficients() const;
  PROTOBUF_NODISCARD ::cavnue::messages::data_warehouse::management::v2::CameraMetadata_DistortionCoefficients* release_distortion_coefficients();
  ::cavnue::messages::data_warehouse::management::v2::CameraMetadata_DistortionCoefficients* mutable_distortion_coefficients();
  void set_allocated_distortion_coefficients(::cavnue::messages::data_warehouse::management::v2::CameraMetadata_DistortionCoefficients* distortion_coefficients);
  private:
  const ::cavnue::messages::data_warehouse::management::v2::CameraMetadata_DistortionCoefficients& _internal_distortion_coefficients() const;
  ::cavnue::messages::data_warehouse::management::v2::CameraMetadata_DistortionCoefficients* _internal_mutable_distortion_coefficients();
  public:
  void unsafe_arena_set_allocated_distortion_coefficients(
      ::cavnue::messages::data_warehouse::management::v2::CameraMetadata_DistortionCoefficients* distortion_coefficients);
  ::cavnue::messages::data_warehouse::management::v2::CameraMetadata_DistortionCoefficients* unsafe_arena_release_distortion_coefficients();
  // optional int64 sensor_id = 1 [json_name = "sensorId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  bool has_sensor_id() const;
  void clear_sensor_id() ;
  ::int64_t sensor_id() const;
  void set_sensor_id(::int64_t value);

  private:
  ::int64_t _internal_sensor_id() const;
  void _internal_set_sensor_id(::int64_t value);

  public:
  // optional uint32 width = 9 [json_name = "width", (.cavnue.messages.common.v1.units) = UNITS_PIXELS, (.gen_bq_schema.bigquery) = {
  bool has_width() const;
  void clear_width() ;
  ::uint32_t width() const;
  void set_width(::uint32_t value);

  private:
  ::uint32_t _internal_width() const;
  void _internal_set_width(::uint32_t value);

  public:
  // optional uint32 height = 10 [json_name = "height", (.cavnue.messages.common.v1.units) = UNITS_PIXELS, (.gen_bq_schema.bigquery) = {
  bool has_height() const;
  void clear_height() ;
  ::uint32_t height() const;
  void set_height(::uint32_t value);

  private:
  ::uint32_t _internal_height() const;
  void _internal_set_height(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.data_warehouse.management.v2.CameraMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::geometry::v1::Matrix34d* projection_matrix_;
    ::cavnue::messages::geometry::v1::Matrix33f* intrinsic_matrix_;
    ::cavnue::messages::geometry::v1::Vector3d* translation_;
    ::cavnue::messages::geometry::v1::Matrix33f* rotation_;
    ::cavnue::messages::geometry::v1::Vector3d* scene_center_;
    ::cavnue::messages::data_warehouse::management::v2::CameraMetadata_DistortionCoefficients* distortion_coefficients_;
    ::int64_t sensor_id_;
    ::uint32_t width_;
    ::uint32_t height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasources_2eproto;
};// -------------------------------------------------------------------

class VehicleCalibration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.data_warehouse.management.v2.VehicleCalibration) */ {
 public:
  inline VehicleCalibration() : VehicleCalibration(nullptr) {}
  ~VehicleCalibration() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VehicleCalibration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VehicleCalibration(const VehicleCalibration& from);
  VehicleCalibration(VehicleCalibration&& from) noexcept
    : VehicleCalibration() {
    *this = ::std::move(from);
  }

  inline VehicleCalibration& operator=(const VehicleCalibration& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleCalibration& operator=(VehicleCalibration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleCalibration& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleCalibration* internal_default_instance() {
    return reinterpret_cast<const VehicleCalibration*>(
               &_VehicleCalibration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VehicleCalibration& a, VehicleCalibration& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleCalibration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleCalibration* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleCalibration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VehicleCalibration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VehicleCalibration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VehicleCalibration& from) {
    VehicleCalibration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleCalibration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.data_warehouse.management.v2.VehicleCalibration";
  }
  protected:
  explicit VehicleCalibration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLengthUncertaintyFieldNumber = 2,
    kWidthUncertaintyFieldNumber = 3,
    kLengthCorrectionFieldNumber = 4,
    kWidthCorrectionFieldNumber = 5,
    kSensorIdFieldNumber = 1,
  };
  // repeated float length_uncertainty = 2 [json_name = "lengthUncertainty"];
  int length_uncertainty_size() const;
  private:
  int _internal_length_uncertainty_size() const;

  public:
  void clear_length_uncertainty() ;
  float length_uncertainty(int index) const;
  void set_length_uncertainty(int index, float value);
  void add_length_uncertainty(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& length_uncertainty() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* mutable_length_uncertainty();

  private:
  float _internal_length_uncertainty(int index) const;
  void _internal_add_length_uncertainty(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& _internal_length_uncertainty() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* _internal_mutable_length_uncertainty();

  public:
  // repeated float width_uncertainty = 3 [json_name = "widthUncertainty"];
  int width_uncertainty_size() const;
  private:
  int _internal_width_uncertainty_size() const;

  public:
  void clear_width_uncertainty() ;
  float width_uncertainty(int index) const;
  void set_width_uncertainty(int index, float value);
  void add_width_uncertainty(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& width_uncertainty() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* mutable_width_uncertainty();

  private:
  float _internal_width_uncertainty(int index) const;
  void _internal_add_width_uncertainty(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& _internal_width_uncertainty() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* _internal_mutable_width_uncertainty();

  public:
  // repeated float length_correction = 4 [json_name = "lengthCorrection"];
  int length_correction_size() const;
  private:
  int _internal_length_correction_size() const;

  public:
  void clear_length_correction() ;
  float length_correction(int index) const;
  void set_length_correction(int index, float value);
  void add_length_correction(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& length_correction() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* mutable_length_correction();

  private:
  float _internal_length_correction(int index) const;
  void _internal_add_length_correction(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& _internal_length_correction() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* _internal_mutable_length_correction();

  public:
  // repeated float width_correction = 5 [json_name = "widthCorrection"];
  int width_correction_size() const;
  private:
  int _internal_width_correction_size() const;

  public:
  void clear_width_correction() ;
  float width_correction(int index) const;
  void set_width_correction(int index, float value);
  void add_width_correction(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& width_correction() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* mutable_width_correction();

  private:
  float _internal_width_correction(int index) const;
  void _internal_add_width_correction(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& _internal_width_correction() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* _internal_mutable_width_correction();

  public:
  // int64 sensor_id = 1 [json_name = "sensorId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  void clear_sensor_id() ;
  ::int64_t sensor_id() const;
  void set_sensor_id(::int64_t value);

  private:
  ::int64_t _internal_sensor_id() const;
  void _internal_set_sensor_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.data_warehouse.management.v2.VehicleCalibration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<float> length_uncertainty_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<float> width_uncertainty_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<float> length_correction_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<float> width_correction_;
    ::int64_t sensor_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasources_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Location

// optional int64 location_id = 1 [json_name = "locationId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.derivation) = "deploy_ts", (.cavnue.messages.common.v1.derivation) = "deployment_id", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
inline bool Location::has_location_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Location::clear_location_id() {
  _impl_.location_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t Location::location_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.Location.location_id)
  return _internal_location_id();
}
inline void Location::set_location_id(::int64_t value) {
  _internal_set_location_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.Location.location_id)
}
inline ::int64_t Location::_internal_location_id() const {
  return _impl_.location_id_;
}
inline void Location::_internal_set_location_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.location_id_ = value;
}

// optional int64 deployment_id = 2 [json_name = "deploymentId", (.gen_bq_schema.bigquery) = {
inline bool Location::has_deployment_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Location::clear_deployment_id() {
  _impl_.deployment_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t Location::deployment_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.Location.deployment_id)
  return _internal_deployment_id();
}
inline void Location::set_deployment_id(::int64_t value) {
  _internal_set_deployment_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.Location.deployment_id)
}
inline ::int64_t Location::_internal_deployment_id() const {
  return _impl_.deployment_id_;
}
inline void Location::_internal_set_deployment_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.deployment_id_ = value;
}

// optional int64 cohort_id = 3 [json_name = "cohortId", (.gen_bq_schema.bigquery) = {
inline bool Location::has_cohort_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Location::clear_cohort_id() {
  _impl_.cohort_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t Location::cohort_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.Location.cohort_id)
  return _internal_cohort_id();
}
inline void Location::set_cohort_id(::int64_t value) {
  _internal_set_cohort_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.Location.cohort_id)
}
inline ::int64_t Location::_internal_cohort_id() const {
  return _impl_.cohort_id_;
}
inline void Location::_internal_set_cohort_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.cohort_id_ = value;
}

// optional string coordinate = 4 [json_name = "coordinate", (.cavnue.messages.common.v1.crs) = CRS_WGS84, (.gen_bq_schema.bigquery) = {
inline bool Location::has_coordinate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Location::clear_coordinate() {
  _impl_.coordinate_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Location::coordinate() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.Location.coordinate)
  return _internal_coordinate();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Location::set_coordinate(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.coordinate_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.Location.coordinate)
}
inline std::string* Location::mutable_coordinate() {
  std::string* _s = _internal_mutable_coordinate();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.Location.coordinate)
  return _s;
}
inline const std::string& Location::_internal_coordinate() const {
  return _impl_.coordinate_.Get();
}
inline void Location::_internal_set_coordinate(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.coordinate_.Set(value, GetArenaForAllocation());
}
inline std::string* Location::_internal_mutable_coordinate() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.coordinate_.Mutable( GetArenaForAllocation());
}
inline std::string* Location::release_coordinate() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v2.Location.coordinate)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.coordinate_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.coordinate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Location::set_allocated_coordinate(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.coordinate_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.coordinate_.IsDefault()) {
          _impl_.coordinate_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v2.Location.coordinate)
}

// optional int64 h3 = 5 [json_name = "h3", (.gen_bq_schema.bigquery) = {
inline bool Location::has_h3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Location::clear_h3() {
  _impl_.h3_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t Location::h3() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.Location.h3)
  return _internal_h3();
}
inline void Location::set_h3(::int64_t value) {
  _internal_set_h3(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.Location.h3)
}
inline ::int64_t Location::_internal_h3() const {
  return _impl_.h3_;
}
inline void Location::_internal_set_h3(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.h3_ = value;
}

// optional .google.protobuf.Timestamp deploy_ts = 6 [json_name = "deployTs", (.gen_bq_schema.bigquery) = {
inline bool Location::has_deploy_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.deploy_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Location::_internal_deploy_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.deploy_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Location::deploy_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.Location.deploy_ts)
  return _internal_deploy_ts();
}
inline void Location::unsafe_arena_set_allocated_deploy_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* deploy_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deploy_ts_);
  }
  _impl_.deploy_ts_ = deploy_ts;
  if (deploy_ts) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.data_warehouse.management.v2.Location.deploy_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Location::release_deploy_ts() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.deploy_ts_;
  _impl_.deploy_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Location::unsafe_arena_release_deploy_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v2.Location.deploy_ts)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.deploy_ts_;
  _impl_.deploy_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Location::_internal_mutable_deploy_ts() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.deploy_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.deploy_ts_ = p;
  }
  return _impl_.deploy_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Location::mutable_deploy_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_deploy_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.Location.deploy_ts)
  return _msg;
}
inline void Location::set_allocated_deploy_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* deploy_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deploy_ts_);
  }
  if (deploy_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deploy_ts));
    if (message_arena != submessage_arena) {
      deploy_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deploy_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.deploy_ts_ = deploy_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v2.Location.deploy_ts)
}

// optional string identifier = 7 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
inline bool Location::has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Location::clear_identifier() {
  _impl_.identifier_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Location::identifier() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.Location.identifier)
  return _internal_identifier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Location::set_identifier(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.identifier_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.Location.identifier)
}
inline std::string* Location::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.Location.identifier)
  return _s;
}
inline const std::string& Location::_internal_identifier() const {
  return _impl_.identifier_.Get();
}
inline void Location::_internal_set_identifier(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* Location::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.identifier_.Mutable( GetArenaForAllocation());
}
inline std::string* Location::release_identifier() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v2.Location.identifier)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.identifier_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Location::set_allocated_identifier(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.identifier_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.identifier_.IsDefault()) {
          _impl_.identifier_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v2.Location.identifier)
}

// -------------------------------------------------------------------

// Sensor

// optional int64 sensor_id = 1 [json_name = "sensorId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "location_id", (.cavnue.messages.common.v1.derivation) = "identifier", (.cavnue.messages.common.v1.derivation) = "deploy_ts", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
inline bool Sensor::has_sensor_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Sensor::clear_sensor_id() {
  _impl_.sensor_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Sensor::sensor_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.Sensor.sensor_id)
  return _internal_sensor_id();
}
inline void Sensor::set_sensor_id(::int64_t value) {
  _internal_set_sensor_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.Sensor.sensor_id)
}
inline ::int64_t Sensor::_internal_sensor_id() const {
  return _impl_.sensor_id_;
}
inline void Sensor::_internal_set_sensor_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.sensor_id_ = value;
}

// optional int64 location_id = 2 [json_name = "locationId", (.gen_bq_schema.bigquery) = {
inline bool Sensor::has_location_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Sensor::clear_location_id() {
  _impl_.location_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t Sensor::location_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.Sensor.location_id)
  return _internal_location_id();
}
inline void Sensor::set_location_id(::int64_t value) {
  _internal_set_location_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.Sensor.location_id)
}
inline ::int64_t Sensor::_internal_location_id() const {
  return _impl_.location_id_;
}
inline void Sensor::_internal_set_location_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.location_id_ = value;
}

// optional string identifier = 3 [json_name = "identifier", (.gen_bq_schema.bigquery) = {
inline bool Sensor::has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Sensor::clear_identifier() {
  _impl_.identifier_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Sensor::identifier() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.Sensor.identifier)
  return _internal_identifier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Sensor::set_identifier(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.identifier_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.Sensor.identifier)
}
inline std::string* Sensor::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.Sensor.identifier)
  return _s;
}
inline const std::string& Sensor::_internal_identifier() const {
  return _impl_.identifier_.Get();
}
inline void Sensor::_internal_set_identifier(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* Sensor::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.identifier_.Mutable( GetArenaForAllocation());
}
inline std::string* Sensor::release_identifier() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v2.Sensor.identifier)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.identifier_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Sensor::set_allocated_identifier(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.identifier_.IsDefault()) {
          _impl_.identifier_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v2.Sensor.identifier)
}

// optional .cavnue.messages.common.v1.Sensor.Type type = 4 [json_name = "type", (.gen_bq_schema.bigquery) = {
inline bool Sensor::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Sensor::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::cavnue::messages::common::v1::Sensor_Type Sensor::type() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.Sensor.type)
  return _internal_type();
}
inline void Sensor::set_type(::cavnue::messages::common::v1::Sensor_Type value) {
   _internal_set_type(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.Sensor.type)
}
inline ::cavnue::messages::common::v1::Sensor_Type Sensor::_internal_type() const {
  return static_cast<::cavnue::messages::common::v1::Sensor_Type>(_impl_.type_);
}
inline void Sensor::_internal_set_type(::cavnue::messages::common::v1::Sensor_Type value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.type_ = value;
}

// optional .google.protobuf.Timestamp deploy_ts = 5 [json_name = "deployTs", (.gen_bq_schema.bigquery) = {
inline bool Sensor::has_deploy_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.deploy_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Sensor::_internal_deploy_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.deploy_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Sensor::deploy_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.Sensor.deploy_ts)
  return _internal_deploy_ts();
}
inline void Sensor::unsafe_arena_set_allocated_deploy_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* deploy_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deploy_ts_);
  }
  _impl_.deploy_ts_ = deploy_ts;
  if (deploy_ts) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.data_warehouse.management.v2.Sensor.deploy_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Sensor::release_deploy_ts() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.deploy_ts_;
  _impl_.deploy_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Sensor::unsafe_arena_release_deploy_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v2.Sensor.deploy_ts)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.deploy_ts_;
  _impl_.deploy_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Sensor::_internal_mutable_deploy_ts() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.deploy_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.deploy_ts_ = p;
  }
  return _impl_.deploy_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Sensor::mutable_deploy_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_deploy_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.Sensor.deploy_ts)
  return _msg;
}
inline void Sensor::set_allocated_deploy_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* deploy_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deploy_ts_);
  }
  if (deploy_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deploy_ts));
    if (message_arena != submessage_arena) {
      deploy_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deploy_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.deploy_ts_ = deploy_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v2.Sensor.deploy_ts)
}

// optional bool active = 6 [json_name = "active", (.gen_bq_schema.bigquery) = {
inline bool Sensor::has_active() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Sensor::clear_active() {
  _impl_.active_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool Sensor::active() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.Sensor.active)
  return _internal_active();
}
inline void Sensor::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.Sensor.active)
}
inline bool Sensor::_internal_active() const {
  return _impl_.active_;
}
inline void Sensor::_internal_set_active(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.active_ = value;
}

// string serial_number = 7 [json_name = "serialNumber"];
inline void Sensor::clear_serial_number() {
  _impl_.serial_number_.ClearToEmpty();
}
inline const std::string& Sensor::serial_number() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.Sensor.serial_number)
  return _internal_serial_number();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Sensor::set_serial_number(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.serial_number_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.Sensor.serial_number)
}
inline std::string* Sensor::mutable_serial_number() {
  std::string* _s = _internal_mutable_serial_number();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.Sensor.serial_number)
  return _s;
}
inline const std::string& Sensor::_internal_serial_number() const {
  return _impl_.serial_number_.Get();
}
inline void Sensor::_internal_set_serial_number(const std::string& value) {
  ;


  _impl_.serial_number_.Set(value, GetArenaForAllocation());
}
inline std::string* Sensor::_internal_mutable_serial_number() {
  ;
  return _impl_.serial_number_.Mutable( GetArenaForAllocation());
}
inline std::string* Sensor::release_serial_number() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v2.Sensor.serial_number)
  return _impl_.serial_number_.Release();
}
inline void Sensor::set_allocated_serial_number(std::string* value) {
  _impl_.serial_number_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.serial_number_.IsDefault()) {
          _impl_.serial_number_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v2.Sensor.serial_number)
}

// string make = 8 [json_name = "make"];
inline void Sensor::clear_make() {
  _impl_.make_.ClearToEmpty();
}
inline const std::string& Sensor::make() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.Sensor.make)
  return _internal_make();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Sensor::set_make(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.make_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.Sensor.make)
}
inline std::string* Sensor::mutable_make() {
  std::string* _s = _internal_mutable_make();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.Sensor.make)
  return _s;
}
inline const std::string& Sensor::_internal_make() const {
  return _impl_.make_.Get();
}
inline void Sensor::_internal_set_make(const std::string& value) {
  ;


  _impl_.make_.Set(value, GetArenaForAllocation());
}
inline std::string* Sensor::_internal_mutable_make() {
  ;
  return _impl_.make_.Mutable( GetArenaForAllocation());
}
inline std::string* Sensor::release_make() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v2.Sensor.make)
  return _impl_.make_.Release();
}
inline void Sensor::set_allocated_make(std::string* value) {
  _impl_.make_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.make_.IsDefault()) {
          _impl_.make_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v2.Sensor.make)
}

// -------------------------------------------------------------------

// CameraMetadata_DistortionCoefficients

// float p1 = 1 [json_name = "p1"];
inline void CameraMetadata_DistortionCoefficients::clear_p1() {
  _impl_.p1_ = 0;
}
inline float CameraMetadata_DistortionCoefficients::p1() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.CameraMetadata.DistortionCoefficients.p1)
  return _internal_p1();
}
inline void CameraMetadata_DistortionCoefficients::set_p1(float value) {
  _internal_set_p1(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.CameraMetadata.DistortionCoefficients.p1)
}
inline float CameraMetadata_DistortionCoefficients::_internal_p1() const {
  return _impl_.p1_;
}
inline void CameraMetadata_DistortionCoefficients::_internal_set_p1(float value) {
  ;
  _impl_.p1_ = value;
}

// float p2 = 2 [json_name = "p2"];
inline void CameraMetadata_DistortionCoefficients::clear_p2() {
  _impl_.p2_ = 0;
}
inline float CameraMetadata_DistortionCoefficients::p2() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.CameraMetadata.DistortionCoefficients.p2)
  return _internal_p2();
}
inline void CameraMetadata_DistortionCoefficients::set_p2(float value) {
  _internal_set_p2(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.CameraMetadata.DistortionCoefficients.p2)
}
inline float CameraMetadata_DistortionCoefficients::_internal_p2() const {
  return _impl_.p2_;
}
inline void CameraMetadata_DistortionCoefficients::_internal_set_p2(float value) {
  ;
  _impl_.p2_ = value;
}

// float s1 = 3 [json_name = "s1"];
inline void CameraMetadata_DistortionCoefficients::clear_s1() {
  _impl_.s1_ = 0;
}
inline float CameraMetadata_DistortionCoefficients::s1() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.CameraMetadata.DistortionCoefficients.s1)
  return _internal_s1();
}
inline void CameraMetadata_DistortionCoefficients::set_s1(float value) {
  _internal_set_s1(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.CameraMetadata.DistortionCoefficients.s1)
}
inline float CameraMetadata_DistortionCoefficients::_internal_s1() const {
  return _impl_.s1_;
}
inline void CameraMetadata_DistortionCoefficients::_internal_set_s1(float value) {
  ;
  _impl_.s1_ = value;
}

// float s2 = 4 [json_name = "s2"];
inline void CameraMetadata_DistortionCoefficients::clear_s2() {
  _impl_.s2_ = 0;
}
inline float CameraMetadata_DistortionCoefficients::s2() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.CameraMetadata.DistortionCoefficients.s2)
  return _internal_s2();
}
inline void CameraMetadata_DistortionCoefficients::set_s2(float value) {
  _internal_set_s2(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.CameraMetadata.DistortionCoefficients.s2)
}
inline float CameraMetadata_DistortionCoefficients::_internal_s2() const {
  return _impl_.s2_;
}
inline void CameraMetadata_DistortionCoefficients::_internal_set_s2(float value) {
  ;
  _impl_.s2_ = value;
}

// float s3 = 5 [json_name = "s3"];
inline void CameraMetadata_DistortionCoefficients::clear_s3() {
  _impl_.s3_ = 0;
}
inline float CameraMetadata_DistortionCoefficients::s3() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.CameraMetadata.DistortionCoefficients.s3)
  return _internal_s3();
}
inline void CameraMetadata_DistortionCoefficients::set_s3(float value) {
  _internal_set_s3(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.CameraMetadata.DistortionCoefficients.s3)
}
inline float CameraMetadata_DistortionCoefficients::_internal_s3() const {
  return _impl_.s3_;
}
inline void CameraMetadata_DistortionCoefficients::_internal_set_s3(float value) {
  ;
  _impl_.s3_ = value;
}

// float s4 = 6 [json_name = "s4"];
inline void CameraMetadata_DistortionCoefficients::clear_s4() {
  _impl_.s4_ = 0;
}
inline float CameraMetadata_DistortionCoefficients::s4() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.CameraMetadata.DistortionCoefficients.s4)
  return _internal_s4();
}
inline void CameraMetadata_DistortionCoefficients::set_s4(float value) {
  _internal_set_s4(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.CameraMetadata.DistortionCoefficients.s4)
}
inline float CameraMetadata_DistortionCoefficients::_internal_s4() const {
  return _impl_.s4_;
}
inline void CameraMetadata_DistortionCoefficients::_internal_set_s4(float value) {
  ;
  _impl_.s4_ = value;
}

// float k1 = 7 [json_name = "k1"];
inline void CameraMetadata_DistortionCoefficients::clear_k1() {
  _impl_.k1_ = 0;
}
inline float CameraMetadata_DistortionCoefficients::k1() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.CameraMetadata.DistortionCoefficients.k1)
  return _internal_k1();
}
inline void CameraMetadata_DistortionCoefficients::set_k1(float value) {
  _internal_set_k1(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.CameraMetadata.DistortionCoefficients.k1)
}
inline float CameraMetadata_DistortionCoefficients::_internal_k1() const {
  return _impl_.k1_;
}
inline void CameraMetadata_DistortionCoefficients::_internal_set_k1(float value) {
  ;
  _impl_.k1_ = value;
}

// float k2 = 8 [json_name = "k2"];
inline void CameraMetadata_DistortionCoefficients::clear_k2() {
  _impl_.k2_ = 0;
}
inline float CameraMetadata_DistortionCoefficients::k2() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.CameraMetadata.DistortionCoefficients.k2)
  return _internal_k2();
}
inline void CameraMetadata_DistortionCoefficients::set_k2(float value) {
  _internal_set_k2(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.CameraMetadata.DistortionCoefficients.k2)
}
inline float CameraMetadata_DistortionCoefficients::_internal_k2() const {
  return _impl_.k2_;
}
inline void CameraMetadata_DistortionCoefficients::_internal_set_k2(float value) {
  ;
  _impl_.k2_ = value;
}

// float k3 = 9 [json_name = "k3"];
inline void CameraMetadata_DistortionCoefficients::clear_k3() {
  _impl_.k3_ = 0;
}
inline float CameraMetadata_DistortionCoefficients::k3() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.CameraMetadata.DistortionCoefficients.k3)
  return _internal_k3();
}
inline void CameraMetadata_DistortionCoefficients::set_k3(float value) {
  _internal_set_k3(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.CameraMetadata.DistortionCoefficients.k3)
}
inline float CameraMetadata_DistortionCoefficients::_internal_k3() const {
  return _impl_.k3_;
}
inline void CameraMetadata_DistortionCoefficients::_internal_set_k3(float value) {
  ;
  _impl_.k3_ = value;
}

// float k4 = 10 [json_name = "k4"];
inline void CameraMetadata_DistortionCoefficients::clear_k4() {
  _impl_.k4_ = 0;
}
inline float CameraMetadata_DistortionCoefficients::k4() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.CameraMetadata.DistortionCoefficients.k4)
  return _internal_k4();
}
inline void CameraMetadata_DistortionCoefficients::set_k4(float value) {
  _internal_set_k4(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.CameraMetadata.DistortionCoefficients.k4)
}
inline float CameraMetadata_DistortionCoefficients::_internal_k4() const {
  return _impl_.k4_;
}
inline void CameraMetadata_DistortionCoefficients::_internal_set_k4(float value) {
  ;
  _impl_.k4_ = value;
}

// float k5 = 11 [json_name = "k5"];
inline void CameraMetadata_DistortionCoefficients::clear_k5() {
  _impl_.k5_ = 0;
}
inline float CameraMetadata_DistortionCoefficients::k5() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.CameraMetadata.DistortionCoefficients.k5)
  return _internal_k5();
}
inline void CameraMetadata_DistortionCoefficients::set_k5(float value) {
  _internal_set_k5(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.CameraMetadata.DistortionCoefficients.k5)
}
inline float CameraMetadata_DistortionCoefficients::_internal_k5() const {
  return _impl_.k5_;
}
inline void CameraMetadata_DistortionCoefficients::_internal_set_k5(float value) {
  ;
  _impl_.k5_ = value;
}

// float k6 = 12 [json_name = "k6"];
inline void CameraMetadata_DistortionCoefficients::clear_k6() {
  _impl_.k6_ = 0;
}
inline float CameraMetadata_DistortionCoefficients::k6() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.CameraMetadata.DistortionCoefficients.k6)
  return _internal_k6();
}
inline void CameraMetadata_DistortionCoefficients::set_k6(float value) {
  _internal_set_k6(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.CameraMetadata.DistortionCoefficients.k6)
}
inline float CameraMetadata_DistortionCoefficients::_internal_k6() const {
  return _impl_.k6_;
}
inline void CameraMetadata_DistortionCoefficients::_internal_set_k6(float value) {
  ;
  _impl_.k6_ = value;
}

// -------------------------------------------------------------------

// CameraMetadata

// optional int64 sensor_id = 1 [json_name = "sensorId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
inline bool CameraMetadata::has_sensor_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void CameraMetadata::clear_sensor_id() {
  _impl_.sensor_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t CameraMetadata::sensor_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.CameraMetadata.sensor_id)
  return _internal_sensor_id();
}
inline void CameraMetadata::set_sensor_id(::int64_t value) {
  _internal_set_sensor_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.CameraMetadata.sensor_id)
}
inline ::int64_t CameraMetadata::_internal_sensor_id() const {
  return _impl_.sensor_id_;
}
inline void CameraMetadata::_internal_set_sensor_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.sensor_id_ = value;
}

// optional .cavnue.messages.geometry.v1.Matrix34d projection_matrix = 2 [json_name = "projectionMatrix", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_UTM, (.gen_bq_schema.bigquery) = {
inline bool CameraMetadata::has_projection_matrix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.projection_matrix_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::Matrix34d& CameraMetadata::_internal_projection_matrix() const {
  const ::cavnue::messages::geometry::v1::Matrix34d* p = _impl_.projection_matrix_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::Matrix34d&>(
      ::cavnue::messages::geometry::v1::_Matrix34d_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::Matrix34d& CameraMetadata::projection_matrix() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.CameraMetadata.projection_matrix)
  return _internal_projection_matrix();
}
inline void CameraMetadata::unsafe_arena_set_allocated_projection_matrix(
    ::cavnue::messages::geometry::v1::Matrix34d* projection_matrix) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projection_matrix_);
  }
  _impl_.projection_matrix_ = projection_matrix;
  if (projection_matrix) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.data_warehouse.management.v2.CameraMetadata.projection_matrix)
}
inline ::cavnue::messages::geometry::v1::Matrix34d* CameraMetadata::release_projection_matrix() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::Matrix34d* temp = _impl_.projection_matrix_;
  _impl_.projection_matrix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::Matrix34d* CameraMetadata::unsafe_arena_release_projection_matrix() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v2.CameraMetadata.projection_matrix)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::geometry::v1::Matrix34d* temp = _impl_.projection_matrix_;
  _impl_.projection_matrix_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::Matrix34d* CameraMetadata::_internal_mutable_projection_matrix() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.projection_matrix_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::Matrix34d>(GetArenaForAllocation());
    _impl_.projection_matrix_ = p;
  }
  return _impl_.projection_matrix_;
}
inline ::cavnue::messages::geometry::v1::Matrix34d* CameraMetadata::mutable_projection_matrix() {
  ::cavnue::messages::geometry::v1::Matrix34d* _msg = _internal_mutable_projection_matrix();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.CameraMetadata.projection_matrix)
  return _msg;
}
inline void CameraMetadata::set_allocated_projection_matrix(::cavnue::messages::geometry::v1::Matrix34d* projection_matrix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projection_matrix_);
  }
  if (projection_matrix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projection_matrix));
    if (message_arena != submessage_arena) {
      projection_matrix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projection_matrix, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.projection_matrix_ = projection_matrix;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v2.CameraMetadata.projection_matrix)
}

// .cavnue.messages.geometry.v1.Matrix33f intrinsic_matrix = 3 [json_name = "intrinsicMatrix", (.cavnue.messages.common.v1.units) = UNITS_PIXELS];
inline bool CameraMetadata::has_intrinsic_matrix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.intrinsic_matrix_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::Matrix33f& CameraMetadata::_internal_intrinsic_matrix() const {
  const ::cavnue::messages::geometry::v1::Matrix33f* p = _impl_.intrinsic_matrix_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::Matrix33f&>(
      ::cavnue::messages::geometry::v1::_Matrix33f_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::Matrix33f& CameraMetadata::intrinsic_matrix() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.CameraMetadata.intrinsic_matrix)
  return _internal_intrinsic_matrix();
}
inline void CameraMetadata::unsafe_arena_set_allocated_intrinsic_matrix(
    ::cavnue::messages::geometry::v1::Matrix33f* intrinsic_matrix) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.intrinsic_matrix_);
  }
  _impl_.intrinsic_matrix_ = intrinsic_matrix;
  if (intrinsic_matrix) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.data_warehouse.management.v2.CameraMetadata.intrinsic_matrix)
}
inline ::cavnue::messages::geometry::v1::Matrix33f* CameraMetadata::release_intrinsic_matrix() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::geometry::v1::Matrix33f* temp = _impl_.intrinsic_matrix_;
  _impl_.intrinsic_matrix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::Matrix33f* CameraMetadata::unsafe_arena_release_intrinsic_matrix() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v2.CameraMetadata.intrinsic_matrix)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::geometry::v1::Matrix33f* temp = _impl_.intrinsic_matrix_;
  _impl_.intrinsic_matrix_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::Matrix33f* CameraMetadata::_internal_mutable_intrinsic_matrix() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.intrinsic_matrix_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::Matrix33f>(GetArenaForAllocation());
    _impl_.intrinsic_matrix_ = p;
  }
  return _impl_.intrinsic_matrix_;
}
inline ::cavnue::messages::geometry::v1::Matrix33f* CameraMetadata::mutable_intrinsic_matrix() {
  ::cavnue::messages::geometry::v1::Matrix33f* _msg = _internal_mutable_intrinsic_matrix();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.CameraMetadata.intrinsic_matrix)
  return _msg;
}
inline void CameraMetadata::set_allocated_intrinsic_matrix(::cavnue::messages::geometry::v1::Matrix33f* intrinsic_matrix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.intrinsic_matrix_);
  }
  if (intrinsic_matrix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intrinsic_matrix));
    if (message_arena != submessage_arena) {
      intrinsic_matrix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intrinsic_matrix, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.intrinsic_matrix_ = intrinsic_matrix;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v2.CameraMetadata.intrinsic_matrix)
}

// optional .cavnue.messages.geometry.v1.Vector3d translation = 4 [json_name = "translation", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_UTM, (.gen_bq_schema.bigquery) = {
inline bool CameraMetadata::has_translation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.translation_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::Vector3d& CameraMetadata::_internal_translation() const {
  const ::cavnue::messages::geometry::v1::Vector3d* p = _impl_.translation_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::Vector3d&>(
      ::cavnue::messages::geometry::v1::_Vector3d_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::Vector3d& CameraMetadata::translation() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.CameraMetadata.translation)
  return _internal_translation();
}
inline void CameraMetadata::unsafe_arena_set_allocated_translation(
    ::cavnue::messages::geometry::v1::Vector3d* translation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.translation_);
  }
  _impl_.translation_ = translation;
  if (translation) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.data_warehouse.management.v2.CameraMetadata.translation)
}
inline ::cavnue::messages::geometry::v1::Vector3d* CameraMetadata::release_translation() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::cavnue::messages::geometry::v1::Vector3d* temp = _impl_.translation_;
  _impl_.translation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector3d* CameraMetadata::unsafe_arena_release_translation() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v2.CameraMetadata.translation)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::cavnue::messages::geometry::v1::Vector3d* temp = _impl_.translation_;
  _impl_.translation_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector3d* CameraMetadata::_internal_mutable_translation() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.translation_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::Vector3d>(GetArenaForAllocation());
    _impl_.translation_ = p;
  }
  return _impl_.translation_;
}
inline ::cavnue::messages::geometry::v1::Vector3d* CameraMetadata::mutable_translation() {
  ::cavnue::messages::geometry::v1::Vector3d* _msg = _internal_mutable_translation();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.CameraMetadata.translation)
  return _msg;
}
inline void CameraMetadata::set_allocated_translation(::cavnue::messages::geometry::v1::Vector3d* translation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.translation_);
  }
  if (translation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translation));
    if (message_arena != submessage_arena) {
      translation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.translation_ = translation;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v2.CameraMetadata.translation)
}

// optional .cavnue.messages.geometry.v1.Matrix33f rotation = 5 [json_name = "rotation", (.gen_bq_schema.bigquery) = {
inline bool CameraMetadata::has_rotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rotation_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::Matrix33f& CameraMetadata::_internal_rotation() const {
  const ::cavnue::messages::geometry::v1::Matrix33f* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::Matrix33f&>(
      ::cavnue::messages::geometry::v1::_Matrix33f_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::Matrix33f& CameraMetadata::rotation() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.CameraMetadata.rotation)
  return _internal_rotation();
}
inline void CameraMetadata::unsafe_arena_set_allocated_rotation(
    ::cavnue::messages::geometry::v1::Matrix33f* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.data_warehouse.management.v2.CameraMetadata.rotation)
}
inline ::cavnue::messages::geometry::v1::Matrix33f* CameraMetadata::release_rotation() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::cavnue::messages::geometry::v1::Matrix33f* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::Matrix33f* CameraMetadata::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v2.CameraMetadata.rotation)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::cavnue::messages::geometry::v1::Matrix33f* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::Matrix33f* CameraMetadata::_internal_mutable_rotation() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::Matrix33f>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::cavnue::messages::geometry::v1::Matrix33f* CameraMetadata::mutable_rotation() {
  ::cavnue::messages::geometry::v1::Matrix33f* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.CameraMetadata.rotation)
  return _msg;
}
inline void CameraMetadata::set_allocated_rotation(::cavnue::messages::geometry::v1::Matrix33f* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation));
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v2.CameraMetadata.rotation)
}

// optional .cavnue.messages.geometry.v1.Vector3d scene_center = 7 [json_name = "sceneCenter", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_UTM, (.gen_bq_schema.bigquery) = {
inline bool CameraMetadata::has_scene_center() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.scene_center_ != nullptr);
  return value;
}
inline const ::cavnue::messages::geometry::v1::Vector3d& CameraMetadata::_internal_scene_center() const {
  const ::cavnue::messages::geometry::v1::Vector3d* p = _impl_.scene_center_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::geometry::v1::Vector3d&>(
      ::cavnue::messages::geometry::v1::_Vector3d_default_instance_);
}
inline const ::cavnue::messages::geometry::v1::Vector3d& CameraMetadata::scene_center() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.CameraMetadata.scene_center)
  return _internal_scene_center();
}
inline void CameraMetadata::unsafe_arena_set_allocated_scene_center(
    ::cavnue::messages::geometry::v1::Vector3d* scene_center) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scene_center_);
  }
  _impl_.scene_center_ = scene_center;
  if (scene_center) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.data_warehouse.management.v2.CameraMetadata.scene_center)
}
inline ::cavnue::messages::geometry::v1::Vector3d* CameraMetadata::release_scene_center() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::cavnue::messages::geometry::v1::Vector3d* temp = _impl_.scene_center_;
  _impl_.scene_center_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector3d* CameraMetadata::unsafe_arena_release_scene_center() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v2.CameraMetadata.scene_center)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::cavnue::messages::geometry::v1::Vector3d* temp = _impl_.scene_center_;
  _impl_.scene_center_ = nullptr;
  return temp;
}
inline ::cavnue::messages::geometry::v1::Vector3d* CameraMetadata::_internal_mutable_scene_center() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.scene_center_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::geometry::v1::Vector3d>(GetArenaForAllocation());
    _impl_.scene_center_ = p;
  }
  return _impl_.scene_center_;
}
inline ::cavnue::messages::geometry::v1::Vector3d* CameraMetadata::mutable_scene_center() {
  ::cavnue::messages::geometry::v1::Vector3d* _msg = _internal_mutable_scene_center();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.CameraMetadata.scene_center)
  return _msg;
}
inline void CameraMetadata::set_allocated_scene_center(::cavnue::messages::geometry::v1::Vector3d* scene_center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scene_center_);
  }
  if (scene_center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scene_center));
    if (message_arena != submessage_arena) {
      scene_center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scene_center, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.scene_center_ = scene_center;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v2.CameraMetadata.scene_center)
}

// .cavnue.messages.data_warehouse.management.v2.CameraMetadata.DistortionCoefficients distortion_coefficients = 8 [json_name = "distortionCoefficients"];
inline bool CameraMetadata::has_distortion_coefficients() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.distortion_coefficients_ != nullptr);
  return value;
}
inline void CameraMetadata::clear_distortion_coefficients() {
  if (_impl_.distortion_coefficients_ != nullptr) _impl_.distortion_coefficients_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::cavnue::messages::data_warehouse::management::v2::CameraMetadata_DistortionCoefficients& CameraMetadata::_internal_distortion_coefficients() const {
  const ::cavnue::messages::data_warehouse::management::v2::CameraMetadata_DistortionCoefficients* p = _impl_.distortion_coefficients_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::data_warehouse::management::v2::CameraMetadata_DistortionCoefficients&>(
      ::cavnue::messages::data_warehouse::management::v2::_CameraMetadata_DistortionCoefficients_default_instance_);
}
inline const ::cavnue::messages::data_warehouse::management::v2::CameraMetadata_DistortionCoefficients& CameraMetadata::distortion_coefficients() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.CameraMetadata.distortion_coefficients)
  return _internal_distortion_coefficients();
}
inline void CameraMetadata::unsafe_arena_set_allocated_distortion_coefficients(
    ::cavnue::messages::data_warehouse::management::v2::CameraMetadata_DistortionCoefficients* distortion_coefficients) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.distortion_coefficients_);
  }
  _impl_.distortion_coefficients_ = distortion_coefficients;
  if (distortion_coefficients) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.data_warehouse.management.v2.CameraMetadata.distortion_coefficients)
}
inline ::cavnue::messages::data_warehouse::management::v2::CameraMetadata_DistortionCoefficients* CameraMetadata::release_distortion_coefficients() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::cavnue::messages::data_warehouse::management::v2::CameraMetadata_DistortionCoefficients* temp = _impl_.distortion_coefficients_;
  _impl_.distortion_coefficients_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::data_warehouse::management::v2::CameraMetadata_DistortionCoefficients* CameraMetadata::unsafe_arena_release_distortion_coefficients() {
  // @@protoc_insertion_point(field_release:cavnue.messages.data_warehouse.management.v2.CameraMetadata.distortion_coefficients)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::cavnue::messages::data_warehouse::management::v2::CameraMetadata_DistortionCoefficients* temp = _impl_.distortion_coefficients_;
  _impl_.distortion_coefficients_ = nullptr;
  return temp;
}
inline ::cavnue::messages::data_warehouse::management::v2::CameraMetadata_DistortionCoefficients* CameraMetadata::_internal_mutable_distortion_coefficients() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.distortion_coefficients_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::data_warehouse::management::v2::CameraMetadata_DistortionCoefficients>(GetArenaForAllocation());
    _impl_.distortion_coefficients_ = p;
  }
  return _impl_.distortion_coefficients_;
}
inline ::cavnue::messages::data_warehouse::management::v2::CameraMetadata_DistortionCoefficients* CameraMetadata::mutable_distortion_coefficients() {
  ::cavnue::messages::data_warehouse::management::v2::CameraMetadata_DistortionCoefficients* _msg = _internal_mutable_distortion_coefficients();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.data_warehouse.management.v2.CameraMetadata.distortion_coefficients)
  return _msg;
}
inline void CameraMetadata::set_allocated_distortion_coefficients(::cavnue::messages::data_warehouse::management::v2::CameraMetadata_DistortionCoefficients* distortion_coefficients) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.distortion_coefficients_;
  }
  if (distortion_coefficients) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(distortion_coefficients);
    if (message_arena != submessage_arena) {
      distortion_coefficients = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, distortion_coefficients, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.distortion_coefficients_ = distortion_coefficients;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.data_warehouse.management.v2.CameraMetadata.distortion_coefficients)
}

// optional uint32 width = 9 [json_name = "width", (.cavnue.messages.common.v1.units) = UNITS_PIXELS, (.gen_bq_schema.bigquery) = {
inline bool CameraMetadata::has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void CameraMetadata::clear_width() {
  _impl_.width_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t CameraMetadata::width() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.CameraMetadata.width)
  return _internal_width();
}
inline void CameraMetadata::set_width(::uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.CameraMetadata.width)
}
inline ::uint32_t CameraMetadata::_internal_width() const {
  return _impl_.width_;
}
inline void CameraMetadata::_internal_set_width(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.width_ = value;
}

// optional uint32 height = 10 [json_name = "height", (.cavnue.messages.common.v1.units) = UNITS_PIXELS, (.gen_bq_schema.bigquery) = {
inline bool CameraMetadata::has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void CameraMetadata::clear_height() {
  _impl_.height_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t CameraMetadata::height() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.CameraMetadata.height)
  return _internal_height();
}
inline void CameraMetadata::set_height(::uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.CameraMetadata.height)
}
inline ::uint32_t CameraMetadata::_internal_height() const {
  return _impl_.height_;
}
inline void CameraMetadata::_internal_set_height(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.height_ = value;
}

// -------------------------------------------------------------------

// VehicleCalibration

// int64 sensor_id = 1 [json_name = "sensorId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
inline void VehicleCalibration::clear_sensor_id() {
  _impl_.sensor_id_ = ::int64_t{0};
}
inline ::int64_t VehicleCalibration::sensor_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleCalibration.sensor_id)
  return _internal_sensor_id();
}
inline void VehicleCalibration::set_sensor_id(::int64_t value) {
  _internal_set_sensor_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.VehicleCalibration.sensor_id)
}
inline ::int64_t VehicleCalibration::_internal_sensor_id() const {
  return _impl_.sensor_id_;
}
inline void VehicleCalibration::_internal_set_sensor_id(::int64_t value) {
  ;
  _impl_.sensor_id_ = value;
}

// repeated float length_uncertainty = 2 [json_name = "lengthUncertainty"];
inline int VehicleCalibration::_internal_length_uncertainty_size() const {
  return _impl_.length_uncertainty_.size();
}
inline int VehicleCalibration::length_uncertainty_size() const {
  return _internal_length_uncertainty_size();
}
inline void VehicleCalibration::clear_length_uncertainty() {
  _internal_mutable_length_uncertainty()->Clear();
}
inline float VehicleCalibration::length_uncertainty(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleCalibration.length_uncertainty)
  return _internal_length_uncertainty(index);
}
inline void VehicleCalibration::set_length_uncertainty(int index, float value) {
  _internal_mutable_length_uncertainty()->Set(index, value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.VehicleCalibration.length_uncertainty)
}
inline void VehicleCalibration::add_length_uncertainty(float value) {
  _internal_add_length_uncertainty(value);
  // @@protoc_insertion_point(field_add:cavnue.messages.data_warehouse.management.v2.VehicleCalibration.length_uncertainty)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& VehicleCalibration::length_uncertainty() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.data_warehouse.management.v2.VehicleCalibration.length_uncertainty)
  return _internal_length_uncertainty();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* VehicleCalibration::mutable_length_uncertainty() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.data_warehouse.management.v2.VehicleCalibration.length_uncertainty)
  return _internal_mutable_length_uncertainty();
}

inline float VehicleCalibration::_internal_length_uncertainty(int index) const {
  return _internal_length_uncertainty().Get(index);
}
inline void VehicleCalibration::_internal_add_length_uncertainty(float value) {
  _internal_mutable_length_uncertainty()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& VehicleCalibration::_internal_length_uncertainty() const {
  return _impl_.length_uncertainty_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* VehicleCalibration::_internal_mutable_length_uncertainty() {
  return &_impl_.length_uncertainty_;
}

// repeated float width_uncertainty = 3 [json_name = "widthUncertainty"];
inline int VehicleCalibration::_internal_width_uncertainty_size() const {
  return _impl_.width_uncertainty_.size();
}
inline int VehicleCalibration::width_uncertainty_size() const {
  return _internal_width_uncertainty_size();
}
inline void VehicleCalibration::clear_width_uncertainty() {
  _internal_mutable_width_uncertainty()->Clear();
}
inline float VehicleCalibration::width_uncertainty(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleCalibration.width_uncertainty)
  return _internal_width_uncertainty(index);
}
inline void VehicleCalibration::set_width_uncertainty(int index, float value) {
  _internal_mutable_width_uncertainty()->Set(index, value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.VehicleCalibration.width_uncertainty)
}
inline void VehicleCalibration::add_width_uncertainty(float value) {
  _internal_add_width_uncertainty(value);
  // @@protoc_insertion_point(field_add:cavnue.messages.data_warehouse.management.v2.VehicleCalibration.width_uncertainty)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& VehicleCalibration::width_uncertainty() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.data_warehouse.management.v2.VehicleCalibration.width_uncertainty)
  return _internal_width_uncertainty();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* VehicleCalibration::mutable_width_uncertainty() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.data_warehouse.management.v2.VehicleCalibration.width_uncertainty)
  return _internal_mutable_width_uncertainty();
}

inline float VehicleCalibration::_internal_width_uncertainty(int index) const {
  return _internal_width_uncertainty().Get(index);
}
inline void VehicleCalibration::_internal_add_width_uncertainty(float value) {
  _internal_mutable_width_uncertainty()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& VehicleCalibration::_internal_width_uncertainty() const {
  return _impl_.width_uncertainty_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* VehicleCalibration::_internal_mutable_width_uncertainty() {
  return &_impl_.width_uncertainty_;
}

// repeated float length_correction = 4 [json_name = "lengthCorrection"];
inline int VehicleCalibration::_internal_length_correction_size() const {
  return _impl_.length_correction_.size();
}
inline int VehicleCalibration::length_correction_size() const {
  return _internal_length_correction_size();
}
inline void VehicleCalibration::clear_length_correction() {
  _internal_mutable_length_correction()->Clear();
}
inline float VehicleCalibration::length_correction(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleCalibration.length_correction)
  return _internal_length_correction(index);
}
inline void VehicleCalibration::set_length_correction(int index, float value) {
  _internal_mutable_length_correction()->Set(index, value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.VehicleCalibration.length_correction)
}
inline void VehicleCalibration::add_length_correction(float value) {
  _internal_add_length_correction(value);
  // @@protoc_insertion_point(field_add:cavnue.messages.data_warehouse.management.v2.VehicleCalibration.length_correction)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& VehicleCalibration::length_correction() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.data_warehouse.management.v2.VehicleCalibration.length_correction)
  return _internal_length_correction();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* VehicleCalibration::mutable_length_correction() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.data_warehouse.management.v2.VehicleCalibration.length_correction)
  return _internal_mutable_length_correction();
}

inline float VehicleCalibration::_internal_length_correction(int index) const {
  return _internal_length_correction().Get(index);
}
inline void VehicleCalibration::_internal_add_length_correction(float value) {
  _internal_mutable_length_correction()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& VehicleCalibration::_internal_length_correction() const {
  return _impl_.length_correction_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* VehicleCalibration::_internal_mutable_length_correction() {
  return &_impl_.length_correction_;
}

// repeated float width_correction = 5 [json_name = "widthCorrection"];
inline int VehicleCalibration::_internal_width_correction_size() const {
  return _impl_.width_correction_.size();
}
inline int VehicleCalibration::width_correction_size() const {
  return _internal_width_correction_size();
}
inline void VehicleCalibration::clear_width_correction() {
  _internal_mutable_width_correction()->Clear();
}
inline float VehicleCalibration::width_correction(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.data_warehouse.management.v2.VehicleCalibration.width_correction)
  return _internal_width_correction(index);
}
inline void VehicleCalibration::set_width_correction(int index, float value) {
  _internal_mutable_width_correction()->Set(index, value);
  // @@protoc_insertion_point(field_set:cavnue.messages.data_warehouse.management.v2.VehicleCalibration.width_correction)
}
inline void VehicleCalibration::add_width_correction(float value) {
  _internal_add_width_correction(value);
  // @@protoc_insertion_point(field_add:cavnue.messages.data_warehouse.management.v2.VehicleCalibration.width_correction)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& VehicleCalibration::width_correction() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.data_warehouse.management.v2.VehicleCalibration.width_correction)
  return _internal_width_correction();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* VehicleCalibration::mutable_width_correction() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.data_warehouse.management.v2.VehicleCalibration.width_correction)
  return _internal_mutable_width_correction();
}

inline float VehicleCalibration::_internal_width_correction(int index) const {
  return _internal_width_correction().Get(index);
}
inline void VehicleCalibration::_internal_add_width_correction(float value) {
  _internal_mutable_width_correction()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& VehicleCalibration::_internal_width_correction() const {
  return _impl_.width_correction_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* VehicleCalibration::_internal_mutable_width_correction() {
  return &_impl_.width_correction_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace management
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fdatasources_2eproto_2epb_2eh

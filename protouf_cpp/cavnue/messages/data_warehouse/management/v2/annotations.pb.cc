// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/data_warehouse/management/v2/annotations.proto

#include "cavnue/messages/data_warehouse/management/v2/annotations.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace management {
namespace v2 {
template <typename>
PROTOBUF_CONSTEXPR FrameAnnotationBox2::FrameAnnotationBox2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.annotations_)*/{}
  , /*decltype(_impl_.labels_)*/ {}
  ,/* _impl_._labels_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.actors_)*/ {}
  ,/* _impl_._actors_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.ts_)*/nullptr
  , /*decltype(_impl_.data_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.batch_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.task_id_)*/ ::int64_t{0}
} {}
struct FrameAnnotationBox2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameAnnotationBox2DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameAnnotationBox2DefaultTypeInternal() {}
  union {
    FrameAnnotationBox2 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameAnnotationBox2DefaultTypeInternal _FrameAnnotationBox2_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FrameAnnotationBox3::FrameAnnotationBox3(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.annotations_)*/{}
  , /*decltype(_impl_.labels_)*/ {}
  ,/* _impl_._labels_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.actors_)*/ {}
  ,/* _impl_._actors_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.ts_)*/nullptr
  , /*decltype(_impl_.data_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.batch_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.task_id_)*/ ::int64_t{0}
} {}
struct FrameAnnotationBox3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameAnnotationBox3DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameAnnotationBox3DefaultTypeInternal() {}
  union {
    FrameAnnotationBox3 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameAnnotationBox3DefaultTypeInternal _FrameAnnotationBox3_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FrameAnnotationSegmentation_MaskMap::FrameAnnotationSegmentation_MaskMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uri_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.label_id_)*/ ::int64_t{0}
} {}
struct FrameAnnotationSegmentation_MaskMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameAnnotationSegmentation_MaskMapDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameAnnotationSegmentation_MaskMapDefaultTypeInternal() {}
  union {
    FrameAnnotationSegmentation_MaskMap _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameAnnotationSegmentation_MaskMapDefaultTypeInternal _FrameAnnotationSegmentation_MaskMap_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FrameAnnotationSegmentation::FrameAnnotationSegmentation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mask_map_)*/{}
  , /*decltype(_impl_.ts_)*/nullptr
  , /*decltype(_impl_.data_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.batch_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.task_id_)*/ ::int64_t{0}
} {}
struct FrameAnnotationSegmentationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameAnnotationSegmentationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameAnnotationSegmentationDefaultTypeInternal() {}
  union {
    FrameAnnotationSegmentation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameAnnotationSegmentationDefaultTypeInternal _FrameAnnotationSegmentation_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FrameAnnotationAttributes::FrameAnnotationAttributes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.batch_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.actor_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.wrong_way_driving_)*/ false

  , /*decltype(_impl_.impeding_)*/ false

  , /*decltype(_impl_.collision_)*/ false

  , /*decltype(_impl_.speeding_)*/ false

  , /*decltype(_impl_.siren_)*/ false
} {}
struct FrameAnnotationAttributesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameAnnotationAttributesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameAnnotationAttributesDefaultTypeInternal() {}
  union {
    FrameAnnotationAttributes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameAnnotationAttributesDefaultTypeInternal _FrameAnnotationAttributes_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Label::Label(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hierarchy_)*/{}
  , /*decltype(_impl_.annotation_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.label_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.label_)*/ 0
} {}
struct LabelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LabelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LabelDefaultTypeInternal() {}
  union {
    Label _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LabelDefaultTypeInternal _Label_default_instance_;
}  // namespace v2
}  // namespace management
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
static ::_pb::Metadata file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto[6];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto = nullptr;
const ::uint32_t TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationBox2, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationBox2, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationBox2, _impl_.data_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationBox2, _impl_.batch_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationBox2, _impl_.task_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationBox2, _impl_.ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationBox2, _impl_.annotations_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationBox2, _impl_.labels_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationBox2, _impl_.actors_),
    1,
    2,
    3,
    0,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationBox3, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationBox3, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationBox3, _impl_.data_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationBox3, _impl_.batch_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationBox3, _impl_.task_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationBox3, _impl_.ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationBox3, _impl_.annotations_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationBox3, _impl_.labels_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationBox3, _impl_.actors_),
    1,
    2,
    3,
    0,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation_MaskMap, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation_MaskMap, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation_MaskMap, _impl_.uri_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation_MaskMap, _impl_.label_id_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation, _impl_.data_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation, _impl_.batch_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation, _impl_.task_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation, _impl_.ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation, _impl_.mask_map_),
    1,
    2,
    3,
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationAttributes, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationAttributes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationAttributes, _impl_.data_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationAttributes, _impl_.batch_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationAttributes, _impl_.actor_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationAttributes, _impl_.wrong_way_driving_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationAttributes, _impl_.impeding_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationAttributes, _impl_.collision_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationAttributes, _impl_.speeding_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationAttributes, _impl_.siren_),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Label, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Label, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Label, _impl_.label_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Label, _impl_.annotation_type_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Label, _impl_.label_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::data_warehouse::management::v2::Label, _impl_.hierarchy_),
    1,
    0,
    2,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 15, -1, sizeof(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationBox2)},
        { 22, 37, -1, sizeof(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationBox3)},
        { 44, 54, -1, sizeof(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation_MaskMap)},
        { 56, 69, -1, sizeof(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation)},
        { 74, 90, -1, sizeof(::cavnue::messages::data_warehouse::management::v2::FrameAnnotationAttributes)},
        { 98, 110, -1, sizeof(::cavnue::messages::data_warehouse::management::v2::Label)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cavnue::messages::data_warehouse::management::v2::_FrameAnnotationBox2_default_instance_._instance,
    &::cavnue::messages::data_warehouse::management::v2::_FrameAnnotationBox3_default_instance_._instance,
    &::cavnue::messages::data_warehouse::management::v2::_FrameAnnotationSegmentation_MaskMap_default_instance_._instance,
    &::cavnue::messages::data_warehouse::management::v2::_FrameAnnotationSegmentation_default_instance_._instance,
    &::cavnue::messages::data_warehouse::management::v2::_FrameAnnotationAttributes_default_instance_._instance,
    &::cavnue::messages::data_warehouse::management::v2::_Label_default_instance_._instance,
};
const char descriptor_table_protodef_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n>cavnue/messages/data_warehouse/managem"
    "ent/v2/annotations.proto\022,cavnue.message"
    "s.data_warehouse.management.v2\032\'cavnue/t"
    "hird_party/bq/v1/bq_field.proto\032\'cavnue/"
    "third_party/bq/v1/bq_table.proto\032&cavnue"
    "/messages/common/v1/common.proto\032.cavnue"
    "/messages/geometry/v1/bounding_box.proto"
    "\032-cavnue/messages/common/v1/field_option"
    "s.proto\032\037google/protobuf/timestamp.proto"
    "\"\241\003\n\023FrameAnnotationBox2\022(\n\007data_id\030\001 \001("
    "\003B\n\230\265\030\001\212\371+\002\010\001H\000R\006dataId\210\001\001\022(\n\010batch_id\030\002"
    " \001(\003B\010\212\371+\004\010\001@\001H\001R\007batchId\210\001\001\022$\n\007task_id\030"
    "\003 \001(\003B\006\212\371+\002\010\001H\002R\006taskId\210\001\001\022D\n\002ts\030\004 \001(\0132\032"
    ".google.protobuf.TimestampB\023\212\371+\017\010\001\022\tTIME"
    "STAMP8\001H\003R\002ts\210\001\001\022R\n\013annotations\030\005 \003(\0132*."
    "cavnue.messages.geometry.v1.BoundingBox2"
    "fB\004\210\361\004\004R\013annotations\022\026\n\006labels\030\006 \003(\003R\006la"
    "bels\022\026\n\006actors\030\007 \003(\003R\006actors:\032\202\371+\026\n\024Fram"
    "eAnnotationsBox2B\n\n\010_data_idB\013\n\t_batch_i"
    "dB\n\n\010_task_idB\005\n\003_ts\"\254\003\n\023FrameAnnotation"
    "Box3\022(\n\007data_id\030\001 \001(\003B\n\230\265\030\001\212\371+\002\010\001H\000R\006dat"
    "aId\210\001\001\022(\n\010batch_id\030\002 \001(\003B\010\212\371+\004\010\001@\001H\001R\007ba"
    "tchId\210\001\001\022$\n\007task_id\030\003 \001(\003B\006\212\371+\002\010\001H\002R\006tas"
    "kId\210\001\001\022D\n\002ts\030\004 \001(\0132\032.google.protobuf.Tim"
    "estampB\023\212\371+\017\010\001\022\tTIMESTAMP8\001H\003R\002ts\210\001\001\022]\n\013"
    "annotations\030\005 \003(\01321.cavnue.messages.geom"
    "etry.v1.RotatedBoundingBox3dB\010\210\361\004\005\220\361\004\002R\013"
    "annotations\022\026\n\006labels\030\006 \003(\003R\006labels\022\026\n\006a"
    "ctors\030\007 \003(\003R\006actors:\032\202\371+\026\n\024FrameAnnotati"
    "onsBox3B\n\n\010_data_idB\013\n\t_batch_idB\n\n\010_tas"
    "k_idB\005\n\003_ts\"\202\004\n\033FrameAnnotationSegmentat"
    "ion\022(\n\007data_id\030\001 \001(\003B\n\230\265\030\001\212\371+\002\010\001H\000R\006data"
    "Id\210\001\001\022(\n\010batch_id\030\002 \001(\003B\010\212\371+\004\010\001@\001H\001R\007bat"
    "chId\210\001\001\022$\n\007task_id\030\003 \001(\003B\006\212\371+\002\010\001H\002R\006task"
    "Id\210\001\001\022D\n\002ts\030\004 \001(\0132\032.google.protobuf.Time"
    "stampB\023\212\371+\017\010\001\022\tTIMESTAMP8\001H\003R\002ts\210\001\001\022l\n\010m"
    "ask_map\030\005 \003(\0132Q.cavnue.messages.data_war"
    "ehouse.management.v2.FrameAnnotationSegm"
    "entation.MaskMapR\007maskMap\032e\n\007MaskMap\022\035\n\003"
    "uri\030\001 \001(\tB\006\212\371+\002\010\001H\000R\003uri\210\001\001\022&\n\010label_id\030"
    "\002 \001(\003B\006\212\371+\002\010\001H\001R\007labelId\210\001\001B\006\n\004_uriB\013\n\t_"
    "label_id:\"\202\371+\036\n\034FrameAnnotationsSegmenta"
    "tionB\n\n\010_data_idB\013\n\t_batch_idB\n\n\010_task_i"
    "dB\005\n\003_ts\"\200\004\n\031FrameAnnotationAttributes\022("
    "\n\007data_id\030\001 \001(\003B\n\230\265\030\001\212\371+\002\010\001H\000R\006dataId\210\001\001"
    "\022(\n\010batch_id\030\002 \001(\003B\010\212\371+\004\010\001@\001H\001R\007batchId\210"
    "\001\001\022&\n\010actor_id\030\003 \001(\003B\006\212\371+\002\010\001H\002R\007actorId\210"
    "\001\001\0227\n\021wrong_way_driving\030\004 \001(\010B\006\212\371+\002\010\001H\003R"
    "\017wrongWayDriving\210\001\001\022\'\n\010impeding\030\005 \001(\010B\006\212"
    "\371+\002\010\001H\004R\010impeding\210\001\001\022)\n\tcollision\030\006 \001(\010B"
    "\006\212\371+\002\010\001H\005R\tcollision\210\001\001\022\'\n\010speeding\030\007 \001("
    "\010B\006\212\371+\002\010\001H\006R\010speeding\210\001\001\022!\n\005siren\030\010 \001(\010B"
    "\006\212\371+\002\010\001H\007R\005siren\210\001\001: \202\371+\034\n\032FrameAnnotati"
    "onsAttributesB\n\n\010_data_idB\013\n\t_batch_idB\013"
    "\n\t_actor_idB\024\n\022_wrong_way_drivingB\013\n\t_im"
    "pedingB\014\n\n_collisionB\013\n\t_speedingB\010\n\006_si"
    "ren\"\256\002\n\005Label\022J\n\010label_id\030\001 \001(\003B*\210\265\030\001\222\265\030"
    "\005label\222\265\030\017annotation_type\230\265\030\001\212\371+\002\010\001H\000R\007l"
    "abelId\210\001\001\0224\n\017annotation_type\030\002 \001(\tB\006\212\371+\002"
    "\010\001H\001R\016annotationType\210\001\001\022L\n\005label\030\003 \001(\0162)"
    ".cavnue.messages.common.v1.Classificatio"
    "nB\006\212\371+\002\010\001H\002R\005label\210\001\001\022\034\n\thierarchy\030\004 \003(\t"
    "R\thierarchy:\014\202\371+\010\n\006LabelsB\013\n\t_label_idB\022"
    "\n\020_annotation_typeB\010\n\006_labelb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto_deps[6] =
    {
        &::descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2ffield_5foptions_2eproto,
        &::descriptor_table_cavnue_2fmessages_2fgeometry_2fv1_2fbounding_5fbox_2eproto,
        &::descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ffield_2eproto,
        &::descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto = {
    false,
    false,
    2556,
    descriptor_table_protodef_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto,
    "cavnue/messages/data_warehouse/management/v2/annotations.proto",
    &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto_once,
    descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto_deps,
    6,
    6,
    schemas,
    file_default_instances,
    TableStruct_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto::offsets,
    file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto,
    file_level_enum_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto,
    file_level_service_descriptors_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto_getter() {
  return &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto(&descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto);
namespace cavnue {
namespace messages {
namespace data_warehouse {
namespace management {
namespace v2 {
// ===================================================================

class FrameAnnotationBox2::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameAnnotationBox2>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FrameAnnotationBox2, _impl_._has_bits_);
  static void set_has_data_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_batch_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_task_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts(const FrameAnnotationBox2* msg);
  static void set_has_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
FrameAnnotationBox2::_Internal::ts(const FrameAnnotationBox2* msg) {
  return *msg->_impl_.ts_;
}
void FrameAnnotationBox2::clear_ts() {
  if (_impl_.ts_ != nullptr) _impl_.ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void FrameAnnotationBox2::clear_annotations() {
  _internal_mutable_annotations()->Clear();
}
FrameAnnotationBox2::FrameAnnotationBox2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2)
}
FrameAnnotationBox2::FrameAnnotationBox2(const FrameAnnotationBox2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FrameAnnotationBox2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.annotations_){from._impl_.annotations_}
    , decltype(_impl_.labels_) { from._impl_.labels_ }
    ,/* _impl_._labels_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.actors_) { from._impl_.actors_ }
    ,/* _impl_._actors_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.ts_){nullptr}
    , decltype(_impl_.data_id_) {}

    , decltype(_impl_.batch_id_) {}

    , decltype(_impl_.task_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.ts_);
  }
  ::memcpy(&_impl_.data_id_, &from._impl_.data_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.task_id_) -
    reinterpret_cast<char*>(&_impl_.data_id_)) + sizeof(_impl_.task_id_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2)
}

inline void FrameAnnotationBox2::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.annotations_){arena}
    , decltype(_impl_.labels_) { arena }
    ,/* _impl_._labels_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.actors_) { arena }
    ,/* _impl_._actors_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.ts_){nullptr}
    , decltype(_impl_.data_id_) { ::int64_t{0} }

    , decltype(_impl_.batch_id_) { ::int64_t{0} }

    , decltype(_impl_.task_id_) { ::int64_t{0} }

  };
}

FrameAnnotationBox2::~FrameAnnotationBox2() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameAnnotationBox2::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_annotations()->~RepeatedPtrField();
  _impl_.labels_.~RepeatedField();
  _impl_.actors_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.ts_;
}

void FrameAnnotationBox2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrameAnnotationBox2::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_annotations()->Clear();
  _internal_mutable_labels()->Clear();
  _internal_mutable_actors()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.ts_ != nullptr);
    _impl_.ts_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.data_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.task_id_) -
        reinterpret_cast<char*>(&_impl_.data_id_)) + sizeof(_impl_.task_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameAnnotationBox2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 data_id = 1 [json_name = "dataId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_data_id(&has_bits);
          _impl_.data_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 batch_id = 2 [json_name = "batchId", (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_batch_id(&has_bits);
          _impl_.batch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 task_id = 3 [json_name = "taskId", (.gen_bq_schema.bigquery) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_task_id(&has_bits);
          _impl_.task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .google.protobuf.Timestamp ts = 4 [json_name = "ts", (.gen_bq_schema.bigquery) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cavnue.messages.geometry.v1.BoundingBox2f annotations = 5 [json_name = "annotations", (.cavnue.messages.common.v1.units) = UNITS_PIXELS];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int64 labels = 6 [json_name = "labels"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_labels(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 48) {
          _internal_add_labels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int64 actors = 7 [json_name = "actors"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_actors(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 56) {
          _internal_add_actors(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FrameAnnotationBox2::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 data_id = 1 [json_name = "dataId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_data_id(), target);
  }

  // optional int64 batch_id = 2 [json_name = "batchId", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_batch_id(), target);
  }

  // optional int64 task_id = 3 [json_name = "taskId", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_task_id(), target);
  }

  // optional .google.protobuf.Timestamp ts = 4 [json_name = "ts", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::ts(this),
        _Internal::ts(this).GetCachedSize(), target, stream);
  }

  // repeated .cavnue.messages.geometry.v1.BoundingBox2f annotations = 5 [json_name = "annotations", (.cavnue.messages.common.v1.units) = UNITS_PIXELS];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_annotations_size()); i < n; i++) {
    const auto& repfield = this->_internal_annotations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int64 labels = 6 [json_name = "labels"];
  {
    int byte_size = _impl_._labels_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(6, _internal_labels(),
                                                 byte_size, target);
    }
  }

  // repeated int64 actors = 7 [json_name = "actors"];
  {
    int byte_size = _impl_._actors_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(7, _internal_actors(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2)
  return target;
}

::size_t FrameAnnotationBox2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cavnue.messages.geometry.v1.BoundingBox2f annotations = 5 [json_name = "annotations", (.cavnue.messages.common.v1.units) = UNITS_PIXELS];
  total_size += 1UL * this->_internal_annotations_size();
  for (const auto& msg : this->_internal_annotations()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 labels = 6 [json_name = "labels"];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_labels())
    ;
    _impl_._labels_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated int64 actors = 7 [json_name = "actors"];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_actors())
    ;
    _impl_._actors_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .google.protobuf.Timestamp ts = 4 [json_name = "ts", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ts_);
    }

    // optional int64 data_id = 1 [json_name = "dataId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_data_id());
    }

    // optional int64 batch_id = 2 [json_name = "batchId", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_batch_id());
    }

    // optional int64 task_id = 3 [json_name = "taskId", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_task_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrameAnnotationBox2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FrameAnnotationBox2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrameAnnotationBox2::GetClassData() const { return &_class_data_; }


void FrameAnnotationBox2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FrameAnnotationBox2*>(&to_msg);
  auto& from = static_cast<const FrameAnnotationBox2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_annotations()->MergeFrom(from._internal_annotations());
  _this->_impl_.labels_.MergeFrom(from._impl_.labels_);
  _this->_impl_.actors_.MergeFrom(from._impl_.actors_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_ts());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.data_id_ = from._impl_.data_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.batch_id_ = from._impl_.batch_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.task_id_ = from._impl_.task_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrameAnnotationBox2::CopyFrom(const FrameAnnotationBox2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameAnnotationBox2::IsInitialized() const {
  return true;
}

void FrameAnnotationBox2::InternalSwap(FrameAnnotationBox2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_annotations()->InternalSwap(other->_internal_mutable_annotations());
  _impl_.labels_.InternalSwap(&other->_impl_.labels_);
  _impl_.actors_.InternalSwap(&other->_impl_.actors_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameAnnotationBox2, _impl_.task_id_)
      + sizeof(FrameAnnotationBox2::_impl_.task_id_)
      - PROTOBUF_FIELD_OFFSET(FrameAnnotationBox2, _impl_.ts_)>(
          reinterpret_cast<char*>(&_impl_.ts_),
          reinterpret_cast<char*>(&other->_impl_.ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameAnnotationBox2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto[0]);
}
// ===================================================================

class FrameAnnotationBox3::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameAnnotationBox3>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FrameAnnotationBox3, _impl_._has_bits_);
  static void set_has_data_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_batch_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_task_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts(const FrameAnnotationBox3* msg);
  static void set_has_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
FrameAnnotationBox3::_Internal::ts(const FrameAnnotationBox3* msg) {
  return *msg->_impl_.ts_;
}
void FrameAnnotationBox3::clear_ts() {
  if (_impl_.ts_ != nullptr) _impl_.ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void FrameAnnotationBox3::clear_annotations() {
  _internal_mutable_annotations()->Clear();
}
FrameAnnotationBox3::FrameAnnotationBox3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3)
}
FrameAnnotationBox3::FrameAnnotationBox3(const FrameAnnotationBox3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FrameAnnotationBox3* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.annotations_){from._impl_.annotations_}
    , decltype(_impl_.labels_) { from._impl_.labels_ }
    ,/* _impl_._labels_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.actors_) { from._impl_.actors_ }
    ,/* _impl_._actors_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.ts_){nullptr}
    , decltype(_impl_.data_id_) {}

    , decltype(_impl_.batch_id_) {}

    , decltype(_impl_.task_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.ts_);
  }
  ::memcpy(&_impl_.data_id_, &from._impl_.data_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.task_id_) -
    reinterpret_cast<char*>(&_impl_.data_id_)) + sizeof(_impl_.task_id_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3)
}

inline void FrameAnnotationBox3::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.annotations_){arena}
    , decltype(_impl_.labels_) { arena }
    ,/* _impl_._labels_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.actors_) { arena }
    ,/* _impl_._actors_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.ts_){nullptr}
    , decltype(_impl_.data_id_) { ::int64_t{0} }

    , decltype(_impl_.batch_id_) { ::int64_t{0} }

    , decltype(_impl_.task_id_) { ::int64_t{0} }

  };
}

FrameAnnotationBox3::~FrameAnnotationBox3() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameAnnotationBox3::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_annotations()->~RepeatedPtrField();
  _impl_.labels_.~RepeatedField();
  _impl_.actors_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.ts_;
}

void FrameAnnotationBox3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrameAnnotationBox3::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_annotations()->Clear();
  _internal_mutable_labels()->Clear();
  _internal_mutable_actors()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.ts_ != nullptr);
    _impl_.ts_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.data_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.task_id_) -
        reinterpret_cast<char*>(&_impl_.data_id_)) + sizeof(_impl_.task_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameAnnotationBox3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 data_id = 1 [json_name = "dataId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_data_id(&has_bits);
          _impl_.data_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 batch_id = 2 [json_name = "batchId", (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_batch_id(&has_bits);
          _impl_.batch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 task_id = 3 [json_name = "taskId", (.gen_bq_schema.bigquery) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_task_id(&has_bits);
          _impl_.task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .google.protobuf.Timestamp ts = 4 [json_name = "ts", (.gen_bq_schema.bigquery) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cavnue.messages.geometry.v1.RotatedBoundingBox3d annotations = 5 [json_name = "annotations", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_UTM];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int64 labels = 6 [json_name = "labels"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_labels(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 48) {
          _internal_add_labels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int64 actors = 7 [json_name = "actors"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_actors(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 56) {
          _internal_add_actors(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FrameAnnotationBox3::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 data_id = 1 [json_name = "dataId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_data_id(), target);
  }

  // optional int64 batch_id = 2 [json_name = "batchId", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_batch_id(), target);
  }

  // optional int64 task_id = 3 [json_name = "taskId", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_task_id(), target);
  }

  // optional .google.protobuf.Timestamp ts = 4 [json_name = "ts", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::ts(this),
        _Internal::ts(this).GetCachedSize(), target, stream);
  }

  // repeated .cavnue.messages.geometry.v1.RotatedBoundingBox3d annotations = 5 [json_name = "annotations", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_UTM];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_annotations_size()); i < n; i++) {
    const auto& repfield = this->_internal_annotations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int64 labels = 6 [json_name = "labels"];
  {
    int byte_size = _impl_._labels_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(6, _internal_labels(),
                                                 byte_size, target);
    }
  }

  // repeated int64 actors = 7 [json_name = "actors"];
  {
    int byte_size = _impl_._actors_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(7, _internal_actors(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3)
  return target;
}

::size_t FrameAnnotationBox3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cavnue.messages.geometry.v1.RotatedBoundingBox3d annotations = 5 [json_name = "annotations", (.cavnue.messages.common.v1.units) = UNITS_METERS, (.cavnue.messages.common.v1.crs) = CRS_UTM];
  total_size += 1UL * this->_internal_annotations_size();
  for (const auto& msg : this->_internal_annotations()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 labels = 6 [json_name = "labels"];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_labels())
    ;
    _impl_._labels_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated int64 actors = 7 [json_name = "actors"];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_actors())
    ;
    _impl_._actors_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .google.protobuf.Timestamp ts = 4 [json_name = "ts", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ts_);
    }

    // optional int64 data_id = 1 [json_name = "dataId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_data_id());
    }

    // optional int64 batch_id = 2 [json_name = "batchId", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_batch_id());
    }

    // optional int64 task_id = 3 [json_name = "taskId", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_task_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrameAnnotationBox3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FrameAnnotationBox3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrameAnnotationBox3::GetClassData() const { return &_class_data_; }


void FrameAnnotationBox3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FrameAnnotationBox3*>(&to_msg);
  auto& from = static_cast<const FrameAnnotationBox3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_annotations()->MergeFrom(from._internal_annotations());
  _this->_impl_.labels_.MergeFrom(from._impl_.labels_);
  _this->_impl_.actors_.MergeFrom(from._impl_.actors_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_ts());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.data_id_ = from._impl_.data_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.batch_id_ = from._impl_.batch_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.task_id_ = from._impl_.task_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrameAnnotationBox3::CopyFrom(const FrameAnnotationBox3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.management.v2.FrameAnnotationBox3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameAnnotationBox3::IsInitialized() const {
  return true;
}

void FrameAnnotationBox3::InternalSwap(FrameAnnotationBox3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_annotations()->InternalSwap(other->_internal_mutable_annotations());
  _impl_.labels_.InternalSwap(&other->_impl_.labels_);
  _impl_.actors_.InternalSwap(&other->_impl_.actors_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameAnnotationBox3, _impl_.task_id_)
      + sizeof(FrameAnnotationBox3::_impl_.task_id_)
      - PROTOBUF_FIELD_OFFSET(FrameAnnotationBox3, _impl_.ts_)>(
          reinterpret_cast<char*>(&_impl_.ts_),
          reinterpret_cast<char*>(&other->_impl_.ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameAnnotationBox3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto[1]);
}
// ===================================================================

class FrameAnnotationSegmentation_MaskMap::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameAnnotationSegmentation_MaskMap>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FrameAnnotationSegmentation_MaskMap, _impl_._has_bits_);
  static void set_has_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_label_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FrameAnnotationSegmentation_MaskMap::FrameAnnotationSegmentation_MaskMap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.MaskMap)
}
FrameAnnotationSegmentation_MaskMap::FrameAnnotationSegmentation_MaskMap(const FrameAnnotationSegmentation_MaskMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FrameAnnotationSegmentation_MaskMap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uri_) {}

    , decltype(_impl_.label_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.uri_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.uri_.Set(from._internal_uri(), _this->GetArenaForAllocation());
  }
  _this->_impl_.label_id_ = from._impl_.label_id_;
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.MaskMap)
}

inline void FrameAnnotationSegmentation_MaskMap::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uri_) {}

    , decltype(_impl_.label_id_) { ::int64_t{0} }

  };
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.uri_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FrameAnnotationSegmentation_MaskMap::~FrameAnnotationSegmentation_MaskMap() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.MaskMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameAnnotationSegmentation_MaskMap::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uri_.Destroy();
}

void FrameAnnotationSegmentation_MaskMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrameAnnotationSegmentation_MaskMap::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.MaskMap)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.uri_.ClearNonDefaultToEmpty();
  }
  _impl_.label_id_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameAnnotationSegmentation_MaskMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string uri = 1 [json_name = "uri", (.gen_bq_schema.bigquery) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.MaskMap.uri"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 label_id = 2 [json_name = "labelId", (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_label_id(&has_bits);
          _impl_.label_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FrameAnnotationSegmentation_MaskMap::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.MaskMap)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string uri = 1 [json_name = "uri", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_uri();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.MaskMap.uri");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional int64 label_id = 2 [json_name = "labelId", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_label_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.MaskMap)
  return target;
}

::size_t FrameAnnotationSegmentation_MaskMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.MaskMap)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string uri = 1 [json_name = "uri", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_uri());
    }

    // optional int64 label_id = 2 [json_name = "labelId", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_label_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrameAnnotationSegmentation_MaskMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FrameAnnotationSegmentation_MaskMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrameAnnotationSegmentation_MaskMap::GetClassData() const { return &_class_data_; }


void FrameAnnotationSegmentation_MaskMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FrameAnnotationSegmentation_MaskMap*>(&to_msg);
  auto& from = static_cast<const FrameAnnotationSegmentation_MaskMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.MaskMap)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_uri(from._internal_uri());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.label_id_ = from._impl_.label_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrameAnnotationSegmentation_MaskMap::CopyFrom(const FrameAnnotationSegmentation_MaskMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.MaskMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameAnnotationSegmentation_MaskMap::IsInitialized() const {
  return true;
}

void FrameAnnotationSegmentation_MaskMap::InternalSwap(FrameAnnotationSegmentation_MaskMap* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uri_, lhs_arena,
                                       &other->_impl_.uri_, rhs_arena);

  swap(_impl_.label_id_, other->_impl_.label_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameAnnotationSegmentation_MaskMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto[2]);
}
// ===================================================================

class FrameAnnotationSegmentation::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameAnnotationSegmentation>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FrameAnnotationSegmentation, _impl_._has_bits_);
  static void set_has_data_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_batch_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_task_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts(const FrameAnnotationSegmentation* msg);
  static void set_has_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
FrameAnnotationSegmentation::_Internal::ts(const FrameAnnotationSegmentation* msg) {
  return *msg->_impl_.ts_;
}
void FrameAnnotationSegmentation::clear_ts() {
  if (_impl_.ts_ != nullptr) _impl_.ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
FrameAnnotationSegmentation::FrameAnnotationSegmentation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation)
}
FrameAnnotationSegmentation::FrameAnnotationSegmentation(const FrameAnnotationSegmentation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FrameAnnotationSegmentation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mask_map_){from._impl_.mask_map_}
    , decltype(_impl_.ts_){nullptr}
    , decltype(_impl_.data_id_) {}

    , decltype(_impl_.batch_id_) {}

    , decltype(_impl_.task_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.ts_);
  }
  ::memcpy(&_impl_.data_id_, &from._impl_.data_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.task_id_) -
    reinterpret_cast<char*>(&_impl_.data_id_)) + sizeof(_impl_.task_id_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation)
}

inline void FrameAnnotationSegmentation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mask_map_){arena}
    , decltype(_impl_.ts_){nullptr}
    , decltype(_impl_.data_id_) { ::int64_t{0} }

    , decltype(_impl_.batch_id_) { ::int64_t{0} }

    , decltype(_impl_.task_id_) { ::int64_t{0} }

  };
}

FrameAnnotationSegmentation::~FrameAnnotationSegmentation() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameAnnotationSegmentation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_mask_map()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.ts_;
}

void FrameAnnotationSegmentation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrameAnnotationSegmentation::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_mask_map()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.ts_ != nullptr);
    _impl_.ts_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.data_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.task_id_) -
        reinterpret_cast<char*>(&_impl_.data_id_)) + sizeof(_impl_.task_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameAnnotationSegmentation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 data_id = 1 [json_name = "dataId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_data_id(&has_bits);
          _impl_.data_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 batch_id = 2 [json_name = "batchId", (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_batch_id(&has_bits);
          _impl_.batch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 task_id = 3 [json_name = "taskId", (.gen_bq_schema.bigquery) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_task_id(&has_bits);
          _impl_.task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .google.protobuf.Timestamp ts = 4 [json_name = "ts", (.gen_bq_schema.bigquery) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.MaskMap mask_map = 5 [json_name = "maskMap"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mask_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FrameAnnotationSegmentation::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 data_id = 1 [json_name = "dataId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_data_id(), target);
  }

  // optional int64 batch_id = 2 [json_name = "batchId", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_batch_id(), target);
  }

  // optional int64 task_id = 3 [json_name = "taskId", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_task_id(), target);
  }

  // optional .google.protobuf.Timestamp ts = 4 [json_name = "ts", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::ts(this),
        _Internal::ts(this).GetCachedSize(), target, stream);
  }

  // repeated .cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.MaskMap mask_map = 5 [json_name = "maskMap"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mask_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_mask_map(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation)
  return target;
}

::size_t FrameAnnotationSegmentation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation.MaskMap mask_map = 5 [json_name = "maskMap"];
  total_size += 1UL * this->_internal_mask_map_size();
  for (const auto& msg : this->_internal_mask_map()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .google.protobuf.Timestamp ts = 4 [json_name = "ts", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ts_);
    }

    // optional int64 data_id = 1 [json_name = "dataId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_data_id());
    }

    // optional int64 batch_id = 2 [json_name = "batchId", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_batch_id());
    }

    // optional int64 task_id = 3 [json_name = "taskId", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_task_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrameAnnotationSegmentation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FrameAnnotationSegmentation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrameAnnotationSegmentation::GetClassData() const { return &_class_data_; }


void FrameAnnotationSegmentation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FrameAnnotationSegmentation*>(&to_msg);
  auto& from = static_cast<const FrameAnnotationSegmentation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_mask_map()->MergeFrom(from._internal_mask_map());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_ts());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.data_id_ = from._impl_.data_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.batch_id_ = from._impl_.batch_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.task_id_ = from._impl_.task_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrameAnnotationSegmentation::CopyFrom(const FrameAnnotationSegmentation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.management.v2.FrameAnnotationSegmentation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameAnnotationSegmentation::IsInitialized() const {
  return true;
}

void FrameAnnotationSegmentation::InternalSwap(FrameAnnotationSegmentation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_mask_map()->InternalSwap(other->_internal_mutable_mask_map());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameAnnotationSegmentation, _impl_.task_id_)
      + sizeof(FrameAnnotationSegmentation::_impl_.task_id_)
      - PROTOBUF_FIELD_OFFSET(FrameAnnotationSegmentation, _impl_.ts_)>(
          reinterpret_cast<char*>(&_impl_.ts_),
          reinterpret_cast<char*>(&other->_impl_.ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameAnnotationSegmentation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto[3]);
}
// ===================================================================

class FrameAnnotationAttributes::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameAnnotationAttributes>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FrameAnnotationAttributes, _impl_._has_bits_);
  static void set_has_data_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_batch_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_actor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_wrong_way_driving(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_impeding(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_collision(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_speeding(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_siren(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

FrameAnnotationAttributes::FrameAnnotationAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.management.v2.FrameAnnotationAttributes)
}
FrameAnnotationAttributes::FrameAnnotationAttributes(const FrameAnnotationAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.management.v2.FrameAnnotationAttributes)
}

inline void FrameAnnotationAttributes::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_id_) { ::int64_t{0} }

    , decltype(_impl_.batch_id_) { ::int64_t{0} }

    , decltype(_impl_.actor_id_) { ::int64_t{0} }

    , decltype(_impl_.wrong_way_driving_) { false }

    , decltype(_impl_.impeding_) { false }

    , decltype(_impl_.collision_) { false }

    , decltype(_impl_.speeding_) { false }

    , decltype(_impl_.siren_) { false }

  };
}

FrameAnnotationAttributes::~FrameAnnotationAttributes() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.management.v2.FrameAnnotationAttributes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameAnnotationAttributes::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void FrameAnnotationAttributes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrameAnnotationAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.management.v2.FrameAnnotationAttributes)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.data_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.siren_) -
        reinterpret_cast<char*>(&_impl_.data_id_)) + sizeof(_impl_.siren_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameAnnotationAttributes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 data_id = 1 [json_name = "dataId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_data_id(&has_bits);
          _impl_.data_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 batch_id = 2 [json_name = "batchId", (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_batch_id(&has_bits);
          _impl_.batch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 actor_id = 3 [json_name = "actorId", (.gen_bq_schema.bigquery) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_actor_id(&has_bits);
          _impl_.actor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool wrong_way_driving = 4 [json_name = "wrongWayDriving", (.gen_bq_schema.bigquery) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_wrong_way_driving(&has_bits);
          _impl_.wrong_way_driving_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool impeding = 5 [json_name = "impeding", (.gen_bq_schema.bigquery) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_impeding(&has_bits);
          _impl_.impeding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool collision = 6 [json_name = "collision", (.gen_bq_schema.bigquery) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_collision(&has_bits);
          _impl_.collision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool speeding = 7 [json_name = "speeding", (.gen_bq_schema.bigquery) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_speeding(&has_bits);
          _impl_.speeding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool siren = 8 [json_name = "siren", (.gen_bq_schema.bigquery) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_siren(&has_bits);
          _impl_.siren_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FrameAnnotationAttributes::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.management.v2.FrameAnnotationAttributes)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 data_id = 1 [json_name = "dataId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_data_id(), target);
  }

  // optional int64 batch_id = 2 [json_name = "batchId", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_batch_id(), target);
  }

  // optional int64 actor_id = 3 [json_name = "actorId", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_actor_id(), target);
  }

  // optional bool wrong_way_driving = 4 [json_name = "wrongWayDriving", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_wrong_way_driving(), target);
  }

  // optional bool impeding = 5 [json_name = "impeding", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_impeding(), target);
  }

  // optional bool collision = 6 [json_name = "collision", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_collision(), target);
  }

  // optional bool speeding = 7 [json_name = "speeding", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_speeding(), target);
  }

  // optional bool siren = 8 [json_name = "siren", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_siren(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.management.v2.FrameAnnotationAttributes)
  return target;
}

::size_t FrameAnnotationAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.management.v2.FrameAnnotationAttributes)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int64 data_id = 1 [json_name = "dataId", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_data_id());
    }

    // optional int64 batch_id = 2 [json_name = "batchId", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_batch_id());
    }

    // optional int64 actor_id = 3 [json_name = "actorId", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_actor_id());
    }

    // optional bool wrong_way_driving = 4 [json_name = "wrongWayDriving", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

    // optional bool impeding = 5 [json_name = "impeding", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

    // optional bool collision = 6 [json_name = "collision", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000020u) {
      total_size += 2;
    }

    // optional bool speeding = 7 [json_name = "speeding", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000040u) {
      total_size += 2;
    }

    // optional bool siren = 8 [json_name = "siren", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000080u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrameAnnotationAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FrameAnnotationAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrameAnnotationAttributes::GetClassData() const { return &_class_data_; }


void FrameAnnotationAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FrameAnnotationAttributes*>(&to_msg);
  auto& from = static_cast<const FrameAnnotationAttributes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.management.v2.FrameAnnotationAttributes)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.data_id_ = from._impl_.data_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.batch_id_ = from._impl_.batch_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.actor_id_ = from._impl_.actor_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.wrong_way_driving_ = from._impl_.wrong_way_driving_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.impeding_ = from._impl_.impeding_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.collision_ = from._impl_.collision_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.speeding_ = from._impl_.speeding_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.siren_ = from._impl_.siren_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrameAnnotationAttributes::CopyFrom(const FrameAnnotationAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.management.v2.FrameAnnotationAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameAnnotationAttributes::IsInitialized() const {
  return true;
}

void FrameAnnotationAttributes::InternalSwap(FrameAnnotationAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameAnnotationAttributes, _impl_.siren_)
      + sizeof(FrameAnnotationAttributes::_impl_.siren_)
      - PROTOBUF_FIELD_OFFSET(FrameAnnotationAttributes, _impl_.data_id_)>(
          reinterpret_cast<char*>(&_impl_.data_id_),
          reinterpret_cast<char*>(&other->_impl_.data_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameAnnotationAttributes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto[4]);
}
// ===================================================================

class Label::_Internal {
 public:
  using HasBits = decltype(std::declval<Label>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Label, _impl_._has_bits_);
  static void set_has_label_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_annotation_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Label::Label(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.data_warehouse.management.v2.Label)
}
Label::Label(const Label& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Label* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hierarchy_){from._impl_.hierarchy_}
    , decltype(_impl_.annotation_type_) {}

    , decltype(_impl_.label_id_) {}

    , decltype(_impl_.label_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.annotation_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.annotation_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.annotation_type_.Set(from._internal_annotation_type(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.label_id_, &from._impl_.label_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.label_) -
    reinterpret_cast<char*>(&_impl_.label_id_)) + sizeof(_impl_.label_));
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.data_warehouse.management.v2.Label)
}

inline void Label::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hierarchy_){arena}
    , decltype(_impl_.annotation_type_) {}

    , decltype(_impl_.label_id_) { ::int64_t{0} }

    , decltype(_impl_.label_) { 0 }

  };
  _impl_.annotation_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.annotation_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Label::~Label() {
  // @@protoc_insertion_point(destructor:cavnue.messages.data_warehouse.management.v2.Label)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Label::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_hierarchy()->~RepeatedPtrField();
  _impl_.annotation_type_.Destroy();
}

void Label::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Label::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.data_warehouse.management.v2.Label)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_hierarchy()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.annotation_type_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.label_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.label_) -
        reinterpret_cast<char*>(&_impl_.label_id_)) + sizeof(_impl_.label_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Label::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 label_id = 1 [json_name = "labelId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "label", (.cavnue.messages.common.v1.derivation) = "annotation_type", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_label_id(&has_bits);
          _impl_.label_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string annotation_type = 2 [json_name = "annotationType", (.gen_bq_schema.bigquery) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_annotation_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v2.Label.annotation_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .cavnue.messages.common.v1.Classification label = 3 [json_name = "label", (.gen_bq_schema.bigquery) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_label(static_cast<::cavnue::messages::common::v1::Classification>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string hierarchy = 4 [json_name = "hierarchy"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_hierarchy();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.data_warehouse.management.v2.Label.hierarchy"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Label::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.data_warehouse.management.v2.Label)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 label_id = 1 [json_name = "labelId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "label", (.cavnue.messages.common.v1.derivation) = "annotation_type", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_label_id(), target);
  }

  // optional string annotation_type = 2 [json_name = "annotationType", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_annotation_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v2.Label.annotation_type");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional .cavnue.messages.common.v1.Classification label = 3 [json_name = "label", (.gen_bq_schema.bigquery) = {
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_label(), target);
  }

  // repeated string hierarchy = 4 [json_name = "hierarchy"];
  for (int i = 0, n = this->_internal_hierarchy_size(); i < n; ++i) {
    const auto& s = this->_internal_hierarchy(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.data_warehouse.management.v2.Label.hierarchy");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.data_warehouse.management.v2.Label)
  return target;
}

::size_t Label::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.data_warehouse.management.v2.Label)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string hierarchy = 4 [json_name = "hierarchy"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_hierarchy().size());
  for (int i = 0, n = _internal_hierarchy().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_hierarchy().Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string annotation_type = 2 [json_name = "annotationType", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_annotation_type());
    }

    // optional int64 label_id = 1 [json_name = "labelId", (.cavnue.messages.common.v1.autogenerated) = true, (.cavnue.messages.common.v1.derivation) = "label", (.cavnue.messages.common.v1.derivation) = "annotation_type", (.cavnue.messages.common.v1.primary_key) = true, (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_label_id());
    }

    // optional .cavnue.messages.common.v1.Classification label = 3 [json_name = "label", (.gen_bq_schema.bigquery) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_label());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Label::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Label::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Label::GetClassData() const { return &_class_data_; }


void Label::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Label*>(&to_msg);
  auto& from = static_cast<const Label&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.data_warehouse.management.v2.Label)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_hierarchy()->MergeFrom(from._internal_hierarchy());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_annotation_type(from._internal_annotation_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.label_id_ = from._impl_.label_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.label_ = from._impl_.label_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Label::CopyFrom(const Label& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.data_warehouse.management.v2.Label)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Label::IsInitialized() const {
  return true;
}

void Label::InternalSwap(Label* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_hierarchy()->InternalSwap(
      other->_internal_mutable_hierarchy());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.annotation_type_, lhs_arena,
                                       &other->_impl_.annotation_type_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Label, _impl_.label_)
      + sizeof(Label::_impl_.label_)
      - PROTOBUF_FIELD_OFFSET(Label, _impl_.label_id_)>(
          reinterpret_cast<char*>(&_impl_.label_id_),
          reinterpret_cast<char*>(&other->_impl_.label_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Label::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto_getter, &descriptor_table_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2fdata_5fwarehouse_2fmanagement_2fv2_2fannotations_2eproto[5]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace management
}  // namespace data_warehouse
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::management::v2::FrameAnnotationBox2*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::management::v2::FrameAnnotationBox2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::management::v2::FrameAnnotationBox2 >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::management::v2::FrameAnnotationBox3*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::management::v2::FrameAnnotationBox3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::management::v2::FrameAnnotationBox3 >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation_MaskMap*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation_MaskMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation_MaskMap >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::management::v2::FrameAnnotationSegmentation >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::management::v2::FrameAnnotationAttributes*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::management::v2::FrameAnnotationAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::management::v2::FrameAnnotationAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::data_warehouse::management::v2::Label*
Arena::CreateMaybeMessage< ::cavnue::messages::data_warehouse::management::v2::Label >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::data_warehouse::management::v2::Label >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

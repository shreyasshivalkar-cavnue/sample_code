// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/trigger/v1/playback.proto

#include "cavnue/messages/trigger/v1/playback.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cavnue {
namespace messages {
namespace trigger {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR PlaybackTrigger_Trigger_PlaybackTime::PlaybackTrigger_Trigger_PlaybackTime(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.start_ts_)*/nullptr
  , /*decltype(_impl_.end_ts_)*/nullptr} {}
struct PlaybackTrigger_Trigger_PlaybackTimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlaybackTrigger_Trigger_PlaybackTimeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlaybackTrigger_Trigger_PlaybackTimeDefaultTypeInternal() {}
  union {
    PlaybackTrigger_Trigger_PlaybackTime _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlaybackTrigger_Trigger_PlaybackTimeDefaultTypeInternal _PlaybackTrigger_Trigger_PlaybackTime_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PlaybackTrigger_Trigger::PlaybackTrigger_Trigger(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.topics_)*/{}
  , /*decltype(_impl_.dataset_identifier_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.dataset_run_id_)*/ ::int64_t{0}
} {}
struct PlaybackTrigger_TriggerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlaybackTrigger_TriggerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlaybackTrigger_TriggerDefaultTypeInternal() {}
  union {
    PlaybackTrigger_Trigger _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlaybackTrigger_TriggerDefaultTypeInternal _PlaybackTrigger_Trigger_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PlaybackTrigger::PlaybackTrigger(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.trigger_)*/nullptr} {}
struct PlaybackTriggerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlaybackTriggerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlaybackTriggerDefaultTypeInternal() {}
  union {
    PlaybackTrigger _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlaybackTriggerDefaultTypeInternal _PlaybackTrigger_default_instance_;
}  // namespace v1
}  // namespace trigger
}  // namespace messages
}  // namespace cavnue
static ::_pb::Metadata file_level_metadata_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto = nullptr;
const ::uint32_t TableStruct_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime, _impl_.start_ts_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime, _impl_.end_ts_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger, _impl_.topics_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger, _impl_.dataset_run_id_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger, _impl_.dataset_identifier_),
    ~0u,
    1,
    2,
    0,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::trigger::v1::PlaybackTrigger, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::trigger::v1::PlaybackTrigger, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::trigger::v1::PlaybackTrigger, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::trigger::v1::PlaybackTrigger, _impl_.trigger_),
    0,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime)},
        { 12, 24, -1, sizeof(::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger)},
        { 28, 38, -1, sizeof(::cavnue::messages::trigger::v1::PlaybackTrigger)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cavnue::messages::trigger::v1::_PlaybackTrigger_Trigger_PlaybackTime_default_instance_._instance,
    &::cavnue::messages::trigger::v1::_PlaybackTrigger_Trigger_default_instance_._instance,
    &::cavnue::messages::trigger::v1::_PlaybackTrigger_default_instance_._instance,
};
const char descriptor_table_protodef_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n)cavnue/messages/trigger/v1/playback.pr"
    "oto\022\032cavnue.messages.trigger.v1\032&cavnue/"
    "messages/common/v1/common.proto\032\037google/"
    "protobuf/timestamp.proto\"\246\004\n\017PlaybackTri"
    "gger\0229\n\006header\030\001 \001(\0132!.cavnue.messages.c"
    "ommon.v1.HeaderR\006header\022M\n\007trigger\030\002 \001(\013"
    "23.cavnue.messages.trigger.v1.PlaybackTr"
    "igger.TriggerR\007trigger\032\210\003\n\007Trigger\022\026\n\006to"
    "pics\030\001 \003(\tR\006topics\022Y\n\004time\030\002 \001(\0132@.cavnu"
    "e.messages.trigger.v1.PlaybackTrigger.Tr"
    "igger.PlaybackTimeH\000R\004time\210\001\001\022)\n\016dataset"
    "_run_id\030\003 \001(\003H\001R\014datasetRunId\210\001\001\0222\n\022data"
    "set_identifier\030\004 \001(\tH\002R\021datasetIdentifie"
    "r\210\001\001\032x\n\014PlaybackTime\0225\n\010start_ts\030\001 \001(\0132\032"
    ".google.protobuf.TimestampR\007startTs\0221\n\006e"
    "nd_ts\030\002 \001(\0132\032.google.protobuf.TimestampR"
    "\005endTsB\007\n\005_timeB\021\n\017_dataset_run_idB\025\n\023_d"
    "ataset_identifierb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto_deps[2] =
    {
        &::descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto = {
    false,
    false,
    705,
    descriptor_table_protodef_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto,
    "cavnue/messages/trigger/v1/playback.proto",
    &descriptor_table_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto_once,
    descriptor_table_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto_deps,
    2,
    3,
    schemas,
    file_default_instances,
    TableStruct_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto::offsets,
    file_level_metadata_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto,
    file_level_enum_descriptors_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto,
    file_level_service_descriptors_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto_getter() {
  return &descriptor_table_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto(&descriptor_table_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto);
namespace cavnue {
namespace messages {
namespace trigger {
namespace v1 {
// ===================================================================

class PlaybackTrigger_Trigger_PlaybackTime::_Internal {
 public:
  using HasBits = decltype(std::declval<PlaybackTrigger_Trigger_PlaybackTime>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PlaybackTrigger_Trigger_PlaybackTime, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_ts(const PlaybackTrigger_Trigger_PlaybackTime* msg);
  static void set_has_start_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_ts(const PlaybackTrigger_Trigger_PlaybackTime* msg);
  static void set_has_end_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
PlaybackTrigger_Trigger_PlaybackTime::_Internal::start_ts(const PlaybackTrigger_Trigger_PlaybackTime* msg) {
  return *msg->_impl_.start_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
PlaybackTrigger_Trigger_PlaybackTime::_Internal::end_ts(const PlaybackTrigger_Trigger_PlaybackTime* msg) {
  return *msg->_impl_.end_ts_;
}
void PlaybackTrigger_Trigger_PlaybackTime::clear_start_ts() {
  if (_impl_.start_ts_ != nullptr) _impl_.start_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PlaybackTrigger_Trigger_PlaybackTime::clear_end_ts() {
  if (_impl_.end_ts_ != nullptr) _impl_.end_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
PlaybackTrigger_Trigger_PlaybackTime::PlaybackTrigger_Trigger_PlaybackTime(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.PlaybackTime)
}
PlaybackTrigger_Trigger_PlaybackTime::PlaybackTrigger_Trigger_PlaybackTime(const PlaybackTrigger_Trigger_PlaybackTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlaybackTrigger_Trigger_PlaybackTime* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_ts_){nullptr}
    , decltype(_impl_.end_ts_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.start_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.start_ts_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.end_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.end_ts_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.PlaybackTime)
}

inline void PlaybackTrigger_Trigger_PlaybackTime::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_ts_){nullptr}
    , decltype(_impl_.end_ts_){nullptr}
  };
}

PlaybackTrigger_Trigger_PlaybackTime::~PlaybackTrigger_Trigger_PlaybackTime() {
  // @@protoc_insertion_point(destructor:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.PlaybackTime)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlaybackTrigger_Trigger_PlaybackTime::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.start_ts_;
  if (this != internal_default_instance()) delete _impl_.end_ts_;
}

void PlaybackTrigger_Trigger_PlaybackTime::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlaybackTrigger_Trigger_PlaybackTime::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.PlaybackTime)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.start_ts_ != nullptr);
      _impl_.start_ts_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.end_ts_ != nullptr);
      _impl_.end_ts_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaybackTrigger_Trigger_PlaybackTime::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp start_ts = 1 [json_name = "startTs"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp end_ts = 2 [json_name = "endTs"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_ts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PlaybackTrigger_Trigger_PlaybackTime::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.PlaybackTime)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp start_ts = 1 [json_name = "startTs"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::start_ts(this),
        _Internal::start_ts(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp end_ts = 2 [json_name = "endTs"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::end_ts(this),
        _Internal::end_ts(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.PlaybackTime)
  return target;
}

::size_t PlaybackTrigger_Trigger_PlaybackTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.PlaybackTime)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Timestamp start_ts = 1 [json_name = "startTs"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.start_ts_);
    }

    // .google.protobuf.Timestamp end_ts = 2 [json_name = "endTs"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.end_ts_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlaybackTrigger_Trigger_PlaybackTime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlaybackTrigger_Trigger_PlaybackTime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlaybackTrigger_Trigger_PlaybackTime::GetClassData() const { return &_class_data_; }


void PlaybackTrigger_Trigger_PlaybackTime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlaybackTrigger_Trigger_PlaybackTime*>(&to_msg);
  auto& from = static_cast<const PlaybackTrigger_Trigger_PlaybackTime&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.PlaybackTime)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_start_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_start_ts());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_end_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_end_ts());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlaybackTrigger_Trigger_PlaybackTime::CopyFrom(const PlaybackTrigger_Trigger_PlaybackTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.PlaybackTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaybackTrigger_Trigger_PlaybackTime::IsInitialized() const {
  return true;
}

void PlaybackTrigger_Trigger_PlaybackTime::InternalSwap(PlaybackTrigger_Trigger_PlaybackTime* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlaybackTrigger_Trigger_PlaybackTime, _impl_.end_ts_)
      + sizeof(PlaybackTrigger_Trigger_PlaybackTime::_impl_.end_ts_)
      - PROTOBUF_FIELD_OFFSET(PlaybackTrigger_Trigger_PlaybackTime, _impl_.start_ts_)>(
          reinterpret_cast<char*>(&_impl_.start_ts_),
          reinterpret_cast<char*>(&other->_impl_.start_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaybackTrigger_Trigger_PlaybackTime::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto_getter, &descriptor_table_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto[0]);
}
// ===================================================================

class PlaybackTrigger_Trigger::_Internal {
 public:
  using HasBits = decltype(std::declval<PlaybackTrigger_Trigger>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PlaybackTrigger_Trigger, _impl_._has_bits_);
  static const ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime& time(const PlaybackTrigger_Trigger* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dataset_run_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dataset_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime&
PlaybackTrigger_Trigger::_Internal::time(const PlaybackTrigger_Trigger* msg) {
  return *msg->_impl_.time_;
}
PlaybackTrigger_Trigger::PlaybackTrigger_Trigger(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger)
}
PlaybackTrigger_Trigger::PlaybackTrigger_Trigger(const PlaybackTrigger_Trigger& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlaybackTrigger_Trigger* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.topics_){from._impl_.topics_}
    , decltype(_impl_.dataset_identifier_) {}

    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.dataset_run_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dataset_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dataset_identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.dataset_identifier_.Set(from._internal_dataset_identifier(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.time_ = new ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime(*from._impl_.time_);
  }
  _this->_impl_.dataset_run_id_ = from._impl_.dataset_run_id_;
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger)
}

inline void PlaybackTrigger_Trigger::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.topics_){arena}
    , decltype(_impl_.dataset_identifier_) {}

    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.dataset_run_id_) { ::int64_t{0} }

  };
  _impl_.dataset_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dataset_identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlaybackTrigger_Trigger::~PlaybackTrigger_Trigger() {
  // @@protoc_insertion_point(destructor:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlaybackTrigger_Trigger::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_topics()->~RepeatedPtrField();
  _impl_.dataset_identifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.time_;
}

void PlaybackTrigger_Trigger::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlaybackTrigger_Trigger::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_topics()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.dataset_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.time_ != nullptr);
      _impl_.time_->Clear();
    }
  }
  _impl_.dataset_run_id_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaybackTrigger_Trigger::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string topics = 1 [json_name = "topics"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_topics();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.topics"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.PlaybackTime time = 2 [json_name = "time"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 dataset_run_id = 3 [json_name = "datasetRunId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_dataset_run_id(&has_bits);
          _impl_.dataset_run_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string dataset_identifier = 4 [json_name = "datasetIdentifier"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_dataset_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.dataset_identifier"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PlaybackTrigger_Trigger::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string topics = 1 [json_name = "topics"];
  for (int i = 0, n = this->_internal_topics_size(); i < n; ++i) {
    const auto& s = this->_internal_topics(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.topics");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.PlaybackTime time = 2 [json_name = "time"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // optional int64 dataset_run_id = 3 [json_name = "datasetRunId"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_dataset_run_id(), target);
  }

  // optional string dataset_identifier = 4 [json_name = "datasetIdentifier"];
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_dataset_identifier();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.dataset_identifier");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger)
  return target;
}

::size_t PlaybackTrigger_Trigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string topics = 1 [json_name = "topics"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_topics().size());
  for (int i = 0, n = _internal_topics().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_topics().Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string dataset_identifier = 4 [json_name = "datasetIdentifier"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_dataset_identifier());
    }

    // optional .cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.PlaybackTime time = 2 [json_name = "time"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.time_);
    }

    // optional int64 dataset_run_id = 3 [json_name = "datasetRunId"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_dataset_run_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlaybackTrigger_Trigger::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlaybackTrigger_Trigger::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlaybackTrigger_Trigger::GetClassData() const { return &_class_data_; }


void PlaybackTrigger_Trigger::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlaybackTrigger_Trigger*>(&to_msg);
  auto& from = static_cast<const PlaybackTrigger_Trigger&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_topics()->MergeFrom(from._internal_topics());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_dataset_identifier(from._internal_dataset_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_time()->::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime::MergeFrom(
          from._internal_time());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dataset_run_id_ = from._impl_.dataset_run_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlaybackTrigger_Trigger::CopyFrom(const PlaybackTrigger_Trigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaybackTrigger_Trigger::IsInitialized() const {
  return true;
}

void PlaybackTrigger_Trigger::InternalSwap(PlaybackTrigger_Trigger* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_topics()->InternalSwap(
      other->_internal_mutable_topics());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dataset_identifier_, lhs_arena,
                                       &other->_impl_.dataset_identifier_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlaybackTrigger_Trigger, _impl_.dataset_run_id_)
      + sizeof(PlaybackTrigger_Trigger::_impl_.dataset_run_id_)
      - PROTOBUF_FIELD_OFFSET(PlaybackTrigger_Trigger, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaybackTrigger_Trigger::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto_getter, &descriptor_table_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto[1]);
}
// ===================================================================

class PlaybackTrigger::_Internal {
 public:
  using HasBits = decltype(std::declval<PlaybackTrigger>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PlaybackTrigger, _impl_._has_bits_);
  static const ::cavnue::messages::common::v1::Header& header(const PlaybackTrigger* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger& trigger(const PlaybackTrigger* msg);
  static void set_has_trigger(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::cavnue::messages::common::v1::Header&
PlaybackTrigger::_Internal::header(const PlaybackTrigger* msg) {
  return *msg->_impl_.header_;
}
const ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger&
PlaybackTrigger::_Internal::trigger(const PlaybackTrigger* msg) {
  return *msg->_impl_.trigger_;
}
void PlaybackTrigger::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PlaybackTrigger::PlaybackTrigger(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.trigger.v1.PlaybackTrigger)
}
PlaybackTrigger::PlaybackTrigger(const PlaybackTrigger& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlaybackTrigger* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.trigger_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_ = new ::cavnue::messages::common::v1::Header(*from._impl_.header_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.trigger_ = new ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger(*from._impl_.trigger_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.trigger.v1.PlaybackTrigger)
}

inline void PlaybackTrigger::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.trigger_){nullptr}
  };
}

PlaybackTrigger::~PlaybackTrigger() {
  // @@protoc_insertion_point(destructor:cavnue.messages.trigger.v1.PlaybackTrigger)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlaybackTrigger::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.trigger_;
}

void PlaybackTrigger::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlaybackTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.trigger.v1.PlaybackTrigger)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.trigger_ != nullptr);
      _impl_.trigger_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaybackTrigger::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.trigger.v1.PlaybackTrigger.Trigger trigger = 2 [json_name = "trigger"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_trigger(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PlaybackTrigger::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.trigger.v1.PlaybackTrigger)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .cavnue.messages.trigger.v1.PlaybackTrigger.Trigger trigger = 2 [json_name = "trigger"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::trigger(this),
        _Internal::trigger(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.trigger.v1.PlaybackTrigger)
  return target;
}

::size_t PlaybackTrigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.trigger.v1.PlaybackTrigger)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // .cavnue.messages.trigger.v1.PlaybackTrigger.Trigger trigger = 2 [json_name = "trigger"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.trigger_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlaybackTrigger::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlaybackTrigger::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlaybackTrigger::GetClassData() const { return &_class_data_; }


void PlaybackTrigger::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlaybackTrigger*>(&to_msg);
  auto& from = static_cast<const PlaybackTrigger&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.trigger.v1.PlaybackTrigger)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::cavnue::messages::common::v1::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_trigger()->::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger::MergeFrom(
          from._internal_trigger());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlaybackTrigger::CopyFrom(const PlaybackTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.trigger.v1.PlaybackTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaybackTrigger::IsInitialized() const {
  return true;
}

void PlaybackTrigger::InternalSwap(PlaybackTrigger* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlaybackTrigger, _impl_.trigger_)
      + sizeof(PlaybackTrigger::_impl_.trigger_)
      - PROTOBUF_FIELD_OFFSET(PlaybackTrigger, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaybackTrigger::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto_getter, &descriptor_table_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace trigger
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime*
Arena::CreateMaybeMessage< ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger*
Arena::CreateMaybeMessage< ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::trigger::v1::PlaybackTrigger*
Arena::CreateMaybeMessage< ::cavnue::messages::trigger::v1::PlaybackTrigger >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::trigger::v1::PlaybackTrigger >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

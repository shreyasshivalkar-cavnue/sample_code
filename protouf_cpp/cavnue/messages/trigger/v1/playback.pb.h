// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/trigger/v1/playback.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cavnue/messages/common/v1/common.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto;
namespace cavnue {
namespace messages {
namespace trigger {
namespace v1 {
class PlaybackTrigger;
struct PlaybackTriggerDefaultTypeInternal;
extern PlaybackTriggerDefaultTypeInternal _PlaybackTrigger_default_instance_;
class PlaybackTrigger_Trigger;
struct PlaybackTrigger_TriggerDefaultTypeInternal;
extern PlaybackTrigger_TriggerDefaultTypeInternal _PlaybackTrigger_Trigger_default_instance_;
class PlaybackTrigger_Trigger_PlaybackTime;
struct PlaybackTrigger_Trigger_PlaybackTimeDefaultTypeInternal;
extern PlaybackTrigger_Trigger_PlaybackTimeDefaultTypeInternal _PlaybackTrigger_Trigger_PlaybackTime_default_instance_;
}  // namespace v1
}  // namespace trigger
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template <>
::cavnue::messages::trigger::v1::PlaybackTrigger* Arena::CreateMaybeMessage<::cavnue::messages::trigger::v1::PlaybackTrigger>(Arena*);
template <>
::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger* Arena::CreateMaybeMessage<::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger>(Arena*);
template <>
::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime* Arena::CreateMaybeMessage<::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cavnue {
namespace messages {
namespace trigger {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class PlaybackTrigger_Trigger_PlaybackTime final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.PlaybackTime) */ {
 public:
  inline PlaybackTrigger_Trigger_PlaybackTime() : PlaybackTrigger_Trigger_PlaybackTime(nullptr) {}
  ~PlaybackTrigger_Trigger_PlaybackTime() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PlaybackTrigger_Trigger_PlaybackTime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlaybackTrigger_Trigger_PlaybackTime(const PlaybackTrigger_Trigger_PlaybackTime& from);
  PlaybackTrigger_Trigger_PlaybackTime(PlaybackTrigger_Trigger_PlaybackTime&& from) noexcept
    : PlaybackTrigger_Trigger_PlaybackTime() {
    *this = ::std::move(from);
  }

  inline PlaybackTrigger_Trigger_PlaybackTime& operator=(const PlaybackTrigger_Trigger_PlaybackTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaybackTrigger_Trigger_PlaybackTime& operator=(PlaybackTrigger_Trigger_PlaybackTime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlaybackTrigger_Trigger_PlaybackTime& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlaybackTrigger_Trigger_PlaybackTime* internal_default_instance() {
    return reinterpret_cast<const PlaybackTrigger_Trigger_PlaybackTime*>(
               &_PlaybackTrigger_Trigger_PlaybackTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlaybackTrigger_Trigger_PlaybackTime& a, PlaybackTrigger_Trigger_PlaybackTime& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaybackTrigger_Trigger_PlaybackTime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaybackTrigger_Trigger_PlaybackTime* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlaybackTrigger_Trigger_PlaybackTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlaybackTrigger_Trigger_PlaybackTime>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlaybackTrigger_Trigger_PlaybackTime& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlaybackTrigger_Trigger_PlaybackTime& from) {
    PlaybackTrigger_Trigger_PlaybackTime::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaybackTrigger_Trigger_PlaybackTime* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.PlaybackTime";
  }
  protected:
  explicit PlaybackTrigger_Trigger_PlaybackTime(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTsFieldNumber = 1,
    kEndTsFieldNumber = 2,
  };
  // .google.protobuf.Timestamp start_ts = 1 [json_name = "startTs"];
  bool has_start_ts() const;
  void clear_start_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_start_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_ts();
  void set_allocated_start_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* start_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_ts();
  public:
  void unsafe_arena_set_allocated_start_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* start_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_ts();
  // .google.protobuf.Timestamp end_ts = 2 [json_name = "endTs"];
  bool has_end_ts() const;
  void clear_end_ts() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_end_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_ts();
  void set_allocated_end_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* end_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_ts();
  public:
  void unsafe_arena_set_allocated_end_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* end_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_ts();
  // @@protoc_insertion_point(class_scope:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.PlaybackTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_ts_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_ts_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto;
};// -------------------------------------------------------------------

class PlaybackTrigger_Trigger final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger) */ {
 public:
  inline PlaybackTrigger_Trigger() : PlaybackTrigger_Trigger(nullptr) {}
  ~PlaybackTrigger_Trigger() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PlaybackTrigger_Trigger(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlaybackTrigger_Trigger(const PlaybackTrigger_Trigger& from);
  PlaybackTrigger_Trigger(PlaybackTrigger_Trigger&& from) noexcept
    : PlaybackTrigger_Trigger() {
    *this = ::std::move(from);
  }

  inline PlaybackTrigger_Trigger& operator=(const PlaybackTrigger_Trigger& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaybackTrigger_Trigger& operator=(PlaybackTrigger_Trigger&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlaybackTrigger_Trigger& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlaybackTrigger_Trigger* internal_default_instance() {
    return reinterpret_cast<const PlaybackTrigger_Trigger*>(
               &_PlaybackTrigger_Trigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlaybackTrigger_Trigger& a, PlaybackTrigger_Trigger& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaybackTrigger_Trigger* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaybackTrigger_Trigger* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlaybackTrigger_Trigger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlaybackTrigger_Trigger>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlaybackTrigger_Trigger& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlaybackTrigger_Trigger& from) {
    PlaybackTrigger_Trigger::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaybackTrigger_Trigger* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.trigger.v1.PlaybackTrigger.Trigger";
  }
  protected:
  explicit PlaybackTrigger_Trigger(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PlaybackTrigger_Trigger_PlaybackTime PlaybackTime;

  // accessors -------------------------------------------------------

  enum : int {
    kTopicsFieldNumber = 1,
    kDatasetIdentifierFieldNumber = 4,
    kTimeFieldNumber = 2,
    kDatasetRunIdFieldNumber = 3,
  };
  // repeated string topics = 1 [json_name = "topics"];
  int topics_size() const;
  private:
  int _internal_topics_size() const;

  public:
  void clear_topics() ;
  const std::string& topics(int index) const;
  std::string* mutable_topics(int index);
  void set_topics(int index, const std::string& value);
  void set_topics(int index, std::string&& value);
  void set_topics(int index, const char* value);
  void set_topics(int index, const char* value, std::size_t size);
  void set_topics(int index, absl::string_view value);
  std::string* add_topics();
  void add_topics(const std::string& value);
  void add_topics(std::string&& value);
  void add_topics(const char* value);
  void add_topics(const char* value, std::size_t size);
  void add_topics(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& topics() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_topics();

  private:
  const std::string& _internal_topics(int index) const;
  std::string* _internal_add_topics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_topics() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_topics();

  public:
  // optional string dataset_identifier = 4 [json_name = "datasetIdentifier"];
  bool has_dataset_identifier() const;
  void clear_dataset_identifier() ;
  const std::string& dataset_identifier() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dataset_identifier(Arg_&& arg, Args_... args);
  std::string* mutable_dataset_identifier();
  PROTOBUF_NODISCARD std::string* release_dataset_identifier();
  void set_allocated_dataset_identifier(std::string* ptr);

  private:
  const std::string& _internal_dataset_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataset_identifier(
      const std::string& value);
  std::string* _internal_mutable_dataset_identifier();

  public:
  // optional .cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.PlaybackTime time = 2 [json_name = "time"];
  bool has_time() const;
  void clear_time() ;
  const ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime& time() const;
  PROTOBUF_NODISCARD ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime* release_time();
  ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime* mutable_time();
  void set_allocated_time(::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime* time);
  private:
  const ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime& _internal_time() const;
  ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime* time);
  ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime* unsafe_arena_release_time();
  // optional int64 dataset_run_id = 3 [json_name = "datasetRunId"];
  bool has_dataset_run_id() const;
  void clear_dataset_run_id() ;
  ::int64_t dataset_run_id() const;
  void set_dataset_run_id(::int64_t value);

  private:
  ::int64_t _internal_dataset_run_id() const;
  void _internal_set_dataset_run_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> topics_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_identifier_;
    ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime* time_;
    ::int64_t dataset_run_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto;
};// -------------------------------------------------------------------

class PlaybackTrigger final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.trigger.v1.PlaybackTrigger) */ {
 public:
  inline PlaybackTrigger() : PlaybackTrigger(nullptr) {}
  ~PlaybackTrigger() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PlaybackTrigger(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlaybackTrigger(const PlaybackTrigger& from);
  PlaybackTrigger(PlaybackTrigger&& from) noexcept
    : PlaybackTrigger() {
    *this = ::std::move(from);
  }

  inline PlaybackTrigger& operator=(const PlaybackTrigger& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaybackTrigger& operator=(PlaybackTrigger&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlaybackTrigger& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlaybackTrigger* internal_default_instance() {
    return reinterpret_cast<const PlaybackTrigger*>(
               &_PlaybackTrigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlaybackTrigger& a, PlaybackTrigger& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaybackTrigger* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaybackTrigger* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlaybackTrigger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlaybackTrigger>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlaybackTrigger& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlaybackTrigger& from) {
    PlaybackTrigger::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaybackTrigger* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.trigger.v1.PlaybackTrigger";
  }
  protected:
  explicit PlaybackTrigger(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PlaybackTrigger_Trigger Trigger;

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kTriggerFieldNumber = 2,
  };
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  bool has_header() const;
  void clear_header() ;
  const ::cavnue::messages::common::v1::Header& header() const;
  PROTOBUF_NODISCARD ::cavnue::messages::common::v1::Header* release_header();
  ::cavnue::messages::common::v1::Header* mutable_header();
  void set_allocated_header(::cavnue::messages::common::v1::Header* header);
  private:
  const ::cavnue::messages::common::v1::Header& _internal_header() const;
  ::cavnue::messages::common::v1::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::cavnue::messages::common::v1::Header* header);
  ::cavnue::messages::common::v1::Header* unsafe_arena_release_header();
  // .cavnue.messages.trigger.v1.PlaybackTrigger.Trigger trigger = 2 [json_name = "trigger"];
  bool has_trigger() const;
  void clear_trigger() ;
  const ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger& trigger() const;
  PROTOBUF_NODISCARD ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger* release_trigger();
  ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger* mutable_trigger();
  void set_allocated_trigger(::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger* trigger);
  private:
  const ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger& _internal_trigger() const;
  ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger* _internal_mutable_trigger();
  public:
  void unsafe_arena_set_allocated_trigger(
      ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger* trigger);
  ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger* unsafe_arena_release_trigger();
  // @@protoc_insertion_point(class_scope:cavnue.messages.trigger.v1.PlaybackTrigger)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cavnue::messages::common::v1::Header* header_;
    ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger* trigger_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PlaybackTrigger_Trigger_PlaybackTime

// .google.protobuf.Timestamp start_ts = 1 [json_name = "startTs"];
inline bool PlaybackTrigger_Trigger_PlaybackTime::has_start_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.start_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PlaybackTrigger_Trigger_PlaybackTime::_internal_start_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.start_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PlaybackTrigger_Trigger_PlaybackTime::start_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.PlaybackTime.start_ts)
  return _internal_start_ts();
}
inline void PlaybackTrigger_Trigger_PlaybackTime::unsafe_arena_set_allocated_start_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_ts_);
  }
  _impl_.start_ts_ = start_ts;
  if (start_ts) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.PlaybackTime.start_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PlaybackTrigger_Trigger_PlaybackTime::release_start_ts() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_ts_;
  _impl_.start_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PlaybackTrigger_Trigger_PlaybackTime::unsafe_arena_release_start_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.PlaybackTime.start_ts)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.start_ts_;
  _impl_.start_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PlaybackTrigger_Trigger_PlaybackTime::_internal_mutable_start_ts() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.start_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.start_ts_ = p;
  }
  return _impl_.start_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PlaybackTrigger_Trigger_PlaybackTime::mutable_start_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_start_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.PlaybackTime.start_ts)
  return _msg;
}
inline void PlaybackTrigger_Trigger_PlaybackTime::set_allocated_start_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* start_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_ts_);
  }
  if (start_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_ts));
    if (message_arena != submessage_arena) {
      start_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.start_ts_ = start_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.PlaybackTime.start_ts)
}

// .google.protobuf.Timestamp end_ts = 2 [json_name = "endTs"];
inline bool PlaybackTrigger_Trigger_PlaybackTime::has_end_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.end_ts_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PlaybackTrigger_Trigger_PlaybackTime::_internal_end_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.end_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PlaybackTrigger_Trigger_PlaybackTime::end_ts() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.PlaybackTime.end_ts)
  return _internal_end_ts();
}
inline void PlaybackTrigger_Trigger_PlaybackTime::unsafe_arena_set_allocated_end_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_ts_);
  }
  _impl_.end_ts_ = end_ts;
  if (end_ts) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.PlaybackTime.end_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PlaybackTrigger_Trigger_PlaybackTime::release_end_ts() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_ts_;
  _impl_.end_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PlaybackTrigger_Trigger_PlaybackTime::unsafe_arena_release_end_ts() {
  // @@protoc_insertion_point(field_release:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.PlaybackTime.end_ts)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.end_ts_;
  _impl_.end_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PlaybackTrigger_Trigger_PlaybackTime::_internal_mutable_end_ts() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.end_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.end_ts_ = p;
  }
  return _impl_.end_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PlaybackTrigger_Trigger_PlaybackTime::mutable_end_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_end_ts();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.PlaybackTime.end_ts)
  return _msg;
}
inline void PlaybackTrigger_Trigger_PlaybackTime::set_allocated_end_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* end_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_ts_);
  }
  if (end_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_ts));
    if (message_arena != submessage_arena) {
      end_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_ts, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.end_ts_ = end_ts;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.PlaybackTime.end_ts)
}

// -------------------------------------------------------------------

// PlaybackTrigger_Trigger

// repeated string topics = 1 [json_name = "topics"];
inline int PlaybackTrigger_Trigger::_internal_topics_size() const {
  return _impl_.topics_.size();
}
inline int PlaybackTrigger_Trigger::topics_size() const {
  return _internal_topics_size();
}
inline void PlaybackTrigger_Trigger::clear_topics() {
  _internal_mutable_topics()->Clear();
}
inline std::string* PlaybackTrigger_Trigger::add_topics() {
  std::string* _s = _internal_add_topics();
  // @@protoc_insertion_point(field_add_mutable:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.topics)
  return _s;
}
inline const std::string& PlaybackTrigger_Trigger::topics(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.topics)
  return _internal_topics(index);
}
inline std::string* PlaybackTrigger_Trigger::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.topics)
  return _internal_mutable_topics()->Mutable(index);
}
inline void PlaybackTrigger_Trigger::set_topics(int index, const std::string& value) {
  _internal_mutable_topics()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.topics)
}
inline void PlaybackTrigger_Trigger::set_topics(int index, std::string&& value) {
  _internal_mutable_topics()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.topics)
}
inline void PlaybackTrigger_Trigger::set_topics(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_topics()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.topics)
}
inline void PlaybackTrigger_Trigger::set_topics(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_topics()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.topics)
}
inline void PlaybackTrigger_Trigger::set_topics(int index, absl::string_view value) {
  _internal_mutable_topics()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.topics)
}
inline void PlaybackTrigger_Trigger::add_topics(const std::string& value) {
  _internal_mutable_topics()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.topics)
}
inline void PlaybackTrigger_Trigger::add_topics(std::string&& value) {
  _internal_mutable_topics()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.topics)
}
inline void PlaybackTrigger_Trigger::add_topics(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_topics()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.topics)
}
inline void PlaybackTrigger_Trigger::add_topics(const char* value, std::size_t size) {
  _internal_mutable_topics()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.topics)
}
inline void PlaybackTrigger_Trigger::add_topics(absl::string_view value) {
  _internal_mutable_topics()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.topics)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PlaybackTrigger_Trigger::topics() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.topics)
  return _internal_topics();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* PlaybackTrigger_Trigger::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.topics)
  return _internal_mutable_topics();
}
inline const std::string& PlaybackTrigger_Trigger::_internal_topics(int index) const {
  return _internal_topics().Get(index);
}
inline std::string* PlaybackTrigger_Trigger::_internal_add_topics() {
  return _internal_mutable_topics()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PlaybackTrigger_Trigger::_internal_topics() const {
  return _impl_.topics_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PlaybackTrigger_Trigger::_internal_mutable_topics() {
  return &_impl_.topics_;
}

// optional .cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.PlaybackTime time = 2 [json_name = "time"];
inline bool PlaybackTrigger_Trigger::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_ != nullptr);
  return value;
}
inline void PlaybackTrigger_Trigger::clear_time() {
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime& PlaybackTrigger_Trigger::_internal_time() const {
  const ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime&>(
      ::cavnue::messages::trigger::v1::_PlaybackTrigger_Trigger_PlaybackTime_default_instance_);
}
inline const ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime& PlaybackTrigger_Trigger::time() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.time)
  return _internal_time();
}
inline void PlaybackTrigger_Trigger::unsafe_arena_set_allocated_time(
    ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  if (time) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.time)
}
inline ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime* PlaybackTrigger_Trigger::release_time() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime* PlaybackTrigger_Trigger::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.time)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime* PlaybackTrigger_Trigger::_internal_mutable_time() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime* PlaybackTrigger_Trigger::mutable_time() {
  ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.time)
  return _msg;
}
inline void PlaybackTrigger_Trigger::set_allocated_time(::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger_PlaybackTime* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.time_;
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(time);
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.time)
}

// optional int64 dataset_run_id = 3 [json_name = "datasetRunId"];
inline bool PlaybackTrigger_Trigger::has_dataset_run_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PlaybackTrigger_Trigger::clear_dataset_run_id() {
  _impl_.dataset_run_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t PlaybackTrigger_Trigger::dataset_run_id() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.dataset_run_id)
  return _internal_dataset_run_id();
}
inline void PlaybackTrigger_Trigger::set_dataset_run_id(::int64_t value) {
  _internal_set_dataset_run_id(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.dataset_run_id)
}
inline ::int64_t PlaybackTrigger_Trigger::_internal_dataset_run_id() const {
  return _impl_.dataset_run_id_;
}
inline void PlaybackTrigger_Trigger::_internal_set_dataset_run_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.dataset_run_id_ = value;
}

// optional string dataset_identifier = 4 [json_name = "datasetIdentifier"];
inline bool PlaybackTrigger_Trigger::has_dataset_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PlaybackTrigger_Trigger::clear_dataset_identifier() {
  _impl_.dataset_identifier_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PlaybackTrigger_Trigger::dataset_identifier() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.dataset_identifier)
  return _internal_dataset_identifier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlaybackTrigger_Trigger::set_dataset_identifier(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dataset_identifier_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.dataset_identifier)
}
inline std::string* PlaybackTrigger_Trigger::mutable_dataset_identifier() {
  std::string* _s = _internal_mutable_dataset_identifier();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.dataset_identifier)
  return _s;
}
inline const std::string& PlaybackTrigger_Trigger::_internal_dataset_identifier() const {
  return _impl_.dataset_identifier_.Get();
}
inline void PlaybackTrigger_Trigger::_internal_set_dataset_identifier(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.dataset_identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* PlaybackTrigger_Trigger::_internal_mutable_dataset_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.dataset_identifier_.Mutable( GetArenaForAllocation());
}
inline std::string* PlaybackTrigger_Trigger::release_dataset_identifier() {
  // @@protoc_insertion_point(field_release:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.dataset_identifier)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.dataset_identifier_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dataset_identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PlaybackTrigger_Trigger::set_allocated_dataset_identifier(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.dataset_identifier_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.dataset_identifier_.IsDefault()) {
          _impl_.dataset_identifier_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.trigger.v1.PlaybackTrigger.Trigger.dataset_identifier)
}

// -------------------------------------------------------------------

// PlaybackTrigger

// .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
inline bool PlaybackTrigger::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::cavnue::messages::common::v1::Header& PlaybackTrigger::_internal_header() const {
  const ::cavnue::messages::common::v1::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::common::v1::Header&>(
      ::cavnue::messages::common::v1::_Header_default_instance_);
}
inline const ::cavnue::messages::common::v1::Header& PlaybackTrigger::header() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.trigger.v1.PlaybackTrigger.header)
  return _internal_header();
}
inline void PlaybackTrigger::unsafe_arena_set_allocated_header(
    ::cavnue::messages::common::v1::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.trigger.v1.PlaybackTrigger.header)
}
inline ::cavnue::messages::common::v1::Header* PlaybackTrigger::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::common::v1::Header* PlaybackTrigger::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:cavnue.messages.trigger.v1.PlaybackTrigger.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::cavnue::messages::common::v1::Header* PlaybackTrigger::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::common::v1::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::cavnue::messages::common::v1::Header* PlaybackTrigger::mutable_header() {
  ::cavnue::messages::common::v1::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.trigger.v1.PlaybackTrigger.header)
  return _msg;
}
inline void PlaybackTrigger::set_allocated_header(::cavnue::messages::common::v1::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.trigger.v1.PlaybackTrigger.header)
}

// .cavnue.messages.trigger.v1.PlaybackTrigger.Trigger trigger = 2 [json_name = "trigger"];
inline bool PlaybackTrigger::has_trigger() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.trigger_ != nullptr);
  return value;
}
inline void PlaybackTrigger::clear_trigger() {
  if (_impl_.trigger_ != nullptr) _impl_.trigger_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger& PlaybackTrigger::_internal_trigger() const {
  const ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger* p = _impl_.trigger_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger&>(
      ::cavnue::messages::trigger::v1::_PlaybackTrigger_Trigger_default_instance_);
}
inline const ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger& PlaybackTrigger::trigger() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.trigger.v1.PlaybackTrigger.trigger)
  return _internal_trigger();
}
inline void PlaybackTrigger::unsafe_arena_set_allocated_trigger(
    ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger* trigger) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trigger_);
  }
  _impl_.trigger_ = trigger;
  if (trigger) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.trigger.v1.PlaybackTrigger.trigger)
}
inline ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger* PlaybackTrigger::release_trigger() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger* temp = _impl_.trigger_;
  _impl_.trigger_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger* PlaybackTrigger::unsafe_arena_release_trigger() {
  // @@protoc_insertion_point(field_release:cavnue.messages.trigger.v1.PlaybackTrigger.trigger)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger* temp = _impl_.trigger_;
  _impl_.trigger_ = nullptr;
  return temp;
}
inline ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger* PlaybackTrigger::_internal_mutable_trigger() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.trigger_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger>(GetArenaForAllocation());
    _impl_.trigger_ = p;
  }
  return _impl_.trigger_;
}
inline ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger* PlaybackTrigger::mutable_trigger() {
  ::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger* _msg = _internal_mutable_trigger();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.trigger.v1.PlaybackTrigger.trigger)
  return _msg;
}
inline void PlaybackTrigger::set_allocated_trigger(::cavnue::messages::trigger::v1::PlaybackTrigger_Trigger* trigger) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.trigger_;
  }
  if (trigger) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(trigger);
    if (message_arena != submessage_arena) {
      trigger = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trigger, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.trigger_ = trigger;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.trigger.v1.PlaybackTrigger.trigger)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace trigger
}  // namespace messages
}  // namespace cavnue


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2ftrigger_2fv1_2fplayback_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/trigger/v1/command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "cavnue/messages/common/v1/common.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto;
namespace cavnue {
namespace messages {
namespace trigger {
namespace v1 {
class CommandRequest;
struct CommandRequestDefaultTypeInternal;
extern CommandRequestDefaultTypeInternal _CommandRequest_default_instance_;
class CommandResponse;
struct CommandResponseDefaultTypeInternal;
extern CommandResponseDefaultTypeInternal _CommandResponse_default_instance_;
}  // namespace v1
}  // namespace trigger
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template <>
::cavnue::messages::trigger::v1::CommandRequest* Arena::CreateMaybeMessage<::cavnue::messages::trigger::v1::CommandRequest>(Arena*);
template <>
::cavnue::messages::trigger::v1::CommandResponse* Arena::CreateMaybeMessage<::cavnue::messages::trigger::v1::CommandResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cavnue {
namespace messages {
namespace trigger {
namespace v1 {
enum CommandRequest_Action : int {
  CommandRequest_Action_COMMAND_UNSPECIFIED = 0,
  CommandRequest_Action_COMMAND_RESET = 1,
  CommandRequest_Action_CommandRequest_Action_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CommandRequest_Action_CommandRequest_Action_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CommandRequest_Action_IsValid(int value);
constexpr CommandRequest_Action CommandRequest_Action_Action_MIN = static_cast<CommandRequest_Action>(0);
constexpr CommandRequest_Action CommandRequest_Action_Action_MAX = static_cast<CommandRequest_Action>(1);
constexpr int CommandRequest_Action_Action_ARRAYSIZE = 1 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
CommandRequest_Action_descriptor();
template <typename T>
const std::string& CommandRequest_Action_Name(T value) {
  static_assert(std::is_same<T, CommandRequest_Action>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Action_Name().");
  return CommandRequest_Action_Name(static_cast<CommandRequest_Action>(value));
}
template <>
inline const std::string& CommandRequest_Action_Name(CommandRequest_Action value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<CommandRequest_Action_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool CommandRequest_Action_Parse(absl::string_view name, CommandRequest_Action* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommandRequest_Action>(
      CommandRequest_Action_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class CommandRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.trigger.v1.CommandRequest) */ {
 public:
  inline CommandRequest() : CommandRequest(nullptr) {}
  ~CommandRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CommandRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRequest(const CommandRequest& from);
  CommandRequest(CommandRequest&& from) noexcept
    : CommandRequest() {
    *this = ::std::move(from);
  }

  inline CommandRequest& operator=(const CommandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRequest& operator=(CommandRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRequest* internal_default_instance() {
    return reinterpret_cast<const CommandRequest*>(
               &_CommandRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommandRequest& a, CommandRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRequest& from) {
    CommandRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.trigger.v1.CommandRequest";
  }
  protected:
  explicit CommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Action = CommandRequest_Action;
  static constexpr Action COMMAND_UNSPECIFIED = CommandRequest_Action_COMMAND_UNSPECIFIED;
  static constexpr Action COMMAND_RESET = CommandRequest_Action_COMMAND_RESET;
  static inline bool Action_IsValid(int value) {
    return CommandRequest_Action_IsValid(value);
  }
  static constexpr Action Action_MIN = CommandRequest_Action_Action_MIN;
  static constexpr Action Action_MAX = CommandRequest_Action_Action_MAX;
  static constexpr int Action_ARRAYSIZE = CommandRequest_Action_Action_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Action_descriptor() {
    return CommandRequest_Action_descriptor();
  }
  template <typename T>
  static inline const std::string& Action_Name(T value) {
    return CommandRequest_Action_Name(value);
  }
  static inline bool Action_Parse(absl::string_view name, Action* value) {
    return CommandRequest_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kCommandFieldNumber = 3,
  };
  // repeated string target = 2 [json_name = "target"];
  int target_size() const;
  private:
  int _internal_target_size() const;

  public:
  void clear_target() ;
  const std::string& target(int index) const;
  std::string* mutable_target(int index);
  void set_target(int index, const std::string& value);
  void set_target(int index, std::string&& value);
  void set_target(int index, const char* value);
  void set_target(int index, const char* value, std::size_t size);
  void set_target(int index, absl::string_view value);
  std::string* add_target();
  void add_target(const std::string& value);
  void add_target(std::string&& value);
  void add_target(const char* value);
  void add_target(const char* value, std::size_t size);
  void add_target(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& target() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_target();

  private:
  const std::string& _internal_target(int index) const;
  std::string* _internal_add_target();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_target() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_target();

  public:
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  bool has_header() const;
  void clear_header() ;
  const ::cavnue::messages::common::v1::Header& header() const;
  PROTOBUF_NODISCARD ::cavnue::messages::common::v1::Header* release_header();
  ::cavnue::messages::common::v1::Header* mutable_header();
  void set_allocated_header(::cavnue::messages::common::v1::Header* header);
  private:
  const ::cavnue::messages::common::v1::Header& _internal_header() const;
  ::cavnue::messages::common::v1::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::cavnue::messages::common::v1::Header* header);
  ::cavnue::messages::common::v1::Header* unsafe_arena_release_header();
  // .cavnue.messages.trigger.v1.CommandRequest.Action command = 3 [json_name = "command"];
  void clear_command() ;
  ::cavnue::messages::trigger::v1::CommandRequest_Action command() const;
  void set_command(::cavnue::messages::trigger::v1::CommandRequest_Action value);

  private:
  ::cavnue::messages::trigger::v1::CommandRequest_Action _internal_command() const;
  void _internal_set_command(::cavnue::messages::trigger::v1::CommandRequest_Action value);

  public:
  // @@protoc_insertion_point(class_scope:cavnue.messages.trigger.v1.CommandRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> target_;
    ::cavnue::messages::common::v1::Header* header_;
    int command_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto;
};// -------------------------------------------------------------------

class CommandResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cavnue.messages.trigger.v1.CommandResponse) */ {
 public:
  inline CommandResponse() : CommandResponse(nullptr) {}
  ~CommandResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CommandResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandResponse(const CommandResponse& from);
  CommandResponse(CommandResponse&& from) noexcept
    : CommandResponse() {
    *this = ::std::move(from);
  }

  inline CommandResponse& operator=(const CommandResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandResponse& operator=(CommandResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandResponse* internal_default_instance() {
    return reinterpret_cast<const CommandResponse*>(
               &_CommandResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommandResponse& a, CommandResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandResponse& from) {
    CommandResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cavnue.messages.trigger.v1.CommandResponse";
  }
  protected:
  explicit CommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceAckFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // string service_ack = 2 [json_name = "serviceAck"];
  void clear_service_ack() ;
  const std::string& service_ack() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_service_ack(Arg_&& arg, Args_... args);
  std::string* mutable_service_ack();
  PROTOBUF_NODISCARD std::string* release_service_ack();
  void set_allocated_service_ack(std::string* ptr);

  private:
  const std::string& _internal_service_ack() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_ack(
      const std::string& value);
  std::string* _internal_mutable_service_ack();

  public:
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  bool has_header() const;
  void clear_header() ;
  const ::cavnue::messages::common::v1::Header& header() const;
  PROTOBUF_NODISCARD ::cavnue::messages::common::v1::Header* release_header();
  ::cavnue::messages::common::v1::Header* mutable_header();
  void set_allocated_header(::cavnue::messages::common::v1::Header* header);
  private:
  const ::cavnue::messages::common::v1::Header& _internal_header() const;
  ::cavnue::messages::common::v1::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::cavnue::messages::common::v1::Header* header);
  ::cavnue::messages::common::v1::Header* unsafe_arena_release_header();
  // @@protoc_insertion_point(class_scope:cavnue.messages.trigger.v1.CommandResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_ack_;
    ::cavnue::messages::common::v1::Header* header_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CommandRequest

// .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
inline bool CommandRequest::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::cavnue::messages::common::v1::Header& CommandRequest::_internal_header() const {
  const ::cavnue::messages::common::v1::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::common::v1::Header&>(
      ::cavnue::messages::common::v1::_Header_default_instance_);
}
inline const ::cavnue::messages::common::v1::Header& CommandRequest::header() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.trigger.v1.CommandRequest.header)
  return _internal_header();
}
inline void CommandRequest::unsafe_arena_set_allocated_header(
    ::cavnue::messages::common::v1::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.trigger.v1.CommandRequest.header)
}
inline ::cavnue::messages::common::v1::Header* CommandRequest::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::common::v1::Header* CommandRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:cavnue.messages.trigger.v1.CommandRequest.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::cavnue::messages::common::v1::Header* CommandRequest::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::common::v1::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::cavnue::messages::common::v1::Header* CommandRequest::mutable_header() {
  ::cavnue::messages::common::v1::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.trigger.v1.CommandRequest.header)
  return _msg;
}
inline void CommandRequest::set_allocated_header(::cavnue::messages::common::v1::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.trigger.v1.CommandRequest.header)
}

// repeated string target = 2 [json_name = "target"];
inline int CommandRequest::_internal_target_size() const {
  return _impl_.target_.size();
}
inline int CommandRequest::target_size() const {
  return _internal_target_size();
}
inline void CommandRequest::clear_target() {
  _internal_mutable_target()->Clear();
}
inline std::string* CommandRequest::add_target() {
  std::string* _s = _internal_add_target();
  // @@protoc_insertion_point(field_add_mutable:cavnue.messages.trigger.v1.CommandRequest.target)
  return _s;
}
inline const std::string& CommandRequest::target(int index) const {
  // @@protoc_insertion_point(field_get:cavnue.messages.trigger.v1.CommandRequest.target)
  return _internal_target(index);
}
inline std::string* CommandRequest::mutable_target(int index) {
  // @@protoc_insertion_point(field_mutable:cavnue.messages.trigger.v1.CommandRequest.target)
  return _internal_mutable_target()->Mutable(index);
}
inline void CommandRequest::set_target(int index, const std::string& value) {
  _internal_mutable_target()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.trigger.v1.CommandRequest.target)
}
inline void CommandRequest::set_target(int index, std::string&& value) {
  _internal_mutable_target()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cavnue.messages.trigger.v1.CommandRequest.target)
}
inline void CommandRequest::set_target(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_target()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cavnue.messages.trigger.v1.CommandRequest.target)
}
inline void CommandRequest::set_target(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_target()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cavnue.messages.trigger.v1.CommandRequest.target)
}
inline void CommandRequest::set_target(int index, absl::string_view value) {
  _internal_mutable_target()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:cavnue.messages.trigger.v1.CommandRequest.target)
}
inline void CommandRequest::add_target(const std::string& value) {
  _internal_mutable_target()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:cavnue.messages.trigger.v1.CommandRequest.target)
}
inline void CommandRequest::add_target(std::string&& value) {
  _internal_mutable_target()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:cavnue.messages.trigger.v1.CommandRequest.target)
}
inline void CommandRequest::add_target(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_target()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cavnue.messages.trigger.v1.CommandRequest.target)
}
inline void CommandRequest::add_target(const char* value, std::size_t size) {
  _internal_mutable_target()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cavnue.messages.trigger.v1.CommandRequest.target)
}
inline void CommandRequest::add_target(absl::string_view value) {
  _internal_mutable_target()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:cavnue.messages.trigger.v1.CommandRequest.target)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandRequest::target() const {
  // @@protoc_insertion_point(field_list:cavnue.messages.trigger.v1.CommandRequest.target)
  return _internal_target();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* CommandRequest::mutable_target() {
  // @@protoc_insertion_point(field_mutable_list:cavnue.messages.trigger.v1.CommandRequest.target)
  return _internal_mutable_target();
}
inline const std::string& CommandRequest::_internal_target(int index) const {
  return _internal_target().Get(index);
}
inline std::string* CommandRequest::_internal_add_target() {
  return _internal_mutable_target()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandRequest::_internal_target() const {
  return _impl_.target_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandRequest::_internal_mutable_target() {
  return &_impl_.target_;
}

// .cavnue.messages.trigger.v1.CommandRequest.Action command = 3 [json_name = "command"];
inline void CommandRequest::clear_command() {
  _impl_.command_ = 0;
}
inline ::cavnue::messages::trigger::v1::CommandRequest_Action CommandRequest::command() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.trigger.v1.CommandRequest.command)
  return _internal_command();
}
inline void CommandRequest::set_command(::cavnue::messages::trigger::v1::CommandRequest_Action value) {
   _internal_set_command(value);
  // @@protoc_insertion_point(field_set:cavnue.messages.trigger.v1.CommandRequest.command)
}
inline ::cavnue::messages::trigger::v1::CommandRequest_Action CommandRequest::_internal_command() const {
  return static_cast<::cavnue::messages::trigger::v1::CommandRequest_Action>(_impl_.command_);
}
inline void CommandRequest::_internal_set_command(::cavnue::messages::trigger::v1::CommandRequest_Action value) {
  ;
  _impl_.command_ = value;
}

// -------------------------------------------------------------------

// CommandResponse

// .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
inline bool CommandResponse::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::cavnue::messages::common::v1::Header& CommandResponse::_internal_header() const {
  const ::cavnue::messages::common::v1::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::cavnue::messages::common::v1::Header&>(
      ::cavnue::messages::common::v1::_Header_default_instance_);
}
inline const ::cavnue::messages::common::v1::Header& CommandResponse::header() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.trigger.v1.CommandResponse.header)
  return _internal_header();
}
inline void CommandResponse::unsafe_arena_set_allocated_header(
    ::cavnue::messages::common::v1::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cavnue.messages.trigger.v1.CommandResponse.header)
}
inline ::cavnue::messages::common::v1::Header* CommandResponse::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cavnue::messages::common::v1::Header* CommandResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:cavnue.messages.trigger.v1.CommandResponse.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cavnue::messages::common::v1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::cavnue::messages::common::v1::Header* CommandResponse::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::cavnue::messages::common::v1::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::cavnue::messages::common::v1::Header* CommandResponse::mutable_header() {
  ::cavnue::messages::common::v1::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.trigger.v1.CommandResponse.header)
  return _msg;
}
inline void CommandResponse::set_allocated_header(::cavnue::messages::common::v1::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.trigger.v1.CommandResponse.header)
}

// string service_ack = 2 [json_name = "serviceAck"];
inline void CommandResponse::clear_service_ack() {
  _impl_.service_ack_.ClearToEmpty();
}
inline const std::string& CommandResponse::service_ack() const {
  // @@protoc_insertion_point(field_get:cavnue.messages.trigger.v1.CommandResponse.service_ack)
  return _internal_service_ack();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommandResponse::set_service_ack(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.service_ack_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cavnue.messages.trigger.v1.CommandResponse.service_ack)
}
inline std::string* CommandResponse::mutable_service_ack() {
  std::string* _s = _internal_mutable_service_ack();
  // @@protoc_insertion_point(field_mutable:cavnue.messages.trigger.v1.CommandResponse.service_ack)
  return _s;
}
inline const std::string& CommandResponse::_internal_service_ack() const {
  return _impl_.service_ack_.Get();
}
inline void CommandResponse::_internal_set_service_ack(const std::string& value) {
  ;


  _impl_.service_ack_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandResponse::_internal_mutable_service_ack() {
  ;
  return _impl_.service_ack_.Mutable( GetArenaForAllocation());
}
inline std::string* CommandResponse::release_service_ack() {
  // @@protoc_insertion_point(field_release:cavnue.messages.trigger.v1.CommandResponse.service_ack)
  return _impl_.service_ack_.Release();
}
inline void CommandResponse::set_allocated_service_ack(std::string* value) {
  _impl_.service_ack_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.service_ack_.IsDefault()) {
          _impl_.service_ack_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cavnue.messages.trigger.v1.CommandResponse.service_ack)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace trigger
}  // namespace messages
}  // namespace cavnue


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::cavnue::messages::trigger::v1::CommandRequest_Action> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::cavnue::messages::trigger::v1::CommandRequest_Action>() {
  return ::cavnue::messages::trigger::v1::CommandRequest_Action_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto_2epb_2eh

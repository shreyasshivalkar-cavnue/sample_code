// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/messages/trigger/v1/command.proto

#include "cavnue/messages/trigger/v1/command.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cavnue {
namespace messages {
namespace trigger {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR CommandRequest::CommandRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.target_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.command_)*/ 0
} {}
struct CommandRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandRequestDefaultTypeInternal() {}
  union {
    CommandRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandRequestDefaultTypeInternal _CommandRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CommandResponse::CommandResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.service_ack_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.header_)*/nullptr} {}
struct CommandResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandResponseDefaultTypeInternal() {}
  union {
    CommandResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandResponseDefaultTypeInternal _CommandResponse_default_instance_;
}  // namespace v1
}  // namespace trigger
}  // namespace messages
}  // namespace cavnue
static ::_pb::Metadata file_level_metadata_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto = nullptr;
const ::uint32_t TableStruct_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::trigger::v1::CommandRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::trigger::v1::CommandRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::trigger::v1::CommandRequest, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::trigger::v1::CommandRequest, _impl_.target_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::trigger::v1::CommandRequest, _impl_.command_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::trigger::v1::CommandResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::trigger::v1::CommandResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::trigger::v1::CommandResponse, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::cavnue::messages::trigger::v1::CommandResponse, _impl_.service_ack_),
    0,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 11, -1, sizeof(::cavnue::messages::trigger::v1::CommandRequest)},
        { 14, 24, -1, sizeof(::cavnue::messages::trigger::v1::CommandResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cavnue::messages::trigger::v1::_CommandRequest_default_instance_._instance,
    &::cavnue::messages::trigger::v1::_CommandResponse_default_instance_._instance,
};
const char descriptor_table_protodef_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n(cavnue/messages/trigger/v1/command.pro"
    "to\022\032cavnue.messages.trigger.v1\032&cavnue/m"
    "essages/common/v1/common.proto\032\037google/p"
    "rotobuf/timestamp.proto\"\346\001\n\016CommandReque"
    "st\0229\n\006header\030\001 \001(\0132!.cavnue.messages.com"
    "mon.v1.HeaderR\006header\022\026\n\006target\030\002 \003(\tR\006t"
    "arget\022K\n\007command\030\003 \001(\01621.cavnue.messages"
    ".trigger.v1.CommandRequest.ActionR\007comma"
    "nd\"4\n\006Action\022\027\n\023COMMAND_UNSPECIFIED\020\000\022\021\n"
    "\rCOMMAND_RESET\020\001\"m\n\017CommandResponse\0229\n\006h"
    "eader\030\001 \001(\0132!.cavnue.messages.common.v1."
    "HeaderR\006header\022\037\n\013service_ack\030\002 \001(\tR\nser"
    "viceAckb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto_deps[2] =
    {
        &::descriptor_table_cavnue_2fmessages_2fcommon_2fv1_2fcommon_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto = {
    false,
    false,
    495,
    descriptor_table_protodef_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto,
    "cavnue/messages/trigger/v1/command.proto",
    &descriptor_table_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto_once,
    descriptor_table_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto_deps,
    2,
    2,
    schemas,
    file_default_instances,
    TableStruct_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto::offsets,
    file_level_metadata_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto,
    file_level_enum_descriptors_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto,
    file_level_service_descriptors_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto_getter() {
  return &descriptor_table_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto(&descriptor_table_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto);
namespace cavnue {
namespace messages {
namespace trigger {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandRequest_Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto);
  return file_level_enum_descriptors_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto[0];
}
bool CommandRequest_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr CommandRequest_Action CommandRequest::COMMAND_UNSPECIFIED;
constexpr CommandRequest_Action CommandRequest::COMMAND_RESET;
constexpr CommandRequest_Action CommandRequest::Action_MIN;
constexpr CommandRequest_Action CommandRequest::Action_MAX;
constexpr int CommandRequest::Action_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class CommandRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CommandRequest, _impl_._has_bits_);
  static const ::cavnue::messages::common::v1::Header& header(const CommandRequest* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cavnue::messages::common::v1::Header&
CommandRequest::_Internal::header(const CommandRequest* msg) {
  return *msg->_impl_.header_;
}
void CommandRequest::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CommandRequest::CommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.trigger.v1.CommandRequest)
}
CommandRequest::CommandRequest(const CommandRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_){from._impl_.target_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.command_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_ = new ::cavnue::messages::common::v1::Header(*from._impl_.header_);
  }
  _this->_impl_.command_ = from._impl_.command_;
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.trigger.v1.CommandRequest)
}

inline void CommandRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.command_) { 0 }

  };
}

CommandRequest::~CommandRequest() {
  // @@protoc_insertion_point(destructor:cavnue.messages.trigger.v1.CommandRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_target()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void CommandRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.trigger.v1.CommandRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_target()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  _impl_.command_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string target = 2 [json_name = "target"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_target();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.trigger.v1.CommandRequest.target"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cavnue.messages.trigger.v1.CommandRequest.Action command = 3 [json_name = "command"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_command(static_cast<::cavnue::messages::trigger::v1::CommandRequest_Action>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CommandRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.trigger.v1.CommandRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated string target = 2 [json_name = "target"];
  for (int i = 0, n = this->_internal_target_size(); i < n; ++i) {
    const auto& s = this->_internal_target(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.trigger.v1.CommandRequest.target");
    target = stream->WriteString(2, s, target);
  }

  // .cavnue.messages.trigger.v1.CommandRequest.Action command = 3 [json_name = "command"];
  if (this->_internal_command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.trigger.v1.CommandRequest)
  return target;
}

::size_t CommandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.trigger.v1.CommandRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string target = 2 [json_name = "target"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_target().size());
  for (int i = 0, n = _internal_target().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_target().Get(i));
  }

  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .cavnue.messages.trigger.v1.CommandRequest.Action command = 3 [json_name = "command"];
  if (this->_internal_command() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_command());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRequest::GetClassData() const { return &_class_data_; }


void CommandRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandRequest*>(&to_msg);
  auto& from = static_cast<const CommandRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.trigger.v1.CommandRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_target()->MergeFrom(from._internal_target());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_header()->::cavnue::messages::common::v1::Header::MergeFrom(
        from._internal_header());
  }
  if (from._internal_command() != 0) {
    _this->_internal_set_command(from._internal_command());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRequest::CopyFrom(const CommandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.trigger.v1.CommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRequest::IsInitialized() const {
  return true;
}

void CommandRequest::InternalSwap(CommandRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_target()->InternalSwap(
      other->_internal_mutable_target());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRequest, _impl_.command_)
      + sizeof(CommandRequest::_impl_.command_)
      - PROTOBUF_FIELD_OFFSET(CommandRequest, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto_getter, &descriptor_table_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto[0]);
}
// ===================================================================

class CommandResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CommandResponse, _impl_._has_bits_);
  static const ::cavnue::messages::common::v1::Header& header(const CommandResponse* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cavnue::messages::common::v1::Header&
CommandResponse::_Internal::header(const CommandResponse* msg) {
  return *msg->_impl_.header_;
}
void CommandResponse::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CommandResponse::CommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cavnue.messages.trigger.v1.CommandResponse)
}
CommandResponse::CommandResponse(const CommandResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.service_ack_) {}

    , decltype(_impl_.header_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.service_ack_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.service_ack_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_ack().empty()) {
    _this->_impl_.service_ack_.Set(from._internal_service_ack(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_ = new ::cavnue::messages::common::v1::Header(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:cavnue.messages.trigger.v1.CommandResponse)
}

inline void CommandResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.service_ack_) {}

    , decltype(_impl_.header_){nullptr}
  };
  _impl_.service_ack_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.service_ack_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandResponse::~CommandResponse() {
  // @@protoc_insertion_point(destructor:cavnue.messages.trigger.v1.CommandResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.service_ack_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void CommandResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cavnue.messages.trigger.v1.CommandResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.service_ack_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string service_ack = 2 [json_name = "serviceAck"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_service_ack();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cavnue.messages.trigger.v1.CommandResponse.service_ack"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CommandResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cavnue.messages.trigger.v1.CommandResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // string service_ack = 2 [json_name = "serviceAck"];
  if (!this->_internal_service_ack().empty()) {
    const std::string& _s = this->_internal_service_ack();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cavnue.messages.trigger.v1.CommandResponse.service_ack");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cavnue.messages.trigger.v1.CommandResponse)
  return target;
}

::size_t CommandResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cavnue.messages.trigger.v1.CommandResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_ack = 2 [json_name = "serviceAck"];
  if (!this->_internal_service_ack().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_service_ack());
  }

  // .cavnue.messages.common.v1.Header header = 1 [json_name = "header"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandResponse::GetClassData() const { return &_class_data_; }


void CommandResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandResponse*>(&to_msg);
  auto& from = static_cast<const CommandResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cavnue.messages.trigger.v1.CommandResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_service_ack().empty()) {
    _this->_internal_set_service_ack(from._internal_service_ack());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_header()->::cavnue::messages::common::v1::Header::MergeFrom(
        from._internal_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandResponse::CopyFrom(const CommandResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cavnue.messages.trigger.v1.CommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandResponse::IsInitialized() const {
  return true;
}

void CommandResponse::InternalSwap(CommandResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.service_ack_, lhs_arena,
                                       &other->_impl_.service_ack_, rhs_arena);
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto_getter, &descriptor_table_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto_once,
      file_level_metadata_cavnue_2fmessages_2ftrigger_2fv1_2fcommand_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace trigger
}  // namespace messages
}  // namespace cavnue
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cavnue::messages::trigger::v1::CommandRequest*
Arena::CreateMaybeMessage< ::cavnue::messages::trigger::v1::CommandRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::trigger::v1::CommandRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cavnue::messages::trigger::v1::CommandResponse*
Arena::CreateMaybeMessage< ::cavnue::messages::trigger::v1::CommandResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cavnue::messages::trigger::v1::CommandResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

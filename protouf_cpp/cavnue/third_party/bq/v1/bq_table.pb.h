// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/third_party/bq/v1/bq_table.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/descriptor.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto;
namespace gen_bq_schema {
class BigQueryMessageOptions;
struct BigQueryMessageOptionsDefaultTypeInternal;
extern BigQueryMessageOptionsDefaultTypeInternal _BigQueryMessageOptions_default_instance_;
}  // namespace gen_bq_schema
PROTOBUF_NAMESPACE_OPEN
template <>
::gen_bq_schema::BigQueryMessageOptions* Arena::CreateMaybeMessage<::gen_bq_schema::BigQueryMessageOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace gen_bq_schema {

// ===================================================================


// -------------------------------------------------------------------

class BigQueryMessageOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gen_bq_schema.BigQueryMessageOptions) */ {
 public:
  inline BigQueryMessageOptions() : BigQueryMessageOptions(nullptr) {}
  ~BigQueryMessageOptions() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BigQueryMessageOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BigQueryMessageOptions(const BigQueryMessageOptions& from);
  BigQueryMessageOptions(BigQueryMessageOptions&& from) noexcept
    : BigQueryMessageOptions() {
    *this = ::std::move(from);
  }

  inline BigQueryMessageOptions& operator=(const BigQueryMessageOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline BigQueryMessageOptions& operator=(BigQueryMessageOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BigQueryMessageOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const BigQueryMessageOptions* internal_default_instance() {
    return reinterpret_cast<const BigQueryMessageOptions*>(
               &_BigQueryMessageOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BigQueryMessageOptions& a, BigQueryMessageOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(BigQueryMessageOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BigQueryMessageOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BigQueryMessageOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BigQueryMessageOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BigQueryMessageOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BigQueryMessageOptions& from) {
    BigQueryMessageOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BigQueryMessageOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "gen_bq_schema.BigQueryMessageOptions";
  }
  protected:
  explicit BigQueryMessageOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraFieldsFieldNumber = 4,
    kTableNameFieldNumber = 1,
    kDescriptionFieldNumber = 3,
    kUseJsonNamesFieldNumber = 2,
  };
  // repeated string extra_fields = 4 [json_name = "extraFields"];
  int extra_fields_size() const;
  private:
  int _internal_extra_fields_size() const;

  public:
  void clear_extra_fields() ;
  const std::string& extra_fields(int index) const;
  std::string* mutable_extra_fields(int index);
  void set_extra_fields(int index, const std::string& value);
  void set_extra_fields(int index, std::string&& value);
  void set_extra_fields(int index, const char* value);
  void set_extra_fields(int index, const char* value, std::size_t size);
  void set_extra_fields(int index, absl::string_view value);
  std::string* add_extra_fields();
  void add_extra_fields(const std::string& value);
  void add_extra_fields(std::string&& value);
  void add_extra_fields(const char* value);
  void add_extra_fields(const char* value, std::size_t size);
  void add_extra_fields(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& extra_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_extra_fields();

  private:
  const std::string& _internal_extra_fields(int index) const;
  std::string* _internal_add_extra_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_extra_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_extra_fields();

  public:
  // string table_name = 1 [json_name = "tableName"];
  void clear_table_name() ;
  const std::string& table_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_table_name(Arg_&& arg, Args_... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* ptr);

  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(
      const std::string& value);
  std::string* _internal_mutable_table_name();

  public:
  // string description = 3 [json_name = "description"];
  void clear_description() ;
  const std::string& description() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // bool use_json_names = 2 [json_name = "useJsonNames"];
  void clear_use_json_names() ;
  bool use_json_names() const;
  void set_use_json_names(bool value);

  private:
  bool _internal_use_json_names() const;
  void _internal_set_use_json_names(bool value);

  public:
  // @@protoc_insertion_point(class_scope:gen_bq_schema.BigQueryMessageOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> extra_fields_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    bool use_json_names_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto;
};

// ===================================================================



static const int kBigqueryOptsFieldNumber = 90000;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::gen_bq_schema::BigQueryMessageOptions >, 11, false >
  bigquery_opts;

// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BigQueryMessageOptions

// string table_name = 1 [json_name = "tableName"];
inline void BigQueryMessageOptions::clear_table_name() {
  _impl_.table_name_.ClearToEmpty();
}
inline const std::string& BigQueryMessageOptions::table_name() const {
  // @@protoc_insertion_point(field_get:gen_bq_schema.BigQueryMessageOptions.table_name)
  return _internal_table_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BigQueryMessageOptions::set_table_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.table_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gen_bq_schema.BigQueryMessageOptions.table_name)
}
inline std::string* BigQueryMessageOptions::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:gen_bq_schema.BigQueryMessageOptions.table_name)
  return _s;
}
inline const std::string& BigQueryMessageOptions::_internal_table_name() const {
  return _impl_.table_name_.Get();
}
inline void BigQueryMessageOptions::_internal_set_table_name(const std::string& value) {
  ;


  _impl_.table_name_.Set(value, GetArenaForAllocation());
}
inline std::string* BigQueryMessageOptions::_internal_mutable_table_name() {
  ;
  return _impl_.table_name_.Mutable( GetArenaForAllocation());
}
inline std::string* BigQueryMessageOptions::release_table_name() {
  // @@protoc_insertion_point(field_release:gen_bq_schema.BigQueryMessageOptions.table_name)
  return _impl_.table_name_.Release();
}
inline void BigQueryMessageOptions::set_allocated_table_name(std::string* value) {
  _impl_.table_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.table_name_.IsDefault()) {
          _impl_.table_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gen_bq_schema.BigQueryMessageOptions.table_name)
}

// bool use_json_names = 2 [json_name = "useJsonNames"];
inline void BigQueryMessageOptions::clear_use_json_names() {
  _impl_.use_json_names_ = false;
}
inline bool BigQueryMessageOptions::use_json_names() const {
  // @@protoc_insertion_point(field_get:gen_bq_schema.BigQueryMessageOptions.use_json_names)
  return _internal_use_json_names();
}
inline void BigQueryMessageOptions::set_use_json_names(bool value) {
  _internal_set_use_json_names(value);
  // @@protoc_insertion_point(field_set:gen_bq_schema.BigQueryMessageOptions.use_json_names)
}
inline bool BigQueryMessageOptions::_internal_use_json_names() const {
  return _impl_.use_json_names_;
}
inline void BigQueryMessageOptions::_internal_set_use_json_names(bool value) {
  ;
  _impl_.use_json_names_ = value;
}

// string description = 3 [json_name = "description"];
inline void BigQueryMessageOptions::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& BigQueryMessageOptions::description() const {
  // @@protoc_insertion_point(field_get:gen_bq_schema.BigQueryMessageOptions.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BigQueryMessageOptions::set_description(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gen_bq_schema.BigQueryMessageOptions.description)
}
inline std::string* BigQueryMessageOptions::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:gen_bq_schema.BigQueryMessageOptions.description)
  return _s;
}
inline const std::string& BigQueryMessageOptions::_internal_description() const {
  return _impl_.description_.Get();
}
inline void BigQueryMessageOptions::_internal_set_description(const std::string& value) {
  ;


  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* BigQueryMessageOptions::_internal_mutable_description() {
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* BigQueryMessageOptions::release_description() {
  // @@protoc_insertion_point(field_release:gen_bq_schema.BigQueryMessageOptions.description)
  return _impl_.description_.Release();
}
inline void BigQueryMessageOptions::set_allocated_description(std::string* value) {
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gen_bq_schema.BigQueryMessageOptions.description)
}

// repeated string extra_fields = 4 [json_name = "extraFields"];
inline int BigQueryMessageOptions::_internal_extra_fields_size() const {
  return _impl_.extra_fields_.size();
}
inline int BigQueryMessageOptions::extra_fields_size() const {
  return _internal_extra_fields_size();
}
inline void BigQueryMessageOptions::clear_extra_fields() {
  _internal_mutable_extra_fields()->Clear();
}
inline std::string* BigQueryMessageOptions::add_extra_fields() {
  std::string* _s = _internal_add_extra_fields();
  // @@protoc_insertion_point(field_add_mutable:gen_bq_schema.BigQueryMessageOptions.extra_fields)
  return _s;
}
inline const std::string& BigQueryMessageOptions::extra_fields(int index) const {
  // @@protoc_insertion_point(field_get:gen_bq_schema.BigQueryMessageOptions.extra_fields)
  return _internal_extra_fields(index);
}
inline std::string* BigQueryMessageOptions::mutable_extra_fields(int index) {
  // @@protoc_insertion_point(field_mutable:gen_bq_schema.BigQueryMessageOptions.extra_fields)
  return _internal_mutable_extra_fields()->Mutable(index);
}
inline void BigQueryMessageOptions::set_extra_fields(int index, const std::string& value) {
  _internal_mutable_extra_fields()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:gen_bq_schema.BigQueryMessageOptions.extra_fields)
}
inline void BigQueryMessageOptions::set_extra_fields(int index, std::string&& value) {
  _internal_mutable_extra_fields()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:gen_bq_schema.BigQueryMessageOptions.extra_fields)
}
inline void BigQueryMessageOptions::set_extra_fields(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_extra_fields()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gen_bq_schema.BigQueryMessageOptions.extra_fields)
}
inline void BigQueryMessageOptions::set_extra_fields(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_extra_fields()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gen_bq_schema.BigQueryMessageOptions.extra_fields)
}
inline void BigQueryMessageOptions::set_extra_fields(int index, absl::string_view value) {
  _internal_mutable_extra_fields()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:gen_bq_schema.BigQueryMessageOptions.extra_fields)
}
inline void BigQueryMessageOptions::add_extra_fields(const std::string& value) {
  _internal_mutable_extra_fields()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:gen_bq_schema.BigQueryMessageOptions.extra_fields)
}
inline void BigQueryMessageOptions::add_extra_fields(std::string&& value) {
  _internal_mutable_extra_fields()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:gen_bq_schema.BigQueryMessageOptions.extra_fields)
}
inline void BigQueryMessageOptions::add_extra_fields(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_extra_fields()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gen_bq_schema.BigQueryMessageOptions.extra_fields)
}
inline void BigQueryMessageOptions::add_extra_fields(const char* value, std::size_t size) {
  _internal_mutable_extra_fields()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gen_bq_schema.BigQueryMessageOptions.extra_fields)
}
inline void BigQueryMessageOptions::add_extra_fields(absl::string_view value) {
  _internal_mutable_extra_fields()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:gen_bq_schema.BigQueryMessageOptions.extra_fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BigQueryMessageOptions::extra_fields() const {
  // @@protoc_insertion_point(field_list:gen_bq_schema.BigQueryMessageOptions.extra_fields)
  return _internal_extra_fields();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* BigQueryMessageOptions::mutable_extra_fields() {
  // @@protoc_insertion_point(field_mutable_list:gen_bq_schema.BigQueryMessageOptions.extra_fields)
  return _internal_mutable_extra_fields();
}
inline const std::string& BigQueryMessageOptions::_internal_extra_fields(int index) const {
  return _internal_extra_fields().Get(index);
}
inline std::string* BigQueryMessageOptions::_internal_add_extra_fields() {
  return _internal_mutable_extra_fields()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BigQueryMessageOptions::_internal_extra_fields() const {
  return _impl_.extra_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BigQueryMessageOptions::_internal_mutable_extra_fields() {
  return &_impl_.extra_fields_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace gen_bq_schema


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto_2epb_2eh

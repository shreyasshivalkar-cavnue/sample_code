// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cavnue/third_party/bq/v1/bq_table.proto

#include "cavnue/third_party/bq/v1/bq_table.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace gen_bq_schema {
template <typename>
PROTOBUF_CONSTEXPR BigQueryMessageOptions::BigQueryMessageOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extra_fields_)*/{}
  , /*decltype(_impl_.table_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.use_json_names_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BigQueryMessageOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BigQueryMessageOptionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BigQueryMessageOptionsDefaultTypeInternal() {}
  union {
    BigQueryMessageOptions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BigQueryMessageOptionsDefaultTypeInternal _BigQueryMessageOptions_default_instance_;
}  // namespace gen_bq_schema
static ::_pb::Metadata file_level_metadata_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto = nullptr;
const ::uint32_t TableStruct_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::gen_bq_schema::BigQueryMessageOptions, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::gen_bq_schema::BigQueryMessageOptions, _impl_.table_name_),
    PROTOBUF_FIELD_OFFSET(::gen_bq_schema::BigQueryMessageOptions, _impl_.use_json_names_),
    PROTOBUF_FIELD_OFFSET(::gen_bq_schema::BigQueryMessageOptions, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::gen_bq_schema::BigQueryMessageOptions, _impl_.extra_fields_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::gen_bq_schema::BigQueryMessageOptions)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::gen_bq_schema::_BigQueryMessageOptions_default_instance_._instance,
};
const char descriptor_table_protodef_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\'cavnue/third_party/bq/v1/bq_table.prot"
    "o\022\rgen_bq_schema\032 google/protobuf/descri"
    "ptor.proto\"\242\001\n\026BigQueryMessageOptions\022\035\n"
    "\ntable_name\030\001 \001(\tR\ttableName\022$\n\016use_json"
    "_names\030\002 \001(\010R\014useJsonNames\022 \n\013descriptio"
    "n\030\003 \001(\tR\013description\022!\n\014extra_fields\030\004 \003"
    "(\tR\013extraFields:m\n\rbigquery_opts\022\037.googl"
    "e.protobuf.MessageOptions\030\220\277\005 \001(\0132%.gen_"
    "bq_schema.BigQueryMessageOptionsR\014bigque"
    "ryOptsB;Z9github.com/Cavnue/third-party-"
    "protoc-gen-bq-schema/protosb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::absl::once_flag descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto = {
    false,
    false,
    435,
    descriptor_table_protodef_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto,
    "cavnue/third_party/bq/v1/bq_table.proto",
    &descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto_once,
    descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto::offsets,
    file_level_metadata_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto,
    file_level_enum_descriptors_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto,
    file_level_service_descriptors_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto_getter() {
  return &descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto(&descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto);
namespace gen_bq_schema {
// ===================================================================

class BigQueryMessageOptions::_Internal {
 public:
};

BigQueryMessageOptions::BigQueryMessageOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:gen_bq_schema.BigQueryMessageOptions)
}
BigQueryMessageOptions::BigQueryMessageOptions(const BigQueryMessageOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BigQueryMessageOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_fields_){from._impl_.extra_fields_}
    , decltype(_impl_.table_name_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.use_json_names_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    _this->_impl_.table_name_.Set(from._internal_table_name(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _this->_impl_.use_json_names_ = from._impl_.use_json_names_;
  // @@protoc_insertion_point(copy_constructor:gen_bq_schema.BigQueryMessageOptions)
}

inline void BigQueryMessageOptions::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_fields_){arena}
    , decltype(_impl_.table_name_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.use_json_names_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BigQueryMessageOptions::~BigQueryMessageOptions() {
  // @@protoc_insertion_point(destructor:gen_bq_schema.BigQueryMessageOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BigQueryMessageOptions::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_extra_fields()->~RepeatedPtrField();
  _impl_.table_name_.Destroy();
  _impl_.description_.Destroy();
}

void BigQueryMessageOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BigQueryMessageOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:gen_bq_schema.BigQueryMessageOptions)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_extra_fields()->Clear();
  _impl_.table_name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.use_json_names_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BigQueryMessageOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string table_name = 1 [json_name = "tableName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gen_bq_schema.BigQueryMessageOptions.table_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool use_json_names = 2 [json_name = "useJsonNames"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.use_json_names_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 3 [json_name = "description"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gen_bq_schema.BigQueryMessageOptions.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string extra_fields = 4 [json_name = "extraFields"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_extra_fields();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "gen_bq_schema.BigQueryMessageOptions.extra_fields"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BigQueryMessageOptions::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gen_bq_schema.BigQueryMessageOptions)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1 [json_name = "tableName"];
  if (!this->_internal_table_name().empty()) {
    const std::string& _s = this->_internal_table_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "gen_bq_schema.BigQueryMessageOptions.table_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // bool use_json_names = 2 [json_name = "useJsonNames"];
  if (this->_internal_use_json_names() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_use_json_names(), target);
  }

  // string description = 3 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "gen_bq_schema.BigQueryMessageOptions.description");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // repeated string extra_fields = 4 [json_name = "extraFields"];
  for (int i = 0, n = this->_internal_extra_fields_size(); i < n; ++i) {
    const auto& s = this->_internal_extra_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "gen_bq_schema.BigQueryMessageOptions.extra_fields");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gen_bq_schema.BigQueryMessageOptions)
  return target;
}

::size_t BigQueryMessageOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gen_bq_schema.BigQueryMessageOptions)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string extra_fields = 4 [json_name = "extraFields"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_extra_fields().size());
  for (int i = 0, n = _internal_extra_fields().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_extra_fields().Get(i));
  }

  // string table_name = 1 [json_name = "tableName"];
  if (!this->_internal_table_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_table_name());
  }

  // string description = 3 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // bool use_json_names = 2 [json_name = "useJsonNames"];
  if (this->_internal_use_json_names() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BigQueryMessageOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BigQueryMessageOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BigQueryMessageOptions::GetClassData() const { return &_class_data_; }


void BigQueryMessageOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BigQueryMessageOptions*>(&to_msg);
  auto& from = static_cast<const BigQueryMessageOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gen_bq_schema.BigQueryMessageOptions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_extra_fields()->MergeFrom(from._internal_extra_fields());
  if (!from._internal_table_name().empty()) {
    _this->_internal_set_table_name(from._internal_table_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_use_json_names() != 0) {
    _this->_internal_set_use_json_names(from._internal_use_json_names());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BigQueryMessageOptions::CopyFrom(const BigQueryMessageOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gen_bq_schema.BigQueryMessageOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigQueryMessageOptions::IsInitialized() const {
  return true;
}

void BigQueryMessageOptions::InternalSwap(BigQueryMessageOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_extra_fields()->InternalSwap(
      other->_internal_mutable_extra_fields());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.table_name_, lhs_arena,
                                       &other->_impl_.table_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);

  swap(_impl_.use_json_names_, other->_impl_.use_json_names_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BigQueryMessageOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto_getter, &descriptor_table_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto_once,
      file_level_metadata_cavnue_2fthird_5fparty_2fbq_2fv1_2fbq_5ftable_2eproto[0]);
}
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::gen_bq_schema::BigQueryMessageOptions >, 11, false>
  bigquery_opts(kBigqueryOptsFieldNumber, ::gen_bq_schema::BigQueryMessageOptions::default_instance(), nullptr);
// @@protoc_insertion_point(namespace_scope)
}  // namespace gen_bq_schema
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gen_bq_schema::BigQueryMessageOptions*
Arena::CreateMaybeMessage< ::gen_bq_schema::BigQueryMessageOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gen_bq_schema::BigQueryMessageOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
